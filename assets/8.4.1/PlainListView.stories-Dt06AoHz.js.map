{"version":3,"file":"PlainListView.stories-Dt06AoHz.js","sources":["../../../packages/lake/src/components/PlainListView.tsx"],"sourcesContent":["import {\n  cloneElement,\n  Fragment,\n  ReactElement,\n  ReactNode,\n  RefObject,\n  useCallback,\n  useEffect,\n  useId,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { PressableStateCallbackType, ScrollView, StyleSheet, View, ViewStyle } from \"react-native\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport { backgroundColor, breakpoints, colors, spacings } from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport {\n  ColumnCellConfig,\n  ColumnTitleConfig,\n  LinkConfig,\n  PlainListViewPlaceholder,\n} from \"./FixedListView\";\nimport { LakeHeading } from \"./LakeHeading\";\nimport { ResponsiveContainer } from \"./ResponsiveContainer\";\n\nexport type ColumnConfig<T, ExtraInfo> = {\n  id: string;\n  width: number | \"grow\";\n  title: string;\n  renderTitle: (props: ColumnTitleConfig<ExtraInfo>) => ReactNode;\n  renderCell: (props: ColumnCellConfig<T, ExtraInfo>) => ReactNode;\n};\n\nconst INHERIT = \"inherit\";\n\ntype Props<T, ExtraInfo> = {\n  data: T[];\n  keyExtractor: (item: T, index: number) => string;\n  highlightedRowId?: string;\n  headerHeight: number;\n  rowHeight: number;\n  groupHeaderHeight: number;\n  extraInfo: ExtraInfo;\n  columns: ColumnConfig<T, ExtraInfo>[];\n  smallColumns?: ColumnConfig<T, ExtraInfo>[];\n  onEndReached?: () => void;\n  onEndReachedThresholdPx?: number;\n  headerStyle?: ViewStyle | null | undefined;\n  rowStyle?: (item: T, large: boolean) => ViewStyle | null | undefined;\n  getRowLink?: (\n    config: LinkConfig<T, ExtraInfo>,\n  ) => ReactElement<{ children: (state: PressableStateCallbackType) => React.ReactNode }>;\n  renderEmptyList?: () => ReactNode;\n  groupBy?: (item: T) => string;\n  onActiveRowChange?: (element: HTMLElement) => void;\n  activeRowId?: string;\n  loading?: {\n    isLoading: boolean;\n    count: number;\n  };\n  breakpoint?: number;\n  withoutScroll?: boolean;\n  stickyOffset?: number;\n  headerBackgroundColor?: string;\n};\n\nconst styles = StyleSheet.create({\n  root: {\n    height: 1,\n    alignSelf: \"stretch\",\n    flexGrow: 1,\n    backgroundColor: backgroundColor.default,\n  },\n  contentContainer: {\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    flexGrow: 1,\n  },\n  segment: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    overflow: \"hidden\",\n    paddingHorizontal: spacings[8],\n  },\n  segmentLarge: {\n    paddingHorizontal: spacings[24],\n  },\n  row: {\n    boxShadow: `inset 0 -1px ${colors.gray[100]}`,\n  },\n  activeRow: {\n    backgroundColor: backgroundColor.accented,\n  },\n  hoveredRow: {\n    backgroundColor: backgroundColor.accented,\n  },\n  segmentHeaderCell: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  header: {\n    position: \"sticky\",\n    top: 0,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    zIndex: 2,\n  },\n  stickyHeader: {\n    position: \"sticky\",\n    backgroundColor: backgroundColor.default90Transparency,\n    backdropFilter: \"blur(4px)\",\n    zIndex: 10,\n    paddingHorizontal: spacings[24],\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  stickyHeaderLarge: {\n    paddingHorizontal: spacings[40],\n  },\n  loadingPlaceholder: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: 0,\n  },\n  rowLink: {\n    color: INHERIT,\n    textDecorationLine: \"none\",\n  },\n  emptyListContainer: {\n    ...commonStyles.fill,\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: spacings[48],\n    backgroundColor: backgroundColor.default,\n  },\n  scrollTracker: {\n    pointerEvents: \"none\",\n    position: \"absolute\",\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n});\n\nconst ONE = 1;\nconst ZERO = 0;\n\nconst Row = <T, ExtraInfo>({\n  id,\n  item,\n  index,\n  rowHeight,\n  columns,\n  extraInfo,\n  isActive,\n  isHovered,\n  large,\n  style,\n  onMouseEnter,\n  onMouseLeave,\n}: {\n  id: string;\n  item: T;\n  index: number;\n  rowHeight: number;\n  columns: ColumnConfig<T, ExtraInfo>[];\n  extraInfo: ExtraInfo;\n  isActive: boolean;\n  isHovered: boolean;\n  large: boolean;\n  style?: (item: T, large: boolean) => ViewStyle | null | undefined;\n  onMouseEnter: (id: string) => void;\n  onMouseLeave: () => void;\n}) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart: () => onMouseEnter(id),\n    onHoverEnd: () => onMouseLeave(),\n  });\n\n  return (\n    <View\n      ref={containerRef}\n      style={[\n        styles.segment,\n        large && styles.segmentLarge,\n        styles.row,\n        style?.(item, large),\n        isActive && styles.activeRow,\n        isHovered && styles.hoveredRow,\n        { minHeight: rowHeight },\n      ]}\n    >\n      {columns.map(({ width, id: columnId, renderCell }) => (\n        <View\n          style={[\n            styles.segmentHeaderCell,\n            {\n              width: typeof width === \"number\" ? width : ONE,\n              flexGrow: width === \"grow\" ? ONE : ZERO,\n            },\n          ]}\n          id={columnId}\n          key={columnId}\n        >\n          {renderCell({ columnId, item, index, extraInfo, isHovered })}\n        </View>\n      ))}\n    </View>\n  );\n};\n\nexport const PlainListView = <T, ExtraInfo>({\n  data: originalData,\n  keyExtractor,\n  rowHeight,\n  groupHeaderHeight,\n  headerHeight,\n  columns,\n  smallColumns = columns,\n  extraInfo,\n  onEndReached,\n  onEndReachedThresholdPx = 200,\n  headerStyle,\n  rowStyle,\n  getRowLink,\n  activeRowId,\n  renderEmptyList,\n  onActiveRowChange,\n  groupBy,\n  loading,\n  breakpoint = breakpoints.large,\n  withoutScroll = false,\n  stickyOffset = 0,\n  headerBackgroundColor = backgroundColor.default,\n}: Props<T, ExtraInfo>) => {\n  const viewId = useId();\n  const scrollTrackerRef = useRef<View>(null);\n\n  const groups: Map<string | null, T[]> = useMemo(() => {\n    if (groupBy == null) {\n      return new Map<null, T[]>([[null, originalData]]);\n    }\n    const map = new Map<string, T[]>();\n    originalData.forEach(item => {\n      const key = groupBy(item);\n      map.set(key, [...(map.get(key) ?? []), item]);\n    });\n    return map;\n  }, [groupBy, originalData]);\n\n  const totalHeight = rowHeight * originalData.length + groups.size * groupHeaderHeight;\n\n  const isLoading = isNotNullish(loading) && loading.isLoading;\n  const isEmpty = originalData.length === 0;\n\n  const [hoveredRow, setHoveredRow] = useState<string | undefined>(undefined);\n\n  const removeHoveredRow = useCallback(() => {\n    setHoveredRow(undefined);\n  }, []);\n\n  useEffect(() => {\n    const scrollTracker = scrollTrackerRef.current;\n    if (scrollTracker != null) {\n      const scrollTrackerElement = scrollTracker as unknown as HTMLElement;\n      const intersectionObserver = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            if (isNotNullish(onEndReached)) {\n              onEndReached();\n            }\n          }\n        });\n      });\n      intersectionObserver.observe(scrollTrackerElement);\n      return () => intersectionObserver.unobserve(scrollTrackerElement);\n    }\n  }, [onEndReached]);\n\n  const createRowWrapper = useCallback(\n    ({\n      item,\n      absoluteIndex,\n      extraInfo,\n    }: {\n      item: T;\n      absoluteIndex: number;\n      extraInfo: ExtraInfo;\n    }): ReactElement<{\n      children: ReactNode;\n      ref: RefObject<View> | null;\n      style?: ViewStyle;\n    }> => {\n      const customLinkElement = getRowLink?.({ item, index: absoluteIndex, extraInfo });\n      return isNullish(customLinkElement) ? <View /> : customLinkElement;\n    },\n    [getRowLink],\n  );\n\n  const activeItemRef = useRef<View>(null);\n\n  useEffect(() => {\n    const ref = activeItemRef.current;\n    if (activeRowId != null && ref != null) {\n      const element = ref as unknown as HTMLElement;\n      element.scrollIntoView({ behavior: \"smooth\", block: \"nearest\" });\n      onActiveRowChange?.(element);\n    }\n  }, [activeRowId, onActiveRowChange]);\n\n  const listWrapper = useMemo(\n    () =>\n      withoutScroll ? (\n        <View style={styles.contentContainer} />\n      ) : (\n        <ScrollView\n          scrollEventThrottle={32}\n          contentContainerStyle={[\n            styles.contentContainer,\n            {\n              minHeight: totalHeight + (isLoading ? loading.count * rowHeight : 0),\n            },\n          ]}\n        />\n      ),\n    [isLoading, loading?.count, rowHeight, totalHeight, withoutScroll],\n  );\n\n  return (\n    <ResponsiveContainer\n      style={withoutScroll ? (isEmpty ? commonStyles.fill : undefined) : styles.root}\n      breakpoint={breakpoint}\n    >\n      {({ large }) => {\n        const displayColumns = large ? columns : smallColumns;\n        return (\n          <>\n            {cloneElement(listWrapper, {\n              children: (\n                <>\n                  {!isEmpty && large ? (\n                    <View\n                      style={[\n                        styles.segment,\n                        styles.segmentLarge,\n                        styles.header,\n                        headerStyle,\n                        { backgroundColor: headerBackgroundColor },\n                      ]}\n                    >\n                      {displayColumns.map(({ id, width, title, renderTitle }) => {\n                        const columnId = `${viewId}_${id}`;\n\n                        return (\n                          <View\n                            style={[\n                              styles.segmentHeaderCell,\n                              {\n                                width: typeof width === \"number\" ? width : ONE,\n                                flexGrow: width === \"grow\" ? ONE : ZERO,\n                                height: headerHeight,\n                              },\n                            ]}\n                            id={columnId}\n                            key={columnId}\n                          >\n                            {renderTitle({ title, extraInfo, id })}\n                          </View>\n                        );\n                      })}\n                    </View>\n                  ) : null}\n\n                  <View>\n                    {Array.from(groups.entries()).map(([groupName, items]) => {\n                      return (\n                        <Fragment key={groupName}>\n                          {groupName != null ? (\n                            <View\n                              style={[\n                                styles.stickyHeader,\n                                large && styles.stickyHeaderLarge,\n                                {\n                                  height: groupHeaderHeight,\n                                  top: stickyOffset + (large ? headerHeight : 0),\n                                },\n                              ]}\n                            >\n                              <LakeHeading level={3} variant=\"h3\">\n                                {groupName}\n                              </LakeHeading>\n                            </View>\n                          ) : null}\n\n                          {items.map((item, index) => {\n                            const key = keyExtractor(item, index);\n                            const isActive = activeRowId === key;\n                            const isHovered = isNotNullish(getRowLink) && hoveredRow === key;\n\n                            const wrapper = createRowWrapper({\n                              item,\n                              absoluteIndex: index,\n                              extraInfo,\n                            });\n\n                            return cloneElement(wrapper, {\n                              style: { ...styles.rowLink, ...wrapper.props.style },\n                              key: index,\n                              ref: isActive ? activeItemRef : null,\n                              children: (\n                                <Row\n                                  id={key}\n                                  rowHeight={rowHeight}\n                                  columns={displayColumns}\n                                  item={item}\n                                  index={index}\n                                  extraInfo={extraInfo}\n                                  isActive={isActive}\n                                  isHovered={isHovered}\n                                  large={large}\n                                  style={rowStyle}\n                                  onMouseEnter={setHoveredRow}\n                                  onMouseLeave={removeHoveredRow}\n                                />\n                              ),\n                            });\n                          })}\n                        </Fragment>\n                      );\n                    })}\n                  </View>\n\n                  <View>\n                    <View aria-busy={isLoading} style={styles.loadingPlaceholder}>\n                      {isLoading ? (\n                        <PlainListViewPlaceholder\n                          count={loading.count}\n                          rowHeight={rowHeight}\n                          rowVerticalSpacing={0}\n                          paddingHorizontal={0}\n                        />\n                      ) : null}\n                    </View>\n                  </View>\n\n                  {isEmpty && isNotNullish(renderEmptyList) && !isLoading ? (\n                    <View style={styles.emptyListContainer}>{renderEmptyList()}</View>\n                  ) : null}\n\n                  <View\n                    style={[styles.scrollTracker, { height: onEndReachedThresholdPx }]}\n                    ref={scrollTrackerRef}\n                  />\n                </>\n              ),\n            })}\n          </>\n        );\n      }}\n    </ResponsiveContainer>\n  );\n};\n"],"names":["INHERIT","styles","StyleSheet","backgroundColor","spacings","colors","commonStyles","ONE","ZERO","Row","id","item","index","rowHeight","columns","extraInfo","isActive","isHovered","large","style","onMouseEnter","onMouseLeave","containerRef","useRef","useHover","jsx","View","width","columnId","renderCell","PlainListView","originalData","keyExtractor","groupHeaderHeight","headerHeight","smallColumns","onEndReached","onEndReachedThresholdPx","headerStyle","rowStyle","getRowLink","activeRowId","renderEmptyList","onActiveRowChange","groupBy","loading","breakpoint","breakpoints","withoutScroll","stickyOffset","headerBackgroundColor","viewId","useId","scrollTrackerRef","groups","useMemo","map","key","totalHeight","isLoading","isNotNullish","isEmpty","hoveredRow","setHoveredRow","useState","removeHoveredRow","useCallback","useEffect","scrollTracker","scrollTrackerElement","intersectionObserver","entries","entry","createRowWrapper","absoluteIndex","customLinkElement","isNullish","activeItemRef","ref","element","listWrapper","ScrollView","ResponsiveContainer","displayColumns","Fragment","jsxs","title","renderTitle","groupName","items","LakeHeading","wrapper","cloneElement","PlainListViewPlaceholder"],"mappings":"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}