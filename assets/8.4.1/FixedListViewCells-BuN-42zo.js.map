{"version":3,"file":"FixedListViewCells-BuN-42zo.js","sources":["../../../packages/lake/src/components/FixedListView.tsx","../../../packages/lake/src/components/FixedListViewCells.tsx"],"sourcesContent":["/**\n * ## FixedListView\n *\n * The FixedListView is a component designed to render big amounts of tabular data.\n *\n * For usability, the data can be display in three types of columns:\n *\n * - Sticked to start columns (usually the main identifier, always visible)\n * - Center columns (scrollable columns, with additional information)\n * - Sticked to end columns (so that some actions are always accesible at the end of each line)\n *\n * ┌────────────────────────────────────────────────────────────────────────────────────────┐\n * │ ┌────────────────┐ ┌────────────────────────────────────────┐ ┌────────────────┐       │\n * │ │ ╔════════════╗ │ │ ╔════════════════════════════════════╗ │ │ ╔════════════╗ │       │\n * │ │ ║   Header   ║ │ │ ║               Header               ║ │ │ ║   Header   ║ │ ▲     │\n * │ │ ║            ║ │ │ ║◀──────────────────────────────────▶║ │ │ ║            ║ │ │     │\n * │ │ ╚════════════╝ │ │ ╚════════════════════════════════════╝ │ │ ╚════════════╝ │ │     │\n * │ │                │ │                                        │ │                │ │     │\n * │ │ ┌───────────┐  │ │ ┌────────────────────────────────────┐ │ │ ┌────────────┐ │ │     │\n * │ │ │  Cell A1  │──┼─┼▷│              Cell B1               ├─┼─┼─▷  Cell C1   │ │ │     │\n * │ │ └───────────┘  │ │ └────────────────────────────────────┘ │ │ └────────────┘ │ │     │\n * │ │ ┌───────────┐  │ │ ┌────────────────────────────────────┐ │ │ ┌────────────┐ │ │     │\n * │ │ │  Cell A2  │──┼─┼▷│              Cell B2               │─┼─┼─▷  Cell C2   │ │ │     │\n * │ │ └───────────┘  │ │ └────────────────────────────────────┘ │ │ └────────────┘ │ │     │\n * │ │                │ │                                        │ │                │ │     │\n * │ │                │ │ ◀────────────────────────────────────▶ │ │                │ ▼     │\n * └─┴────────────────┴─┴────────────────────────────────────────┴─┴────────────────┴───────┘\n *\n * ╔════╗\n * ║    ║   Sticky\n * ╚════╝\n * ◀────▶   Scrollable\n * ─────▷   Emulated tab order\n *\n */\nimport {\n  cloneElement,\n  Fragment,\n  memo,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  LayoutChangeEvent,\n  NativeScrollEvent,\n  NativeSyntheticEvent,\n  ScrollView,\n  StyleSheet,\n  View,\n  ViewProps,\n} from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { v4 as uuid } from \"uuid\";\nimport {\n  backgroundColor,\n  colors,\n  invariantColors,\n  radii,\n  shadows,\n  spacings,\n} from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { getFocusableElements } from \"../utils/a11y\";\nimport { first, last, sortedIndexOf } from \"../utils/array\";\nimport { noop } from \"../utils/function\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { BorderedIcon } from \"./BorderedIcon\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeHeading } from \"./LakeHeading\";\nimport { LakeText } from \"./LakeText\";\nimport { Space } from \"./Space\";\n\nexport type ColumnTitleConfig<ExtraInfo> = {\n  title: string;\n  extraInfo: ExtraInfo;\n  id: string;\n};\n\nexport type ColumnCellConfig<T, ExtraInfo> = {\n  columnId: string;\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n  isHovered: boolean;\n};\n\nexport type LinkConfig<T, ExtraInfo> = {\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n};\n\nexport type ColumnConfig<T, ExtraInfo> = {\n  id: string;\n  width: number;\n  title: string;\n  renderTitle: (props: ColumnTitleConfig<ExtraInfo>) => ReactNode;\n  renderCell: (props: ColumnCellConfig<T, ExtraInfo>) => ReactNode;\n};\n\ntype Mode = \"tile\" | \"plain\";\n\nexport type FixedListViewProps<T, ExtraInfo> = {\n  mode?: Mode;\n  data: T[];\n  keyExtractor: (item: T, index: number) => string;\n  highlightedRowId?: string;\n  headerBackgroundColor?: string;\n  headerHeight: number;\n  rowHeight: number;\n  rowVerticalSpacing: number;\n  horizontalPadding?: number;\n  extraInfo: ExtraInfo;\n  stickedToStartColumns?: ColumnConfig<T, ExtraInfo>[];\n  columns: ColumnConfig<T, ExtraInfo>[];\n  stickedToEndColumns?: ColumnConfig<T, ExtraInfo>[];\n  renderThreshold?: number;\n  onEndReached?: () => void;\n  onEndReachedThresholdPx?: number;\n  getRowLink?: (config: LinkConfig<T, ExtraInfo>) => ReactElement | undefined;\n  renderEmptyList?: () => ReactNode;\n  loading?: {\n    isLoading: boolean;\n    count: number;\n  };\n};\n\nconst HORIZONTAL_SAFE_AREA = 10;\nexport const SCROLLBAR_RESERVED_SPACE = 20;\n\nconst styles = StyleSheet.create({\n  root: {\n    height: 1,\n    alignSelf: \"stretch\",\n    flexGrow: 1,\n  },\n  container: {\n    height: 1,\n    alignSelf: \"stretch\",\n    flexGrow: 1,\n  },\n  containerTile: {\n    marginHorizontal: -HORIZONTAL_SAFE_AREA,\n  },\n  contentContainer: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    flexGrow: 1,\n  },\n  scrollContentContainer: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  centerColumnsContainer: {\n    width: 1,\n    flexGrow: 1,\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n  },\n  centerColumns: {\n    flexGrow: 1,\n  },\n  centerColumnsContentContainer: {\n    flexDirection: \"column\",\n    flexGrow: 1,\n  },\n  stickyColumn: {\n    flexGrow: 0,\n    zIndex: 1,\n  },\n  stickyColumnStartOverflow: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    right: \"100%\",\n  },\n  stickyColumnEndOverflow: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    left: \"100%\",\n  },\n  rowSegment: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    display: \"flex\",\n    flexGrow: 1,\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n    overflow: \"hidden\",\n  },\n  headingSegment: {\n    position: \"sticky\",\n    top: 0,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    zIndex: 2,\n  },\n  segment: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    overflow: \"hidden\",\n  },\n  segmentOverflow: {\n    overflow: \"hidden\",\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  visibleGradient: {\n    opacity: 1,\n  },\n  leftToRightGradient: {\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    height: \"100%\",\n    width: 10,\n    backgroundImage: \"linear-gradient(to right, rgba(0, 0, 0, 0.06), rgba(0, 0, 0, 0))\",\n    opacity: 0,\n    transition: \"150ms ease-in-out opacity\",\n    pointerEvents: \"none\",\n  },\n  rightToLeftGradient: {\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n    height: \"100%\",\n    width: 10,\n    backgroundImage: \"linear-gradient(to left, rgba(0, 0, 0, 0.06), rgba(0, 0, 0, 0))\",\n    opacity: 0,\n    transition: \"150ms ease-in-out opacity\",\n    pointerEvents: \"none\",\n  },\n  horizontalScrollbar: {\n    position: \"sticky\",\n    bottom: 0,\n    borderBottomWidth: 5,\n    borderBottomColor: invariantColors.transparent,\n    flexGrow: 0,\n    height: SCROLLBAR_RESERVED_SPACE,\n  },\n  cell: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  evenRow: {\n    backgroundColor: backgroundColor.accented,\n  },\n  oddRow: {\n    backgroundColor: backgroundColor.default,\n  },\n  rowShadow: {\n    boxShadow: shadows.tile,\n  },\n  hoveredRowShadow: {\n    boxShadow: shadows.tileHover,\n  },\n  highlightedRow: {\n    borderColor: colors.current.primary,\n    borderWidth: 1,\n  },\n  segmentHeaderCell: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    alignItems: \"center\",\n  },\n  rowBackground: {\n    borderRadius: radii[4],\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rowPlainBackground: {\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rowBackgroundContainer: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    justifyContent: \"center\",\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rowBackgroundContainerPlain: {\n    left: -10,\n    right: -10,\n    boxShadow: `inset 0 -1px ${colors.gray[100]}`,\n  },\n  backgroundRows: {\n    position: \"absolute\",\n    left: HORIZONTAL_SAFE_AREA,\n    right: HORIZONTAL_SAFE_AREA,\n    top: 0,\n    bottom: 0,\n  },\n  placeholderRowContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    top: 0,\n    left: 20,\n    right: 20,\n    animationKeyframes: {\n      \"50%\": {\n        opacity: 0.6,\n      },\n    },\n    animationDuration: \"2000ms\",\n    animationTimingFunction: \"linear\",\n    animationIterationCount: \"infinite\",\n  },\n  placeholderRowContainerPlain: {\n    left: 10,\n  },\n  placeholderRow: {\n    height: 14,\n    width: \"30%\",\n    backgroundColor: colors.gray[200],\n    borderRadius: radii[6],\n  },\n  placeholderRowEnd: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  smallPlaceholderRow: {\n    width: \"10%\",\n  },\n  centerSegmentContainer: {\n    flexGrow: 1,\n  },\n  rowLeftRadii: {\n    borderTopLeftRadius: radii[4],\n    borderBottomLeftRadius: radii[4],\n  },\n  rowRightRadii: {\n    borderTopRightRadius: radii[4],\n    borderBottomRightRadius: radii[4],\n  },\n  emptyListContainer: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: backgroundColor.default,\n  },\n  emptyListContentContainer: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: spacings[48],\n    minHeight: \"100%\",\n  },\n  emptyList: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  loadingPlaceholder: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n  },\n  topGradient: {\n    height: 30,\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: \"100%\",\n    backgroundImage: `linear-gradient(to bottom, ${backgroundColor.default}, ${backgroundColor.defaultTransparent})`,\n    opacity: 0,\n    transition: \"200ms ease-in-out opacity\",\n    pointerEvents: \"none\",\n  },\n  visibleTopGradient: {\n    opacity: 1,\n  },\n});\n\ntype RowBackgroundProps = {\n  absoluteIndex: number;\n  id: string;\n  isHovered: boolean;\n  isHighlighted: boolean;\n  top: number;\n  rowVerticalSpacing: number;\n  rowHeight: number;\n  onMouseEnter: (id: string) => void;\n  onMouseLeave: () => void;\n  mode: Mode;\n};\n\nconst RowBackground = ({\n  absoluteIndex,\n  id,\n  isHovered,\n  isHighlighted,\n  top,\n  rowHeight,\n  rowVerticalSpacing,\n  onMouseEnter,\n  onMouseLeave,\n  mode,\n}: RowBackgroundProps) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart: () => onMouseEnter(id),\n    onHoverEnd: () => onMouseLeave(),\n  });\n\n  return (\n    <View\n      style={[\n        styles.rowBackgroundContainer,\n        mode === \"plain\" && styles.rowBackgroundContainerPlain,\n        { top, paddingVertical: rowVerticalSpacing / 2 },\n      ]}\n      ref={containerRef}\n    >\n      {mode === \"tile\" ? (\n        <View\n          style={[\n            styles.rowBackground,\n            isHovered ? styles.hoveredRowShadow : styles.rowShadow,\n            isHighlighted && styles.highlightedRow,\n            absoluteIndex % 2 === 0 ? styles.evenRow : styles.oddRow,\n            { height: rowHeight },\n          ]}\n        />\n      ) : (\n        <View style={[styles.rowPlainBackground, { height: rowHeight }]} />\n      )}\n    </View>\n  );\n};\n\nconst MemoizedRowBackground = memo<RowBackgroundProps>(RowBackground);\n\ntype RowSegmentProps<T, ExtraInfo> = {\n  mode?: Mode;\n  columns: ColumnConfig<T, ExtraInfo>[];\n  item: T;\n  style: ViewProps[\"style\"];\n  absoluteIndex: number;\n  viewId: string;\n  segmentColumn: \"start\" | \"center\" | \"end\";\n  width: number;\n  rowVerticalSpacing: number;\n  onMouseEnter: (id: string) => void;\n  onMouseLeave: () => void;\n  id: string;\n  isHovered: boolean;\n  onEndReached?: () => void;\n  extraInfo: ExtraInfo;\n  createRowWrapper: (props: {\n    item: T;\n    absoluteIndex: number;\n    extraInfo: ExtraInfo;\n  }) => ReactElement;\n  focusId: string;\n  top: number;\n  totalRowHeight: number;\n  minWidth?: number;\n};\n\nconst SEGMENTS_MAP = {\n  start: \"0\",\n  center: \"1\",\n  end: \"2\",\n};\n\nconst RowSegment = <T, ExtraInfo>({\n  columns,\n  item,\n  style,\n  absoluteIndex,\n  viewId,\n  segmentColumn,\n  rowVerticalSpacing,\n  width,\n  id,\n  isHovered,\n  extraInfo,\n  onMouseEnter,\n  onMouseLeave,\n  createRowWrapper,\n  focusId,\n  top,\n  totalRowHeight,\n  minWidth,\n}: RowSegmentProps<T, ExtraInfo>) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart: () => onMouseEnter(id),\n    onHoverEnd: () => onMouseLeave(),\n  });\n\n  const wrapper = createRowWrapper({ item, absoluteIndex, extraInfo });\n\n  return cloneElement(\n    wrapper,\n    {\n      id: focusId,\n      tabIndex: 0,\n      style: [\n        styles.rowSegment,\n        {\n          top,\n          height: totalRowHeight,\n          width: isNullish(minWidth) ? width : undefined,\n          minWidth,\n        },\n      ],\n    },\n    <View\n      style={[\n        styles.segment,\n        { width, paddingVertical: rowVerticalSpacing / 2 },\n        segmentColumn === \"center\" && styles.centerSegmentContainer,\n        segmentColumn === \"start\" && {\n          borderTopLeftRadius: radii[4],\n          borderBottomLeftRadius: radii[4],\n        },\n        segmentColumn === \"end\" && {\n          borderTopRightRadius: radii[4],\n          borderBottomRightRadius: radii[4],\n        },\n      ]}\n      ref={containerRef}\n      aria-hidden={false}\n    >\n      <View style={[styles.segmentOverflow, style]}>\n        {columns.map(({ id, width, renderCell }, index) => {\n          const columnId = `${viewId}_${id}`;\n          const paddedIndex = String(absoluteIndex).padStart(10, \"0\");\n          const paddedCellIndex = String(index).padStart(10, \"0\");\n\n          // The reason we use this shape is so that the IDs alphabetical order matches the semantical one:\n          // 1. Row index\n          // 2. Column index\n          // 3. Cell index\n          // -> See the `onKeyDown` handler\n          const focusId = `${viewId}__Row_${paddedIndex}_Segment_${SEGMENTS_MAP[segmentColumn]}_Cell_${paddedCellIndex}`;\n\n          return (\n            <View\n              style={[styles.cell, { width }]}\n              key={columnId}\n              aria-describedby={columnId}\n              id={focusId}\n            >\n              {renderCell({ columnId, item, index: absoluteIndex, extraInfo, isHovered })}\n            </View>\n          );\n        })}\n      </View>\n    </View>,\n  );\n};\n\nconst MemoizedRowSegment = memo(RowSegment) as typeof RowSegment;\n\ntype HeaderSegmentProps<T, ExtraInfo> = {\n  columns: ColumnConfig<T, ExtraInfo>[];\n  viewId: string;\n  extraInfo: ExtraInfo;\n  width: number;\n};\n\nconst HeaderSegment = <T, ExtraInfo>({\n  columns,\n  viewId,\n  extraInfo,\n  width,\n}: HeaderSegmentProps<T, ExtraInfo>) => {\n  return (\n    <View style={[styles.segment, { width }]}>\n      {columns.map(({ id, width, title, renderTitle }) => {\n        const columnId = `${viewId}_${id}`;\n\n        return (\n          <View style={[styles.segmentHeaderCell, { width }]} id={columnId} key={columnId}>\n            {renderTitle({ title, extraInfo, id })}\n          </View>\n        );\n      })}\n    </View>\n  );\n};\n\nconst findNextFocusableElement = (\n  sortedCellIds: string[],\n  currentCellIndex: number,\n  direction: -1 | 1,\n) => {\n  let index = currentCellIndex + direction;\n\n  while (index >= 0 && index < sortedCellIds.length) {\n    const nextCellId = sortedCellIds[index];\n\n    if (isNotNullish(nextCellId)) {\n      const previousCell = document.getElementById(nextCellId);\n\n      if (isNotNullish(previousCell)) {\n        const focusableElements = getFocusableElements(previousCell, false);\n        const nextFocusableElement =\n          direction === -1 ? last(focusableElements) : first(focusableElements);\n\n        if (isNotNullish(nextFocusableElement)) {\n          return nextFocusableElement;\n        }\n      }\n    }\n    index = index + direction;\n  }\n};\n\nconst EMPTY_COLUMNS: ColumnConfig<unknown, unknown>[] = [];\nconst ZERO = 0;\n\nexport const FixedListView = <T, ExtraInfo>({\n  data: originalData,\n  mode = \"tile\",\n  keyExtractor,\n  highlightedRowId,\n  rowHeight,\n  rowVerticalSpacing,\n  horizontalPadding = HORIZONTAL_SAFE_AREA,\n  headerBackgroundColor = backgroundColor.default,\n  headerHeight,\n  renderThreshold = 1000,\n  stickedToStartColumns: initialStickedToStartColumns = EMPTY_COLUMNS,\n  columns: initialColumns,\n  stickedToEndColumns: initialStickedToEndColumns = EMPTY_COLUMNS,\n  extraInfo,\n  onEndReached,\n  onEndReachedThresholdPx = 200,\n  getRowLink,\n  renderEmptyList,\n  loading,\n}: FixedListViewProps<T, ExtraInfo>) => {\n  const [viewId] = useState(() => uuid());\n  // Those three refs are used to synchronize the horizontal scroll in the center columns\n  const centerHeadersRef = useRef<ScrollView | null>(null);\n  const centerColumnsRef = useRef<ScrollView | null>(null);\n  const horizontalScrollbarRef = useRef<ScrollView | null>(null);\n  const totalRowHeight = rowHeight + rowVerticalSpacing;\n  const rowsHeight = originalData.length * totalRowHeight;\n  const totalHeight = headerHeight + rowsHeight;\n  // It might seem off to use the range in state instead of storing scroll/layout and deriving it,\n  // but it saves a lot of render phases by allowing to bail out from rendering when the range doesn't change\n  const [\n    {\n      data,\n      range: [renderedRangeStartIndex, renderedRangeEndIndex],\n    },\n    setDataAndRenderRange,\n  ] = useState({ data: originalData, range: [0, 20] });\n\n  const startFocusAnchorRef = useRef<View | null>(null);\n  const endFocusAnchorRef = useRef<View | null>(null);\n\n  const [hasHorizontalScroll, setHasHorizontalScroll] = useState(false);\n  const [shouldAvoidStickyColumns, setShouldAvoidStickyColumns] = useState(false);\n  const [shouldShowStartGradient, setShouldShowStartGradient] = useState(false);\n  const [shouldShowEndGradient, setShouldShowEndGradient] = useState(true);\n  const [hoveredRow, setHoveredRow] = useState<string | undefined>(undefined);\n  const currentScrollY = useRef(0);\n  const lastKnownHeight = useRef(0);\n\n  const { stickedToStartColumns, columns, stickedToEndColumns } = useMemo(() => {\n    if (shouldAvoidStickyColumns) {\n      return {\n        stickedToStartColumns: [],\n        columns: [\n          ...initialStickedToStartColumns,\n          ...initialColumns,\n          ...initialStickedToEndColumns,\n        ],\n        stickedToEndColumns: [],\n      };\n    } else {\n      return {\n        stickedToStartColumns: initialStickedToStartColumns,\n        columns: initialColumns,\n        stickedToEndColumns: initialStickedToEndColumns,\n      };\n    }\n  }, [\n    initialStickedToStartColumns,\n    initialColumns,\n    initialStickedToEndColumns,\n    shouldAvoidStickyColumns,\n  ]);\n\n  const [isScrolled, setIsScrolled] = useState(false);\n\n  const removeHoveredRow = useCallback(() => {\n    setHoveredRow(undefined);\n  }, []);\n\n  const initialStickedToStartColumnsWidth = useMemo(\n    () => initialStickedToStartColumns.reduce((total, { width }) => total + width, 0),\n    [initialStickedToStartColumns],\n  );\n\n  const initialStickedToEndColumnsWidth = useMemo(\n    () => initialStickedToEndColumns.reduce((total, { width }) => total + width, 0),\n    [initialStickedToEndColumns],\n  );\n\n  const stickedToStartColumnsWidth = useMemo(\n    () => stickedToStartColumns.reduce((total, { width }) => total + width, 0),\n    [stickedToStartColumns],\n  );\n\n  const stickedToEndColumnsWidth = useMemo(\n    () => stickedToEndColumns.reduce((total, { width }) => total + width, 0),\n    [stickedToEndColumns],\n  );\n\n  const centerColumnsWidth = useMemo(\n    () => columns.reduce((total, { width }) => total + width, 0),\n    [columns],\n  );\n\n  const centerSegmentStyle = useMemo(\n    () => [\n      stickedToStartColumns.length === 0 && styles.rowLeftRadii,\n      stickedToEndColumns.length === 0 && styles.rowRightRadii,\n    ],\n    [stickedToStartColumns, stickedToEndColumns],\n  );\n\n  const createRowWrapper = useCallback(\n    ({\n      item,\n      absoluteIndex,\n      extraInfo,\n    }: {\n      item: T;\n      absoluteIndex: number;\n      extraInfo: ExtraInfo;\n    }) => {\n      const customLinkElement = getRowLink?.({ item, index: absoluteIndex, extraInfo });\n      return isNullish(customLinkElement) ? <View /> : customLinkElement;\n    },\n    [getRowLink],\n  );\n\n  const [backgroundRows, startRows, centerRows, endRows] = useMemo(() => {\n    const length = Math.max(0, renderedRangeEndIndex - renderedRangeStartIndex);\n\n    const backgroundRows = Array(length) as ReactNode[];\n    const startRows = Array(length) as ReactNode[];\n    const centerRows = Array(length) as ReactNode[];\n    const endRows = Array(length) as ReactNode[];\n\n    let index = -1;\n\n    while (++index < length) {\n      const absoluteIndex = renderedRangeStartIndex + index;\n      const item = data[absoluteIndex];\n\n      if (isNullish(item)) {\n        continue;\n      }\n\n      const key = keyExtractor(item, absoluteIndex);\n      const top = absoluteIndex * totalRowHeight;\n      const isHoveredRow = hoveredRow === key;\n      const isHighlightedRow = highlightedRowId === key;\n\n      const paddedIndex = String(absoluteIndex).padStart(10, \"0\");\n      const focusId = `${viewId}__Row_${paddedIndex}`;\n\n      backgroundRows[index] = (\n        <MemoizedRowBackground\n          key={key}\n          mode={mode}\n          isHovered={isHoveredRow}\n          isHighlighted={isHighlightedRow}\n          absoluteIndex={absoluteIndex}\n          top={top}\n          id={key}\n          rowHeight={rowHeight}\n          rowVerticalSpacing={rowVerticalSpacing}\n          onMouseEnter={setHoveredRow}\n          onMouseLeave={removeHoveredRow}\n        />\n      );\n\n      if (stickedToStartColumns.length > 0) {\n        startRows[index] = (\n          <MemoizedRowSegment<T, ExtraInfo>\n            key={key}\n            createRowWrapper={createRowWrapper}\n            focusId={focusId}\n            top={top}\n            totalRowHeight={totalRowHeight}\n            id={key}\n            style={styles.rowLeftRadii}\n            onMouseEnter={setHoveredRow}\n            onMouseLeave={removeHoveredRow}\n            segmentColumn=\"start\"\n            columns={stickedToStartColumns}\n            width={stickedToStartColumnsWidth}\n            item={item}\n            absoluteIndex={absoluteIndex}\n            rowVerticalSpacing={rowVerticalSpacing}\n            viewId={viewId}\n            isHovered={isHoveredRow}\n            extraInfo={extraInfo}\n          />\n        );\n      }\n\n      centerRows[index] = (\n        <MemoizedRowSegment<T, ExtraInfo>\n          key={key}\n          mode={mode}\n          createRowWrapper={createRowWrapper}\n          focusId={focusId}\n          top={top}\n          totalRowHeight={totalRowHeight}\n          minWidth={centerColumnsWidth}\n          id={key}\n          style={centerSegmentStyle}\n          onMouseEnter={setHoveredRow}\n          onMouseLeave={removeHoveredRow}\n          segmentColumn=\"center\"\n          columns={columns}\n          width={centerColumnsWidth}\n          item={item}\n          absoluteIndex={absoluteIndex}\n          rowVerticalSpacing={rowVerticalSpacing}\n          viewId={viewId}\n          isHovered={isHoveredRow}\n          extraInfo={extraInfo}\n        />\n      );\n\n      if (stickedToEndColumns.length > 0) {\n        endRows[index] = (\n          <MemoizedRowSegment<T, ExtraInfo>\n            key={key}\n            createRowWrapper={createRowWrapper}\n            focusId={focusId}\n            top={top}\n            totalRowHeight={totalRowHeight}\n            id={key}\n            style={styles.rowLeftRadii}\n            onMouseEnter={setHoveredRow}\n            onMouseLeave={removeHoveredRow}\n            segmentColumn=\"end\"\n            columns={stickedToEndColumns}\n            width={stickedToEndColumnsWidth}\n            item={item}\n            absoluteIndex={absoluteIndex}\n            rowVerticalSpacing={rowVerticalSpacing}\n            viewId={viewId}\n            isHovered={isHoveredRow}\n            extraInfo={extraInfo}\n          />\n        );\n      }\n    }\n\n    return [backgroundRows, startRows, centerRows, endRows];\n  }, [\n    data,\n    renderedRangeStartIndex,\n    renderedRangeEndIndex,\n    keyExtractor,\n    highlightedRowId,\n    rowHeight,\n    totalRowHeight,\n    columns,\n    stickedToEndColumns,\n    stickedToStartColumns,\n    viewId,\n    stickedToStartColumnsWidth,\n    centerColumnsWidth,\n    stickedToEndColumnsWidth,\n    hoveredRow,\n    rowVerticalSpacing,\n    extraInfo,\n    removeHoveredRow,\n    centerSegmentStyle,\n    createRowWrapper,\n    mode,\n  ]);\n\n  // Used to fix some scrollbar behavior. See `main.css`.\n  useLayoutEffect(() => {\n    if (centerHeadersRef.current instanceof Element) {\n      centerHeadersRef.current.setAttribute(\"data-hide-scrollbar\", String(true));\n    }\n    if (centerColumnsRef.current instanceof Element) {\n      centerColumnsRef.current.setAttribute(\"data-hide-scrollbar\", String(true));\n    }\n    if (horizontalScrollbarRef.current instanceof Element) {\n      horizontalScrollbarRef.current.setAttribute(\"data-force-scrollbar\", String(true));\n    }\n  }, []);\n\n  // To synchronize scrolls, we keep track of the initiator in order to ignore the scroll events\n  // we provoke ourselves with the sync.\n  const lastHorizontalScroll = useRef<{\n    initiator: \"headers\" | \"columns\" | \"scrollbar\";\n    date: number;\n  }>({\n    initiator: \"columns\",\n    date: 0,\n  });\n\n  useEffect(() => {\n    if (\n      isNotNullish(centerHeadersRef.current) &&\n      isNotNullish(centerColumnsRef.current) &&\n      isNotNullish(horizontalScrollbarRef.current)\n    ) {\n      const SCROLL_THRESHOLD_MS = 500;\n      const centerColumns = centerColumnsRef.current as unknown as HTMLElement;\n      const centerHeaders = centerHeadersRef.current as unknown as HTMLElement;\n      const horizontalScrollbar = horizontalScrollbarRef.current as unknown as HTMLElement;\n      const onColumnsScroll = () => {\n        const now = Date.now();\n        if (\n          lastHorizontalScroll.current.initiator === \"columns\" ||\n          now - lastHorizontalScroll.current.date > SCROLL_THRESHOLD_MS\n        ) {\n          const scrollLeft = centerColumns.scrollLeft;\n          setShouldShowStartGradient(scrollLeft > 0);\n          setShouldShowEndGradient(\n            centerColumns.scrollWidth - horizontalPadding * 2 >=\n              scrollLeft + centerColumns.clientWidth,\n          );\n          centerHeaders.scrollLeft = scrollLeft;\n          horizontalScrollbar.scrollLeft = scrollLeft;\n          lastHorizontalScroll.current = { initiator: \"columns\", date: now };\n        }\n      };\n      const onHeadersScroll = () => {\n        const now = Date.now();\n        if (\n          lastHorizontalScroll.current.initiator === \"headers\" ||\n          now - lastHorizontalScroll.current.date > SCROLL_THRESHOLD_MS\n        ) {\n          const scrollLeft = centerHeaders.scrollLeft;\n          setShouldShowStartGradient(scrollLeft > 0);\n          setShouldShowEndGradient(\n            centerHeaders.scrollWidth - horizontalPadding * 2 >=\n              scrollLeft + centerHeaders.clientWidth,\n          );\n          centerColumns.scrollLeft = scrollLeft;\n          horizontalScrollbar.scrollLeft = scrollLeft;\n          lastHorizontalScroll.current = { initiator: \"headers\", date: now };\n        }\n      };\n      const onScrollbarScroll = () => {\n        const now = Date.now();\n        if (\n          lastHorizontalScroll.current.initiator === \"scrollbar\" ||\n          now - lastHorizontalScroll.current.date > SCROLL_THRESHOLD_MS\n        ) {\n          const scrollLeft = horizontalScrollbar.scrollLeft;\n          setShouldShowStartGradient(scrollLeft > 0);\n          setShouldShowEndGradient(\n            horizontalScrollbar.scrollWidth - horizontalPadding * 2 >=\n              scrollLeft + horizontalScrollbar.clientWidth,\n          );\n          centerHeaders.scrollLeft = scrollLeft;\n          centerColumns.scrollLeft = scrollLeft;\n          lastHorizontalScroll.current = { initiator: \"scrollbar\", date: now };\n        }\n      };\n      centerColumns.addEventListener(\"scroll\", onColumnsScroll, { passive: true });\n      centerHeaders.addEventListener(\"scroll\", onHeadersScroll, { passive: true });\n      horizontalScrollbar.addEventListener(\"scroll\", onScrollbarScroll, { passive: true });\n      return () => {\n        centerColumns.removeEventListener(\"scroll\", onColumnsScroll);\n        centerHeaders.removeEventListener(\"scroll\", onHeadersScroll);\n        horizontalScrollbar.removeEventListener(\"scroll\", onScrollbarScroll);\n      };\n    }\n  }, [horizontalPadding]);\n\n  const onKeyDown = useCallback(\n    (event: NativeSyntheticEvent<React.KeyboardEvent>) => {\n      const target = event.nativeEvent.target as Element;\n      const currentTarget = event.nativeEvent.currentTarget;\n      const currentCell = target.closest(`[id^=\"${viewId}__Row\"]`);\n      const currentCellId = currentCell?.id;\n      if (event.nativeEvent.key === \"Tab\" && isNotNullish(currentCell)) {\n        const focusableElements = getFocusableElements(currentCell, false);\n        const firstFocusableElement = first(focusableElements);\n        const lastFocusableElement = last(focusableElements);\n        const sortedCellIds = Array.from(\n          currentTarget.querySelectorAll(`[id^=\"${viewId}__Row\"]`),\n          item => item.id,\n        ).sort();\n        const currentCellIndex = sortedIndexOf(sortedCellIds, currentCellId);\n        const isTargetFirst = isNullish(firstFocusableElement) || firstFocusableElement === target;\n        const isTargetLast = isNullish(lastFocusableElement) || lastFocusableElement === target;\n        if (isTargetFirst && event.nativeEvent.shiftKey && first(sortedCellIds) !== currentCellId) {\n          const lastFocusableElement = findNextFocusableElement(\n            sortedCellIds,\n            currentCellIndex,\n            -1,\n          );\n          if (isNotNullish(lastFocusableElement)) {\n            event.preventDefault();\n            lastFocusableElement.focus();\n          } else {\n            event.preventDefault();\n            startFocusAnchorRef.current?.focus();\n          }\n        }\n        if (isTargetLast && !event.nativeEvent.shiftKey && last(sortedCellIds) !== currentCellId) {\n          const firstFocusableElement = findNextFocusableElement(\n            sortedCellIds,\n            currentCellIndex,\n            1,\n          );\n          if (isNotNullish(firstFocusableElement)) {\n            event.preventDefault();\n            firstFocusableElement.focus();\n          } else {\n            event.preventDefault();\n            endFocusAnchorRef.current?.focus();\n          }\n        }\n      }\n    },\n    [viewId],\n  );\n\n  useLayoutEffect(() => {\n    const renderedRangeStartIndex = Math.max(\n      0,\n      Math.floor((currentScrollY.current - renderThreshold) / totalRowHeight),\n    );\n\n    const renderedRangeEndIndex = Math.min(\n      originalData.length,\n      renderedRangeStartIndex +\n        Math.ceil((lastKnownHeight.current + renderThreshold * 2) / totalRowHeight),\n    );\n    setDataAndRenderRange(prevRenderRange => {\n      const {\n        data,\n        range: [prevRenderedRangeStartIndex, prevRenderedRangeEndIndex],\n      } = prevRenderRange;\n      if (\n        prevRenderedRangeStartIndex === renderedRangeStartIndex &&\n        prevRenderedRangeEndIndex === renderedRangeEndIndex &&\n        data === originalData\n      ) {\n        return prevRenderRange;\n      }\n      return { data: originalData, range: [renderedRangeStartIndex, renderedRangeEndIndex] };\n    });\n  }, [originalData, renderThreshold, totalRowHeight]);\n\n  const onLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { height, width },\n      },\n    }: LayoutChangeEvent) => {\n      lastKnownHeight.current = height;\n      const renderedRangeStartIndex = Math.max(\n        0,\n        Math.floor((currentScrollY.current - renderThreshold) / totalRowHeight),\n      );\n      const renderedRangeEndIndex = Math.min(\n        originalData.length,\n        renderedRangeStartIndex + Math.ceil((height + renderThreshold * 2) / totalRowHeight),\n      );\n      setDataAndRenderRange(prevRenderRange => {\n        const {\n          data,\n          range: [prevRenderedRangeStartIndex, prevRenderedRangeEndIndex],\n        } = prevRenderRange;\n        if (\n          prevRenderedRangeStartIndex === renderedRangeStartIndex &&\n          prevRenderedRangeEndIndex === renderedRangeEndIndex &&\n          data === originalData\n        ) {\n          return prevRenderRange;\n        }\n        return { data: originalData, range: [renderedRangeStartIndex, renderedRangeEndIndex] };\n      });\n\n      if (\n        isNotNullish(onEndReached) &&\n        !hasEndReachedBeenCalled.current &&\n        height >= totalHeight - onEndReachedThresholdPx\n      ) {\n        hasEndReachedBeenCalled.current = true;\n        onEndReached();\n      }\n      setShouldAvoidStickyColumns(\n        width - (initialStickedToStartColumnsWidth + initialStickedToEndColumnsWidth) < 300,\n      );\n    },\n    [\n      originalData,\n      renderThreshold,\n      totalRowHeight,\n      onEndReached,\n      onEndReachedThresholdPx,\n      totalHeight,\n      initialStickedToStartColumnsWidth,\n      initialStickedToEndColumnsWidth,\n    ],\n  );\n\n  const scrollTimeoutRef = useRef<number | undefined>(undefined);\n  const scrollContentsRef = useRef<View | null>(null);\n\n  const hasEndReachedBeenCalled = useRef(false);\n\n  useEffect(() => {\n    if (\n      isNotNullish(onEndReached) &&\n      !hasEndReachedBeenCalled.current &&\n      lastKnownHeight.current >= totalHeight - onEndReachedThresholdPx\n    ) {\n      hasEndReachedBeenCalled.current = true;\n      onEndReached();\n      return;\n    }\n\n    hasEndReachedBeenCalled.current = false;\n  }, [data, onEndReached, onEndReachedThresholdPx, totalHeight]);\n\n  const onScroll = useCallback(\n    ({\n      nativeEvent: {\n        contentOffset: { y },\n        layoutMeasurement: { height },\n        contentSize: { height: contentHeight },\n      },\n    }: NativeSyntheticEvent<NativeScrollEvent>) => {\n      setIsScrolled(y > 0);\n\n      lastKnownHeight.current = height;\n      currentScrollY.current = y;\n      if (isNotNullish(scrollTimeoutRef.current)) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n      if (scrollContentsRef.current instanceof HTMLElement) {\n        scrollContentsRef.current.style.pointerEvents = \"none\";\n      }\n      scrollTimeoutRef.current = window.setTimeout(() => {\n        if (scrollContentsRef.current instanceof HTMLElement) {\n          scrollContentsRef.current.style.pointerEvents = \"auto\";\n        }\n      }, 100);\n\n      const renderedRangeStartIndex = Math.max(\n        0,\n        Math.floor((currentScrollY.current - renderThreshold) / totalRowHeight),\n      );\n\n      const renderedRangeEndIndex = Math.min(\n        data.length,\n        renderedRangeStartIndex + Math.ceil((height + renderThreshold * 2) / totalRowHeight),\n      );\n\n      setDataAndRenderRange(prevRenderRange => {\n        const {\n          data,\n          range: [prevRenderedRangeStartIndex, prevRenderedRangeEndIndex],\n        } = prevRenderRange;\n\n        return prevRenderedRangeStartIndex === renderedRangeStartIndex &&\n          prevRenderedRangeEndIndex === renderedRangeEndIndex &&\n          data === data\n          ? prevRenderRange\n          : { data, range: [renderedRangeStartIndex, renderedRangeEndIndex] };\n      });\n\n      if (\n        isNotNullish(onEndReached) &&\n        !hasEndReachedBeenCalled.current &&\n        y + height >= contentHeight - onEndReachedThresholdPx\n      ) {\n        hasEndReachedBeenCalled.current = true;\n        onEndReached();\n      }\n    },\n    [data.length, renderThreshold, totalRowHeight, onEndReached, onEndReachedThresholdPx],\n  );\n\n  const onCenterTrackLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { width },\n      },\n    }: LayoutChangeEvent) => {\n      setHasHorizontalScroll(centerColumnsWidth > width);\n    },\n    [centerColumnsWidth],\n  );\n\n  const isLoading = isNotNullish(loading) && loading.isLoading;\n\n  return (\n    <View style={styles.root}>\n      <View ref={startFocusAnchorRef} tabIndex={0} />\n\n      <ScrollView\n        onKeyDown={onKeyDown}\n        onLayout={onLayout}\n        onScroll={onScroll}\n        scrollEventThrottle={32}\n        style={[styles.container, mode === \"tile\" && styles.containerTile]}\n        contentContainerStyle={[\n          styles.contentContainer,\n          {\n            height:\n              totalHeight +\n              SCROLLBAR_RESERVED_SPACE +\n              (isLoading ? loading.count * (rowHeight + rowVerticalSpacing) : 0),\n          },\n        ]}\n      >\n        <View\n          aria-busy={isLoading}\n          style={[\n            styles.loadingPlaceholder,\n            {\n              top: rowsHeight,\n              marginLeft: horizontalPadding * 2,\n              marginRight: horizontalPadding * 2,\n            },\n          ]}\n        >\n          {isLoading\n            ? match(mode)\n                .with(\"tile\", () => (\n                  <FixedListViewPlaceholder\n                    count={loading.count}\n                    headerHeight={headerHeight}\n                    rowHeight={rowHeight}\n                    rowVerticalSpacing={rowVerticalSpacing}\n                    paddingHorizontal={0}\n                  />\n                ))\n                .with(\"plain\", () => (\n                  <PlainListViewPlaceholder\n                    count={loading.count}\n                    headerHeight={headerHeight}\n                    rowHeight={rowHeight}\n                    rowVerticalSpacing={rowVerticalSpacing}\n                    paddingHorizontal={0}\n                  />\n                ))\n                .exhaustive()\n            : null}\n        </View>\n\n        <View style={[styles.backgroundRows, { top: headerHeight }]}>{backgroundRows}</View>\n\n        <View style={styles.scrollContentContainer} ref={scrollContentsRef}>\n          {stickedToStartColumns.length > 0 ? (\n            <View\n              style={[\n                styles.stickyColumn,\n                {\n                  width: stickedToStartColumnsWidth + horizontalPadding,\n                  paddingLeft: horizontalPadding,\n                },\n              ]}\n            >\n              <View\n                style={[\n                  styles.headingSegment,\n                  { height: headerHeight, backgroundColor: headerBackgroundColor },\n                ]}\n              >\n                <HeaderSegment\n                  columns={stickedToStartColumns}\n                  extraInfo={extraInfo}\n                  viewId={viewId}\n                  width={stickedToStartColumnsWidth}\n                />\n\n                <View\n                  style={[\n                    styles.stickyColumnStartOverflow,\n                    { width: horizontalPadding, backgroundColor: headerBackgroundColor },\n                  ]}\n                />\n\n                <View style={[styles.topGradient, isScrolled && styles.visibleTopGradient]} />\n              </View>\n\n              <View style={{ height: rowsHeight }}>{startRows}</View>\n            </View>\n          ) : null}\n\n          <View\n            style={[\n              styles.centerColumnsContainer,\n              {\n                paddingLeft: stickedToStartColumns.length === 0 ? horizontalPadding : ZERO,\n                paddingRight: stickedToEndColumns.length === 0 ? horizontalPadding : ZERO,\n              },\n            ]}\n          >\n            <View\n              style={[\n                styles.headingSegment,\n                { height: headerHeight, backgroundColor: headerBackgroundColor },\n              ]}\n            >\n              <ScrollView\n                ref={centerHeadersRef}\n                horizontal={true}\n                onLayout={onCenterTrackLayout}\n                style={styles.centerColumns}\n                contentContainerStyle={{\n                  minWidth:\n                    centerColumnsWidth +\n                    (stickedToStartColumns.length === 0 ? horizontalPadding : 0) +\n                    (stickedToEndColumns.length === 0 ? horizontalPadding : 0),\n                }}\n              >\n                <HeaderSegment\n                  columns={columns}\n                  extraInfo={extraInfo}\n                  viewId={viewId}\n                  width={centerColumnsWidth}\n                />\n              </ScrollView>\n\n              <View style={[styles.topGradient, isScrolled && styles.visibleTopGradient]} />\n            </View>\n\n            <ScrollView\n              horizontal={true}\n              ref={centerColumnsRef}\n              style={styles.centerColumns}\n              contentContainerStyle={[\n                styles.centerColumnsContentContainer,\n                {\n                  minWidth:\n                    centerColumnsWidth +\n                    (stickedToStartColumns.length === 0 ? horizontalPadding : 0) +\n                    (stickedToEndColumns.length === 0 ? horizontalPadding : 0),\n                },\n              ]}\n            >\n              {centerRows}\n            </ScrollView>\n\n            <ScrollView\n              ref={horizontalScrollbarRef}\n              horizontal={true}\n              style={styles.horizontalScrollbar}\n              contentContainerStyle={{\n                minWidth:\n                  centerColumnsWidth +\n                  (stickedToStartColumns.length === 0 ? horizontalPadding : 0) +\n                  (stickedToEndColumns.length === 0 ? horizontalPadding : 0),\n              }}\n            />\n\n            {stickedToStartColumns.length > 0 && hasHorizontalScroll ? (\n              <View\n                style={[\n                  styles.leftToRightGradient,\n                  {\n                    maxHeight: data.length * totalRowHeight,\n                    top: headerHeight,\n                    bottom: SCROLLBAR_RESERVED_SPACE + rowVerticalSpacing / 2,\n                  },\n                  shouldShowStartGradient && styles.visibleGradient,\n                ]}\n              ></View>\n            ) : null}\n\n            {stickedToEndColumns.length > 0 && hasHorizontalScroll ? (\n              <View\n                style={[\n                  styles.rightToLeftGradient,\n                  {\n                    maxHeight: data.length * totalRowHeight,\n                    top: headerHeight,\n                    bottom: SCROLLBAR_RESERVED_SPACE + rowVerticalSpacing / 2,\n                  },\n                  shouldShowEndGradient && styles.visibleGradient,\n                ]}\n              ></View>\n            ) : null}\n          </View>\n\n          {stickedToEndColumns.length > 0 ? (\n            <View\n              style={[\n                styles.stickyColumn,\n                {\n                  width: stickedToEndColumnsWidth + horizontalPadding,\n                  paddingRight: horizontalPadding,\n                },\n              ]}\n            >\n              <View\n                style={[\n                  styles.headingSegment,\n                  { height: headerHeight, backgroundColor: headerBackgroundColor },\n                ]}\n              >\n                <View\n                  style={[\n                    styles.stickyColumnEndOverflow,\n                    { width: horizontalPadding, backgroundColor: headerBackgroundColor },\n                  ]}\n                />\n\n                <HeaderSegment\n                  columns={stickedToEndColumns}\n                  extraInfo={extraInfo}\n                  viewId={viewId}\n                  width={stickedToEndColumnsWidth}\n                />\n\n                <View style={[styles.topGradient, isScrolled && styles.visibleTopGradient]} />\n              </View>\n\n              <View style={{ height: rowsHeight }}>{endRows}</View>\n            </View>\n          ) : null}\n        </View>\n      </ScrollView>\n\n      {data.length === 0 && isNotNullish(renderEmptyList) && !isLoading ? (\n        <ScrollView\n          style={styles.emptyListContainer}\n          contentContainerStyle={styles.emptyListContentContainer}\n        >\n          {renderEmptyList()}\n        </ScrollView>\n      ) : null}\n\n      <View ref={endFocusAnchorRef} tabIndex={0} />\n    </View>\n  );\n};\n\ntype PlaceholderProps = {\n  count: number;\n  rowHeight: number;\n  rowVerticalSpacing: number;\n  groupHeaderHeight?: number;\n  headerHeight?: number;\n  paddingHorizontal?: number;\n};\n\nexport const FixedListViewPlaceholder = ({\n  count,\n  rowHeight,\n  rowVerticalSpacing,\n  groupHeaderHeight,\n  headerHeight,\n  paddingHorizontal = HORIZONTAL_SAFE_AREA,\n}: PlaceholderProps) => {\n  const totalRowHeight = rowHeight + rowVerticalSpacing;\n\n  return (\n    <View style={[styles.container, styles.containerTile, { paddingHorizontal }]}>\n      {isNotNullish(headerHeight) ? <View style={{ height: headerHeight }} /> : null}\n      {isNotNullish(groupHeaderHeight) ? <View style={{ height: headerHeight }} /> : null}\n\n      <View>\n        {Array.from({ length: count }, (_, index) => {\n          const top = index * totalRowHeight + rowVerticalSpacing / 2;\n\n          return (\n            <Fragment key={String(index)}>\n              <MemoizedRowBackground\n                isHovered={false}\n                isHighlighted={false}\n                absoluteIndex={index}\n                top={top}\n                rowVerticalSpacing={rowVerticalSpacing}\n                id={String(index)}\n                rowHeight={rowHeight}\n                onMouseEnter={noop}\n                onMouseLeave={noop}\n                mode=\"tile\"\n              />\n\n              <View\n                style={[styles.placeholderRowContainer, { top, height: totalRowHeight }]}\n                key={String(index)}\n              >\n                <View style={styles.placeholderRow} />\n                <Space width={32} />\n                <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                <Space width={32} />\n\n                <View style={styles.placeholderRowEnd}>\n                  <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                </View>\n              </View>\n            </Fragment>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\nexport const PlainListViewPlaceholder = ({\n  count,\n  rowHeight,\n  rowVerticalSpacing,\n  groupHeaderHeight,\n  headerHeight,\n  paddingHorizontal = HORIZONTAL_SAFE_AREA,\n}: PlaceholderProps) => {\n  const totalRowHeight = rowHeight + rowVerticalSpacing;\n\n  return (\n    <View style={[styles.container, { paddingHorizontal }]}>\n      {isNotNullish(headerHeight) ? <View style={{ height: headerHeight }} /> : null}\n      {isNotNullish(groupHeaderHeight) ? <View style={{ height: headerHeight }} /> : null}\n\n      <View>\n        {Array.from({ length: count }, (_, index) => {\n          const top = index * totalRowHeight + rowVerticalSpacing / 2;\n\n          return (\n            <Fragment key={String(index)}>\n              <MemoizedRowBackground\n                isHovered={false}\n                isHighlighted={false}\n                absoluteIndex={index}\n                top={top}\n                rowVerticalSpacing={rowVerticalSpacing}\n                id={String(index)}\n                rowHeight={rowHeight}\n                onMouseEnter={noop}\n                onMouseLeave={noop}\n                mode=\"plain\"\n              />\n\n              <View\n                style={[\n                  styles.placeholderRowContainer,\n                  styles.placeholderRowContainerPlain,\n                  { top, height: totalRowHeight },\n                ]}\n                key={String(index)}\n              >\n                <View style={styles.placeholderRow} />\n                <Space width={32} />\n                <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                <Space width={32} />\n\n                <View style={styles.placeholderRowEnd}>\n                  <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                </View>\n              </View>\n            </Fragment>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\ntype EmptyProps = {\n  icon: IconName;\n  borderedIcon?: boolean;\n  title?: string;\n  subtitle?: ReactNode;\n  children?: ReactNode;\n};\n\nexport const FixedListViewEmpty = ({\n  icon,\n  borderedIcon = false,\n  title,\n  subtitle,\n  children,\n}: EmptyProps) => (\n  <View style={styles.emptyList}>\n    {borderedIcon ? (\n      <BorderedIcon name={icon} />\n    ) : (\n      <Icon name={icon} size={96} color={colors.current.primary} />\n    )}\n\n    <Space height={32} />\n\n    {isNotNullish(title) && (\n      <LakeHeading level={3} variant=\"h3\" color={colors.gray[700]} align=\"center\">\n        {title}\n      </LakeHeading>\n    )}\n\n    <Space height={8} />\n\n    {isNotNullish(subtitle) && <LakeText align=\"center\">{subtitle}</LakeText>}\n\n    <Space height={8} />\n\n    {children}\n  </View>\n);\n","import { ComponentProps, ReactNode, useCallback, useState } from \"react\";\nimport { Clipboard, GestureResponderEvent, StyleSheet, View } from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { visuallyHiddenStyle } from \"../constants/commonStyles\";\nimport { ColorVariants, colors, spacings } from \"../constants/design\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { LakeText, TextVariant } from \"./LakeText\";\nimport { LakeTooltip } from \"./LakeTooltip\";\nimport { Pressable } from \"./Pressable\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  cellContainer: {\n    display: \"flex\",\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  balanceCellContainer: {\n    width: \"100%\",\n  },\n  cell: {\n    display: \"flex\",\n    paddingHorizontal: spacings[16],\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  disabledCellHeader: {\n    cursor: \"text\",\n  },\n  icon: {\n    alignSelf: \"stretch\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingHorizontal: spacings[4],\n  },\n  iconContainer: {\n    flexDirection: \"row\",\n    alignSelf: \"stretch\",\n    alignItems: \"stretch\",\n    justifyContent: \"center\",\n  },\n  centeredCell: {\n    justifyContent: \"center\",\n  },\n  endAlignedCell: {\n    justifyContent: \"flex-end\",\n  },\n  regularText: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    width: 1,\n    flexGrow: 1,\n    whiteSpace: \"nowrap\",\n  },\n  mediumText: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    width: 1,\n    flexGrow: 1,\n    whiteSpace: \"nowrap\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  colorPatch: {\n    flexGrow: 1,\n  },\n  alternativeText: visuallyHiddenStyle,\n  sortIcon: {\n    transitionProperty: \"transform\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  sortIconReversed: {\n    transform: \"rotate(-180deg)\",\n  },\n  cellAction: {\n    paddingVertical: spacings[16],\n    paddingHorizontal: spacings[8],\n  },\n  underline: {\n    boxShadow: \"inset 0 -2px currentColor\",\n  },\n  sortHorizontalBar: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 2,\n    bottom: -10,\n    backgroundColor: colors.current[500],\n    borderBottomColor: colors.current[500],\n  },\n});\n\ntype Justify = \"flex-start\" | \"center\" | \"flex-end\";\ntype SortDirection = \"Desc\" | \"Asc\";\n\nexport const SimpleHeaderCell = ({\n  text,\n  sort,\n  justifyContent = \"flex-start\",\n  onPress,\n}: {\n  text: string;\n  justifyContent?: Justify;\n  sort?: SortDirection;\n  onPress?: (direction: SortDirection) => void;\n}) => {\n  const sortActive = isNotNullish(sort) && isNotNullish(onPress);\n  const disabled = isNullish(onPress);\n\n  return (\n    <Pressable\n      onPress={() => {\n        onPress?.(\n          match(sort)\n            .returnType<SortDirection>()\n            .with(\"Desc\", () => \"Asc\")\n            .with(\"Asc\", () => \"Desc\")\n            .otherwise(() => \"Desc\"),\n        );\n      }}\n      disabled={disabled}\n      style={[styles.cellContainer, disabled && styles.disabledCellHeader]}\n      role=\"columnheader\"\n    >\n      {({ hovered }) => (\n        <View style={[styles.cell, { justifyContent }]}>\n          <View>\n            <Box direction=\"row\" alignItems=\"center\">\n              <LakeText\n                numberOfLines={1}\n                variant=\"medium\"\n                color={sortActive ? colors.current[500] : colors.gray[900]}\n                style={{\n                  textAlign: match(justifyContent)\n                    .with(\"flex-start\", () => \"left\" as const)\n                    .with(\"center\", () => \"center\" as const)\n                    .with(\"flex-end\", () => \"right\" as const)\n                    .exhaustive(),\n                }}\n              >\n                {text}\n              </LakeText>\n\n              {isNotNullish(onPress) ? (\n                <>\n                  <Space width={8} />\n\n                  <Box style={[styles.sortIcon, sort === \"Asc\" && styles.sortIconReversed]}>\n                    <Icon\n                      size={15}\n                      color={sortActive ? colors.current[500] : colors.gray[500]}\n                      name={sortActive ? \"arrow-down-filled\" : \"chevron-up-down-regular\"}\n                    />\n                  </Box>\n                </>\n              ) : null}\n            </Box>\n\n            {sortActive ? (\n              <View style={styles.sortHorizontalBar} />\n            ) : hovered ? (\n              <View style={[styles.sortHorizontalBar, { backgroundColor: colors.gray[900] }]} />\n            ) : null}\n          </View>\n        </View>\n      )}\n    </Pressable>\n  );\n};\n\nexport const ColorPatchCell = ({\n  isHovered,\n  alternativeText,\n  color,\n}: {\n  isHovered: boolean;\n  alternativeText?: string;\n  color: ColorVariants;\n}) => {\n  return isHovered ? (\n    <View style={[styles.colorPatch, { backgroundColor: colors[color].primary }]}>\n      {isNotNullish(alternativeText) ? (\n        <LakeText style={styles.alternativeText}>{alternativeText}</LakeText>\n      ) : null}\n    </View>\n  ) : null;\n};\n\nexport const SimpleTitleCell = ({\n  isHighlighted = false,\n  text,\n  tooltip,\n}: {\n  isHighlighted?: boolean;\n  text: string;\n  tooltip?: Omit<ComponentProps<typeof LakeTooltip>, \"children\">;\n}) => (\n  <View style={styles.cell}>\n    <LakeText\n      numberOfLines={1}\n      color={isHighlighted ? colors.current.primary : colors.gray[900]}\n      style={styles.regularText}\n      variant=\"medium\"\n      tooltip={tooltip}\n    >\n      {text}\n    </LakeText>\n  </View>\n);\n\nexport const SimpleRegularTextCell = ({\n  variant = \"regular\",\n  text,\n  textAlign = \"left\",\n  color = colors.gray[900],\n}: {\n  variant?: TextVariant;\n  text: string;\n  textAlign?: \"left\" | \"center\" | \"right\";\n  color?: string;\n}) => {\n  return (\n    <View style={styles.cell}>\n      <LakeText align={textAlign} color={color} style={styles.regularText} variant={variant}>\n        {text}\n      </LakeText>\n    </View>\n  );\n};\n\nexport const CopyableRegularTextCell = ({\n  variant = \"regular\",\n  text,\n  textToCopy,\n  copyWording,\n  copiedWording,\n  tooltip,\n}: {\n  variant?: TextVariant;\n  text: string;\n  textToCopy?: string;\n  copyWording: string;\n  copiedWording: string;\n  tooltip?: Omit<ComponentProps<typeof LakeTooltip>, \"children\">;\n}) => {\n  const [visibleState, setVisibleState] = useState<\"copy\" | \"copied\">(\"copy\");\n  const clipboardText = textToCopy ?? text;\n\n  const onPress = useCallback(\n    (event: GestureResponderEvent) => {\n      event.preventDefault();\n      Clipboard.setString(clipboardText);\n      setVisibleState(\"copied\");\n    },\n    [clipboardText],\n  );\n\n  return (\n    <View style={styles.cell}>\n      <LakeTooltip\n        placement=\"right\"\n        onHide={() => setVisibleState(\"copy\")}\n        togglableOnFocus={true}\n        content={visibleState === \"copy\" ? copyWording : copiedWording}\n        containerStyle={styles.iconContainer}\n      >\n        <Pressable\n          role=\"button\"\n          aria-label={copyWording}\n          onPress={onPress}\n          style={({ hovered }) => [styles.icon, hovered && styles.underline]}\n        >\n          {({ hovered }) => (\n            <Icon name={hovered ? \"copy-filled\" : \"copy-regular\"} color=\"currentColor\" size={14} />\n          )}\n        </Pressable>\n      </LakeTooltip>\n\n      <Space width={4} />\n\n      <LakeText\n        tooltip={tooltip}\n        color={colors.gray[900]}\n        style={styles.regularText}\n        variant={variant}\n      >\n        {text}\n      </LakeText>\n    </View>\n  );\n};\n\n// TODO: handle `+` sign properly\nexport const BalanceCell = ({\n  value,\n  currency,\n  originalValue,\n  formatCurrency,\n  textAlign = \"right\",\n  variant = \"medium\",\n}: {\n  value: number;\n  currency: string;\n  originalValue?: { value: number; currency: string };\n  formatCurrency: (value: number, currency: string) => string;\n  textAlign?: \"left\" | \"center\" | \"right\";\n  variant?: TextVariant;\n}) => {\n  return (\n    <View style={styles.balanceCellContainer}>\n      <View style={styles.cell}>\n        <LakeText\n          align={textAlign}\n          color={colors.gray[900]}\n          variant={variant}\n          style={[\n            styles.mediumText,\n            {\n              justifyContent: match(textAlign)\n                .with(\"left\", () => \"flex-start\" as const)\n                .with(\"center\", () => \"center\" as const)\n                .with(\"right\", () => \"flex-end\" as const)\n                .exhaustive(),\n            },\n            value > 0 && { color: colors.positive.primary },\n            value < 0 && { color: colors.negative.primary },\n          ]}\n        >\n          {value > 0 && \"+\"}\n          {formatCurrency(value, currency)}\n        </LakeText>\n      </View>\n\n      {isNotNullish(originalValue) && originalValue.currency !== currency && (\n        <View style={styles.cell}>\n          <LakeText\n            style={styles.mediumText}\n            align={textAlign}\n            color={colors.gray[500]}\n            variant=\"smallRegular\"\n          >\n            {originalValue.value > 0 && \"+\"}\n            {formatCurrency(originalValue.value, originalValue.currency)}\n          </LakeText>\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport const LinkCell = ({\n  children,\n  external = false,\n  onPress,\n  variant = \"medium\",\n  tooltip,\n  buttonPosition = \"start\",\n}: {\n  children: ReactNode;\n  onPress: () => void;\n  external?: boolean;\n  variant?: TextVariant;\n  tooltip?: Omit<ComponentProps<typeof LakeTooltip>, \"children\">;\n  buttonPosition?: \"start\" | \"end\";\n}) => {\n  const ArrowButton = () => (\n    <Pressable\n      style={({ hovered }) => [styles.icon, hovered && styles.underline]}\n      onPress={event => {\n        event.preventDefault();\n        onPress();\n      }}\n    >\n      <Icon size={14} name={external ? \"open-regular\" : \"arrow-right-filled\"} />\n    </Pressable>\n  );\n\n  return (\n    <View style={styles.cell}>\n      {buttonPosition === \"start\" && (\n        <>\n          <ArrowButton />\n          <Space width={8} />\n        </>\n      )}\n\n      <LakeText\n        color={colors.gray[900]}\n        variant={variant}\n        style={styles.mediumText}\n        tooltip={tooltip}\n      >\n        {children}\n      </LakeText>\n\n      {buttonPosition === \"end\" && (\n        <>\n          <Space width={8} />\n          <ArrowButton />\n        </>\n      )}\n    </View>\n  );\n};\n\nexport const StartAlignedCell = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.cell}>{children}</View>;\n};\n\nexport const CenteredCell = ({ children }: { children: ReactNode }) => {\n  return <View style={[styles.cell, styles.centeredCell]}>{children}</View>;\n};\n\nexport const EndAlignedCell = ({ children }: { children: ReactNode }) => {\n  return <View style={[styles.cell, styles.endAlignedCell]}>{children}</View>;\n};\n\nexport const CellAction = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.cellAction}>{children}</View>;\n};\n"],"names":["HORIZONTAL_SAFE_AREA","SCROLLBAR_RESERVED_SPACE","styles","StyleSheet","invariantColors","backgroundColor","shadows","colors","radii","spacings","RowBackground","absoluteIndex","id","isHovered","isHighlighted","top","rowHeight","rowVerticalSpacing","onMouseEnter","onMouseLeave","mode","containerRef","useRef","useHover","jsx","View","MemoizedRowBackground","memo","SEGMENTS_MAP","RowSegment","columns","item","style","viewId","segmentColumn","width","extraInfo","createRowWrapper","focusId","totalRowHeight","minWidth","wrapper","cloneElement","isNullish","renderCell","index","columnId","paddedIndex","paddedCellIndex","MemoizedRowSegment","HeaderSegment","title","renderTitle","findNextFocusableElement","sortedCellIds","currentCellIndex","direction","nextCellId","isNotNullish","previousCell","focusableElements","getFocusableElements","nextFocusableElement","last","first","EMPTY_COLUMNS","ZERO","FixedListView","originalData","keyExtractor","highlightedRowId","horizontalPadding","headerBackgroundColor","headerHeight","renderThreshold","initialStickedToStartColumns","initialColumns","initialStickedToEndColumns","onEndReached","onEndReachedThresholdPx","getRowLink","renderEmptyList","loading","useState","uuid","centerHeadersRef","centerColumnsRef","horizontalScrollbarRef","rowsHeight","totalHeight","data","renderedRangeStartIndex","renderedRangeEndIndex","setDataAndRenderRange","startFocusAnchorRef","endFocusAnchorRef","hasHorizontalScroll","setHasHorizontalScroll","shouldAvoidStickyColumns","setShouldAvoidStickyColumns","shouldShowStartGradient","setShouldShowStartGradient","shouldShowEndGradient","setShouldShowEndGradient","hoveredRow","setHoveredRow","currentScrollY","lastKnownHeight","stickedToStartColumns","stickedToEndColumns","useMemo","isScrolled","setIsScrolled","removeHoveredRow","useCallback","initialStickedToStartColumnsWidth","total","initialStickedToEndColumnsWidth","stickedToStartColumnsWidth","stickedToEndColumnsWidth","centerColumnsWidth","centerSegmentStyle","customLinkElement","backgroundRows","startRows","centerRows","endRows","length","key","isHoveredRow","isHighlightedRow","useLayoutEffect","lastHorizontalScroll","useEffect","centerColumns","centerHeaders","horizontalScrollbar","onColumnsScroll","now","scrollLeft","onHeadersScroll","onScrollbarScroll","onKeyDown","event","target","currentTarget","currentCell","currentCellId","firstFocusableElement","lastFocusableElement","sortedIndexOf","isTargetFirst","isTargetLast","_a","_b","prevRenderRange","prevRenderedRangeStartIndex","prevRenderedRangeEndIndex","onLayout","height","hasEndReachedBeenCalled","scrollTimeoutRef","scrollContentsRef","onScroll","y","contentHeight","onCenterTrackLayout","isLoading","jsxs","ScrollView","match","FixedListViewPlaceholder","PlainListViewPlaceholder","count","groupHeaderHeight","paddingHorizontal","_","Fragment","noop","Space","FixedListViewEmpty","icon","borderedIcon","subtitle","children","BorderedIcon","Icon","LakeHeading","LakeText","visuallyHiddenStyle","SimpleHeaderCell","text","sort","justifyContent","onPress","sortActive","disabled","Pressable","hovered","Box","ColorPatchCell","alternativeText","color","SimpleTitleCell","tooltip","SimpleRegularTextCell","variant","textAlign","LinkCell","external","buttonPosition","ArrowButton"],"mappings":"2jBAqIA,MAAAA,EAAA,GACAC,GAAA,GAEAC,EAAAC,GAAA,OAAA,CACA,KAAA,CACA,OAAA,EACA,UAAA,UACA,SAAA,CACA,EACA,UAAA,CACA,OAAA,EACA,UAAA,UACA,SAAA,CACA,EACA,cAAA,CACA,iBAAA,CAAAH,CACA,EACA,iBAAA,CACA,cAAA,MACA,WAAA,UACA,SAAA,CACA,EACA,uBAAA,CACA,SAAA,EACA,cAAA,MACA,WAAA,SACA,EACA,uBAAA,CACA,MAAA,EACA,SAAA,EACA,cAAA,SACA,WAAA,SACA,EACA,cAAA,CACA,SAAA,CACA,EACA,8BAAA,CACA,cAAA,SACA,SAAA,CACA,EACA,aAAA,CACA,SAAA,EACA,OAAA,CACA,EACA,0BAAA,CACA,SAAA,WACA,IAAA,EACA,OAAA,EACA,MAAA,MACA,EACA,wBAAA,CACA,SAAA,WACA,IAAA,EACA,OAAA,EACA,KAAA,MACA,EACA,WAAA,CACA,SAAA,WACA,KAAA,EACA,MAAA,EACA,QAAA,OACA,SAAA,EACA,UAAA,UACA,cAAA,MACA,WAAA,UACA,mBAAA,MACA,mBAAA,QACA,yBAAA,cACA,SAAA,QACA,EACA,eAAA,CACA,SAAA,SACA,IAAA,EACA,cAAA,MACA,WAAA,UACA,OAAA,CACA,EACA,QAAA,CACA,cAAA,MACA,WAAA,UACA,SAAA,QACA,EACA,gBAAA,CACA,SAAA,SACA,cAAA,MACA,WAAA,SACA,EACA,gBAAA,CACA,QAAA,CACA,EACA,oBAAA,CACA,SAAA,WACA,KAAA,EACA,IAAA,EACA,OAAA,OACA,MAAA,GACA,gBAAA,mEACA,QAAA,EACA,WAAA,4BACA,cAAA,MACA,EACA,oBAAA,CACA,SAAA,WACA,MAAA,EACA,IAAA,EACA,OAAA,OACA,MAAA,GACA,gBAAA,kEACA,QAAA,EACA,WAAA,4BACA,cAAA,MACA,EACA,oBAAA,CACA,SAAA,SACA,OAAA,EACA,kBAAA,EACA,kBAAAI,GAAA,YACA,SAAA,EACA,OAAAH,EACA,EACA,KAAA,CACA,cAAA,MACA,WAAA,SACA,EACA,QAAA,CACA,gBAAAI,EAAA,QACA,EACA,OAAA,CACA,gBAAAA,EAAA,OACA,EACA,UAAA,CACA,UAAAC,GAAA,IACA,EACA,iBAAA,CACA,UAAAA,GAAA,SACA,EACA,eAAA,CACA,YAAAC,EAAA,QAAA,QACA,YAAA,CACA,EACA,kBAAA,CACA,QAAA,OACA,cAAA,MACA,SAAA,EACA,WAAA,QACA,EACA,cAAA,CACA,aAAAC,EAAA,CAAA,EACA,mBAAA,MACA,mBAAA,QACA,yBAAA,aACA,EACA,mBAAA,CACA,mBAAA,MACA,mBAAA,QACA,yBAAA,aACA,EACA,uBAAA,CACA,SAAA,WACA,KAAA,EACA,MAAA,EACA,QAAA,OACA,cAAA,SACA,WAAA,UACA,eAAA,SACA,mBAAA,MACA,mBAAA,QACA,yBAAA,aACA,EACA,4BAAA,CACA,KAAA,IACA,MAAA,IACA,UAAA,gBAAAD,EAAA,KAAA,GAAA,CAAA,EACA,EACA,eAAA,CACA,SAAA,WACA,KAAAP,EACA,MAAAA,EACA,IAAA,EACA,OAAA,CACA,EACA,wBAAA,CACA,cAAA,MACA,WAAA,SACA,SAAA,WACA,IAAA,EACA,KAAA,GACA,MAAA,GACA,mBAAA,CACA,MAAA,CACA,QAAA,EACA,CACA,EACA,kBAAA,SACA,wBAAA,SACA,wBAAA,UACA,EACA,6BAAA,CACA,KAAA,EACA,EACA,eAAA,CACA,OAAA,GACA,MAAA,MACA,gBAAAO,EAAA,KAAA,GAAA,EACA,aAAAC,EAAA,CAAA,CACA,EACA,kBAAA,CACA,SAAA,EACA,cAAA,MACA,WAAA,SACA,eAAA,UACA,EACA,oBAAA,CACA,MAAA,KACA,EACA,uBAAA,CACA,SAAA,CACA,EACA,aAAA,CACA,oBAAAA,EAAA,CAAA,EACA,uBAAAA,EAAA,CAAA,CACA,EACA,cAAA,CACA,qBAAAA,EAAA,CAAA,EACA,wBAAAA,EAAA,CAAA,CACA,EACA,mBAAA,CACA,SAAA,WACA,IAAA,EACA,KAAA,EACA,MAAA,EACA,OAAA,EACA,gBAAAH,EAAA,OACA,EACA,0BAAA,CACA,cAAA,SACA,WAAA,SACA,eA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"}