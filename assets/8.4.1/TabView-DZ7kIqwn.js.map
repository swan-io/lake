{"version":3,"file":"TabView-DZ7kIqwn.js","sources":["../../../packages/lake/src/components/TabView.tsx"],"sourcesContent":["import { useLocation } from \"@swan-io/chicane\";\nimport {\n  Fragment,\n  ReactNode,\n  Ref,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n  PressableStateCallbackType,\n  StyleSheet,\n  Text,\n  TextProps,\n  View,\n  WebRole,\n} from \"react-native\";\nimport { P, match } from \"ts-pattern\";\nimport {\n  animations,\n  backgroundColor,\n  colors,\n  negativeSpacings,\n  radii,\n  shadows,\n  spacings,\n  texts,\n} from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { noop } from \"../utils/function\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { FocusTrap } from \"./FocusTrap\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeText } from \"./LakeText\";\nimport { Link } from \"./Link\";\nimport { PressableText, PressableTextProps } from \"./Pressable\";\nimport { Space, SpacingValue } from \"./Space\";\nimport { TransitionView } from \"./TransitionView\";\n\nconst TABS_HEIGHT = 40;\nexport const tabsViewHeight = TABS_HEIGHT + 1;\n\ntype Tab = ({ id: string } | { url: string }) & {\n  count?: number;\n  icon?: IconName;\n  label: string;\n  withSeparator?: boolean;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderBottomWidth: 1,\n    borderBottomColor: colors.gray[100],\n    zIndex: 10,\n  },\n  link: {\n    ...texts.medium,\n    position: \"relative\",\n    color: colors.gray[700],\n    height: TABS_HEIGHT,\n    whiteSpace: \"nowrap\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  activeLink: {\n    color: colors.current[500],\n    boxShadow: `inset 0 -2px ${colors.gray[700]}`,\n  },\n  hoveredLink: {\n    boxShadow: `inset 0 -2px ${colors.gray[700]}`,\n  },\n  underline: {\n    position: \"absolute\",\n    bottom: 0,\n    height: 2,\n    width: 1,\n    backgroundColor: colors.current[500],\n  },\n  animatedUnderline: {\n    transformOrigin: \"0 0\",\n    transition: \"200ms ease-in-out transform\",\n  },\n  placeholder: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    visibility: \"hidden\",\n    flexDirection: \"row\",\n    alignItems: \"flex-end\",\n    overflow: \"hidden\",\n    pointerEvents: \"none\",\n  },\n  count: {\n    ...texts.smallRegular,\n    color: colors.current[500],\n    backgroundColor: colors.current[50],\n    borderColor: colors.current[100],\n    borderWidth: 1,\n    borderRadius: radii[4],\n    paddingHorizontal: spacings[4],\n    minWidth: spacings[24],\n    display: \"inline-block\",\n    textAlign: \"center\",\n  },\n  dropdownHandleContainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    alignSelf: \"stretch\",\n  },\n  dropdownPlacement: {\n    position: \"absolute\",\n    right: 0,\n    top: \"100%\",\n  },\n  dropdown: {\n    position: \"absolute\",\n    right: 0,\n    top: \"100%\",\n    backgroundColor: backgroundColor.accented,\n    borderRadius: radii[8],\n    boxShadow: shadows.modal,\n    paddingVertical: spacings[8],\n  },\n  dropdownLink: {\n    ...texts.regular,\n    paddingHorizontal: spacings[16],\n    paddingVertical: spacings[8],\n    whiteSpace: \"nowrap\",\n  },\n  dropdownLinkTextHovered: {\n    backgroundColor: colors.gray[50],\n  },\n  dropdownLinkTextActive: {\n    boxShadow: `inset 3px 0 ${colors.current.primary}`,\n    color: colors.current.primary,\n  },\n  separator: {\n    position: \"absolute\",\n    top: 0,\n    left: negativeSpacings[16],\n    bottom: 0,\n    width: 1,\n    backgroundColor: colors.gray[100],\n  },\n  sticky: {\n    backgroundColor: backgroundColor.default,\n    position: \"sticky\",\n    top: -1,\n  },\n});\n\ntype TabViewLinkProps = {\n  onChange: ((id: string) => void) | undefined;\n  tab: Tab;\n  children: ReactNode;\n  style: (state: PressableStateCallbackType & { active: boolean }) => TextProps[\"style\"];\n  role?: WebRole;\n  activeTabId: string | undefined;\n  onFocus?: PressableTextProps[\"onFocus\"];\n  onBlur?: PressableTextProps[\"onBlur\"];\n  onPress?: () => void;\n  ariaCurrentValue?: \"page\" | \"location\";\n};\n\nconst TabViewLink = forwardRef<Text, TabViewLinkProps>(\n  ({ children, style, tab, onChange, activeTabId, onBlur, onFocus, onPress }, ref) => {\n    return match(tab)\n      .with({ url: P.string }, ({ url }) => (\n        <Link ref={ref} to={url} style={style} onFocus={onFocus} onBlur={onBlur} onPress={onPress}>\n          {children}\n        </Link>\n      ))\n      .with({ id: P.string }, ({ id }) => {\n        const isActive = id === activeTabId;\n\n        return (\n          <PressableText\n            ref={ref}\n            style={state => style({ ...state, active: isActive })}\n            onPress={() => {\n              onChange?.(id);\n              onPress?.();\n            }}\n            onFocus={onFocus}\n            onBlur={onBlur}\n          >\n            {children}\n          </PressableText>\n        );\n      })\n      .exhaustive();\n  },\n);\n\nconst Dropdown = ({\n  tabs,\n  onHoverStart,\n  onHoverEnd,\n  onLinkFocus,\n  onLinkBlur,\n  onLinkPress,\n  activeTabId,\n  onChange,\n}: {\n  tabs: Tab[];\n  onHoverStart: () => void;\n  onHoverEnd: () => void;\n  onLinkFocus: () => void;\n  onLinkBlur: () => void;\n  onLinkPress: () => void;\n  activeTabId: string | undefined;\n  onChange: ((id: string) => void) | undefined;\n}) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart,\n    onHoverEnd,\n  });\n\n  return (\n    <View role=\"menu\" style={styles.dropdown} ref={containerRef}>\n      {tabs.map(tab => {\n        const tabId = getTabId(tab);\n\n        return (\n          <TabViewLink\n            onChange={onChange}\n            key={tabId}\n            activeTabId={activeTabId}\n            tab={tab}\n            onFocus={onLinkFocus}\n            onBlur={onLinkBlur}\n            onPress={onLinkPress}\n            role=\"menuitem\"\n            ariaCurrentValue=\"location\"\n            style={({ active, hovered }) => [\n              styles.dropdownLink,\n              active && styles.dropdownLinkTextActive,\n              hovered && styles.dropdownLinkTextHovered,\n            ]}\n          >\n            {tab.label}\n          </TabViewLink>\n        );\n      })}\n    </View>\n  );\n};\n\ntype DropdownOpeningState = \"Open\" | \"OpenFromFocus\" | \"ForcedOpen\" | \"Closed\" | \"ForcedClosed\";\n\ntype DropdownAction = \"Open\" | \"FocusHandle\" | \"Close\" | \"ForceClose\" | \"ForceToggle\";\n\nconst SHOULD_AUTOFOCUS = new Set<DropdownOpeningState>([\"ForcedOpen\", \"OpenFromFocus\"]);\nconst SHOULD_OPEN = new Set<DropdownOpeningState>([\"Open\", \"ForcedOpen\", \"OpenFromFocus\"]);\nconst SHOULD_LOCK_FOCUS = new Set<DropdownOpeningState>([\"ForcedOpen\"]);\n\nconst DropdownItems = forwardRef<\n  View,\n  {\n    tabs: Tab[];\n    currentUrl: string;\n    otherLabel: string;\n    activeTabId: string | undefined;\n    onChange: ((id: string) => void) | undefined;\n  }\n>(({ tabs, otherLabel, currentUrl, activeTabId, onChange }, ref) => {\n  const [openingStatus, dispatch] = useReducer(\n    (state: DropdownOpeningState, action: DropdownAction): DropdownOpeningState => {\n      return match([action, state])\n        .returnType<DropdownOpeningState>()\n        .with(\n          [\"ForceToggle\", \"Closed\"],\n          [\"ForceToggle\", \"Open\"],\n          [\"ForceToggle\", \"ForcedClosed\"],\n          () => \"ForcedOpen\",\n        )\n        .with([\"ForceToggle\", \"OpenFromFocus\"], [\"ForceToggle\", \"ForcedOpen\"], () => \"ForcedClosed\")\n        .with([\"ForceClose\", P.any], () => \"ForcedClosed\")\n        .with([\"FocusHandle\", \"ForcedClosed\"], () => \"Closed\")\n        .with(\n          [\"Open\", \"ForcedOpen\"],\n          [\"FocusHandle\", \"ForcedOpen\"],\n          [\"Close\", \"ForcedOpen\"],\n          () => \"ForcedOpen\",\n        )\n        .with([\"Open\", P.any], () => \"Open\")\n        .with([\"FocusHandle\", P.any], () => \"OpenFromFocus\")\n        .with([\"Close\", P.any], () => \"Closed\")\n        .exhaustive();\n    },\n    \"Closed\",\n  );\n\n  const timeoutRef = useRef<number | undefined>(undefined);\n  const handleRef = useRef<View>(null);\n  const containerRef = useRef<View>(null);\n\n  const lastFocusTimeout = useRef<number | null>(null);\n  const {\n    onHandleFocus,\n    onLinkFocus,\n    onAnyBlur,\n    onHoverStart,\n    onHoverEnd,\n    onPress,\n    onPressOutside,\n    onEscapeKey,\n  } = useMemo(\n    () => ({\n      onHandleFocus: (event: NativeSyntheticEvent<React.FocusEvent>) => {\n        if (isNullish(containerRef.current)) {\n          return;\n        }\n        lastFocusTimeout.current = Date.now();\n        const container = containerRef.current as unknown as Element;\n        const focusEvent = event as unknown as FocusEvent;\n        // Don't reopen if leaving\n        if (!container.contains(focusEvent.relatedTarget as Node | null)) {\n          if (isNotNullish(timeoutRef.current)) {\n            clearTimeout(timeoutRef.current);\n          }\n          dispatch(\"FocusHandle\");\n        }\n      },\n      onLinkFocus: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"Open\");\n      },\n      onAnyBlur: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n      onHoverStart: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"Open\");\n      },\n\n      onHoverEnd: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n\n      onPress: () => {\n        if (lastFocusTimeout.current != null && Date.now() - lastFocusTimeout.current < 32) {\n          return;\n        }\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"ForceToggle\");\n      },\n\n      onPressOutside: (event: MouseEvent | TouchEvent) => {\n        if (isNotNullish(handleRef.current)) {\n          const handle = handleRef.current as unknown as Element;\n          if (handle.contains(event.target as Node | null)) {\n            return;\n          }\n        }\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        // Only force closing in case the focus comes directly to the handle\n        // Then put it back to a regular closed state\n        dispatch(\"ForceClose\");\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n\n      onEscapeKey: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"ForceClose\");\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    return () => {\n      if (isNotNullish(timeoutRef.current)) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  const shouldOpen = SHOULD_OPEN.has(openingStatus);\n  const shouldAutoFocus = SHOULD_AUTOFOCUS.has(openingStatus);\n  const shouldLockFocus = SHOULD_LOCK_FOCUS.has(openingStatus);\n\n  useHover(handleRef, {\n    onHoverStart,\n    onHoverEnd,\n  });\n\n  const mergedRef = useMergeRefs(containerRef, ref);\n\n  const activeTab = useMemo(\n    () => tabs.find(tab => isTabActive({ activeTabId, currentLocationURL: currentUrl, tab })),\n    [activeTabId, currentUrl, tabs],\n  );\n\n  return (\n    <View style={styles.dropdownHandleContainer} ref={mergedRef}>\n      <PressableText\n        ref={handleRef}\n        role=\"button\"\n        aria-expanded={shouldOpen}\n        aria-haspopup=\"true\"\n        onFocus={onHandleFocus}\n        onBlur={onAnyBlur}\n        onPress={onPress}\n        style={({ hovered }) => [\n          styles.link,\n          isNotNullish(activeTab) ? styles.activeLink : hovered ? styles.hoveredLink : null,\n        ]}\n      >\n        <Text>{otherLabel}</Text>\n        <Space width={8} />\n        <Text style={styles.count}>{tabs.length}</Text>\n        <Space width={4} />\n        <Icon name=\"chevron-down-filled\" size={12} />\n      </PressableText>\n\n      <TransitionView {...animations.fadeAndSlideInFromBottom} style={styles.dropdownPlacement}>\n        {shouldOpen ? (\n          <FocusTrap\n            autoFocus={shouldAutoFocus}\n            focusLock={shouldLockFocus}\n            returnFocus={shouldLockFocus}\n            onClickOutside={onPressOutside}\n            onEscapeKey={shouldLockFocus ? onEscapeKey : undefined}\n          >\n            <Dropdown\n              onChange={onChange}\n              activeTabId={activeTabId}\n              tabs={tabs}\n              onHoverStart={onHoverStart}\n              onHoverEnd={onHoverEnd}\n              onLinkFocus={onLinkFocus}\n              onLinkBlur={onAnyBlur}\n              onLinkPress={onEscapeKey}\n            />\n          </FocusTrap>\n        ) : null}\n      </TransitionView>\n    </View>\n  );\n});\n\ntype Props = {\n  activeTabId?: string;\n  onChange?: (id: string) => void;\n  tabs: Tab[];\n  otherLabel: string;\n  hideIfSingleItem?: boolean;\n  padding?: SpacingValue;\n  sticky?: boolean;\n};\n\ntype IsTabActiveParams = {\n  tab: Tab;\n  activeTabId: string | undefined;\n  currentLocationURL: string;\n};\nconst isTabActive = ({ tab, activeTabId, currentLocationURL }: IsTabActiveParams) =>\n  match(tab)\n    .with({ url: P.string }, ({ url }) => currentLocationURL.startsWith(url))\n    .with({ id: P.string }, ({ id }) => isNotNullish(activeTabId) && id === activeTabId)\n    .exhaustive();\n\nconst getTabId = (tab: Tab) =>\n  match(tab)\n    .with({ url: P.string }, ({ url }) => url)\n    .with({ id: P.string }, ({ id }) => id)\n    .exhaustive();\n\nexport const TabView = ({\n  tabs,\n  otherLabel,\n  hideIfSingleItem = true,\n  sticky = false,\n  padding,\n  activeTabId,\n  onChange,\n}: Props) => {\n  const containerRef = useRef<View | null>(null);\n  const placeholderRef = useRef<View | null>(null);\n  const otherPlaceholderRef = useRef<View | null>(null);\n\n  const linksRefs: Ref<Record<string, Text | null>> = useRef({});\n  const placeholderLinkRef: Ref<Record<string, Text | null>> = useRef({});\n  const [{ left, width }, setUnderlinePosition] = useState({ left: 0, width: 0 });\n  const [hasRendered, setHasRendered] = useState(false);\n  const [[kept, collapsed], setKeptCollapsed] = useState<[Tab[], Tab[]]>([[], []]);\n\n  const location = useLocation();\n  const { path } = location;\n  const currentLocationURL = location.toString();\n\n  useEffect(() => {\n    if (isNotNullish(linksRefs.current)) {\n      const values = Object.entries(linksRefs.current);\n      const container = containerRef.current;\n\n      for (const [tabId, node] of values) {\n        if (\n          (tabId === activeTabId || \"/\" + path.join(\"/\") === tabId) &&\n          isNotNullish(node) &&\n          isNotNullish(container)\n        ) {\n          node.measureLayout(\n            container as unknown as number,\n            (left, _, width) => {\n              const leftOffset = padding ?? 0;\n              setUnderlinePosition({ left: left - leftOffset, width });\n            },\n            noop,\n          );\n          return;\n        }\n      }\n    }\n\n    setUnderlinePosition({ left: 0, width: 0 });\n  }, [path, kept, collapsed, padding, activeTabId]);\n\n  useEffect(() => {\n    setHasRendered(width > 0);\n  }, [width]);\n\n  const reajustLayout = useCallback(\n    ({ width }: { container: Element; width: number }) => {\n      const items = tabs.map(tab => {\n        if (placeholderLinkRef.current) {\n          const tabId = getTabId(tab);\n          const ref = placeholderLinkRef.current[tabId];\n\n          if (isNotNullish(ref)) {\n            const element = ref as unknown as Element;\n            const width = element.getBoundingClientRect().width;\n\n            return { tab, width: width + 32 };\n          } else {\n            return { tab, width: 0 };\n          }\n        } else {\n          return { tab, width: 0 };\n        }\n      });\n\n      const kept: (Tab & { width: number })[] = [];\n      const collapsed: (Tab & { width: number })[] = [];\n\n      let cummulatedWidth = 0;\n\n      items.forEach(item => {\n        cummulatedWidth += item.width;\n\n        if (cummulatedWidth < width) {\n          kept.push({ ...item.tab, width: item.width });\n        } else {\n          if (isTabActive({ activeTabId, currentLocationURL, tab: item.tab })) {\n            while (\n              kept.length !== 0 &&\n              kept.reduce((acc, item) => acc + item.width, 0) + (item.width + 16) >= width\n            ) {\n              const last = kept.pop();\n\n              if (isNotNullish(last)) {\n                collapsed.unshift(last);\n                cummulatedWidth -= last.width;\n              }\n            }\n\n            kept.push({ ...item.tab, width: item.width });\n          } else {\n            collapsed.push({ ...item.tab, width: item.width });\n          }\n        }\n      });\n      const otherLabelRef = otherPlaceholderRef.current;\n      let otherLabelWidth = 100;\n      if (isNotNullish(otherLabelRef)) {\n        const otherLabel = otherLabelRef as unknown as Element;\n        otherLabelWidth = otherLabel.getBoundingClientRect().width;\n      }\n\n      const activeInKeptIndex = kept.findIndex(item =>\n        isTabActive({ activeTabId, currentLocationURL, tab: item }),\n      );\n\n      if (activeInKeptIndex !== -1) {\n        const activeInKept = kept[activeInKeptIndex];\n        const activeInKeptWidth = activeInKept?.width ?? 0;\n        const restInKept = [\n          ...kept.slice(0, activeInKeptIndex),\n          ...kept.slice(activeInKeptIndex + 1),\n        ];\n        while (\n          restInKept.length !== 0 &&\n          restInKept.reduce((acc, item) => acc + item.width, 0) +\n            activeInKeptWidth +\n            (collapsed.length >= 1 ? otherLabelWidth : 0) >=\n            width\n        ) {\n          const last = restInKept.pop();\n          if (isNotNullish(last)) {\n            collapsed.unshift(last);\n          }\n        }\n\n        const finalKept = [\n          ...restInKept.slice(0, activeInKeptIndex),\n          ...(activeInKept != null ? [activeInKept] : []),\n          ...restInKept.slice(activeInKeptIndex),\n        ];\n\n        setKeptCollapsed([finalKept, collapsed]);\n      } else {\n        setKeptCollapsed([kept, collapsed]);\n      }\n    },\n    [tabs, activeTabId, currentLocationURL],\n  );\n\n  const onLayout = useCallback(\n    ({\n      target,\n      nativeEvent: {\n        layout: { width },\n      },\n    }: LayoutChangeEvent) => {\n      reajustLayout({ container: target as unknown as Element, width });\n    },\n    [reajustLayout],\n  );\n\n  useLayoutEffect(() => {\n    const ref = placeholderRef.current;\n    if (ref) {\n      const element = ref as unknown as Element;\n      const width = element.getBoundingClientRect().width;\n      reajustLayout({ container: element, width });\n    }\n  }, [reajustLayout]);\n\n  if (tabs.length <= 1 && hideIfSingleItem) {\n    return null;\n  }\n\n  return (\n    <Box\n      alignItems=\"center\"\n      direction=\"row\"\n      role=\"tablist\"\n      ref={containerRef}\n      style={[styles.container, sticky && styles.sticky, { paddingHorizontal: padding }]}\n    >\n      <View style={styles.placeholder} aria-hidden={true} ref={placeholderRef} onLayout={onLayout}>\n        {tabs.map(tab => {\n          const { label, icon, count } = tab;\n          const tabId = getTabId(tab);\n\n          return (\n            <Fragment key={tabId}>\n              <TabViewLink\n                ref={ref => {\n                  if (placeholderLinkRef.current) {\n                    placeholderLinkRef.current[tabId] = ref;\n                  }\n                }}\n                activeTabId={activeTabId}\n                tab={tab}\n                onChange={onChange}\n                style={({ active, hovered }) => [\n                  styles.link,\n                  active ? styles.activeLink : hovered ? styles.hoveredLink : null,\n                ]}\n              >\n                {isNotNullish(icon) && (\n                  <>\n                    <Icon name={icon} size={16} color=\"currentColor\" />\n                    <Space width={8} />\n                  </>\n                )}\n\n                <Text>{label}</Text>\n\n                {count != null ? (\n                  <>\n                    <Space width={8} />\n                    <Text style={styles.count}>{count}</Text>\n                  </>\n                ) : null}\n              </TabViewLink>\n\n              <Space width={32} />\n            </Fragment>\n          );\n        })}\n\n        <LakeText ref={otherPlaceholderRef} style={styles.link}>\n          <Text>{otherLabel}</Text>\n          <Space width={8} />\n          <Text style={styles.count}>{tabs.length}</Text>\n          <Space width={4} />\n          <Icon name=\"chevron-down-filled\" size={12} />\n        </LakeText>\n      </View>\n\n      {kept.map(tab => {\n        const { label, icon, withSeparator, count } = tab;\n        const tabId = getTabId(tab);\n\n        return (\n          <Fragment key={tabId}>\n            <TabViewLink\n              ref={ref => {\n                if (linksRefs.current) {\n                  linksRefs.current[tabId] = ref;\n                }\n              }}\n              onChange={onChange}\n              activeTabId={activeTabId}\n              tab={tab}\n              role=\"tab\"\n              style={({ active, hovered }) => [\n                styles.link,\n                active ? styles.activeLink : hovered ? styles.hoveredLink : null,\n              ]}\n            >\n              {withSeparator === true && <View style={styles.separator} role=\"none\" />}\n\n              {isNotNullish(icon) && (\n                <>\n                  <Icon name={icon} size={16} color=\"currentColor\" />\n                  <Space width={8} />\n                </>\n              )}\n\n              <Text>{label}</Text>\n\n              {count != null ? (\n                <>\n                  <Space width={8} />\n                  <Text style={styles.count}>{count}</Text>\n                </>\n              ) : null}\n            </TabViewLink>\n\n            <Space width={32} />\n          </Fragment>\n        );\n      })}\n\n      {collapsed.length > 0 ? (\n        <DropdownItems\n          ref={ref => {\n            collapsed.forEach(item => {\n              if (linksRefs.current) {\n                const tabId = getTabId(item);\n                linksRefs.current[tabId] = ref;\n              }\n            });\n          }}\n          onChange={onChange}\n          tabs={collapsed}\n          currentUrl={currentLocationURL}\n          otherLabel={otherLabel}\n          activeTabId={activeTabId}\n        />\n      ) : null}\n\n      {hasRendered && (\n        <View\n          style={[\n            styles.underline,\n            styles.animatedUnderline,\n            { transform: `translateX(${left}px)`, width },\n          ]}\n        />\n      )}\n    </Box>\n  );\n};\n"],"names":["TABS_HEIGHT","styles","StyleSheet","colors","texts","radii","spacings","backgroundColor","shadows","negativeSpacings","TabViewLink","forwardRef","children","style","tab","onChange","activeTabId","onBlur","onFocus","onPress","ref","match","P","url","jsx","Link","id","isActive","PressableText","state","Dropdown","tabs","onHoverStart","onHoverEnd","onLinkFocus","onLinkBlur","onLinkPress","containerRef","useRef","useHover","View","tabId","getTabId","active","hovered","SHOULD_AUTOFOCUS","SHOULD_OPEN","SHOULD_LOCK_FOCUS","DropdownItems","otherLabel","currentUrl","openingStatus","dispatch","useReducer","action","timeoutRef","handleRef","lastFocusTimeout","onHandleFocus","onAnyBlur","onPressOutside","onEscapeKey","useMemo","event","isNullish","container","focusEvent","isNotNullish","useEffect","shouldOpen","shouldAutoFocus","shouldLockFocus","mergedRef","useMergeRefs","activeTab","isTabActive","jsxs","Text","Space","Icon","TransitionView","animations","FocusTrap","currentLocationURL","TabView","hideIfSingleItem","sticky","padding","placeholderRef","otherPlaceholderRef","linksRefs","placeholderLinkRef","left","width","setUnderlinePosition","useState","hasRendered","setHasRendered","kept","collapsed","setKeptCollapsed","location","useLocation","path","values","node","_","noop","reajustLayout","useCallback","items","cummulatedWidth","item","acc","last","otherLabelRef","otherLabelWidth","activeInKeptIndex","activeInKept","activeInKeptWidth","restInKept","finalKept","onLayout","target","useLayoutEffect","element","Box","label","icon","count","Fragment","LakeText","withSeparator"],"mappings":"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"}