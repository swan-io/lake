{"version":3,"file":"VirtualizedList-M3deEaKI.js","sources":["../../../packages/lake/src/components/Cells.tsx","../../../packages/lake/src/components/VirtualizedList.tsx"],"sourcesContent":["import { ComponentProps, ReactNode, useCallback, useState } from \"react\";\nimport { GestureResponderEvent, StyleSheet, View } from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { visuallyHiddenStyle } from \"../constants/commonStyles\";\nimport { ColorVariants, colors, spacings } from \"../constants/design\";\nimport { setClipboardText } from \"../utils/clipboard\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { LakeText, TextVariant } from \"./LakeText\";\nimport { LakeTooltip } from \"./LakeTooltip\";\nimport { Pressable } from \"./Pressable\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  cellContainer: {\n    display: \"flex\",\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  balanceCellContainer: {\n    width: \"100%\",\n  },\n  cell: {\n    display: \"flex\",\n    paddingHorizontal: spacings[16],\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  disabledCellHeader: {\n    cursor: \"text\",\n  },\n  icon: {\n    alignSelf: \"stretch\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingHorizontal: spacings[4],\n  },\n  iconContainer: {\n    flexDirection: \"row\",\n    alignSelf: \"stretch\",\n    alignItems: \"stretch\",\n    justifyContent: \"center\",\n  },\n  centeredCell: {\n    justifyContent: \"center\",\n  },\n  endAlignedCell: {\n    justifyContent: \"flex-end\",\n  },\n  regularText: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    width: 1,\n    flexGrow: 1,\n    whiteSpace: \"nowrap\",\n  },\n  mediumText: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    width: 1,\n    flexGrow: 1,\n    whiteSpace: \"nowrap\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  colorPatch: {\n    flexGrow: 1,\n  },\n  alternativeText: visuallyHiddenStyle,\n  sortIcon: {\n    transitionProperty: \"transform\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  sortIconReversed: {\n    transform: \"rotate(-180deg)\",\n  },\n  cellAction: {\n    paddingVertical: spacings[16],\n    paddingHorizontal: spacings[8],\n  },\n  underline: {\n    boxShadow: \"inset 0 -2px currentColor\",\n  },\n  sortHorizontalBar: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 2,\n    bottom: -10,\n    backgroundColor: colors.current[500],\n    borderBottomColor: colors.current[500],\n  },\n});\n\ntype Justify = \"flex-start\" | \"center\" | \"flex-end\";\ntype SortDirection = \"Desc\" | \"Asc\";\n\nexport const SimpleHeaderCell = ({\n  text,\n  sort,\n  justifyContent = \"flex-start\",\n  onPress,\n}: {\n  text: string;\n  justifyContent?: Justify;\n  sort?: SortDirection;\n  onPress?: (direction: SortDirection) => void;\n}) => {\n  const sortActive = isNotNullish(sort) && isNotNullish(onPress);\n  const disabled = isNullish(onPress);\n\n  return (\n    <Pressable\n      onPress={() => {\n        onPress?.(\n          match(sort)\n            .returnType<SortDirection>()\n            .with(\"Desc\", () => \"Asc\")\n            .with(\"Asc\", () => \"Desc\")\n            .otherwise(() => \"Desc\"),\n        );\n      }}\n      disabled={disabled}\n      style={[styles.cellContainer, disabled && styles.disabledCellHeader]}\n      role=\"columnheader\"\n    >\n      {({ hovered }) => (\n        <View style={[styles.cell, { justifyContent }]}>\n          <View>\n            <Box direction=\"row\" alignItems=\"center\">\n              <LakeText\n                numberOfLines={1}\n                variant=\"medium\"\n                color={sortActive ? colors.current[500] : colors.gray[900]}\n                style={{\n                  textAlign: match(justifyContent)\n                    .with(\"flex-start\", () => \"left\" as const)\n                    .with(\"center\", () => \"center\" as const)\n                    .with(\"flex-end\", () => \"right\" as const)\n                    .exhaustive(),\n                }}\n              >\n                {text}\n              </LakeText>\n\n              {isNotNullish(onPress) ? (\n                <>\n                  <Space width={8} />\n\n                  <Box style={[styles.sortIcon, sort === \"Asc\" && styles.sortIconReversed]}>\n                    <Icon\n                      size={15}\n                      color={sortActive ? colors.current[500] : colors.gray[500]}\n                      name={sortActive ? \"arrow-down-filled\" : \"chevron-up-down-regular\"}\n                    />\n                  </Box>\n                </>\n              ) : null}\n            </Box>\n\n            {sortActive ? (\n              <View style={styles.sortHorizontalBar} />\n            ) : hovered ? (\n              <View style={[styles.sortHorizontalBar, { backgroundColor: colors.gray[900] }]} />\n            ) : null}\n          </View>\n        </View>\n      )}\n    </Pressable>\n  );\n};\n\nexport const ColorPatchCell = ({\n  isHovered,\n  alternativeText,\n  color,\n}: {\n  isHovered: boolean;\n  alternativeText?: string;\n  color: ColorVariants;\n}) => {\n  return isHovered ? (\n    <View style={[styles.colorPatch, { backgroundColor: colors[color].primary }]}>\n      {isNotNullish(alternativeText) ? (\n        <LakeText style={styles.alternativeText}>{alternativeText}</LakeText>\n      ) : null}\n    </View>\n  ) : null;\n};\n\nexport const SimpleTitleCell = ({\n  isHighlighted = false,\n  text,\n  tooltip,\n}: {\n  isHighlighted?: boolean;\n  text: string;\n  tooltip?: Omit<ComponentProps<typeof LakeTooltip>, \"children\">;\n}) => (\n  <View style={styles.cell}>\n    <LakeText\n      numberOfLines={1}\n      color={isHighlighted ? colors.current.primary : colors.gray[900]}\n      style={styles.regularText}\n      variant=\"medium\"\n      tooltip={tooltip}\n    >\n      {text}\n    </LakeText>\n  </View>\n);\n\nexport const SimpleRegularTextCell = ({\n  variant = \"regular\",\n  text,\n  textAlign = \"left\",\n  color = colors.gray[900],\n}: {\n  variant?: TextVariant;\n  text: string;\n  textAlign?: \"left\" | \"center\" | \"right\";\n  color?: string;\n}) => {\n  return (\n    <View style={styles.cell}>\n      <LakeText align={textAlign} color={color} style={styles.regularText} variant={variant}>\n        {text}\n      </LakeText>\n    </View>\n  );\n};\n\nexport const CopyableRegularTextCell = ({\n  variant = \"regular\",\n  text,\n  textToCopy,\n  copyWording,\n  copiedWording,\n  tooltip,\n}: {\n  variant?: TextVariant;\n  text: string;\n  textToCopy?: string;\n  copyWording: string;\n  copiedWording: string;\n  tooltip?: Omit<ComponentProps<typeof LakeTooltip>, \"children\">;\n}) => {\n  const [visibleState, setVisibleState] = useState<\"copy\" | \"copied\">(\"copy\");\n  const clipboardText = textToCopy ?? text;\n\n  const onPress = useCallback(\n    (event: GestureResponderEvent) => {\n      event.preventDefault();\n      setClipboardText(clipboardText);\n      setVisibleState(\"copied\");\n    },\n    [clipboardText],\n  );\n\n  return (\n    <View style={styles.cell}>\n      <LakeTooltip\n        placement=\"right\"\n        onHide={() => setVisibleState(\"copy\")}\n        togglableOnFocus={true}\n        content={visibleState === \"copy\" ? copyWording : copiedWording}\n        containerStyle={styles.iconContainer}\n      >\n        <Pressable\n          role=\"button\"\n          aria-label={copyWording}\n          onPress={onPress}\n          style={({ hovered }) => [styles.icon, hovered && styles.underline]}\n        >\n          {({ hovered }) => (\n            <Icon name={hovered ? \"copy-filled\" : \"copy-regular\"} color=\"currentColor\" size={14} />\n          )}\n        </Pressable>\n      </LakeTooltip>\n\n      <Space width={4} />\n\n      <LakeText\n        tooltip={tooltip}\n        color={colors.gray[900]}\n        style={styles.regularText}\n        variant={variant}\n      >\n        {text}\n      </LakeText>\n    </View>\n  );\n};\n\n// TODO: handle `+` sign properly\nexport const BalanceCell = ({\n  value,\n  currency,\n  originalValue,\n  formatCurrency,\n  textAlign = \"right\",\n  variant = \"medium\",\n}: {\n  value: number;\n  currency: string;\n  originalValue?: { value: number; currency: string };\n  formatCurrency: (value: number, currency: string) => string;\n  textAlign?: \"left\" | \"center\" | \"right\";\n  variant?: TextVariant;\n}) => {\n  return (\n    <View style={styles.balanceCellContainer}>\n      <View style={styles.cell}>\n        <LakeText\n          align={textAlign}\n          color={colors.gray[900]}\n          variant={variant}\n          style={[\n            styles.mediumText,\n            {\n              justifyContent: match(textAlign)\n                .with(\"left\", () => \"flex-start\" as const)\n                .with(\"center\", () => \"center\" as const)\n                .with(\"right\", () => \"flex-end\" as const)\n                .exhaustive(),\n            },\n            value > 0 && { color: colors.positive.primary },\n            value < 0 && { color: colors.negative.primary },\n          ]}\n        >\n          {value > 0 && \"+\"}\n          {formatCurrency(value, currency)}\n        </LakeText>\n      </View>\n\n      {isNotNullish(originalValue) && originalValue.currency !== currency && (\n        <View style={styles.cell}>\n          <LakeText\n            style={styles.mediumText}\n            align={textAlign}\n            color={colors.gray[500]}\n            variant=\"smallRegular\"\n          >\n            {originalValue.value > 0 && \"+\"}\n            {formatCurrency(originalValue.value, originalValue.currency)}\n          </LakeText>\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport const LinkCell = ({\n  children,\n  external = false,\n  onPress,\n  variant = \"medium\",\n  tooltip,\n  buttonPosition = \"start\",\n}: {\n  children: ReactNode;\n  onPress: () => void;\n  external?: boolean;\n  variant?: TextVariant;\n  tooltip?: Omit<ComponentProps<typeof LakeTooltip>, \"children\">;\n  buttonPosition?: \"start\" | \"end\";\n}) => {\n  const ArrowButton = () => (\n    <Pressable\n      style={({ hovered }) => [styles.icon, hovered && styles.underline]}\n      onPress={event => {\n        event.preventDefault();\n        onPress();\n      }}\n    >\n      <Icon size={14} name={external ? \"open-regular\" : \"arrow-right-filled\"} />\n    </Pressable>\n  );\n\n  return (\n    <View style={styles.cell}>\n      {buttonPosition === \"start\" && (\n        <>\n          <ArrowButton />\n          <Space width={8} />\n        </>\n      )}\n\n      <LakeText\n        color={colors.gray[900]}\n        variant={variant}\n        style={styles.mediumText}\n        tooltip={tooltip}\n      >\n        {children}\n      </LakeText>\n\n      {buttonPosition === \"end\" && (\n        <>\n          <Space width={8} />\n          <ArrowButton />\n        </>\n      )}\n    </View>\n  );\n};\n\nexport const StartAlignedCell = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.cell}>{children}</View>;\n};\n\nexport const CenteredCell = ({ children }: { children: ReactNode }) => {\n  return <View style={[styles.cell, styles.centeredCell]}>{children}</View>;\n};\n\nexport const EndAlignedCell = ({ children }: { children: ReactNode }) => {\n  return <View style={[styles.cell, styles.endAlignedCell]}>{children}</View>;\n};\n\nexport const CellAction = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.cellAction}>{children}</View>;\n};\n","import { Option } from \"@swan-io/boxed\";\nimport {\n  cloneElement,\n  memo,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useId,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport { backgroundColor as backgroundColorVariants, colors, spacings } from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { ScrollView, ScrollViewRef } from \"./ScrollView\";\nimport { Space } from \"./Space\";\n\nconst HORIZONTAL_ROW_PADDING = 8;\n\nconst styles = StyleSheet.create({\n  container: {\n    ...commonStyles.fill,\n    height: 1,\n    alignSelf: \"stretch\",\n  },\n  contentContainer: {\n    minWidth: \"100%\",\n  },\n  emptyListContentContainer: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: spacings[48],\n    minHeight: \"100%\",\n  },\n  headerRow: {\n    position: \"sticky\",\n    top: 0,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    zIndex: 2,\n  },\n  cellsContainer: {\n    flexDirection: \"row\",\n    transform: \"translateZ(0)\",\n  },\n  stickedToStartColumnGroup: {\n    position: \"sticky\",\n    left: 0,\n    zIndex: 1,\n  },\n  stickedToStartColumnGroupLocked: {\n    position: \"relative\",\n  },\n  centerColumnGroup: {\n    flexGrow: 1,\n  },\n  stickedToEndColumnGroup: {\n    position: \"sticky\",\n    right: 0,\n    zIndex: 1,\n  },\n  stickedToEndColumnGroupLocked: {\n    position: \"relative\",\n  },\n  rowsContainer: {\n    position: \"relative\",\n  },\n  row: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  headerCell: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    alignItems: \"center\",\n    boxShadow: `0 -1px ${colors.gray[100]}`,\n  },\n  cell: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    alignItems: \"stretch\",\n    boxShadow: `0 -1px ${colors.gray[100]}`,\n  },\n  shadowsLayerContainer: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: \"none\",\n    zIndex: 4,\n  },\n  shadowsLayer: {\n    position: \"sticky\",\n    top: 12,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  startColumnsShadow: {\n    position: \"sticky\",\n    left: 0,\n    top: 0,\n    boxShadow: \"15px 0 10px -12px rgba(0, 0, 0, 0.1)\",\n    transition: \"100ms ease-in-out opacity\",\n  },\n  endColumnsShadow: {\n    position: \"sticky\",\n    right: 0,\n    top: 0,\n    boxShadow: \"-15px 0 10px -12px rgba(0, 0, 0, 0.1)\",\n    transition: \"100ms ease-in-out opacity\",\n  },\n  scrollTracker: {\n    pointerEvents: \"none\",\n    position: \"absolute\",\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n  placeholderRowContainer: {\n    position: \"absolute\",\n    alignItems: \"flex-start\",\n    top: 0,\n    left: 0,\n    right: 0,\n    animationKeyframes: {\n      \"50%\": {\n        opacity: 0.6,\n      },\n    },\n    animationDuration: \"2000ms\",\n    animationTimingFunction: \"linear\",\n    animationIterationCount: \"infinite\",\n    boxShadow: `inset 0 -1px ${colors.gray[100]}`,\n  },\n  placeholderRowContents: {\n    position: \"sticky\",\n    width: \"50%\",\n    left: 0,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    flexGrow: 1,\n    paddingHorizontal: spacings[24],\n  },\n  loadingPlaceholder: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n  },\n  placeholderRow: {\n    height: 14,\n    width: \"30%\",\n    backgroundColor: colors.gray[100],\n  },\n  placeholderRowEnd: {\n    paddingHorizontal: spacings[20],\n    position: \"sticky\",\n    right: 0,\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  smallPlaceholderRow: {\n    width: \"10%\",\n  },\n});\n\nexport type ColumnTitleConfig<ExtraInfo> = {\n  title: string;\n  extraInfo: ExtraInfo;\n  id: string;\n};\n\nexport type ColumnCellConfig<T, ExtraInfo> = {\n  columnId: string;\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n  isHovered: boolean;\n};\n\nexport type ColumnConfig<T, ExtraInfo> = {\n  id: string;\n  width: number;\n  title: string;\n  renderTitle: (props: ColumnTitleConfig<ExtraInfo>) => ReactNode;\n  renderCell: (props: ColumnCellConfig<T, ExtraInfo>) => ReactNode;\n};\n\nexport type LinkConfig<T, ExtraInfo> = {\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n};\n\nexport type VirtualizedListProps<T, ExtraInfo> = {\n  variant: \"default\" | \"accented\";\n  data: T[];\n  keyExtractor: (item: T, index: number) => string;\n  headerHeight: number;\n  rowHeight: number;\n  extraInfo: ExtraInfo;\n  stickedToStartColumns?: ColumnConfig<T, ExtraInfo>[];\n  columns: ColumnConfig<T, ExtraInfo>[];\n  stickedToEndColumns?: ColumnConfig<T, ExtraInfo>[];\n  renderThreshold?: number;\n  onEndReached?: () => void;\n  onEndReachedThreshold?: number;\n  getRowLink?: (config: LinkConfig<T, ExtraInfo>) => ReactElement | undefined;\n  renderEmptyList: () => ReactNode;\n  marginHorizontal?: string;\n  loading?: {\n    isLoading: boolean;\n    count: number;\n  };\n};\n\nexport const VirtualizedList = <T, ExtraInfo>({\n  variant,\n  data,\n  stickedToStartColumns,\n  columns,\n  stickedToEndColumns,\n  headerHeight,\n  rowHeight,\n  renderThreshold = 1000,\n  onEndReached,\n  onEndReachedThreshold = 200,\n  loading,\n  extraInfo,\n  keyExtractor,\n  marginHorizontal,\n  renderEmptyList,\n  getRowLink,\n}: VirtualizedListProps<T, ExtraInfo>) => {\n  // Used for unique IDs generation (usefull for header IDs and cells aria-describedBy pointing to them)\n  const viewId = useId();\n  const scrollViewRef = useRef<ScrollViewRef>(null);\n  const scrollTrackerRef = useRef<View>(null);\n\n  // Theoretical height of all actual data if rendered\n  const fullDataHeight = rowHeight * data.length;\n\n  const loadingDataPlaceholderHeight = Option.fromNullable(loading)\n    .flatMap(({ isLoading, count }) => (isLoading ? Option.Some(rowHeight * count) : Option.None()))\n    .getOr(0);\n\n  const containerContainerHeight = headerHeight + fullDataHeight + loadingDataPlaceholderHeight;\n\n  const stickedToStartFirstCellLeftPadding = Option.fromNullable(stickedToStartColumns)\n    .map(() => HORIZONTAL_ROW_PADDING)\n    .getOr(0);\n  const centerFirstCellLeftPadding = Option.fromNullable(stickedToStartColumns)\n    .map(() => 0)\n    .getOr(HORIZONTAL_ROW_PADDING);\n  const centerLastCellLeftPadding = Option.fromNullable(stickedToEndColumns)\n    .map(() => 0)\n    .getOr(HORIZONTAL_ROW_PADDING);\n  const stickedToEndLastCellRightPadding = Option.fromNullable(stickedToEndColumns)\n    .map(() => HORIZONTAL_ROW_PADDING)\n    .getOr(0);\n\n  const stickedToStartColumnsWidth = useMemo(\n    () =>\n      Option.fromNullable(stickedToStartColumns)\n        .map(columns => columns.reduce((acc, column) => acc + column.width, 0))\n        .getOr(0) + stickedToStartFirstCellLeftPadding,\n    [stickedToStartColumns, stickedToStartFirstCellLeftPadding],\n  );\n\n  const centerColumnsWidth = useMemo(\n    () =>\n      columns.reduce((acc, column) => acc + column.width, 0) +\n      centerFirstCellLeftPadding +\n      centerLastCellLeftPadding,\n    [columns, centerFirstCellLeftPadding, centerLastCellLeftPadding],\n  );\n\n  const stickedToEndColumnsWidth = useMemo(\n    () =>\n      Option.fromNullable(stickedToEndColumns)\n        .map(columns => columns.reduce((acc, column) => acc + column.width, 0))\n        .getOr(0) + stickedToEndLastCellRightPadding,\n    [stickedToEndColumns, stickedToEndLastCellRightPadding],\n  );\n\n  const contentContainerWidth =\n    stickedToStartColumnsWidth + centerColumnsWidth + stickedToEndColumnsWidth;\n\n  const backgroundColor = backgroundColorVariants[variant];\n\n  // We store the `startIndex` and `endIndex` rather than the scroll position\n  // so that it triggers way less re-renders\n  const [rangeToRender, setRangeToRender] = useState<\n    { startIndex: number; endIndex: number } | undefined\n  >(undefined);\n\n  const [clientHeight, setClientHeight] = useState<number | undefined>(undefined);\n\n  const [horizontalScrollPosition, setHasHorizontalScrollPosition] = useState<\n    \"Start\" | \"Middle\" | \"End\" | \"NoScroll\" | undefined\n  >(undefined);\n\n  const rowsToRender = useMemo(() => {\n    return Option.fromNullable(rangeToRender).map(({ startIndex, endIndex }) => {\n      const clampedEndIndex = Math.min(data.length, endIndex);\n      return {\n        startIndex,\n        endIndex: clampedEndIndex,\n        data: data.slice(startIndex, clampedEndIndex),\n      };\n    });\n  }, [data, rangeToRender]);\n\n  const onLayoutUpdate = useCallback(() => {\n    const element = Option.fromNullable(scrollViewRef.current).flatMap(ref =>\n      Option.fromNullable(ref.element),\n    );\n    setRangeToRender(previousRangeToRender =>\n      element\n        .map(scrollView => {\n          const startIndex = Math.max(\n            0,\n            Math.floor((scrollView.scrollTop - renderThreshold) / rowHeight),\n          );\n\n          const endIndex =\n            startIndex + Math.ceil((scrollView.scrollHeight + renderThreshold * 2) / rowHeight);\n\n          if (\n            previousRangeToRender?.startIndex === startIndex &&\n            previousRangeToRender.endIndex === endIndex\n          ) {\n            return previousRangeToRender;\n          }\n\n          return { startIndex, endIndex };\n        })\n        .toUndefined(),\n    );\n\n    setClientHeight(element.map(scrollView => scrollView.clientHeight).toUndefined());\n\n    setHasHorizontalScrollPosition(\n      element\n        .map(scrollView =>\n          scrollView.scrollWidth === scrollView.clientWidth ||\n          scrollView.clientWidth - (stickedToEndColumnsWidth + stickedToStartColumnsWidth) < 400\n            ? \"NoScroll\"\n            : scrollView.scrollLeft <= 0\n              ? \"Start\"\n              : scrollView.scrollLeft >= scrollView.scrollWidth - scrollView.clientWidth\n                ? \"End\"\n                : \"Middle\",\n        )\n        .toUndefined(),\n    );\n  }, [renderThreshold, rowHeight, stickedToStartColumnsWidth, stickedToEndColumnsWidth]);\n\n  useLayoutEffect(() => {\n    onLayoutUpdate();\n  }, [onLayoutUpdate]);\n\n  const scrollTimeoutRef = useRef<number | undefined>(undefined);\n  const rowsContainerRef = useRef<View>(null);\n\n  const onScroll = useCallback(() => {\n    // Disable interactions in cells during scroll, avoids useless\n    // re-renders\n    if (scrollTimeoutRef.current != null) {\n      clearTimeout(scrollTimeoutRef.current);\n    }\n    if (rowsContainerRef.current instanceof HTMLElement) {\n      rowsContainerRef.current.style.pointerEvents = \"none\";\n    }\n    scrollTimeoutRef.current = window.setTimeout(() => {\n      if (rowsContainerRef.current instanceof HTMLElement) {\n        rowsContainerRef.current.style.pointerEvents = \"auto\";\n      }\n    }, 100);\n\n    onLayoutUpdate();\n  }, [onLayoutUpdate]);\n\n  useEffect(() => {\n    const element = Option.fromNullable(scrollViewRef.current).flatMap(ref =>\n      Option.fromNullable(ref.element),\n    );\n    return element\n      .map(element => {\n        const resizeObserver = new ResizeObserver(() => {\n          onLayoutUpdate();\n        });\n        resizeObserver.observe(element);\n        return () => resizeObserver.unobserve(element);\n      })\n      .toUndefined();\n  }, [onLayoutUpdate]);\n\n  // tracks if the threshold to initiate the next data load is reached\n  useEffect(() => {\n    const scrollTracker = scrollTrackerRef.current;\n    if (scrollTracker != null) {\n      const scrollTrackerElement = scrollTracker as unknown as HTMLElement;\n      const intersectionObserver = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            if (onEndReached != null) {\n              onEndReached();\n            }\n          }\n        });\n      });\n      intersectionObserver.observe(scrollTrackerElement);\n      return () => intersectionObserver.unobserve(scrollTrackerElement);\n    }\n  }, [onEndReached, data.length]);\n\n  const header = useMemo(() => {\n    return (\n      <View style={[styles.headerRow, { height: headerHeight }]}>\n        {Option.fromNullable(stickedToStartColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToStartColumnGroup,\n                horizontalScrollPosition === \"NoScroll\" && styles.stickedToStartColumnGroupLocked,\n                { width: stickedToStartColumnsWidth, backgroundColor, height: headerHeight },\n              ]}\n            >\n              {columns.map(({ id, width, title, renderTitle }, index) => {\n                const columnId = `${viewId}_${id}`;\n                const paddingLeft = index === 0 ? stickedToStartFirstCellLeftPadding : 0;\n\n                return (\n                  <View\n                    style={[styles.headerCell, { width: width + paddingLeft, paddingLeft }]}\n                    id={columnId}\n                    key={columnId}\n                  >\n                    {renderTitle({ title, extraInfo, id })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n\n        <View\n          style={[\n            styles.cellsContainer,\n            styles.centerColumnGroup,\n            { width: centerColumnsWidth, backgroundColor, height: headerHeight },\n          ]}\n        >\n          {columns.map(({ id, width, title, renderTitle }, index) => {\n            const columnId = `${viewId}_${id}`;\n            const paddingLeft = index === 0 ? centerFirstCellLeftPadding : 0;\n            const paddingRight = index === columns.length - 1 ? centerLastCellLeftPadding : 0;\n\n            return (\n              <View\n                style={[\n                  styles.headerCell,\n                  { width: width + paddingLeft + paddingRight, paddingLeft, paddingRight },\n                ]}\n                id={columnId}\n                key={columnId}\n              >\n                {renderTitle({ title, extraInfo, id })}\n              </View>\n            );\n          })}\n        </View>\n\n        {Option.fromNullable(stickedToEndColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToEndColumnGroup,\n                horizontalScrollPosition === \"NoScroll\" && styles.stickedToEndColumnGroupLocked,\n                { width: stickedToEndColumnsWidth, backgroundColor, height: headerHeight },\n              ]}\n            >\n              {columns.map(({ id, width, title, renderTitle }, index) => {\n                const columnId = `${viewId}_${id}`;\n                const paddingRight =\n                  index === columns.length - 1 ? stickedToEndLastCellRightPadding : 0;\n\n                return (\n                  <View\n                    style={[styles.headerCell, { width: width + paddingRight, paddingRight }]}\n                    id={columnId}\n                    key={columnId}\n                  >\n                    {renderTitle({ title, extraInfo, id })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n      </View>\n    );\n  }, [\n    backgroundColor,\n    stickedToStartColumnsWidth,\n    centerColumnsWidth,\n    stickedToEndColumnsWidth,\n    headerHeight,\n    extraInfo,\n    stickedToStartColumns,\n    columns,\n    stickedToEndColumns,\n    viewId,\n    horizontalScrollPosition,\n    stickedToStartFirstCellLeftPadding,\n    centerFirstCellLeftPadding,\n    centerLastCellLeftPadding,\n    stickedToEndLastCellRightPadding,\n  ]);\n\n  const startColumnShadow = useMemo(() => {\n    if (stickedToStartColumnsWidth === 0) {\n      return Option.None();\n    }\n    return Option.Some(\n      <View\n        style={[\n          styles.startColumnsShadow,\n          {\n            width: stickedToStartColumnsWidth,\n            opacity: Option.fromNullable(horizontalScrollPosition)\n              .map(value => (value === \"Start\" || value === \"NoScroll\" ? 0 : 1))\n              .getOr(0),\n          },\n        ]}\n      />,\n    );\n  }, [stickedToStartColumnsWidth, horizontalScrollPosition]);\n\n  const endColumnShadow = useMemo(() => {\n    if (stickedToEndColumnsWidth === 0) {\n      return Option.None();\n    }\n    return Option.Some(\n      <View\n        style={[\n          styles.endColumnsShadow,\n          {\n            width: stickedToEndColumnsWidth,\n            opacity: Option.fromNullable(horizontalScrollPosition)\n              .map(value => (value === \"End\" || value === \"NoScroll\" ? 0 : 1))\n              .getOr(0),\n          },\n        ]}\n      />,\n    );\n  }, [stickedToEndColumnsWidth, horizontalScrollPosition]);\n\n  if (\n    data.length === 0 &&\n    !Option.fromNullable(loading)\n      .map(({ isLoading }) => isLoading)\n      .getOr(false)\n  ) {\n    return (\n      <ScrollView style={styles.container} contentContainerStyle={styles.emptyListContentContainer}>\n        {renderEmptyList()}\n      </ScrollView>\n    );\n  }\n\n  return (\n    <ScrollView\n      ref={scrollViewRef}\n      both={true}\n      style={[styles.container, { marginHorizontal }]}\n      onScroll={onScroll}\n      scrollEventThrottle={32}\n      contentContainerStyle={[\n        styles.contentContainer,\n        {\n          height: containerContainerHeight,\n          width: contentContainerWidth,\n        },\n      ]}\n    >\n      {header}\n\n      {rowsToRender\n        .map(({ startIndex, endIndex, data }) => (\n          <View style={styles.rowsContainer} ref={rowsContainerRef}>\n            {data.map((item, index) => (\n              <VirtualizedRow<T, ExtraInfo>\n                key={keyExtractor(item, startIndex + index)}\n                viewId={viewId}\n                item={item}\n                rowHeight={rowHeight}\n                absoluteIndex={startIndex + index}\n                variant={variant}\n                stickedToStartColumnsWidth={stickedToStartColumnsWidth}\n                centerColumnsWidth={centerColumnsWidth}\n                stickedToEndColumnsWidth={stickedToEndColumnsWidth}\n                stickedToStartColumns={stickedToStartColumns}\n                columns={columns}\n                stickedToEndColumns={stickedToEndColumns}\n                extraInfo={extraInfo}\n                getRowLink={getRowLink}\n                horizontalScrollPosition={horizontalScrollPosition ?? \"NoScroll\"}\n                stickedToStartFirstCellLeftPadding={stickedToStartFirstCellLeftPadding}\n                centerFirstCellLeftPadding={centerFirstCellLeftPadding}\n                centerLastCellLeftPadding={centerLastCellLeftPadding}\n                stickedToEndLastCellRightPadding={stickedToEndLastCellRightPadding}\n              />\n            ))}\n\n            {Option.fromNullable(loading)\n              .flatMap(({ isLoading, count }) => (isLoading ? Option.Some(count) : Option.None()))\n              .map(count => (\n                <View\n                  aria-busy={true}\n                  style={[\n                    styles.loadingPlaceholder,\n                    {\n                      top: endIndex * rowHeight,\n                    },\n                  ]}\n                >\n                  <VirtualizedListPlaceholder\n                    count={count}\n                    headerHeight={0}\n                    rowHeight={rowHeight}\n                  />\n                </View>\n              ))\n              .toNull()}\n          </View>\n        ))\n        .toNull()}\n\n      {Option.fromNullable(clientHeight)\n        .map(clientHeight => (\n          <View style={styles.shadowsLayerContainer}>\n            <View style={[styles.shadowsLayer, { height: clientHeight - 12 }]}>\n              {startColumnShadow.toNull()}\n\n              <View style={{ width: centerColumnsWidth }}></View>\n\n              {endColumnShadow.toNull()}\n            </View>\n          </View>\n        ))\n        .toNull()}\n\n      <View\n        style={[styles.scrollTracker, { height: onEndReachedThreshold }]}\n        ref={scrollTrackerRef}\n      />\n    </ScrollView>\n  );\n};\n\ntype VirtualizedRowProps<T, ExtraInfo> = {\n  viewId: string;\n  rowHeight: number;\n  absoluteIndex: number;\n  variant: \"accented\" | \"default\";\n  stickedToStartColumnsWidth: number;\n  centerColumnsWidth: number;\n  stickedToEndColumnsWidth: number;\n  stickedToStartColumns?: ColumnConfig<T, ExtraInfo>[];\n  columns: ColumnConfig<T, ExtraInfo>[];\n  stickedToEndColumns?: ColumnConfig<T, ExtraInfo>[];\n  extraInfo: ExtraInfo;\n  getRowLink?: (config: LinkConfig<T, ExtraInfo>) => ReactElement | undefined;\n  horizontalScrollPosition: \"NoScroll\" | \"Start\" | \"Middle\" | \"End\";\n  item: T;\n  stickedToStartFirstCellLeftPadding: number;\n  centerFirstCellLeftPadding: number;\n  centerLastCellLeftPadding: number;\n  stickedToEndLastCellRightPadding: number;\n};\n\nconst RawVirtualizedRow = <T, ExtraInfo>({\n  viewId,\n  rowHeight,\n  absoluteIndex,\n  variant,\n  stickedToStartColumnsWidth,\n  centerColumnsWidth,\n  stickedToEndColumnsWidth,\n  stickedToStartColumns,\n  columns,\n  stickedToEndColumns,\n  extraInfo,\n  item,\n  horizontalScrollPosition,\n  getRowLink,\n  stickedToStartFirstCellLeftPadding,\n  centerFirstCellLeftPadding,\n  centerLastCellLeftPadding,\n  stickedToEndLastCellRightPadding,\n}: VirtualizedRowProps<T, ExtraInfo>) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const elementRef = useRef<View>(null);\n\n  useHover(elementRef, {\n    onHoverStart: () => setIsHovered(true),\n    onHoverEnd: () => setIsHovered(false),\n  });\n\n  const rootElement =\n    getRowLink != null ? (\n      (getRowLink({ item, index: absoluteIndex, extraInfo }) ?? <View />)\n    ) : (\n      <View />\n    );\n  return cloneElement(rootElement, {\n    ref: elementRef,\n    style: [\n      styles.row,\n      {\n        backgroundColor: backgroundColorVariants[variant],\n        top: absoluteIndex * rowHeight,\n        height: rowHeight,\n      },\n      isHovered && {\n        backgroundColor:\n          variant === \"accented\"\n            ? backgroundColorVariants.default\n            : backgroundColorVariants.accented,\n      },\n    ],\n    children: (\n      <>\n        {Option.fromNullable(stickedToStartColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToStartColumnGroup,\n                horizontalScrollPosition === \"NoScroll\" && styles.stickedToStartColumnGroupLocked,\n                {\n                  height: rowHeight,\n                  width: stickedToStartColumnsWidth,\n                  backgroundColor: isHovered\n                    ? backgroundColorVariants[variant === \"accented\" ? \"default\" : \"accented\"]\n                    : backgroundColorVariants[variant],\n                },\n              ]}\n            >\n              {columns.map(({ id, width, renderCell }, index) => {\n                const columnId = `${viewId}_${id}`;\n                const paddingLeft = index === 0 ? stickedToStartFirstCellLeftPadding : 0;\n\n                return (\n                  <View\n                    style={[styles.cell, { width: width + paddingLeft, paddingLeft }]}\n                    key={columnId}\n                    aria-describedby={columnId}\n                  >\n                    {renderCell({\n                      columnId,\n                      item,\n                      index: absoluteIndex,\n                      extraInfo,\n                      isHovered: false,\n                    })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n\n        <View\n          style={[\n            styles.cellsContainer,\n            styles.centerColumnGroup,\n            {\n              width: centerColumnsWidth,\n              height: rowHeight,\n              backgroundColor: isHovered\n                ? backgroundColorVariants[variant === \"accented\" ? \"default\" : \"accented\"]\n                : backgroundColorVariants[variant],\n            },\n          ]}\n        >\n          {columns.map(({ id, width, renderCell }, index) => {\n            const columnId = `${viewId}_${id}`;\n            const paddingLeft = index === 0 ? centerFirstCellLeftPadding : 0;\n            const paddingRight = index === columns.length - 1 ? centerLastCellLeftPadding : 0;\n\n            return (\n              <View\n                style={[\n                  styles.cell,\n                  { width: width + paddingLeft + paddingRight, paddingLeft, paddingRight },\n                ]}\n                key={columnId}\n                aria-describedby={columnId}\n              >\n                {renderCell({\n                  columnId,\n                  item,\n                  index: absoluteIndex,\n                  extraInfo,\n                  isHovered: false,\n                })}\n              </View>\n            );\n          })}\n        </View>\n\n        {Option.fromNullable(stickedToEndColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToEndColumnGroup,\n                horizontalScrollPosition === \"NoScroll\" && styles.stickedToEndColumnGroupLocked,\n                {\n                  width: stickedToEndColumnsWidth,\n                  height: rowHeight,\n                  backgroundColor: isHovered\n                    ? backgroundColorVariants[variant === \"accented\" ? \"default\" : \"accented\"]\n                    : backgroundColorVariants[variant],\n                },\n              ]}\n            >\n              {columns.map(({ id, width, renderCell }, index) => {\n                const columnId = `${viewId}_${id}`;\n                const paddingRight =\n                  index === columns.length - 1 ? stickedToEndLastCellRightPadding : 0;\n\n                return (\n                  <View\n                    style={[styles.cell, { width: width + paddingRight, paddingRight }]}\n                    key={columnId}\n                    aria-describedby={columnId}\n                  >\n                    {renderCell({\n                      columnId,\n                      item,\n                      index: absoluteIndex,\n                      extraInfo,\n                      isHovered: false,\n                    })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n      </>\n    ),\n  });\n};\n\nconst VirtualizedRow = memo(RawVirtualizedRow) as typeof RawVirtualizedRow;\n\ntype VirtualizedListPlaceholderProps = {\n  count: number;\n  rowHeight: number;\n  groupHeaderHeight?: number;\n  headerHeight?: number;\n  marginHorizontal?: string;\n};\n\nexport const VirtualizedListPlaceholder = ({\n  count,\n  rowHeight,\n  groupHeaderHeight,\n  headerHeight,\n  marginHorizontal,\n}: VirtualizedListPlaceholderProps) => {\n  return (\n    <View style={[styles.container, { marginHorizontal }]}>\n      {headerHeight != null ? <View style={{ height: headerHeight }} /> : null}\n      {groupHeaderHeight != null ? <View style={{ height: groupHeaderHeight }} /> : null}\n\n      <View>\n        {Array.from({ length: count }, (_, index) => {\n          const top = index * rowHeight;\n\n          return (\n            <View\n              key={String(index)}\n              style={[styles.placeholderRowContainer, { height: rowHeight, top }]}\n            >\n              <View style={styles.placeholderRowContents}>\n                <View style={styles.placeholderRow} />\n                <Space width={32} />\n                <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                <Space width={32} />\n\n                <View style={styles.placeholderRowEnd}>\n                  <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                </View>\n              </View>\n            </View>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n"],"names":["styles","StyleSheet","spacings","visuallyHiddenStyle","colors","SimpleHeaderCell","text","sort","justifyContent","onPress","sortActive","isNotNullish","disabled","isNullish","jsx","Pressable","match","hovered","View","jsxs","Box","LakeText","Fragment","Space","Icon","SimpleTitleCell","isHighlighted","tooltip","SimpleRegularTextCell","variant","textAlign","color","LinkCell","children","external","buttonPosition","ArrowButton","event","EndAlignedCell","HORIZONTAL_ROW_PADDING","commonStyles","VirtualizedList","data","stickedToStartColumns","columns","stickedToEndColumns","headerHeight","rowHeight","renderThreshold","onEndReached","onEndReachedThreshold","loading","extraInfo","keyExtractor","marginHorizontal","renderEmptyList","getRowLink","viewId","useId","scrollViewRef","useRef","scrollTrackerRef","fullDataHeight","loadingDataPlaceholderHeight","Option","isLoading","count","containerContainerHeight","stickedToStartFirstCellLeftPadding","centerFirstCellLeftPadding","centerLastCellLeftPadding","stickedToEndLastCellRightPadding","stickedToStartColumnsWidth","useMemo","acc","column","centerColumnsWidth","stickedToEndColumnsWidth","contentContainerWidth","backgroundColor","backgroundColorVariants","rangeToRender","setRangeToRender","useState","clientHeight","setClientHeight","horizontalScrollPosition","setHasHorizontalScrollPosition","rowsToRender","startIndex","endIndex","clampedEndIndex","onLayoutUpdate","useCallback","element","ref","previousRangeToRender","scrollView","useLayoutEffect","scrollTimeoutRef","rowsContainerRef","onScroll","useEffect","resizeObserver","scrollTracker","scrollTrackerElement","intersectionObserver","entries","entry","header","id","width","title","renderTitle","index","columnId","paddingLeft","paddingRight","startColumnShadow","value","endColumnShadow","ScrollView","item","VirtualizedRow","VirtualizedListPlaceholder","RawVirtualizedRow","absoluteIndex","isHovered","setIsHovered","elementRef","useHover","rootElement","cloneElement","renderCell","memo","groupHeaderHeight","_","top"],"mappings":"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"}