{"version":3,"file":"FixedListViewCells-CRDTV2G6.js","sources":["../../../packages/lake/src/components/FixedListView.tsx","../../../packages/lake/src/components/FixedListViewCells.tsx"],"sourcesContent":["/**\n * ## FixedListView\n *\n * The FixedListView is a component designed to render big amounts of tabular data.\n *\n * For usability, the data can be display in three types of columns:\n *\n * - Sticked to start columns (usually the main identifier, always visible)\n * - Center columns (scrollable columns, with additional information)\n * - Sticked to end columns (so that some actions are always accesible at the end of each line)\n *\n * ┌────────────────────────────────────────────────────────────────────────────────────────┐\n * │ ┌────────────────┐ ┌────────────────────────────────────────┐ ┌────────────────┐       │\n * │ │ ╔════════════╗ │ │ ╔════════════════════════════════════╗ │ │ ╔════════════╗ │       │\n * │ │ ║   Header   ║ │ │ ║               Header               ║ │ │ ║   Header   ║ │ ▲     │\n * │ │ ║            ║ │ │ ║◀──────────────────────────────────▶║ │ │ ║            ║ │ │     │\n * │ │ ╚════════════╝ │ │ ╚════════════════════════════════════╝ │ │ ╚════════════╝ │ │     │\n * │ │                │ │                                        │ │                │ │     │\n * │ │ ┌───────────┐  │ │ ┌────────────────────────────────────┐ │ │ ┌────────────┐ │ │     │\n * │ │ │  Cell A1  │──┼─┼▷│              Cell B1               ├─┼─┼─▷  Cell C1   │ │ │     │\n * │ │ └───────────┘  │ │ └────────────────────────────────────┘ │ │ └────────────┘ │ │     │\n * │ │ ┌───────────┐  │ │ ┌────────────────────────────────────┐ │ │ ┌────────────┐ │ │     │\n * │ │ │  Cell A2  │──┼─┼▷│              Cell B2               │─┼─┼─▷  Cell C2   │ │ │     │\n * │ │ └───────────┘  │ │ └────────────────────────────────────┘ │ │ └────────────┘ │ │     │\n * │ │                │ │                                        │ │                │ │     │\n * │ │                │ │ ◀────────────────────────────────────▶ │ │                │ ▼     │\n * └─┴────────────────┴─┴────────────────────────────────────────┴─┴────────────────┴───────┘\n *\n * ╔════╗\n * ║    ║   Sticky\n * ╚════╝\n * ◀────▶   Scrollable\n * ─────▷   Emulated tab order\n *\n */\nimport {\n  cloneElement,\n  Fragment,\n  memo,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  LayoutChangeEvent,\n  NativeScrollEvent,\n  NativeSyntheticEvent,\n  StyleSheet,\n  View,\n  ViewProps,\n} from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { v4 as uuid } from \"uuid\";\nimport {\n  backgroundColor,\n  colors,\n  invariantColors,\n  radii,\n  shadows,\n  spacings,\n} from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { getFocusableElements } from \"../utils/a11y\";\nimport { first, last, sortedIndexOf } from \"../utils/array\";\nimport { noop } from \"../utils/function\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { BorderedIcon } from \"./BorderedIcon\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeHeading } from \"./LakeHeading\";\nimport { LakeText } from \"./LakeText\";\nimport { ScrollView, ScrollViewRef } from \"./ScrollView\";\nimport { Space, SpacingValue } from \"./Space\";\n\nexport type ColumnTitleConfig<ExtraInfo> = {\n  title: string;\n  extraInfo: ExtraInfo;\n  id: string;\n};\n\nexport type ColumnCellConfig<T, ExtraInfo> = {\n  columnId: string;\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n  isHovered: boolean;\n};\n\nexport type LinkConfig<T, ExtraInfo> = {\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n};\n\nexport type ColumnConfig<T, ExtraInfo> = {\n  id: string;\n  width: number;\n  title: string;\n  renderTitle: (props: ColumnTitleConfig<ExtraInfo>) => ReactNode;\n  renderCell: (props: ColumnCellConfig<T, ExtraInfo>) => ReactNode;\n};\n\ntype Mode = \"tile\" | \"plain\";\n\nexport type FixedListViewProps<T, ExtraInfo> = {\n  mode?: Mode;\n  data: T[];\n  keyExtractor: (item: T, index: number) => string;\n  highlightedRowId?: string;\n  headerBackgroundColor?: string;\n  headerHeight: number;\n  rowHeight: number;\n  rowVerticalSpacing: number;\n  horizontalPadding?: number;\n  extraInfo: ExtraInfo;\n  stickedToStartColumns?: ColumnConfig<T, ExtraInfo>[];\n  columns: ColumnConfig<T, ExtraInfo>[];\n  stickedToEndColumns?: ColumnConfig<T, ExtraInfo>[];\n  renderThreshold?: number;\n  onEndReached?: () => void;\n  onEndReachedThresholdPx?: number;\n  getRowLink?: (config: LinkConfig<T, ExtraInfo>) => ReactElement | undefined;\n  renderEmptyList?: () => ReactNode;\n  loading?: {\n    isLoading: boolean;\n    count: number;\n  };\n};\n\nconst HORIZONTAL_SAFE_AREA = 10;\nexport const SCROLLBAR_RESERVED_SPACE = 20;\n\nconst styles = StyleSheet.create({\n  root: {\n    height: 1,\n    alignSelf: \"stretch\",\n    flexGrow: 1,\n  },\n  container: {\n    height: 1,\n    alignSelf: \"stretch\",\n    flexGrow: 1,\n  },\n  containerTile: {\n    marginHorizontal: -HORIZONTAL_SAFE_AREA,\n  },\n  contentContainer: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    flexGrow: 1,\n  },\n  scrollContentContainer: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  centerColumnsContainer: {\n    width: 1,\n    flexGrow: 1,\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n  },\n  centerColumns: {\n    flexGrow: 1,\n  },\n  centerColumnsContentContainer: {\n    flexDirection: \"column\",\n    flexGrow: 1,\n  },\n  stickyColumn: {\n    flexGrow: 0,\n    zIndex: 1,\n  },\n  stickyColumnStartOverflow: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    right: \"100%\",\n  },\n  stickyColumnEndOverflow: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    left: \"100%\",\n  },\n  rowSegment: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    display: \"flex\",\n    flexGrow: 1,\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n    overflow: \"hidden\",\n  },\n  headingSegment: {\n    position: \"sticky\",\n    top: 0,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    zIndex: 2,\n  },\n  segment: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    overflow: \"hidden\",\n  },\n  segmentOverflow: {\n    overflow: \"hidden\",\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  visibleGradient: {\n    opacity: 1,\n  },\n  leftToRightGradient: {\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    height: \"100%\",\n    width: 10,\n    backgroundImage: \"linear-gradient(to right, rgba(0, 0, 0, 0.06), rgba(0, 0, 0, 0))\",\n    opacity: 0,\n    transition: \"150ms ease-in-out opacity\",\n    pointerEvents: \"none\",\n  },\n  rightToLeftGradient: {\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n    height: \"100%\",\n    width: 10,\n    backgroundImage: \"linear-gradient(to left, rgba(0, 0, 0, 0.06), rgba(0, 0, 0, 0))\",\n    opacity: 0,\n    transition: \"150ms ease-in-out opacity\",\n    pointerEvents: \"none\",\n  },\n  horizontalScrollbar: {\n    position: \"sticky\",\n    bottom: 0,\n    borderBottomWidth: 5,\n    borderBottomColor: invariantColors.transparent,\n    flexGrow: 0,\n    height: SCROLLBAR_RESERVED_SPACE,\n  },\n  cell: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  evenRow: {\n    backgroundColor: backgroundColor.accented,\n  },\n  oddRow: {\n    backgroundColor: backgroundColor.default,\n  },\n  rowShadow: {\n    boxShadow: shadows.tile,\n  },\n  hoveredRowShadow: {\n    boxShadow: shadows.tileHover,\n  },\n  highlightedRow: {\n    borderColor: colors.current.primary,\n    borderWidth: 1,\n  },\n  segmentHeaderCell: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    alignItems: \"center\",\n  },\n  rowBackground: {\n    borderRadius: radii[4],\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rowPlainBackground: {\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rowBackgroundContainer: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    justifyContent: \"center\",\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rowBackgroundContainerPlain: {\n    left: -10,\n    right: -10,\n    boxShadow: `inset 0 -1px ${colors.gray[100]}`,\n  },\n  backgroundRows: {\n    position: \"absolute\",\n    left: HORIZONTAL_SAFE_AREA,\n    right: HORIZONTAL_SAFE_AREA,\n    top: 0,\n    bottom: 0,\n  },\n  placeholderRowContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    top: 0,\n    left: 20,\n    right: 20,\n    animationKeyframes: {\n      \"50%\": {\n        opacity: 0.6,\n      },\n    },\n    animationDuration: \"2000ms\",\n    animationTimingFunction: \"linear\",\n    animationIterationCount: \"infinite\",\n  },\n  placeholderRowContainerPlain: {\n    left: 10,\n  },\n  placeholderRow: {\n    height: 14,\n    width: \"30%\",\n    backgroundColor: colors.gray[200],\n    borderRadius: radii[6],\n  },\n  placeholderRowEnd: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  smallPlaceholderRow: {\n    width: \"10%\",\n  },\n  centerSegmentContainer: {\n    flexGrow: 1,\n  },\n  rowLeftRadii: {\n    borderTopLeftRadius: radii[4],\n    borderBottomLeftRadius: radii[4],\n  },\n  rowRightRadii: {\n    borderTopRightRadius: radii[4],\n    borderBottomRightRadius: radii[4],\n  },\n  emptyListContainer: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: backgroundColor.default,\n  },\n  emptyListContentContainer: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: spacings[48],\n    minHeight: \"100%\",\n  },\n  emptyList: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  loadingPlaceholder: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n  },\n  topGradient: {\n    height: 30,\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: \"100%\",\n    backgroundImage: `linear-gradient(to bottom, ${backgroundColor.default}, ${backgroundColor.defaultTransparent})`,\n    opacity: 0,\n    transition: \"200ms ease-in-out opacity\",\n    pointerEvents: \"none\",\n  },\n  visibleTopGradient: {\n    opacity: 1,\n  },\n});\n\ntype RowBackgroundProps = {\n  absoluteIndex: number;\n  id: string;\n  isHovered: boolean;\n  isHighlighted: boolean;\n  top: number;\n  rowVerticalSpacing: number;\n  rowHeight: number;\n  onMouseEnter: (id: string) => void;\n  onMouseLeave: () => void;\n  mode: Mode;\n};\n\nconst RowBackground = ({\n  absoluteIndex,\n  id,\n  isHovered,\n  isHighlighted,\n  top,\n  rowHeight,\n  rowVerticalSpacing,\n  onMouseEnter,\n  onMouseLeave,\n  mode,\n}: RowBackgroundProps) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart: () => onMouseEnter(id),\n    onHoverEnd: () => onMouseLeave(),\n  });\n\n  return (\n    <View\n      style={[\n        styles.rowBackgroundContainer,\n        mode === \"plain\" && styles.rowBackgroundContainerPlain,\n        { top, paddingVertical: rowVerticalSpacing / 2 },\n      ]}\n      ref={containerRef}\n    >\n      {mode === \"tile\" ? (\n        <View\n          style={[\n            styles.rowBackground,\n            isHovered ? styles.hoveredRowShadow : styles.rowShadow,\n            isHighlighted && styles.highlightedRow,\n            absoluteIndex % 2 === 0 ? styles.evenRow : styles.oddRow,\n            { height: rowHeight },\n          ]}\n        />\n      ) : (\n        <View style={[styles.rowPlainBackground, { height: rowHeight }]} />\n      )}\n    </View>\n  );\n};\n\nconst MemoizedRowBackground = memo<RowBackgroundProps>(RowBackground);\n\ntype RowSegmentProps<T, ExtraInfo> = {\n  mode?: Mode;\n  columns: ColumnConfig<T, ExtraInfo>[];\n  item: T;\n  style: ViewProps[\"style\"];\n  absoluteIndex: number;\n  viewId: string;\n  segmentColumn: \"start\" | \"center\" | \"end\";\n  width: number;\n  rowVerticalSpacing: number;\n  onMouseEnter: (id: string) => void;\n  onMouseLeave: () => void;\n  id: string;\n  isHovered: boolean;\n  onEndReached?: () => void;\n  extraInfo: ExtraInfo;\n  createRowWrapper: (props: {\n    item: T;\n    absoluteIndex: number;\n    extraInfo: ExtraInfo;\n  }) => ReactElement;\n  focusId: string;\n  top: number;\n  totalRowHeight: number;\n  minWidth?: number;\n};\n\nconst SEGMENTS_MAP = {\n  start: \"0\",\n  center: \"1\",\n  end: \"2\",\n};\n\nconst RowSegment = <T, ExtraInfo>({\n  columns,\n  item,\n  style,\n  absoluteIndex,\n  viewId,\n  segmentColumn,\n  rowVerticalSpacing,\n  width,\n  id,\n  isHovered,\n  extraInfo,\n  onMouseEnter,\n  onMouseLeave,\n  createRowWrapper,\n  focusId,\n  top,\n  totalRowHeight,\n  minWidth,\n}: RowSegmentProps<T, ExtraInfo>) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart: () => onMouseEnter(id),\n    onHoverEnd: () => onMouseLeave(),\n  });\n\n  const wrapper = createRowWrapper({ item, absoluteIndex, extraInfo });\n\n  return cloneElement(\n    wrapper,\n    {\n      id: focusId,\n      tabIndex: 0,\n      style: [\n        styles.rowSegment,\n        {\n          top,\n          height: totalRowHeight,\n          width: isNullish(minWidth) ? width : undefined,\n          minWidth,\n        },\n      ],\n    },\n    <View\n      style={[\n        styles.segment,\n        { width, paddingVertical: rowVerticalSpacing / 2 },\n        segmentColumn === \"center\" && styles.centerSegmentContainer,\n        segmentColumn === \"start\" && {\n          borderTopLeftRadius: radii[4],\n          borderBottomLeftRadius: radii[4],\n        },\n        segmentColumn === \"end\" && {\n          borderTopRightRadius: radii[4],\n          borderBottomRightRadius: radii[4],\n        },\n      ]}\n      ref={containerRef}\n      aria-hidden={false}\n    >\n      <View style={[styles.segmentOverflow, style]}>\n        {columns.map(({ id, width, renderCell }, index) => {\n          const columnId = `${viewId}_${id}`;\n          const paddedIndex = String(absoluteIndex).padStart(10, \"0\");\n          const paddedCellIndex = String(index).padStart(10, \"0\");\n\n          // The reason we use this shape is so that the IDs alphabetical order matches the semantical one:\n          // 1. Row index\n          // 2. Column index\n          // 3. Cell index\n          // -> See the `onKeyDown` handler\n          const focusId = `${viewId}__Row_${paddedIndex}_Segment_${SEGMENTS_MAP[segmentColumn]}_Cell_${paddedCellIndex}`;\n\n          return (\n            <View\n              style={[styles.cell, { width }]}\n              key={columnId}\n              aria-describedby={columnId}\n              id={focusId}\n            >\n              {renderCell({ columnId, item, index: absoluteIndex, extraInfo, isHovered })}\n            </View>\n          );\n        })}\n      </View>\n    </View>,\n  );\n};\n\nconst MemoizedRowSegment = memo(RowSegment) as typeof RowSegment;\n\ntype HeaderSegmentProps<T, ExtraInfo> = {\n  columns: ColumnConfig<T, ExtraInfo>[];\n  viewId: string;\n  extraInfo: ExtraInfo;\n  width: number;\n};\n\nconst HeaderSegment = <T, ExtraInfo>({\n  columns,\n  viewId,\n  extraInfo,\n  width,\n}: HeaderSegmentProps<T, ExtraInfo>) => {\n  return (\n    <View style={[styles.segment, { width }]}>\n      {columns.map(({ id, width, title, renderTitle }) => {\n        const columnId = `${viewId}_${id}`;\n\n        return (\n          <View style={[styles.segmentHeaderCell, { width }]} id={columnId} key={columnId}>\n            {renderTitle({ title, extraInfo, id })}\n          </View>\n        );\n      })}\n    </View>\n  );\n};\n\nconst findNextFocusableElement = (\n  sortedCellIds: string[],\n  currentCellIndex: number,\n  direction: -1 | 1,\n) => {\n  let index = currentCellIndex + direction;\n\n  while (index >= 0 && index < sortedCellIds.length) {\n    const nextCellId = sortedCellIds[index];\n\n    if (isNotNullish(nextCellId)) {\n      const previousCell = document.getElementById(nextCellId);\n\n      if (isNotNullish(previousCell)) {\n        const focusableElements = getFocusableElements(previousCell, false);\n        const nextFocusableElement =\n          direction === -1 ? last(focusableElements) : first(focusableElements);\n\n        if (isNotNullish(nextFocusableElement)) {\n          return nextFocusableElement;\n        }\n      }\n    }\n    index = index + direction;\n  }\n};\n\nconst EMPTY_COLUMNS: ColumnConfig<unknown, unknown>[] = [];\nconst ZERO = 0;\n\nexport const FixedListView = <T, ExtraInfo>({\n  data: originalData,\n  mode = \"tile\",\n  keyExtractor,\n  highlightedRowId,\n  rowHeight,\n  rowVerticalSpacing,\n  horizontalPadding = HORIZONTAL_SAFE_AREA,\n  headerBackgroundColor = backgroundColor.default,\n  headerHeight,\n  renderThreshold = 1000,\n  stickedToStartColumns: initialStickedToStartColumns = EMPTY_COLUMNS,\n  columns: initialColumns,\n  stickedToEndColumns: initialStickedToEndColumns = EMPTY_COLUMNS,\n  extraInfo,\n  onEndReached,\n  onEndReachedThresholdPx = 200,\n  getRowLink,\n  renderEmptyList,\n  loading,\n}: FixedListViewProps<T, ExtraInfo>) => {\n  const [viewId] = useState(() => uuid());\n  // Those three refs are used to synchronize the horizontal scroll in the center columns\n  const centerHeadersRef = useRef<ScrollViewRef | null>(null);\n  const centerColumnsRef = useRef<ScrollViewRef | null>(null);\n  const horizontalScrollbarRef = useRef<ScrollViewRef | null>(null);\n  const totalRowHeight = rowHeight + rowVerticalSpacing;\n  const rowsHeight = originalData.length * totalRowHeight;\n  const totalHeight = headerHeight + rowsHeight;\n  // It might seem off to use the range in state instead of storing scroll/layout and deriving it,\n  // but it saves a lot of render phases by allowing to bail out from rendering when the range doesn't change\n  const [\n    {\n      data,\n      range: [renderedRangeStartIndex, renderedRangeEndIndex],\n    },\n    setDataAndRenderRange,\n  ] = useState({ data: originalData, range: [0, 20] });\n\n  const startFocusAnchorRef = useRef<View | null>(null);\n  const endFocusAnchorRef = useRef<View | null>(null);\n\n  const [hasHorizontalScroll, setHasHorizontalScroll] = useState(false);\n  const [shouldAvoidStickyColumns, setShouldAvoidStickyColumns] = useState(false);\n  const [shouldShowStartGradient, setShouldShowStartGradient] = useState(false);\n  const [shouldShowEndGradient, setShouldShowEndGradient] = useState(true);\n  const [hoveredRow, setHoveredRow] = useState<string | undefined>(undefined);\n  const currentScrollY = useRef(0);\n  const lastKnownHeight = useRef(0);\n\n  const { stickedToStartColumns, columns, stickedToEndColumns } = useMemo(() => {\n    if (shouldAvoidStickyColumns) {\n      return {\n        stickedToStartColumns: [],\n        columns: [\n          ...initialStickedToStartColumns,\n          ...initialColumns,\n          ...initialStickedToEndColumns,\n        ],\n        stickedToEndColumns: [],\n      };\n    } else {\n      return {\n        stickedToStartColumns: initialStickedToStartColumns,\n        columns: initialColumns,\n        stickedToEndColumns: initialStickedToEndColumns,\n      };\n    }\n  }, [\n    initialStickedToStartColumns,\n    initialColumns,\n    initialStickedToEndColumns,\n    shouldAvoidStickyColumns,\n  ]);\n\n  const [isScrolled, setIsScrolled] = useState(false);\n\n  const removeHoveredRow = useCallback(() => {\n    setHoveredRow(undefined);\n  }, []);\n\n  const initialStickedToStartColumnsWidth = useMemo(\n    () => initialStickedToStartColumns.reduce((total, { width }) => total + width, 0),\n    [initialStickedToStartColumns],\n  );\n\n  const initialStickedToEndColumnsWidth = useMemo(\n    () => initialStickedToEndColumns.reduce((total, { width }) => total + width, 0),\n    [initialStickedToEndColumns],\n  );\n\n  const stickedToStartColumnsWidth = useMemo(\n    () => stickedToStartColumns.reduce((total, { width }) => total + width, 0),\n    [stickedToStartColumns],\n  );\n\n  const stickedToEndColumnsWidth = useMemo(\n    () => stickedToEndColumns.reduce((total, { width }) => total + width, 0),\n    [stickedToEndColumns],\n  );\n\n  const centerColumnsWidth = useMemo(\n    () => columns.reduce((total, { width }) => total + width, 0),\n    [columns],\n  );\n\n  const centerSegmentStyle = useMemo(\n    () => [\n      stickedToStartColumns.length === 0 && styles.rowLeftRadii,\n      stickedToEndColumns.length === 0 && styles.rowRightRadii,\n    ],\n    [stickedToStartColumns, stickedToEndColumns],\n  );\n\n  const createRowWrapper = useCallback(\n    ({\n      item,\n      absoluteIndex,\n      extraInfo,\n    }: {\n      item: T;\n      absoluteIndex: number;\n      extraInfo: ExtraInfo;\n    }) => {\n      const customLinkElement = getRowLink?.({ item, index: absoluteIndex, extraInfo });\n      return isNullish(customLinkElement) ? <View /> : customLinkElement;\n    },\n    [getRowLink],\n  );\n\n  const [backgroundRows, startRows, centerRows, endRows] = useMemo(() => {\n    const length = Math.max(0, renderedRangeEndIndex - renderedRangeStartIndex);\n\n    const backgroundRows = Array(length) as ReactNode[];\n    const startRows = Array(length) as ReactNode[];\n    const centerRows = Array(length) as ReactNode[];\n    const endRows = Array(length) as ReactNode[];\n\n    let index = -1;\n\n    while (++index < length) {\n      const absoluteIndex = renderedRangeStartIndex + index;\n      const item = data[absoluteIndex];\n\n      if (isNullish(item)) {\n        continue;\n      }\n\n      const key = keyExtractor(item, absoluteIndex);\n      const top = absoluteIndex * totalRowHeight;\n      const isHoveredRow = hoveredRow === key;\n      const isHighlightedRow = highlightedRowId === key;\n\n      const paddedIndex = String(absoluteIndex).padStart(10, \"0\");\n      const focusId = `${viewId}__Row_${paddedIndex}`;\n\n      backgroundRows[index] = (\n        <MemoizedRowBackground\n          key={key}\n          mode={mode}\n          isHovered={isHoveredRow}\n          isHighlighted={isHighlightedRow}\n          absoluteIndex={absoluteIndex}\n          top={top}\n          id={key}\n          rowHeight={rowHeight}\n          rowVerticalSpacing={rowVerticalSpacing}\n          onMouseEnter={setHoveredRow}\n          onMouseLeave={removeHoveredRow}\n        />\n      );\n\n      if (stickedToStartColumns.length > 0) {\n        startRows[index] = (\n          <MemoizedRowSegment<T, ExtraInfo>\n            key={key}\n            createRowWrapper={createRowWrapper}\n            focusId={focusId}\n            top={top}\n            totalRowHeight={totalRowHeight}\n            id={key}\n            style={styles.rowLeftRadii}\n            onMouseEnter={setHoveredRow}\n            onMouseLeave={removeHoveredRow}\n            segmentColumn=\"start\"\n            columns={stickedToStartColumns}\n            width={stickedToStartColumnsWidth}\n            item={item}\n            absoluteIndex={absoluteIndex}\n            rowVerticalSpacing={rowVerticalSpacing}\n            viewId={viewId}\n            isHovered={isHoveredRow}\n            extraInfo={extraInfo}\n          />\n        );\n      }\n\n      centerRows[index] = (\n        <MemoizedRowSegment<T, ExtraInfo>\n          key={key}\n          mode={mode}\n          createRowWrapper={createRowWrapper}\n          focusId={focusId}\n          top={top}\n          totalRowHeight={totalRowHeight}\n          minWidth={centerColumnsWidth}\n          id={key}\n          style={centerSegmentStyle}\n          onMouseEnter={setHoveredRow}\n          onMouseLeave={removeHoveredRow}\n          segmentColumn=\"center\"\n          columns={columns}\n          width={centerColumnsWidth}\n          item={item}\n          absoluteIndex={absoluteIndex}\n          rowVerticalSpacing={rowVerticalSpacing}\n          viewId={viewId}\n          isHovered={isHoveredRow}\n          extraInfo={extraInfo}\n        />\n      );\n\n      if (stickedToEndColumns.length > 0) {\n        endRows[index] = (\n          <MemoizedRowSegment<T, ExtraInfo>\n            key={key}\n            createRowWrapper={createRowWrapper}\n            focusId={focusId}\n            top={top}\n            totalRowHeight={totalRowHeight}\n            id={key}\n            style={styles.rowLeftRadii}\n            onMouseEnter={setHoveredRow}\n            onMouseLeave={removeHoveredRow}\n            segmentColumn=\"end\"\n            columns={stickedToEndColumns}\n            width={stickedToEndColumnsWidth}\n            item={item}\n            absoluteIndex={absoluteIndex}\n            rowVerticalSpacing={rowVerticalSpacing}\n            viewId={viewId}\n            isHovered={isHoveredRow}\n            extraInfo={extraInfo}\n          />\n        );\n      }\n    }\n\n    return [backgroundRows, startRows, centerRows, endRows];\n  }, [\n    data,\n    renderedRangeStartIndex,\n    renderedRangeEndIndex,\n    keyExtractor,\n    highlightedRowId,\n    rowHeight,\n    totalRowHeight,\n    columns,\n    stickedToEndColumns,\n    stickedToStartColumns,\n    viewId,\n    stickedToStartColumnsWidth,\n    centerColumnsWidth,\n    stickedToEndColumnsWidth,\n    hoveredRow,\n    rowVerticalSpacing,\n    extraInfo,\n    removeHoveredRow,\n    centerSegmentStyle,\n    createRowWrapper,\n    mode,\n  ]);\n\n  // Used to fix some scrollbar behavior. See `main.css`.\n  useLayoutEffect(() => {\n    centerHeadersRef.current?.element?.setAttribute(\"data-hide-scrollbar\", String(true));\n    centerColumnsRef.current?.element?.setAttribute(\"data-hide-scrollbar\", String(true));\n    horizontalScrollbarRef.current?.element?.setAttribute(\"data-force-scrollbar\", String(true));\n  }, []);\n\n  // To synchronize scrolls, we keep track of the initiator in order to ignore the scroll events\n  // we provoke ourselves with the sync.\n  const lastHorizontalScroll = useRef<{\n    initiator: \"headers\" | \"columns\" | \"scrollbar\";\n    date: number;\n  }>({\n    initiator: \"columns\",\n    date: 0,\n  });\n\n  useEffect(() => {\n    if (\n      isNotNullish(centerHeadersRef.current) &&\n      isNotNullish(centerColumnsRef.current) &&\n      isNotNullish(horizontalScrollbarRef.current)\n    ) {\n      const SCROLL_THRESHOLD_MS = 500;\n      const centerColumns = centerColumnsRef.current.element as HTMLElement;\n      const centerHeaders = centerHeadersRef.current.element as HTMLElement;\n      const horizontalScrollbar = horizontalScrollbarRef.current.element as HTMLElement;\n      const onColumnsScroll = () => {\n        const now = Date.now();\n        if (\n          lastHorizontalScroll.current.initiator === \"columns\" ||\n          now - lastHorizontalScroll.current.date > SCROLL_THRESHOLD_MS\n        ) {\n          const scrollLeft = centerColumns.scrollLeft;\n          setShouldShowStartGradient(scrollLeft > 0);\n          setShouldShowEndGradient(\n            centerColumns.scrollWidth - horizontalPadding * 2 >=\n              scrollLeft + centerColumns.clientWidth,\n          );\n          centerHeaders.scrollLeft = scrollLeft;\n          horizontalScrollbar.scrollLeft = scrollLeft;\n          lastHorizontalScroll.current = { initiator: \"columns\", date: now };\n        }\n      };\n      const onHeadersScroll = () => {\n        const now = Date.now();\n        if (\n          lastHorizontalScroll.current.initiator === \"headers\" ||\n          now - lastHorizontalScroll.current.date > SCROLL_THRESHOLD_MS\n        ) {\n          const scrollLeft = centerHeaders.scrollLeft;\n          setShouldShowStartGradient(scrollLeft > 0);\n          setShouldShowEndGradient(\n            centerHeaders.scrollWidth - horizontalPadding * 2 >=\n              scrollLeft + centerHeaders.clientWidth,\n          );\n          centerColumns.scrollLeft = scrollLeft;\n          horizontalScrollbar.scrollLeft = scrollLeft;\n          lastHorizontalScroll.current = { initiator: \"headers\", date: now };\n        }\n      };\n      const onScrollbarScroll = () => {\n        const now = Date.now();\n        if (\n          lastHorizontalScroll.current.initiator === \"scrollbar\" ||\n          now - lastHorizontalScroll.current.date > SCROLL_THRESHOLD_MS\n        ) {\n          const scrollLeft = horizontalScrollbar.scrollLeft;\n          setShouldShowStartGradient(scrollLeft > 0);\n          setShouldShowEndGradient(\n            horizontalScrollbar.scrollWidth - horizontalPadding * 2 >=\n              scrollLeft + horizontalScrollbar.clientWidth,\n          );\n          centerHeaders.scrollLeft = scrollLeft;\n          centerColumns.scrollLeft = scrollLeft;\n          lastHorizontalScroll.current = { initiator: \"scrollbar\", date: now };\n        }\n      };\n      centerColumns.addEventListener(\"scroll\", onColumnsScroll, { passive: true });\n      centerHeaders.addEventListener(\"scroll\", onHeadersScroll, { passive: true });\n      horizontalScrollbar.addEventListener(\"scroll\", onScrollbarScroll, { passive: true });\n      return () => {\n        centerColumns.removeEventListener(\"scroll\", onColumnsScroll);\n        centerHeaders.removeEventListener(\"scroll\", onHeadersScroll);\n        horizontalScrollbar.removeEventListener(\"scroll\", onScrollbarScroll);\n      };\n    }\n  }, [horizontalPadding]);\n\n  const onKeyDown = useCallback(\n    (event: NativeSyntheticEvent<React.KeyboardEvent>) => {\n      const target = event.nativeEvent.target as Element;\n      const currentTarget = event.nativeEvent.currentTarget;\n      const currentCell = target.closest(`[id^=\"${viewId}__Row\"]`);\n      const currentCellId = currentCell?.id;\n      if (event.nativeEvent.key === \"Tab\" && isNotNullish(currentCell)) {\n        const focusableElements = getFocusableElements(currentCell, false);\n        const firstFocusableElement = first(focusableElements);\n        const lastFocusableElement = last(focusableElements);\n        const sortedCellIds = Array.from(\n          currentTarget.querySelectorAll(`[id^=\"${viewId}__Row\"]`),\n          item => item.id,\n        ).sort();\n        const currentCellIndex = sortedIndexOf(sortedCellIds, currentCellId);\n        const isTargetFirst = isNullish(firstFocusableElement) || firstFocusableElement === target;\n        const isTargetLast = isNullish(lastFocusableElement) || lastFocusableElement === target;\n        if (isTargetFirst && event.nativeEvent.shiftKey && first(sortedCellIds) !== currentCellId) {\n          const lastFocusableElement = findNextFocusableElement(\n            sortedCellIds,\n            currentCellIndex,\n            -1,\n          );\n          if (isNotNullish(lastFocusableElement)) {\n            event.preventDefault();\n            lastFocusableElement.focus();\n          } else {\n            event.preventDefault();\n            startFocusAnchorRef.current?.focus();\n          }\n        }\n        if (isTargetLast && !event.nativeEvent.shiftKey && last(sortedCellIds) !== currentCellId) {\n          const firstFocusableElement = findNextFocusableElement(\n            sortedCellIds,\n            currentCellIndex,\n            1,\n          );\n          if (isNotNullish(firstFocusableElement)) {\n            event.preventDefault();\n            firstFocusableElement.focus();\n          } else {\n            event.preventDefault();\n            endFocusAnchorRef.current?.focus();\n          }\n        }\n      }\n    },\n    [viewId],\n  );\n\n  useLayoutEffect(() => {\n    const renderedRangeStartIndex = Math.max(\n      0,\n      Math.floor((currentScrollY.current - renderThreshold) / totalRowHeight),\n    );\n\n    const renderedRangeEndIndex = Math.min(\n      originalData.length,\n      renderedRangeStartIndex +\n        Math.ceil((lastKnownHeight.current + renderThreshold * 2) / totalRowHeight),\n    );\n    setDataAndRenderRange(prevRenderRange => {\n      const {\n        data,\n        range: [prevRenderedRangeStartIndex, prevRenderedRangeEndIndex],\n      } = prevRenderRange;\n      if (\n        prevRenderedRangeStartIndex === renderedRangeStartIndex &&\n        prevRenderedRangeEndIndex === renderedRangeEndIndex &&\n        data === originalData\n      ) {\n        return prevRenderRange;\n      }\n      return { data: originalData, range: [renderedRangeStartIndex, renderedRangeEndIndex] };\n    });\n  }, [originalData, renderThreshold, totalRowHeight]);\n\n  const onLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { height, width },\n      },\n    }: LayoutChangeEvent) => {\n      lastKnownHeight.current = height;\n      const renderedRangeStartIndex = Math.max(\n        0,\n        Math.floor((currentScrollY.current - renderThreshold) / totalRowHeight),\n      );\n      const renderedRangeEndIndex = Math.min(\n        originalData.length,\n        renderedRangeStartIndex + Math.ceil((height + renderThreshold * 2) / totalRowHeight),\n      );\n      setDataAndRenderRange(prevRenderRange => {\n        const {\n          data,\n          range: [prevRenderedRangeStartIndex, prevRenderedRangeEndIndex],\n        } = prevRenderRange;\n        if (\n          prevRenderedRangeStartIndex === renderedRangeStartIndex &&\n          prevRenderedRangeEndIndex === renderedRangeEndIndex &&\n          data === originalData\n        ) {\n          return prevRenderRange;\n        }\n        return { data: originalData, range: [renderedRangeStartIndex, renderedRangeEndIndex] };\n      });\n\n      if (\n        isNotNullish(onEndReached) &&\n        !hasEndReachedBeenCalled.current &&\n        height >= totalHeight - onEndReachedThresholdPx\n      ) {\n        hasEndReachedBeenCalled.current = true;\n        onEndReached();\n      }\n      setShouldAvoidStickyColumns(\n        width - (initialStickedToStartColumnsWidth + initialStickedToEndColumnsWidth) < 300,\n      );\n    },\n    [\n      originalData,\n      renderThreshold,\n      totalRowHeight,\n      onEndReached,\n      onEndReachedThresholdPx,\n      totalHeight,\n      initialStickedToStartColumnsWidth,\n      initialStickedToEndColumnsWidth,\n    ],\n  );\n\n  const scrollTimeoutRef = useRef<number | undefined>(undefined);\n  const scrollContentsRef = useRef<View | null>(null);\n\n  const hasEndReachedBeenCalled = useRef(false);\n\n  useEffect(() => {\n    if (\n      isNotNullish(onEndReached) &&\n      !hasEndReachedBeenCalled.current &&\n      lastKnownHeight.current >= totalHeight - onEndReachedThresholdPx\n    ) {\n      hasEndReachedBeenCalled.current = true;\n      onEndReached();\n      return;\n    }\n\n    hasEndReachedBeenCalled.current = false;\n  }, [data, onEndReached, onEndReachedThresholdPx, totalHeight]);\n\n  const onScroll = useCallback(\n    ({\n      nativeEvent: {\n        contentOffset: { y },\n        layoutMeasurement: { height },\n        contentSize: { height: contentHeight },\n      },\n    }: NativeSyntheticEvent<NativeScrollEvent>) => {\n      setIsScrolled(y > 0);\n\n      lastKnownHeight.current = height;\n      currentScrollY.current = y;\n      if (isNotNullish(scrollTimeoutRef.current)) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n      if (scrollContentsRef.current instanceof HTMLElement) {\n        scrollContentsRef.current.style.pointerEvents = \"none\";\n      }\n      scrollTimeoutRef.current = window.setTimeout(() => {\n        if (scrollContentsRef.current instanceof HTMLElement) {\n          scrollContentsRef.current.style.pointerEvents = \"auto\";\n        }\n      }, 100);\n\n      const renderedRangeStartIndex = Math.max(\n        0,\n        Math.floor((currentScrollY.current - renderThreshold) / totalRowHeight),\n      );\n\n      const renderedRangeEndIndex = Math.min(\n        data.length,\n        renderedRangeStartIndex + Math.ceil((height + renderThreshold * 2) / totalRowHeight),\n      );\n\n      setDataAndRenderRange(prevRenderRange => {\n        const {\n          data,\n          range: [prevRenderedRangeStartIndex, prevRenderedRangeEndIndex],\n        } = prevRenderRange;\n\n        return prevRenderedRangeStartIndex === renderedRangeStartIndex &&\n          prevRenderedRangeEndIndex === renderedRangeEndIndex &&\n          data === data\n          ? prevRenderRange\n          : { data, range: [renderedRangeStartIndex, renderedRangeEndIndex] };\n      });\n\n      if (\n        isNotNullish(onEndReached) &&\n        !hasEndReachedBeenCalled.current &&\n        y + height >= contentHeight - onEndReachedThresholdPx\n      ) {\n        hasEndReachedBeenCalled.current = true;\n        onEndReached();\n      }\n    },\n    [data.length, renderThreshold, totalRowHeight, onEndReached, onEndReachedThresholdPx],\n  );\n\n  const onCenterTrackLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { width },\n      },\n    }: LayoutChangeEvent) => {\n      setHasHorizontalScroll(centerColumnsWidth > width);\n    },\n    [centerColumnsWidth],\n  );\n\n  const isLoading = isNotNullish(loading) && loading.isLoading;\n\n  return (\n    <View style={styles.root}>\n      <View ref={startFocusAnchorRef} tabIndex={0} />\n\n      <ScrollView\n        onKeyDown={onKeyDown}\n        onLayout={onLayout}\n        onScroll={onScroll}\n        scrollEventThrottle={32}\n        style={[styles.container, mode === \"tile\" && styles.containerTile]}\n        contentContainerStyle={[\n          styles.contentContainer,\n          {\n            height:\n              totalHeight +\n              SCROLLBAR_RESERVED_SPACE +\n              (isLoading ? loading.count * (rowHeight + rowVerticalSpacing) : 0),\n          },\n        ]}\n      >\n        <View\n          aria-busy={isLoading}\n          style={[\n            styles.loadingPlaceholder,\n            {\n              top: rowsHeight,\n              marginLeft: horizontalPadding * 2,\n              marginRight: horizontalPadding * 2,\n            },\n          ]}\n        >\n          {isLoading\n            ? match(mode)\n                .with(\"tile\", () => (\n                  <FixedListViewPlaceholder\n                    count={loading.count}\n                    headerHeight={headerHeight}\n                    rowHeight={rowHeight}\n                    rowVerticalSpacing={rowVerticalSpacing}\n                    paddingHorizontal={0}\n                  />\n                ))\n                .with(\"plain\", () => (\n                  <PlainListViewPlaceholder\n                    count={loading.count}\n                    headerHeight={headerHeight}\n                    rowHeight={rowHeight}\n                    rowVerticalSpacing={rowVerticalSpacing}\n                    paddingHorizontal={0}\n                  />\n                ))\n                .exhaustive()\n            : null}\n        </View>\n\n        <View style={[styles.backgroundRows, { top: headerHeight }]}>{backgroundRows}</View>\n\n        <View style={styles.scrollContentContainer} ref={scrollContentsRef}>\n          {stickedToStartColumns.length > 0 ? (\n            <View\n              style={[\n                styles.stickyColumn,\n                {\n                  width: stickedToStartColumnsWidth + horizontalPadding,\n                  paddingLeft: horizontalPadding,\n                },\n              ]}\n            >\n              <View\n                style={[\n                  styles.headingSegment,\n                  { height: headerHeight, backgroundColor: headerBackgroundColor },\n                ]}\n              >\n                <HeaderSegment\n                  columns={stickedToStartColumns}\n                  extraInfo={extraInfo}\n                  viewId={viewId}\n                  width={stickedToStartColumnsWidth}\n                />\n\n                <View\n                  style={[\n                    styles.stickyColumnStartOverflow,\n                    { width: horizontalPadding, backgroundColor: headerBackgroundColor },\n                  ]}\n                />\n\n                <View style={[styles.topGradient, isScrolled && styles.visibleTopGradient]} />\n              </View>\n\n              <View style={{ height: rowsHeight }}>{startRows}</View>\n            </View>\n          ) : null}\n\n          <View\n            style={[\n              styles.centerColumnsContainer,\n              {\n                paddingLeft: stickedToStartColumns.length === 0 ? horizontalPadding : ZERO,\n                paddingRight: stickedToEndColumns.length === 0 ? horizontalPadding : ZERO,\n              },\n            ]}\n          >\n            <View\n              style={[\n                styles.headingSegment,\n                { height: headerHeight, backgroundColor: headerBackgroundColor },\n              ]}\n            >\n              <ScrollView\n                ref={centerHeadersRef}\n                horizontal={true}\n                onLayout={onCenterTrackLayout}\n                style={styles.centerColumns}\n                contentContainerStyle={{\n                  minWidth:\n                    centerColumnsWidth +\n                    (stickedToStartColumns.length === 0 ? horizontalPadding : 0) +\n                    (stickedToEndColumns.length === 0 ? horizontalPadding : 0),\n                }}\n              >\n                <HeaderSegment\n                  columns={columns}\n                  extraInfo={extraInfo}\n                  viewId={viewId}\n                  width={centerColumnsWidth}\n                />\n              </ScrollView>\n\n              <View style={[styles.topGradient, isScrolled && styles.visibleTopGradient]} />\n            </View>\n\n            <ScrollView\n              horizontal={true}\n              ref={centerColumnsRef}\n              style={styles.centerColumns}\n              contentContainerStyle={[\n                styles.centerColumnsContentContainer,\n                {\n                  minWidth:\n                    centerColumnsWidth +\n                    (stickedToStartColumns.length === 0 ? horizontalPadding : 0) +\n                    (stickedToEndColumns.length === 0 ? horizontalPadding : 0),\n                },\n              ]}\n            >\n              {centerRows}\n            </ScrollView>\n\n            <ScrollView\n              ref={horizontalScrollbarRef}\n              horizontal={true}\n              style={styles.horizontalScrollbar}\n              contentContainerStyle={{\n                minWidth:\n                  centerColumnsWidth +\n                  (stickedToStartColumns.length === 0 ? horizontalPadding : 0) +\n                  (stickedToEndColumns.length === 0 ? horizontalPadding : 0),\n              }}\n            />\n\n            {stickedToStartColumns.length > 0 && hasHorizontalScroll ? (\n              <View\n                style={[\n                  styles.leftToRightGradient,\n                  {\n                    maxHeight: data.length * totalRowHeight,\n                    top: headerHeight,\n                    bottom: SCROLLBAR_RESERVED_SPACE + rowVerticalSpacing / 2,\n                  },\n                  shouldShowStartGradient && styles.visibleGradient,\n                ]}\n              ></View>\n            ) : null}\n\n            {stickedToEndColumns.length > 0 && hasHorizontalScroll ? (\n              <View\n                style={[\n                  styles.rightToLeftGradient,\n                  {\n                    maxHeight: data.length * totalRowHeight,\n                    top: headerHeight,\n                    bottom: SCROLLBAR_RESERVED_SPACE + rowVerticalSpacing / 2,\n                  },\n                  shouldShowEndGradient && styles.visibleGradient,\n                ]}\n              ></View>\n            ) : null}\n          </View>\n\n          {stickedToEndColumns.length > 0 ? (\n            <View\n              style={[\n                styles.stickyColumn,\n                {\n                  width: stickedToEndColumnsWidth + horizontalPadding,\n                  paddingRight: horizontalPadding,\n                },\n              ]}\n            >\n              <View\n                style={[\n                  styles.headingSegment,\n                  { height: headerHeight, backgroundColor: headerBackgroundColor },\n                ]}\n              >\n                <View\n                  style={[\n                    styles.stickyColumnEndOverflow,\n                    { width: horizontalPadding, backgroundColor: headerBackgroundColor },\n                  ]}\n                />\n\n                <HeaderSegment\n                  columns={stickedToEndColumns}\n                  extraInfo={extraInfo}\n                  viewId={viewId}\n                  width={stickedToEndColumnsWidth}\n                />\n\n                <View style={[styles.topGradient, isScrolled && styles.visibleTopGradient]} />\n              </View>\n\n              <View style={{ height: rowsHeight }}>{endRows}</View>\n            </View>\n          ) : null}\n        </View>\n      </ScrollView>\n\n      {data.length === 0 && isNotNullish(renderEmptyList) && !isLoading ? (\n        <ScrollView\n          style={styles.emptyListContainer}\n          contentContainerStyle={styles.emptyListContentContainer}\n        >\n          {renderEmptyList()}\n        </ScrollView>\n      ) : null}\n\n      <View ref={endFocusAnchorRef} tabIndex={0} />\n    </View>\n  );\n};\n\ntype PlaceholderProps = {\n  count: number;\n  rowHeight: number;\n  rowVerticalSpacing: number;\n  groupHeaderHeight?: number;\n  headerHeight?: number;\n  paddingHorizontal?: number;\n};\n\nexport const FixedListViewPlaceholder = ({\n  count,\n  rowHeight,\n  rowVerticalSpacing,\n  groupHeaderHeight,\n  headerHeight,\n  paddingHorizontal = HORIZONTAL_SAFE_AREA,\n}: PlaceholderProps) => {\n  const totalRowHeight = rowHeight + rowVerticalSpacing;\n\n  return (\n    <View style={[styles.container, styles.containerTile]}>\n      {isNotNullish(headerHeight) ? <View style={{ height: headerHeight }} /> : null}\n      {isNotNullish(groupHeaderHeight) ? <View style={{ height: headerHeight }} /> : null}\n\n      <View>\n        {Array.from({ length: count }, (_, index) => {\n          const top = index * totalRowHeight + rowVerticalSpacing / 2;\n\n          return (\n            <Fragment key={String(index)}>\n              <MemoizedRowBackground\n                isHovered={false}\n                isHighlighted={false}\n                absoluteIndex={index}\n                top={top}\n                rowVerticalSpacing={rowVerticalSpacing}\n                id={String(index)}\n                rowHeight={rowHeight}\n                onMouseEnter={noop}\n                onMouseLeave={noop}\n                mode=\"tile\"\n              />\n\n              <View\n                key={String(index)}\n                style={[\n                  styles.placeholderRowContainer,\n                  { height: totalRowHeight, top, paddingHorizontal },\n                ]}\n              >\n                <View style={styles.placeholderRow} />\n                <Space width={32} />\n                <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                <Space width={32} />\n\n                <View style={styles.placeholderRowEnd}>\n                  <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                </View>\n              </View>\n            </Fragment>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\nexport const PlainListViewPlaceholder = ({\n  count,\n  rowHeight,\n  rowVerticalSpacing,\n  groupHeaderHeight,\n  headerHeight,\n  paddingHorizontal = HORIZONTAL_SAFE_AREA,\n}: PlaceholderProps) => {\n  const totalRowHeight = rowHeight + rowVerticalSpacing;\n\n  return (\n    <View style={styles.container}>\n      {isNotNullish(headerHeight) ? <View style={{ height: headerHeight }} /> : null}\n      {isNotNullish(groupHeaderHeight) ? <View style={{ height: headerHeight }} /> : null}\n\n      <View>\n        {Array.from({ length: count }, (_, index) => {\n          const top = index * totalRowHeight + rowVerticalSpacing / 2;\n\n          return (\n            <Fragment key={String(index)}>\n              <MemoizedRowBackground\n                isHovered={false}\n                isHighlighted={false}\n                absoluteIndex={index}\n                top={top}\n                rowVerticalSpacing={rowVerticalSpacing}\n                id={String(index)}\n                rowHeight={rowHeight}\n                onMouseEnter={noop}\n                onMouseLeave={noop}\n                mode=\"plain\"\n              />\n\n              <View\n                key={String(index)}\n                style={[\n                  styles.placeholderRowContainer,\n                  styles.placeholderRowContainerPlain,\n                  { height: totalRowHeight, top, paddingHorizontal },\n                ]}\n              >\n                <View style={styles.placeholderRow} />\n                <Space width={32} />\n                <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                <Space width={32} />\n\n                <View style={styles.placeholderRowEnd}>\n                  <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                </View>\n              </View>\n            </Fragment>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\ntype EmptyProps = {\n  icon: IconName;\n  borderedIcon?: boolean;\n  borderedIconPadding?: SpacingValue | 0;\n  title?: string;\n  subtitle?: ReactNode;\n  children?: ReactNode;\n};\n\nexport const FixedListViewEmpty = ({\n  icon,\n  borderedIcon = false,\n  borderedIconPadding,\n  title,\n  subtitle,\n  children,\n}: EmptyProps) => (\n  <View style={styles.emptyList}>\n    {borderedIcon ? (\n      <BorderedIcon name={icon} padding={borderedIconPadding} />\n    ) : (\n      <Icon name={icon} size={96} color={colors.current.primary} />\n    )}\n\n    <Space height={24} />\n\n    {isNotNullish(title) && (\n      <>\n        <LakeHeading align=\"center\" level={3} variant=\"h5\">\n          {title}\n        </LakeHeading>\n\n        <Space height={8} />\n      </>\n    )}\n\n    {isNotNullish(subtitle) && <LakeText align=\"center\">{subtitle}</LakeText>}\n    {children}\n  </View>\n);\n","import { ComponentProps, ReactNode, useCallback, useState } from \"react\";\nimport { GestureResponderEvent, StyleSheet, View } from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { visuallyHiddenStyle } from \"../constants/commonStyles\";\nimport { ColorVariants, colors, spacings } from \"../constants/design\";\nimport { setClipboardText } from \"../utils/clipboard\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { LakeText, TextVariant } from \"./LakeText\";\nimport { LakeTooltip } from \"./LakeTooltip\";\nimport { Pressable } from \"./Pressable\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  cellContainer: {\n    display: \"flex\",\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  balanceCellContainer: {\n    width: \"100%\",\n  },\n  cell: {\n    display: \"flex\",\n    paddingHorizontal: spacings[16],\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  disabledCellHeader: {\n    cursor: \"text\",\n  },\n  icon: {\n    alignSelf: \"stretch\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingHorizontal: spacings[4],\n  },\n  iconContainer: {\n    flexDirection: \"row\",\n    alignSelf: \"stretch\",\n    alignItems: \"stretch\",\n    justifyContent: \"center\",\n  },\n  centeredCell: {\n    justifyContent: \"center\",\n  },\n  endAlignedCell: {\n    justifyContent: \"flex-end\",\n  },\n  regularText: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    width: 1,\n    flexGrow: 1,\n    whiteSpace: \"nowrap\",\n  },\n  mediumText: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    width: 1,\n    flexGrow: 1,\n    whiteSpace: \"nowrap\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  colorPatch: {\n    flexGrow: 1,\n  },\n  alternativeText: visuallyHiddenStyle,\n  sortIcon: {\n    transitionProperty: \"transform\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  sortIconReversed: {\n    transform: \"rotate(-180deg)\",\n  },\n  cellAction: {\n    paddingVertical: spacings[16],\n    paddingHorizontal: spacings[8],\n  },\n  underline: {\n    boxShadow: \"inset 0 -2px currentColor\",\n  },\n  sortHorizontalBar: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 2,\n    bottom: -10,\n    backgroundColor: colors.current[500],\n    borderBottomColor: colors.current[500],\n  },\n});\n\ntype Justify = \"flex-start\" | \"center\" | \"flex-end\";\ntype SortDirection = \"Desc\" | \"Asc\";\n\nexport const SimpleHeaderCell = ({\n  text,\n  sort,\n  justifyContent = \"flex-start\",\n  onPress,\n}: {\n  text: string;\n  justifyContent?: Justify;\n  sort?: SortDirection;\n  onPress?: (direction: SortDirection) => void;\n}) => {\n  const sortActive = isNotNullish(sort) && isNotNullish(onPress);\n  const disabled = isNullish(onPress);\n\n  return (\n    <Pressable\n      onPress={() => {\n        onPress?.(\n          match(sort)\n            .returnType<SortDirection>()\n            .with(\"Desc\", () => \"Asc\")\n            .with(\"Asc\", () => \"Desc\")\n            .otherwise(() => \"Desc\"),\n        );\n      }}\n      disabled={disabled}\n      style={[styles.cellContainer, disabled && styles.disabledCellHeader]}\n      role=\"columnheader\"\n    >\n      {({ hovered }) => (\n        <View style={[styles.cell, { justifyContent }]}>\n          <View>\n            <Box direction=\"row\" alignItems=\"center\">\n              <LakeText\n                numberOfLines={1}\n                variant=\"medium\"\n                color={sortActive ? colors.current[500] : colors.gray[900]}\n                style={{\n                  textAlign: match(justifyContent)\n                    .with(\"flex-start\", () => \"left\" as const)\n                    .with(\"center\", () => \"center\" as const)\n                    .with(\"flex-end\", () => \"right\" as const)\n                    .exhaustive(),\n                }}\n              >\n                {text}\n              </LakeText>\n\n              {isNotNullish(onPress) ? (\n                <>\n                  <Space width={8} />\n\n                  <Box style={[styles.sortIcon, sort === \"Asc\" && styles.sortIconReversed]}>\n                    <Icon\n                      size={15}\n                      color={sortActive ? colors.current[500] : colors.gray[500]}\n                      name={sortActive ? \"arrow-down-filled\" : \"chevron-up-down-regular\"}\n                    />\n                  </Box>\n                </>\n              ) : null}\n            </Box>\n\n            {sortActive ? (\n              <View style={styles.sortHorizontalBar} />\n            ) : hovered ? (\n              <View style={[styles.sortHorizontalBar, { backgroundColor: colors.gray[900] }]} />\n            ) : null}\n          </View>\n        </View>\n      )}\n    </Pressable>\n  );\n};\n\nexport const ColorPatchCell = ({\n  isHovered,\n  alternativeText,\n  color,\n}: {\n  isHovered: boolean;\n  alternativeText?: string;\n  color: ColorVariants;\n}) => {\n  return isHovered ? (\n    <View style={[styles.colorPatch, { backgroundColor: colors[color].primary }]}>\n      {isNotNullish(alternativeText) ? (\n        <LakeText style={styles.alternativeText}>{alternativeText}</LakeText>\n      ) : null}\n    </View>\n  ) : null;\n};\n\nexport const SimpleTitleCell = ({\n  isHighlighted = false,\n  text,\n  tooltip,\n}: {\n  isHighlighted?: boolean;\n  text: string;\n  tooltip?: Omit<ComponentProps<typeof LakeTooltip>, \"children\">;\n}) => (\n  <View style={styles.cell}>\n    <LakeText\n      numberOfLines={1}\n      color={isHighlighted ? colors.current.primary : colors.gray[900]}\n      style={styles.regularText}\n      variant=\"medium\"\n      tooltip={tooltip}\n    >\n      {text}\n    </LakeText>\n  </View>\n);\n\nexport const SimpleRegularTextCell = ({\n  variant = \"regular\",\n  text,\n  textAlign = \"left\",\n  color = colors.gray[900],\n}: {\n  variant?: TextVariant;\n  text: string;\n  textAlign?: \"left\" | \"center\" | \"right\";\n  color?: string;\n}) => {\n  return (\n    <View style={styles.cell}>\n      <LakeText align={textAlign} color={color} style={styles.regularText} variant={variant}>\n        {text}\n      </LakeText>\n    </View>\n  );\n};\n\nexport const CopyableRegularTextCell = ({\n  variant = \"regular\",\n  text,\n  textToCopy,\n  copyWording,\n  copiedWording,\n  tooltip,\n}: {\n  variant?: TextVariant;\n  text: string;\n  textToCopy?: string;\n  copyWording: string;\n  copiedWording: string;\n  tooltip?: Omit<ComponentProps<typeof LakeTooltip>, \"children\">;\n}) => {\n  const [visibleState, setVisibleState] = useState<\"copy\" | \"copied\">(\"copy\");\n  const clipboardText = textToCopy ?? text;\n\n  const onPress = useCallback(\n    (event: GestureResponderEvent) => {\n      event.preventDefault();\n      setClipboardText(clipboardText);\n      setVisibleState(\"copied\");\n    },\n    [clipboardText],\n  );\n\n  return (\n    <View style={styles.cell}>\n      <LakeTooltip\n        placement=\"right\"\n        onHide={() => setVisibleState(\"copy\")}\n        togglableOnFocus={true}\n        content={visibleState === \"copy\" ? copyWording : copiedWording}\n        containerStyle={styles.iconContainer}\n      >\n        <Pressable\n          role=\"button\"\n          aria-label={copyWording}\n          onPress={onPress}\n          style={({ hovered }) => [styles.icon, hovered && styles.underline]}\n        >\n          {({ hovered }) => (\n            <Icon name={hovered ? \"copy-filled\" : \"copy-regular\"} color=\"currentColor\" size={14} />\n          )}\n        </Pressable>\n      </LakeTooltip>\n\n      <Space width={4} />\n\n      <LakeText\n        tooltip={tooltip}\n        color={colors.gray[900]}\n        style={styles.regularText}\n        variant={variant}\n      >\n        {text}\n      </LakeText>\n    </View>\n  );\n};\n\n// TODO: handle `+` sign properly\nexport const BalanceCell = ({\n  value,\n  currency,\n  originalValue,\n  formatCurrency,\n  textAlign = \"right\",\n  variant = \"medium\",\n}: {\n  value: number;\n  currency: string;\n  originalValue?: { value: number; currency: string };\n  formatCurrency: (value: number, currency: string) => string;\n  textAlign?: \"left\" | \"center\" | \"right\";\n  variant?: TextVariant;\n}) => {\n  return (\n    <View style={styles.balanceCellContainer}>\n      <View style={styles.cell}>\n        <LakeText\n          align={textAlign}\n          color={colors.gray[900]}\n          variant={variant}\n          style={[\n            styles.mediumText,\n            {\n              justifyContent: match(textAlign)\n                .with(\"left\", () => \"flex-start\" as const)\n                .with(\"center\", () => \"center\" as const)\n                .with(\"right\", () => \"flex-end\" as const)\n                .exhaustive(),\n            },\n            value > 0 && { color: colors.positive.primary },\n            value < 0 && { color: colors.negative.primary },\n          ]}\n        >\n          {value > 0 && \"+\"}\n          {formatCurrency(value, currency)}\n        </LakeText>\n      </View>\n\n      {isNotNullish(originalValue) && originalValue.currency !== currency && (\n        <View style={styles.cell}>\n          <LakeText\n            style={styles.mediumText}\n            align={textAlign}\n            color={colors.gray[500]}\n            variant=\"smallRegular\"\n          >\n            {originalValue.value > 0 && \"+\"}\n            {formatCurrency(originalValue.value, originalValue.currency)}\n          </LakeText>\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport const LinkCell = ({\n  children,\n  external = false,\n  onPress,\n  variant = \"medium\",\n  tooltip,\n  buttonPosition = \"start\",\n}: {\n  children: ReactNode;\n  onPress: () => void;\n  external?: boolean;\n  variant?: TextVariant;\n  tooltip?: Omit<ComponentProps<typeof LakeTooltip>, \"children\">;\n  buttonPosition?: \"start\" | \"end\";\n}) => {\n  const ArrowButton = () => (\n    <Pressable\n      style={({ hovered }) => [styles.icon, hovered && styles.underline]}\n      onPress={event => {\n        event.preventDefault();\n        onPress();\n      }}\n    >\n      <Icon size={14} name={external ? \"open-regular\" : \"arrow-right-filled\"} />\n    </Pressable>\n  );\n\n  return (\n    <View style={styles.cell}>\n      {buttonPosition === \"start\" && (\n        <>\n          <ArrowButton />\n          <Space width={8} />\n        </>\n      )}\n\n      <LakeText\n        color={colors.gray[900]}\n        variant={variant}\n        style={styles.mediumText}\n        tooltip={tooltip}\n      >\n        {children}\n      </LakeText>\n\n      {buttonPosition === \"end\" && (\n        <>\n          <Space width={8} />\n          <ArrowButton />\n        </>\n      )}\n    </View>\n  );\n};\n\nexport const StartAlignedCell = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.cell}>{children}</View>;\n};\n\nexport const CenteredCell = ({ children }: { children: ReactNode }) => {\n  return <View style={[styles.cell, styles.centeredCell]}>{children}</View>;\n};\n\nexport const EndAlignedCell = ({ children }: { children: ReactNode }) => {\n  return <View style={[styles.cell, styles.endAlignedCell]}>{children}</View>;\n};\n\nexport const CellAction = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.cellAction}>{children}</View>;\n};\n"],"names":["HORIZONTAL_SAFE_AREA","SCROLLBAR_RESERVED_SPACE","styles","StyleSheet","invariantColors","backgroundColor","shadows","colors","radii","spacings","RowBackground","absoluteIndex","id","isHovered","isHighlighted","top","rowHeight","rowVerticalSpacing","onMouseEnter","onMouseLeave","mode","containerRef","useRef","useHover","jsx","View","MemoizedRowBackground","memo","SEGMENTS_MAP","RowSegment","columns","item","style","viewId","segmentColumn","width","extraInfo","createRowWrapper","focusId","totalRowHeight","minWidth","wrapper","cloneElement","isNullish","renderCell","index","columnId","paddedIndex","paddedCellIndex","MemoizedRowSegment","HeaderSegment","title","renderTitle","findNextFocusableElement","sortedCellIds","currentCellIndex","direction","nextCellId","isNotNullish","previousCell","focusableElements","getFocusableElements","nextFocusableElement","last","first","EMPTY_COLUMNS","ZERO","FixedListView","originalData","keyExtractor","highlightedRowId","horizontalPadding","headerBackgroundColor","headerHeight","renderThreshold","initialStickedToStartColumns","initialColumns","initialStickedToEndColumns","onEndReached","onEndReachedThresholdPx","getRowLink","renderEmptyList","loading","useState","uuid","centerHeadersRef","centerColumnsRef","horizontalScrollbarRef","rowsHeight","totalHeight","data","renderedRangeStartIndex","renderedRangeEndIndex","setDataAndRenderRange","startFocusAnchorRef","endFocusAnchorRef","hasHorizontalScroll","setHasHorizontalScroll","shouldAvoidStickyColumns","setShouldAvoidStickyColumns","shouldShowStartGradient","setShouldShowStartGradient","shouldShowEndGradient","setShouldShowEndGradient","hoveredRow","setHoveredRow","currentScrollY","lastKnownHeight","stickedToStartColumns","stickedToEndColumns","useMemo","isScrolled","setIsScrolled","removeHoveredRow","useCallback","initialStickedToStartColumnsWidth","total","initialStickedToEndColumnsWidth","stickedToStartColumnsWidth","stickedToEndColumnsWidth","centerColumnsWidth","centerSegmentStyle","customLinkElement","backgroundRows","startRows","centerRows","endRows","length","key","isHoveredRow","isHighlightedRow","useLayoutEffect","_b","_a","_d","_c","_f","_e","lastHorizontalScroll","useEffect","centerColumns","centerHeaders","horizontalScrollbar","onColumnsScroll","now","scrollLeft","onHeadersScroll","onScrollbarScroll","onKeyDown","event","target","currentTarget","currentCell","currentCellId","firstFocusableElement","lastFocusableElement","sortedIndexOf","isTargetFirst","isTargetLast","prevRenderRange","prevRenderedRangeStartIndex","prevRenderedRangeEndIndex","onLayout","height","hasEndReachedBeenCalled","scrollTimeoutRef","scrollContentsRef","onScroll","y","contentHeight","onCenterTrackLayout","isLoading","jsxs","ScrollView","match","FixedListViewPlaceholder","PlainListViewPlaceholder","count","groupHeaderHeight","paddingHorizontal","_","Fragment","noop","Space","FixedListViewEmpty","icon","borderedIcon","borderedIconPadding","subtitle","children","BorderedIcon","Icon","LakeHeading","LakeText","visuallyHiddenStyle","SimpleHeaderCell","text","sort","justifyContent","onPress","sortActive","disabled","Pressable","hovered","Box","ColorPatchCell","alternativeText","color","SimpleTitleCell","tooltip","SimpleRegularTextCell","variant","textAlign","LinkCell","external","buttonPosition","ArrowButton","EndAlignedCell"],"mappings":"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"}