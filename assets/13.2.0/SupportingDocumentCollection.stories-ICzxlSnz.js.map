{"version":3,"file":"SupportingDocumentCollection.stories-ICzxlSnz.js","sources":["../../../packages/lake/src/components/Form.tsx","../../../packages/shared-business/src/components/SupportingDocumentCollection.tsx","../../../packages/shared-business/__stories__/SupportingDocumentCollection.stories.tsx"],"sourcesContent":["import { memo, ReactNode, Ref } from \"react\";\nimport { unstable_createElement as createElement, View, ViewProps } from \"react-native\";\nimport { Except } from \"type-fest\";\nimport { commonStyles } from \"../constants/commonStyles\";\n\ntype Props = Except<ViewProps, \"role\"> & {\n  ref?: Ref<View>;\n  children?: ReactNode;\n  onReset?: (event: React.FormEvent<HTMLElement>) => void;\n  onSubmit?: (event: React.FormEvent<HTMLElement>) => void;\n};\n\nexport const Form = memo(({ ref, style, onReset, onSubmit, ...props }: Props) =>\n  createElement(\"form\", {\n    ...props,\n    ref,\n    onReset: (event: React.FormEvent<HTMLElement>) => {\n      event.preventDefault();\n      onReset?.(event);\n    },\n    onSubmit: (event: React.FormEvent<HTMLElement>) => {\n      event.preventDefault();\n      onSubmit?.(event);\n    },\n    style: [commonStyles.view, style],\n  }),\n);\n\nForm.displayName = \"Form\";\n","import { Array, Future, Option, Result } from \"@swan-io/boxed\";\nimport { Box } from \"@swan-io/lake/src/components/Box\";\nimport { Form } from \"@swan-io/lake/src/components/Form\";\nimport { IconName } from \"@swan-io/lake/src/components/Icon\";\nimport { LakeButton, LakeButtonGroup } from \"@swan-io/lake/src/components/LakeButton\";\nimport { LakeCopyButton } from \"@swan-io/lake/src/components/LakeCopyButton\";\nimport { LakeLabel } from \"@swan-io/lake/src/components/LakeLabel\";\nimport { LakeText } from \"@swan-io/lake/src/components/LakeText\";\nimport { LakeTooltip } from \"@swan-io/lake/src/components/LakeTooltip\";\nimport { ReadOnlyFieldList } from \"@swan-io/lake/src/components/ReadOnlyFieldList\";\nimport { Space } from \"@swan-io/lake/src/components/Space\";\nimport { colors } from \"@swan-io/lake/src/constants/design\";\nimport { isNotNullish } from \"@swan-io/lake/src/utils/nullish\";\nimport { badStatusToError, NetworkError, Request, Response, TimeoutError } from \"@swan-io/request\";\nimport { Fragment, Ref, useEffect, useImperativeHandle, useMemo, useRef, useState } from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { UploadFileInput, UploadOutputWithId } from \"../hooks/useFilesUploader\";\nimport { SwanFile } from \"../utils/SwanFile\";\nimport { isTranslationKey, locale, t } from \"../utils/i18n\";\nimport { FilesUploader, FilesUploaderRef } from \"./FilesUploader\";\nimport { LakeModal } from \"./LakeModal\";\n\nconst ACCEPTED_FORMATS = [\"application/pdf\", \"image/png\", \"image/jpeg\", \"image/heic\"];\n\nexport type Document<Purpose extends string> = { purpose: Purpose; file: SwanFile };\n\ntype UploadInput<Purpose extends string> = { fileName: string; purpose: Purpose };\nexport type UploadOutput = { url: string; fields: { key: string; value: string }[] };\n\ntype SupportingDocumentCollectionStatus =\n  | \"WaitingForDocument\"\n  | \"PendingReview\"\n  | \"Approved\"\n  | \"Canceled\"\n  | \"Rejected\";\n\ntype PurposeMetadata = {\n  title: string;\n  values: { type?: \"text\" | \"copy\"; title: string; value: string }[];\n};\n\nexport type SupportingDocumentCollectionRef<Purpose extends string> = {\n  areAllRequiredDocumentsFilled: () => boolean;\n  addDocument: (document: Document<Purpose>) => void;\n};\n\ntype Props<Purpose extends string> = {\n  ref?: Ref<SupportingDocumentCollectionRef<Purpose>>;\n  status: SupportingDocumentCollectionStatus;\n  generateUpload: (\n    input: UploadInput<Purpose>,\n  ) => Future<Result<UploadOutputWithId<UploadOutput>, unknown>>;\n  documents: Document<Purpose>[];\n  requiredDocumentPurposes: Purpose[];\n  uploadFile?: (\n    config: UploadFileInput<UploadOutput>,\n  ) => Future<Result<Response<string>, NetworkError | TimeoutError>>;\n  onChange?: (documents: Document<Purpose>[]) => void;\n  onRemoveFile?: (file: SwanFile) => Future<Result<unknown, unknown>>;\n  templateLanguage?: string;\n  showIds?: boolean;\n  readOnly?: boolean;\n  getPurposeMetadata?: (purose: Purpose) => PurposeMetadata | undefined;\n  readonlyDocumentPurposes?: Purpose[];\n  purposeLabelOverrides?: Partial<Record<Purpose, string>>;\n  purposeDescriptionLabelOverrides?: Partial<Record<Purpose, string>>;\n};\n\nconst styles = StyleSheet.create({\n  button: { opacity: 1 },\n  buttonWithDefaultCursor: { opacity: 1, cursor: \"default\" },\n});\n\ntype HelpProps =\n  | { type: \"tooltip\"; text: string; icon?: IconName; width?: number }\n  | { type: \"button\"; label: string; icon?: IconName; onPress: () => void };\n\nconst Help = (props: HelpProps) => {\n  return match(props)\n    .with({ type: \"tooltip\" }, ({ text, width }) => (\n      <LakeTooltip\n        content={text}\n        width={width}\n        togglableOnFocus={true}\n        placement=\"right\"\n        maxWidth={400}\n      >\n        <LakeButton\n          mode=\"tertiary\"\n          size=\"small\"\n          color=\"gray\"\n          icon={props.icon ?? \"question-circle-regular\"}\n          disabled={true}\n          style={[styles.button, styles.buttonWithDefaultCursor]}\n          ariaLabel={t(\"supportingDocuments.help.whatIsThis\")}\n        />\n      </LakeTooltip>\n    ))\n    .with({ type: \"button\" }, ({ label, onPress }) => (\n      <LakeButton\n        mode=\"secondary\"\n        size=\"small\"\n        color=\"gray\"\n        icon={props.icon ?? \"question-circle-regular\"}\n        onPress={onPress}\n        style={styles.button}\n        ariaLabel={t(\"supportingDocuments.help.whatIsThis\")}\n      >\n        {label}\n      </LakeButton>\n    ))\n    .exhaustive();\n};\nconst getSupportLink = (language: \"en\" | \"es\" | \"de\" | \"fr\" | \"it\" | \"nl\" | \"pt\" | \"fi\") =>\n  match(language)\n    .with(\n      \"fr\",\n      () =>\n        \"https://support.swan.io/hc/en-150/articles/22502977563933--Proof-of-registration-for-French-companies\",\n    )\n    .with(\n      \"it\",\n      () =>\n        \"https://support.swan.io/hc/en-150/articles/22537604831005--Proof-of-registration-for-Italian-companies\",\n    )\n    .with(\n      \"de\",\n      () =>\n        \"https://support.swan.io/hc/en-150/articles/22535023588509--Proof-of-registration-for-German-companies\",\n    )\n    .with(\n      \"es\",\n      () =>\n        \"https://support.swan.io/hc/en-150/articles/22544703221021--Proof-of-registration-for-Spanish-companies\",\n    )\n    .with(\n      \"nl\",\n      () =>\n        \"https://support.swan.io/hc/en-150/articles/22543228421277--Proof-of-registration-for-Dutch-companies\",\n    )\n    .otherwise(\n      () =>\n        \"https://support.swan.io/hc/en-150/articles/22620756787869-Proof-of-company-registration\",\n    );\n\nexport const getSupportingDocumentPurposeLabel = (purpose: string) => {\n  const key = `supportingDocuments.purpose.${purpose}`;\n  return isTranslationKey(key) ? t(key) : purpose;\n};\n\nexport const getSupportingDocumentPurposeDescriptionLabel = (purpose: string) => {\n  const key = `supportingDocuments.purpose.${purpose}.description`;\n  return isTranslationKey(key) ? t(key) : \"\";\n};\n\nexport const SupportingDocumentCollection = <Purpose extends string>({\n  ref,\n  documents,\n  generateUpload,\n  uploadFile,\n  requiredDocumentPurposes,\n  templateLanguage = locale.language,\n  status,\n  onRemoveFile,\n  showIds = false,\n  readOnly = false,\n  getPurposeMetadata,\n  readonlyDocumentPurposes = [],\n  purposeLabelOverrides,\n  purposeDescriptionLabelOverrides,\n}: Props<Purpose>) => {\n  const [showPowerOfAttorneyModal, setShowPowerOfAttorneyModal] = useState(false);\n  const [showSwornStatementModal, setShowSwornStatementModal] = useState(false);\n  const [currentMetadata, setCurrentMetadata] = useState<PurposeMetadata | undefined>(undefined);\n\n  const [addedDocuments, setAddedDocuments] = useState<Document<Purpose>[]>([]);\n\n  const orderedDocumentPurposes = useMemo(() => {\n    // Get all purposes to display: the required ones and the ones that have at least a document\n    const allPurposes = new Set(requiredDocumentPurposes);\n    const allDocuments = [...addedDocuments, ...documents];\n    allDocuments.forEach(document => allPurposes.add(document.purpose));\n\n    const documentsByPurpose = new Map(\n      [...allPurposes].map(purpose => {\n        const purposeDocuments = allDocuments.filter(document => document.purpose === purpose);\n        return [purpose, purposeDocuments];\n      }),\n    );\n\n    // Map purposes to their priorities (lower priority comes first)\n    // We precompute it to avoid running on each `sort` callback call\n    const allRequiredPurposes = new Set(requiredDocumentPurposes);\n    // Indices:\n    // -> 0: documents aren't empty and all validated\n    // -> 1: purpose is required\n    // -> 2: purpose isn't required\n    const priorityByPurpose = new Map(\n      [...allPurposes].map(purpose => {\n        const purposeDocuments = documentsByPurpose.get(purpose) ?? [];\n        const areAllPurposeDocumentsValidated =\n          purposeDocuments.length > 0 &&\n          purposeDocuments.every(document => document.file.statusInfo.status === \"Validated\");\n\n        const priority = areAllPurposeDocumentsValidated\n          ? 0\n          : allRequiredPurposes.has(purpose)\n            ? 1\n            : 2;\n\n        return [purpose, priority];\n      }),\n    );\n\n    return [...allPurposes]\n      .sort((purposeA, purposeB) => {\n        const purposeAPriority = priorityByPurpose.get(purposeA) ?? 2;\n        const purposeBPriority = priorityByPurpose.get(purposeB) ?? 2;\n\n        return purposeBPriority > purposeAPriority ? -1 : 1;\n      })\n      .map(purpose => {\n        const documents = documentsByPurpose.get(purpose) ?? [];\n        return {\n          purpose,\n          files: documents.map(item => item.file),\n          isRequired: allRequiredPurposes.has(purpose),\n          areAllDocumentsValidated: priorityByPurpose.get(purpose) === 0,\n        };\n      });\n  }, [requiredDocumentPurposes, documents, addedDocuments]);\n\n  const filesByRequiredPurpose = useRef(\n    new Map(\n      Array.filterMap(orderedDocumentPurposes, ({ isRequired, purpose, files }) =>\n        isRequired ? Option.Some([purpose, files]) : Option.None(),\n      ),\n    ),\n  );\n\n  const filesUploaderRefByPurpose = useRef<Partial<Record<Purpose, FilesUploaderRef | null>>>({});\n\n  useImperativeHandle(ref, () => ({\n    areAllRequiredDocumentsFilled: () => {\n      const filesByPurposes = [...filesByRequiredPurpose.current.values()];\n      return filesByPurposes.every(files => files.length > 0);\n    },\n    addDocument: document => {\n      setAddedDocuments(documents => [...documents, document]);\n    },\n  }));\n\n  useEffect(() => {\n    const lastAddedDocument = addedDocuments[addedDocuments.length - 1];\n    if (lastAddedDocument != null) {\n      const ref = filesUploaderRefByPurpose.current[lastAddedDocument?.purpose];\n      if (ref != null) {\n        ref.add(lastAddedDocument.file);\n      }\n    }\n  }, [addedDocuments]);\n\n  const showableDocumentPurposes = orderedDocumentPurposes.filter(({ files }) => {\n    // Completely hide the purpose section if empty and no action is available\n    if (readOnly && files.length === 0) {\n      return false;\n    }\n    return true;\n  });\n\n  return (\n    <Form>\n      {showableDocumentPurposes.map(({ purpose, files, areAllDocumentsValidated, isRequired }) => {\n        const metadata = getPurposeMetadata?.(purpose);\n\n        const label =\n          purposeDescriptionLabelOverrides?.[purpose] ??\n          getSupportingDocumentPurposeDescriptionLabel(purpose);\n\n        return (\n          <Fragment key={purpose}>\n            <LakeLabel\n              label={purposeLabelOverrides?.[purpose] ?? getSupportingDocumentPurposeLabel(purpose)}\n              description={label}\n              render={() => (\n                <>\n                  <Box direction=\"row\">\n                    <Box direction=\"row\">\n                      {isNotNullish(metadata) ? (\n                        purpose === \"CompanyRegistration\" ? (\n                          <>\n                            <LakeButton\n                              size=\"small\"\n                              mode=\"secondary\"\n                              icon=\"question-circle-regular\"\n                              onPress={() => window.open(getSupportLink(locale.language))}\n                              ariaLabel={t(\"supportingDocuments.help.howToSendAGoodDocument\")}\n                            >\n                              {t(\"supportingDocuments.help.howToSendAGoodDocument\")}\n                            </LakeButton>\n\n                            <Space width={8} />\n                          </>\n                        ) : (\n                          <>\n                            <Help\n                              type=\"button\"\n                              label={metadata.title}\n                              onPress={() => setCurrentMetadata(metadata)}\n                            />\n\n                            <Space width={8} />\n                          </>\n                        )\n                      ) : (\n                        match(purpose as string)\n                          .with(\"CompanyRegistration\", () => (\n                            <LakeButton\n                              size=\"small\"\n                              mode=\"secondary\"\n                              icon=\"question-circle-regular\"\n                              onPress={() => window.open(getSupportLink(locale.language))}\n                              ariaLabel={t(\"supportingDocuments.help.howToSendAGoodDocument\")}\n                            >\n                              {t(\"supportingDocuments.help.howToSendAGoodDocument\")}\n                            </LakeButton>\n                          ))\n                          .otherwise(() => null)\n                      )}\n                    </Box>\n\n                    {match(purpose as string)\n                      .with(\"PowerOfAttorney\", () => (\n                        <Help\n                          type=\"button\"\n                          icon=\"arrow-down-filled\"\n                          label={t(\"supportingDocuments.help.downloadTemplate\")}\n                          onPress={() => setShowPowerOfAttorneyModal(true)}\n                        />\n                      ))\n                      .with(\"SwornStatement\", () => (\n                        <Help\n                          type=\"button\"\n                          icon=\"arrow-down-filled\"\n                          label={t(\"supportingDocuments.help.downloadTemplate\")}\n                          onPress={() => setShowSwornStatementModal(true)}\n                        />\n                      ))\n                      .otherwise(() => null)}\n                  </Box>\n                  <Space height={16} />\n\n                  <FilesUploader\n                    ref={ref => {\n                      filesUploaderRefByPurpose.current[purpose] = ref;\n                    }}\n                    // Only allow uploading is the Supporting Document Collection awaits for docs\n                    // and that the specific purpose isn't already fully validated\n                    canUpload={\n                      !readonlyDocumentPurposes.includes(purpose) &&\n                      !readOnly &&\n                      status === \"WaitingForDocument\" &&\n                      !areAllDocumentsValidated\n                    }\n                    accept={ACCEPTED_FORMATS}\n                    maxSize={20_000_000}\n                    icon=\"document-regular\"\n                    initialFiles={files}\n                    generateUpload={generateUpload}\n                    getUploadConfig={file => ({ fileName: file.name, purpose })}\n                    uploadFile={\n                      isNotNullish(uploadFile)\n                        ? uploadFile\n                        : ({ upload, file, onProgress }) => {\n                            const body = new FormData();\n                            upload.fields.forEach(({ key, value }) => body.append(key, value));\n                            body.append(\"file\", file);\n                            setTimeout(() => onProgress(0.8), 100);\n                            return Request.make({\n                              url: upload.url,\n                              method: \"POST\",\n                              body,\n                              type: \"text\",\n                            }).mapOkToResult(badStatusToError);\n                          }\n                    }\n                    formatAndSizeDescription={t(\"supportingDocuments.documentTypes\", {\n                      maxSizeMB: 20_000_000 / 1_000_000,\n                    })}\n                    onRemoveFile={readOnly ? undefined : onRemoveFile}\n                    onChange={files => {\n                      if (isRequired) {\n                        filesByRequiredPurpose.current.set(purpose, files);\n                      }\n                    }}\n                    showIds={showIds}\n                  />\n                </>\n              )}\n            />\n\n            <Space height={24} />\n          </Fragment>\n        );\n      })}\n\n      {showableDocumentPurposes.length === 0 ? (\n        <>\n          <Space height={24} />\n          <LakeText align=\"center\">{t(\"supportingDocuments.noDocuments\")}</LakeText>\n          <Space height={24} />\n        </>\n      ) : null}\n\n      <LakeModal\n        visible={showPowerOfAttorneyModal}\n        title={t(\"supportingDocuments.powerOfAttorneyModal.title\")}\n        icon=\"document-regular\"\n        onPressClose={() => setShowPowerOfAttorneyModal(false)}\n      >\n        <LakeText>{t(\"supportingDocuments.powerOfAttorneyModal.description\")}</LakeText>\n        <Space height={16} />\n\n        <LakeButtonGroup paddingBottom={0}>\n          <LakeButton\n            grow={true}\n            color=\"current\"\n            onPress={() =>\n              window.open(\n                `/power-of-attorney-template/${match(templateLanguage)\n                  .with(\"fr\", () => \"fr\")\n                  .with(\"de\", () => \"de\")\n                  .with(\"es\", () => \"es\")\n                  .with(\"it\", () => \"it\")\n                  .otherwise(() => \"en\")}.pdf`,\n              )\n            }\n          >\n            {t(\"supportingDocuments.downloadTemplate\")}\n          </LakeButton>\n        </LakeButtonGroup>\n      </LakeModal>\n\n      <LakeModal\n        visible={showSwornStatementModal}\n        title={t(\"supportingDocuments.purpose.SwornStatement\")}\n        icon=\"document-regular\"\n        onPressClose={() => setShowSwornStatementModal(false)}\n      >\n        <LakeText>{t(\"supportingDocuments.purpose.SwornStatement.description\")}</LakeText>\n        <Space height={16} />\n\n        <LakeButtonGroup paddingBottom={0}>\n          <LakeButton\n            grow={true}\n            color=\"current\"\n            onPress={() => {\n              window.open(\n                `/sworn-statement-template/${match(templateLanguage)\n                  .with(\"nl\", () => \"nl\")\n                  .with(\"es\", () => \"es\")\n                  .with(\"it\", () => \"it\")\n                  .otherwise(() => \"en\")}.pdf`,\n              );\n            }}\n          >\n            {t(\"supportingDocuments.downloadTemplate\")}\n          </LakeButton>\n        </LakeButtonGroup>\n      </LakeModal>\n\n      <LakeModal\n        visible={isNotNullish(currentMetadata)}\n        title={t(\"supportingDocuments.informations\")}\n        icon=\"document-regular\"\n        onPressClose={() => setCurrentMetadata(undefined)}\n      >\n        <ReadOnlyFieldList>\n          {currentMetadata?.values.map(({ title, value, type }, index) => (\n            <LakeLabel\n              key={`metadata-${index}`}\n              type=\"viewSmall\"\n              label={title}\n              actions={\n                type === \"copy\" && (\n                  <LakeCopyButton\n                    valueToCopy={value}\n                    copiedText={t(\"copyButton.copiedTooltip\")}\n                    copyText={t(\"copyButton.copyTooltip\")}\n                  />\n                )\n              }\n              render={() => (\n                <LakeText variant=\"regular\" color={colors.gray[900]}>\n                  {value}\n                </LakeText>\n              )}\n            />\n          ))}\n        </ReadOnlyFieldList>\n      </LakeModal>\n    </Form>\n  );\n};\n","import { Meta } from \"@storybook/react\";\nimport { Future, Result } from \"@swan-io/boxed\";\nimport { LakeButton } from \"@swan-io/lake/src/components/LakeButton\";\nimport { useRef, useState } from \"react\";\nimport {\n  Document,\n  SupportingDocumentCollection,\n  SupportingDocumentCollectionRef,\n  UploadOutput,\n} from \"../src/components/SupportingDocumentCollection\";\nimport { UploadOutputWithId } from \"../src/hooks/useFilesUploader\";\nimport { StoryBlock, StoryPart } from \"./_StoriesComponents\";\n\nexport default {\n  title: \"Onboarding/SupportingDocumentCollection\",\n  component: SupportingDocumentCollection,\n} as Meta<typeof SupportingDocumentCollection>;\n\nconst generateUpload = () =>\n  Future.make<Result<UploadOutputWithId<UploadOutput>, unknown>>(resolve => {\n    setTimeout(() => {\n      resolve(\n        Result.Ok({\n          id: crypto.randomUUID(),\n          upload: {\n            url: window.location.href,\n            fields: [],\n          },\n        }),\n      );\n    }, 500);\n  });\n\nexport const WaitingForDocument = () => {\n  const [documents, setDocuments] = useState<Document<string>[]>([]);\n  const ref = useRef<SupportingDocumentCollectionRef<string>>(null);\n\n  return (\n    <StoryBlock title=\"SupportingDocument\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          ref={ref}\n          status=\"WaitingForDocument\"\n          generateUpload={generateUpload}\n          documents={documents}\n          onChange={setDocuments}\n          requiredDocumentPurposes={[\n            \"CompanyRegistration\",\n            \"ProofOfIdentity\",\n            \"SwornStatement\",\n            \"PowerOfAttorney\",\n            \"UnknownDocumentType\",\n          ]}\n          getPurposeMetadata={purpose => ({\n            title: \"Show metadata\",\n            values: [\n              {\n                title: \"Purpose\",\n                value: purpose,\n              },\n              {\n                title: \"ID\",\n                value: \"666\",\n                type: \"copy\",\n              },\n              {\n                title: \"Lorem ipsum\",\n                value: \"dolor sit amet\",\n              },\n            ],\n          })}\n        />\n\n        <LakeButton\n          onPress={() => {\n            if (ref.current != null) {\n              ref.current.addDocument({\n                purpose: \"UltimateBeneficialOwnerProofOfAddress\",\n                file: {\n                  id: crypto.randomUUID(),\n                  name: \"toto.jpg\",\n                  statusInfo: { status: \"Uploaded\" },\n                },\n              });\n            }\n          }}\n        >\n          Add other document from outside\n        </LakeButton>\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const WaitingForDocumentShowIds = () => {\n  const [documents, setDocuments] = useState<Document<string>[]>([]);\n\n  return (\n    <StoryBlock title=\"WaitingForDocumentShowIds\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"WaitingForDocument\"\n          generateUpload={generateUpload}\n          documents={documents}\n          onChange={setDocuments}\n          requiredDocumentPurposes={[\n            \"CompanyRegistration\",\n            \"ProofOfIdentity\",\n            \"SwornStatement\",\n            \"PowerOfAttorney\",\n            \"UnknownDocumentType\",\n          ]}\n          showIds={true}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const WaitingForDocumentWithApprovedAndRejected = () => {\n  const [documents, setDocuments] = useState<Document<string>[]>([\n    {\n      purpose: \"CompanyRegistration\",\n      file: {\n        id: \"id\",\n        name: \"CompanyRegistration.pdf\",\n        statusInfo: { status: \"Validated\" },\n      },\n    },\n    {\n      purpose: \"ProofOfIdentity\",\n      file: {\n        id: \"id\",\n        name: \"IdCard.pdf\",\n        statusInfo: { status: \"Validated\" },\n      },\n    },\n    {\n      purpose: \"SwornStatement\",\n      file: {\n        id: \"sworn\",\n        name: \"SwornStatement.pdf\",\n        statusInfo: { status: \"Uploaded\" },\n      },\n    },\n    {\n      purpose: \"PowerOfAttorney\",\n      file: {\n        id: \"power\",\n        name: \"power.pdf\",\n        url: \"https://swan.io\",\n        statusInfo: { status: \"Refused\", reason: \"Invalid document\" },\n      },\n    },\n  ]);\n  return (\n    <StoryBlock title=\"SupportingDocument\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"WaitingForDocument\"\n          generateUpload={generateUpload}\n          documents={documents}\n          onChange={setDocuments}\n          requiredDocumentPurposes={[\n            \"CompanyRegistration\",\n            \"ProofOfIdentity\",\n            \"SwornStatement\",\n            \"PowerOfAttorney\",\n            \"UnknownDocumentType\",\n          ]}\n          onRemoveFile={() =>\n            Future.make(resolve => {\n              setTimeout(() => {\n                resolve(Result.Ok(undefined));\n              }, 1_000);\n            })\n          }\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const Pending = () => {\n  return (\n    <StoryBlock title=\"SupportingDocument\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"PendingReview\"\n          generateUpload={generateUpload}\n          documents={[\n            {\n              purpose: \"ProofOfIdentity\",\n              file: {\n                id: \"id\",\n                name: \"IdCard.pdf\",\n                url: \"https://swan.io\",\n                statusInfo: { status: \"Pending\" },\n              },\n            },\n          ]}\n          requiredDocumentPurposes={[\"ProofOfIdentity\"]}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const Approved = () => {\n  return (\n    <StoryBlock title=\"SupportingDocument\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"Approved\"\n          generateUpload={generateUpload}\n          documents={[\n            {\n              purpose: \"ProofOfIdentity\",\n              file: {\n                id: \"id\",\n                name: \"IdCard.pdf\",\n                url: \"https://swan.io\",\n                statusInfo: { status: \"Validated\" },\n              },\n            },\n          ]}\n          requiredDocumentPurposes={[\"ProofOfIdentity\"]}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const ApprovedWithoutDownload = () => {\n  return (\n    <StoryBlock title=\"SupportingDocument\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"Approved\"\n          generateUpload={generateUpload}\n          documents={[\n            {\n              purpose: \"ProofOfIdentity\",\n              file: {\n                id: \"id\",\n                name: \"IdCard.pdf\",\n                statusInfo: { status: \"Validated\" },\n              },\n            },\n          ]}\n          requiredDocumentPurposes={[\"ProofOfIdentity\"]}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const Rejected = () => {\n  return (\n    <StoryBlock title=\"SupportingDocument\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"Rejected\"\n          generateUpload={generateUpload}\n          documents={[\n            {\n              purpose: \"ProofOfIdentity\",\n              file: {\n                id: \"id\",\n                name: \"IdCard.pdf\",\n                url: \"https://swan.io\",\n                statusInfo: { status: \"Refused\", reason: \"Invalid document\" },\n              },\n            },\n          ]}\n          requiredDocumentPurposes={[\"ProofOfIdentity\"]}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const ReadOnlyEmpty = () => {\n  const [documents, setDocuments] = useState<Document<string>[]>([]);\n  return (\n    <StoryBlock title=\"WaitingForDocumentShowIds\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"WaitingForDocument\"\n          generateUpload={generateUpload}\n          documents={documents}\n          onChange={setDocuments}\n          requiredDocumentPurposes={[]}\n          showIds={true}\n          readOnly={true}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const ReadOnlyWithDocs = () => {\n  return (\n    <StoryBlock title=\"WaitingForDocumentShowIds\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"WaitingForDocument\"\n          generateUpload={generateUpload}\n          documents={[\n            {\n              purpose: \"ProofOfIdentity\",\n              file: {\n                id: \"id\",\n                name: \"IdCard.pdf\",\n                url: \"https://swan.io\",\n                statusInfo: {\n                  status: \"Refused\",\n                  reason: \"Invalid document\",\n                  reasonCode: \"InvalidDocument\",\n                },\n              },\n            },\n          ]}\n          onChange={() => {}}\n          requiredDocumentPurposes={[]}\n          showIds={true}\n          readOnly={true}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n"],"names":["Form","memo","ref","style","onReset","onSubmit","props","createElement","event","commonStyles","ACCEPTED_FORMATS","styles","StyleSheet","Help","match","text","width","jsx","LakeTooltip","LakeButton","t","label","onPress","getSupportLink","language","getSupportingDocumentPurposeLabel","purpose","key","isTranslationKey","getSupportingDocumentPurposeDescriptionLabel","SupportingDocumentCollection","documents","generateUpload","uploadFile","requiredDocumentPurposes","templateLanguage","locale","status","onRemoveFile","showIds","readOnly","getPurposeMetadata","readonlyDocumentPurposes","purposeLabelOverrides","purposeDescriptionLabelOverrides","showPowerOfAttorneyModal","setShowPowerOfAttorneyModal","useState","showSwornStatementModal","setShowSwornStatementModal","currentMetadata","setCurrentMetadata","addedDocuments","setAddedDocuments","orderedDocumentPurposes","useMemo","allPurposes","allDocuments","document","documentsByPurpose","purposeDocuments","allRequiredPurposes","priorityByPurpose","priority","purposeA","purposeB","purposeAPriority","item","filesByRequiredPurpose","useRef","Array","isRequired","files","Option","filesUploaderRefByPurpose","useImperativeHandle","useEffect","lastAddedDocument","showableDocumentPurposes","areAllDocumentsValidated","metadata","jsxs","Fragment","LakeLabel","Box","isNotNullish","Space","FilesUploader","file","upload","onProgress","body","value","Request","badStatusToError","LakeText","LakeModal","LakeButtonGroup","ReadOnlyFieldList","title","type","index","LakeCopyButton","colors","SupportingDocumentCollection_stories","component","Future","make","resolve","setTimeout","Result","Ok","id","crypto","randomUUID","url","window","location","href","fields","WaitingForDocument","setDocuments","StoryBlock","StoryPart","values","current","addDocument","name","statusInfo","WaitingForDocumentShowIds","WaitingForDocumentWithApprovedAndRejected","reason","undefined","Pending","Approved","ApprovedWithoutDownload","Rejected","ReadOnlyEmpty","ReadOnlyWithDocs","reasonCode"],"mappings":"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"}