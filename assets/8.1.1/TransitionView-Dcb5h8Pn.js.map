{"version":3,"file":"TransitionView-Dcb5h8Pn.js","sources":["../../../packages/lake/src/hooks/usePreviousValue.ts","../../../packages/lake/src/components/TransitionView.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport const usePreviousValue = <T>(value: T): T => {\n  const previousRef = useRef(value);\n\n  useEffect(() => {\n    previousRef.current = value;\n  }, [value]);\n\n  return previousRef.current;\n};\n","import { ReactNode, useLayoutEffect, useReducer, useRef } from \"react\";\nimport { AnimationStyles, StyleProp, StyleSheet, View, ViewStyle } from \"react-native\";\nimport { usePreviousValue } from \"../hooks/usePreviousValue\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\n\ntype Props = {\n  enter?: AnimationStyles;\n  leave?: AnimationStyles;\n  style?: StyleProp<ViewStyle>;\n  children: ReactNode | null;\n  onLeave?: () => void;\n};\n\nconst styles = StyleSheet.create({\n  base: {\n    animationFillMode: \"forwards\",\n  },\n});\n\nexport const TransitionView = ({ enter, leave, style, children, onLeave }: Props) => {\n  const viewRef = useRef<View>(null);\n  const childrenForLeaveAnimationRef = useRef<ReactNode | null>(null);\n  const [, forceUpdate] = useReducer(() => [], []);\n\n  const previousChildren = usePreviousValue(children);\n\n  if (isNullish(children) && isNotNullish(previousChildren) && isNotNullish(leave)) {\n    childrenForLeaveAnimationRef.current = previousChildren;\n  }\n\n  // Cleanup in case children reappear before the animation has performed\n  if (isNotNullish(children) && isNullish(previousChildren)) {\n    childrenForLeaveAnimationRef.current = null;\n  }\n\n  useLayoutEffect(() => {\n    if (isNullish(children) && isNotNullish(leave) && isNotNullish(viewRef.current)) {\n      const element = viewRef.current as unknown as Element;\n\n      const onAnimationEnd = () => {\n        childrenForLeaveAnimationRef.current = null;\n        forceUpdate();\n        onLeave?.();\n        element.removeEventListener(\"animationend\", onAnimationEnd);\n      };\n      element.addEventListener(\"animationend\", onAnimationEnd);\n\n      return () => element.removeEventListener(\"animationend\", onAnimationEnd);\n    }\n  }, [children, leave, onLeave]);\n\n  const hasChildrenToDisplay =\n    isNotNullish(children) || isNotNullish(childrenForLeaveAnimationRef.current);\n\n  return hasChildrenToDisplay ? (\n    <View\n      ref={viewRef}\n      style={[\n        styles.base,\n        style,\n        enter,\n        isNotNullish(childrenForLeaveAnimationRef.current) && leave,\n      ]}\n    >\n      {children ?? childrenForLeaveAnimationRef.current}\n    </View>\n  ) : null;\n};\n"],"names":["usePreviousValue","value","previousRef","useRef","useEffect","styles","StyleSheet","TransitionView","enter","leave","style","children","onLeave","viewRef","childrenForLeaveAnimationRef","forceUpdate","useReducer","previousChildren","isNullish","isNotNullish","useLayoutEffect","element","onAnimationEnd","jsx","View"],"mappings":"4GAEa,MAAAA,EAAuBC,GAAgB,CAC5C,MAAAC,EAAcC,SAAOF,CAAK,EAEhCG,OAAAA,EAAAA,UAAU,IAAM,CACdF,EAAY,QAAUD,CAAA,EACrB,CAACA,CAAK,CAAC,EAEHC,EAAY,OACrB,ECGAG,EAAAC,EAAA,OAAA,CACA,KAAA,CACA,kBAAA,UACA,CACA,CAAA,EAEAC,EAAA,CAAA,CAAA,MAAAC,EAAA,MAAAC,EAAA,MAAAC,EAAA,SAAAC,EAAA,QAAAC,KAAA,CACA,MAAAC,EAAAV,SAAA,IAAA,EACAW,EAAAX,SAAA,IAAA,EACA,CAAA,CAAAY,CAAA,EAAAC,EAAAA,WAAA,IAAA,CAAA,EAAA,CAAA,CAAA,EAEAC,EAAAjB,EAAAW,CAAA,EAEA,OAAAO,EAAAP,CAAA,GAAAQ,EAAAF,CAAA,GAAAE,EAAAV,CAAA,IACAK,EAAA,QAAAG,GAIAE,EAAAR,CAAA,GAAAO,EAAAD,CAAA,IACAH,EAAA,QAAA,MAGAM,EAAAA,gBAAA,IAAA,CACA,GAAAF,EAAAP,CAAA,GAAAQ,EAAAV,CAAA,GAAAU,EAAAN,EAAA,OAAA,EAAA,CACA,MAAAQ,EAAAR,EAAA,QAEAS,EAAA,IAAA,CACAR,EAAA,QAAA,KACAC,IACAH,GAAA,MAAAA,IACAS,EAAA,oBAAA,eAAAC,CAAA,CAAA,EAEA,OAAAD,EAAA,iBAAA,eAAAC,CAAA,EAEA,IAAAD,EAAA,oBAAA,eAAAC,CAAA,CACA,CACA,EAAA,CAAAX,EAAAF,EAAAG,CAAA,CAAA,EAGAO,EAAAR,CAAA,GAAAQ,EAAAL,EAAA,OAAA,EAGAS,EAAA,IAAAC,EAAA,CACA,IAAAX,EACA,MAAA,CACAR,EAAA,KACAK,EACAF,EACAW,EAAAL,EAAA,OAAA,GAAAL,CACA,EAEA,YAAAK,EAAA,OAAA,CAEA,EAAA,IACA"}