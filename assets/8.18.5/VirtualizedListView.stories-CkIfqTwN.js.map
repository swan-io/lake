{"version":3,"file":"VirtualizedListView.stories-CkIfqTwN.js","sources":["../../../packages/lake/src/components/VirtualizedList.tsx","../../../packages/lake/__stories__/VirtualizedListView.stories.tsx"],"sourcesContent":["import { Option } from \"@swan-io/boxed\";\nimport {\n  cloneElement,\n  memo,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useId,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport { backgroundColor as backgroundColorVariants, colors, spacings } from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { ScrollView, ScrollViewRef } from \"./ScrollView\";\nimport { Space } from \"./Space\";\n\nconst HORIZONTAL_ROW_PADDING = 8;\n\nconst styles = StyleSheet.create({\n  container: {\n    ...commonStyles.fill,\n    height: 1,\n    alignSelf: \"stretch\",\n  },\n  emptyListContentContainer: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: spacings[48],\n    minHeight: \"100%\",\n  },\n  headerRow: {\n    position: \"sticky\",\n    top: 0,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    zIndex: 2,\n  },\n  cellsContainer: {\n    flexDirection: \"row\",\n    transform: \"translateZ(0)\",\n  },\n  stickedToStartColumnGroup: {\n    position: \"sticky\",\n    left: 0,\n    zIndex: 1,\n  },\n  stickedToStartColumnGroupLocked: {\n    position: \"relative\",\n  },\n  stickedToEndColumnGroup: {\n    position: \"sticky\",\n    right: 0,\n    zIndex: 1,\n  },\n  stickedToEndColumnGroupLocked: {\n    position: \"relative\",\n  },\n  rowsContainer: {\n    position: \"relative\",\n  },\n  row: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    boxShadow: `0 -1px ${colors.gray[100]}`,\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  headerCell: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    alignItems: \"center\",\n  },\n  cell: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    alignItems: \"stretch\",\n  },\n  shadowsLayerContainer: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: \"none\",\n    zIndex: 4,\n  },\n  shadowsLayer: {\n    position: \"sticky\",\n    top: 12,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  startColumnsShadow: {\n    position: \"sticky\",\n    left: 0,\n    top: 0,\n    boxShadow: \"15px 0 10px -12px rgba(0, 0, 0, 0.1)\",\n    transition: \"100ms ease-in-out opacity\",\n  },\n  endColumnsShadow: {\n    position: \"sticky\",\n    right: 0,\n    top: 0,\n    boxShadow: \"-15px 0 10px -12px rgba(0, 0, 0, 0.1)\",\n    transition: \"100ms ease-in-out opacity\",\n  },\n  scrollTracker: {\n    pointerEvents: \"none\",\n    position: \"absolute\",\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n  placeholderRowContainer: {\n    position: \"absolute\",\n    alignItems: \"flex-start\",\n    top: 0,\n    left: 0,\n    right: 0,\n    animationKeyframes: {\n      \"50%\": {\n        opacity: 0.6,\n      },\n    },\n    animationDuration: \"2000ms\",\n    animationTimingFunction: \"linear\",\n    animationIterationCount: \"infinite\",\n    boxShadow: `inset 0 -1px ${colors.gray[100]}`,\n  },\n  placeholderRowContents: {\n    position: \"sticky\",\n    width: \"50%\",\n    left: 0,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    flexGrow: 1,\n    paddingHorizontal: spacings[24],\n  },\n  loadingPlaceholder: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n  },\n  placeholderRow: {\n    height: 14,\n    width: \"30%\",\n    backgroundColor: colors.gray[100],\n  },\n  placeholderRowEnd: {\n    paddingHorizontal: spacings[20],\n    position: \"sticky\",\n    right: 0,\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  smallPlaceholderRow: {\n    width: \"10%\",\n  },\n});\n\nexport type ColumnTitleConfig<ExtraInfo> = {\n  title: string;\n  extraInfo: ExtraInfo;\n  id: string;\n};\n\nexport type ColumnCellConfig<T, ExtraInfo> = {\n  columnId: string;\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n  isHovered: boolean;\n};\n\nexport type ColumnConfig<T, ExtraInfo> = {\n  id: string;\n  width: number;\n  title: string;\n  renderTitle: (props: ColumnTitleConfig<ExtraInfo>) => ReactNode;\n  renderCell: (props: ColumnCellConfig<T, ExtraInfo>) => ReactNode;\n};\n\nexport type LinkConfig<T, ExtraInfo> = {\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n};\n\nexport type VirtualizedListProps<T, ExtraInfo> = {\n  variant: \"default\" | \"accented\";\n  data: T[];\n  keyExtractor: (item: T, index: number) => string;\n  highlightedRowId?: string;\n  headerHeight: number;\n  rowHeight: number;\n  extraInfo: ExtraInfo;\n  stickedToStartColumns?: ColumnConfig<T, ExtraInfo>[];\n  columns: ColumnConfig<T, ExtraInfo>[];\n  stickedToEndColumns?: ColumnConfig<T, ExtraInfo>[];\n  renderThreshold?: number;\n  onEndReached?: () => void;\n  onEndReachedThreshold?: number;\n  getRowLink?: (config: LinkConfig<T, ExtraInfo>) => ReactElement | undefined;\n  renderEmptyList: () => ReactNode;\n  marginHorizontal?: string;\n  loading?: {\n    isLoading: boolean;\n    count: number;\n  };\n};\n\nexport const VirtualizedList = <T, ExtraInfo>({\n  variant,\n  data,\n  stickedToStartColumns,\n  columns,\n  stickedToEndColumns,\n  headerHeight,\n  rowHeight,\n  renderThreshold = 1000,\n  onEndReached,\n  onEndReachedThreshold = 200,\n  loading,\n  extraInfo,\n  keyExtractor,\n  marginHorizontal,\n  renderEmptyList,\n}: VirtualizedListProps<T, ExtraInfo>) => {\n  // Used for unique IDs generation (usefull for header IDs and cells aria-describedBy pointing to them)\n  const viewId = useId();\n  const scrollViewRef = useRef<ScrollViewRef>(null);\n  const scrollTrackerRef = useRef<View>(null);\n\n  // Theoretical height of all actual data if rendered\n  const fullDataHeight = rowHeight * data.length;\n\n  const loadingDataPlaceholderHeight = Option.fromNullable(loading)\n    .flatMap(({ isLoading, count }) => (isLoading ? Option.Some(rowHeight * count) : Option.None()))\n    .getOr(0);\n\n  const containerContainerHeight = headerHeight + fullDataHeight + loadingDataPlaceholderHeight;\n\n  const stickedToStartFirstCellLeftPadding = Option.fromNullable(stickedToStartColumns)\n    .map(() => HORIZONTAL_ROW_PADDING)\n    .getOr(0);\n  const centerFirstCellLeftPadding = Option.fromNullable(stickedToStartColumns)\n    .map(() => 0)\n    .getOr(HORIZONTAL_ROW_PADDING);\n  const centerLastCellLeftPadding = Option.fromNullable(stickedToEndColumns)\n    .map(() => 0)\n    .getOr(HORIZONTAL_ROW_PADDING);\n  const stickedToEndLastCellRightPadding = Option.fromNullable(stickedToEndColumns)\n    .map(() => HORIZONTAL_ROW_PADDING)\n    .getOr(0);\n\n  const stickedToStartColumnsWidth = useMemo(\n    () =>\n      Option.fromNullable(stickedToStartColumns)\n        .map(columns => columns.reduce((acc, column) => acc + column.width, 0))\n        .getOr(0) + stickedToStartFirstCellLeftPadding,\n    [stickedToStartColumns, stickedToStartFirstCellLeftPadding],\n  );\n\n  const centerColumnsWidth = useMemo(\n    () =>\n      columns.reduce((acc, column) => acc + column.width, 0) +\n      centerFirstCellLeftPadding +\n      centerLastCellLeftPadding,\n    [columns, centerFirstCellLeftPadding, centerLastCellLeftPadding],\n  );\n\n  const stickedToEndColumnsWidth = useMemo(\n    () =>\n      Option.fromNullable(stickedToEndColumns)\n        .map(columns => columns.reduce((acc, column) => acc + column.width, 0))\n        .getOr(0) + stickedToEndLastCellRightPadding,\n    [stickedToEndColumns, stickedToEndLastCellRightPadding],\n  );\n\n  const contentContainerWidth =\n    stickedToStartColumnsWidth + centerColumnsWidth + stickedToEndColumnsWidth;\n\n  const backgroundColor = backgroundColorVariants[variant];\n\n  // We store the `startIndex` and `endIndex` rather than the scroll position\n  // so that it triggers way less re-renders\n  const [rangeToRender, setRangeToRender] = useState<\n    { startIndex: number; endIndex: number } | undefined\n  >(undefined);\n\n  const [clientHeight, setClientHeight] = useState<number | undefined>(undefined);\n\n  const [horizontalScrollPosition, setHasHorizontalScrollPosition] = useState<\n    \"Start\" | \"Middle\" | \"End\" | \"NoScroll\" | undefined\n  >(undefined);\n\n  const rowsToRender = useMemo(() => {\n    return Option.fromNullable(rangeToRender).map(({ startIndex, endIndex }) => {\n      const clampedEndIndex = Math.min(data.length, endIndex);\n      return {\n        startIndex,\n        endIndex: clampedEndIndex,\n        data: data.slice(startIndex, clampedEndIndex),\n      };\n    });\n  }, [data, rangeToRender]);\n\n  const onLayoutUpdate = useCallback(() => {\n    const element = Option.fromNullable(scrollViewRef.current).flatMap(ref =>\n      Option.fromNullable(ref.element),\n    );\n    setRangeToRender(previousRangeToRender =>\n      element\n        .map(scrollView => {\n          const startIndex = Math.max(\n            0,\n            Math.floor((scrollView.scrollTop - renderThreshold) / rowHeight),\n          );\n\n          const endIndex =\n            startIndex + Math.ceil((scrollView.scrollHeight + renderThreshold * 2) / rowHeight);\n\n          if (\n            previousRangeToRender?.startIndex === startIndex &&\n            previousRangeToRender.endIndex === endIndex\n          ) {\n            return previousRangeToRender;\n          }\n\n          return { startIndex, endIndex };\n        })\n        .toUndefined(),\n    );\n\n    setClientHeight(element.map(scrollView => scrollView.clientHeight).toUndefined());\n\n    setHasHorizontalScrollPosition(\n      element\n        .map(scrollView =>\n          scrollView.scrollWidth === scrollView.clientWidth ||\n          scrollView.clientWidth - (stickedToEndColumnsWidth + stickedToStartColumnsWidth) < 400\n            ? \"NoScroll\"\n            : scrollView.scrollLeft <= 0\n              ? \"Start\"\n              : scrollView.scrollLeft >= scrollView.scrollWidth - scrollView.clientWidth\n                ? \"End\"\n                : \"Middle\",\n        )\n        .toUndefined(),\n    );\n  }, [renderThreshold, rowHeight, stickedToStartColumnsWidth, stickedToEndColumnsWidth]);\n\n  useLayoutEffect(() => {\n    onLayoutUpdate();\n  }, [onLayoutUpdate]);\n\n  const scrollTimeoutRef = useRef<number | undefined>(undefined);\n  const rowsContainerRef = useRef<View>(null);\n\n  const onScroll = useCallback(() => {\n    // Disable interactions in cells during scroll, avoids useless\n    // re-renders\n    if (scrollTimeoutRef.current != null) {\n      clearTimeout(scrollTimeoutRef.current);\n    }\n    if (rowsContainerRef.current instanceof HTMLElement) {\n      rowsContainerRef.current.style.pointerEvents = \"none\";\n    }\n    scrollTimeoutRef.current = window.setTimeout(() => {\n      if (rowsContainerRef.current instanceof HTMLElement) {\n        rowsContainerRef.current.style.pointerEvents = \"auto\";\n      }\n    }, 100);\n\n    onLayoutUpdate();\n  }, [onLayoutUpdate]);\n\n  useEffect(() => {\n    const element = Option.fromNullable(scrollViewRef.current).flatMap(ref =>\n      Option.fromNullable(ref.element),\n    );\n    return element\n      .map(element => {\n        const resizeObserver = new ResizeObserver(() => {\n          onLayoutUpdate();\n        });\n        resizeObserver.observe(element);\n        return () => resizeObserver.unobserve(element);\n      })\n      .toUndefined();\n  }, [onLayoutUpdate]);\n\n  // tracks if the threshold to initiate the next data load is reached\n  useEffect(() => {\n    const scrollTracker = scrollTrackerRef.current;\n    if (scrollTracker != null) {\n      const scrollTrackerElement = scrollTracker as unknown as HTMLElement;\n      const intersectionObserver = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            if (onEndReached != null) {\n              onEndReached();\n            }\n          }\n        });\n      });\n      intersectionObserver.observe(scrollTrackerElement);\n      return () => intersectionObserver.unobserve(scrollTrackerElement);\n    }\n  }, [onEndReached, data.length]);\n\n  const header = useMemo(() => {\n    return (\n      <View style={[styles.headerRow, { height: headerHeight }]}>\n        {Option.fromNullable(stickedToStartColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToStartColumnGroup,\n                horizontalScrollPosition === \"NoScroll\" && styles.stickedToStartColumnGroupLocked,\n                { width: stickedToStartColumnsWidth, backgroundColor },\n              ]}\n            >\n              {columns.map(({ id, width, title, renderTitle }, index) => {\n                const columnId = `${viewId}_${id}`;\n                const paddingLeft = index === 0 ? stickedToStartFirstCellLeftPadding : 0;\n\n                return (\n                  <View\n                    style={[styles.headerCell, { width: width + paddingLeft, paddingLeft }]}\n                    id={columnId}\n                    key={columnId}\n                  >\n                    {renderTitle({ title, extraInfo, id })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n\n        <View style={[styles.cellsContainer, { width: centerColumnsWidth, backgroundColor }]}>\n          {columns.map(({ id, width, title, renderTitle }, index) => {\n            const columnId = `${viewId}_${id}`;\n            const paddingLeft = index === 0 ? centerFirstCellLeftPadding : 0;\n            const paddingRight = index === columns.length - 1 ? centerLastCellLeftPadding : 0;\n\n            return (\n              <View\n                style={[\n                  styles.headerCell,\n                  { width: width + paddingLeft + paddingRight, paddingLeft, paddingRight },\n                ]}\n                id={columnId}\n                key={columnId}\n              >\n                {renderTitle({ title, extraInfo, id })}\n              </View>\n            );\n          })}\n        </View>\n\n        {Option.fromNullable(stickedToEndColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToEndColumnGroup,\n                horizontalScrollPosition === \"NoScroll\" && styles.stickedToEndColumnGroupLocked,\n                { width: stickedToEndColumnsWidth, backgroundColor },\n              ]}\n            >\n              {columns.map(({ id, width, title, renderTitle }, index) => {\n                const columnId = `${viewId}_${id}`;\n                const paddingRight =\n                  index === columns.length - 1 ? stickedToEndLastCellRightPadding : 0;\n\n                return (\n                  <View\n                    style={[styles.headerCell, { width: width + paddingRight, paddingRight }]}\n                    id={columnId}\n                    key={columnId}\n                  >\n                    {renderTitle({ title, extraInfo, id })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n      </View>\n    );\n  }, [\n    backgroundColor,\n    stickedToStartColumnsWidth,\n    centerColumnsWidth,\n    stickedToEndColumnsWidth,\n    headerHeight,\n    extraInfo,\n    stickedToStartColumns,\n    columns,\n    stickedToEndColumns,\n    viewId,\n    horizontalScrollPosition,\n    stickedToStartFirstCellLeftPadding,\n    centerFirstCellLeftPadding,\n    centerLastCellLeftPadding,\n    stickedToEndLastCellRightPadding,\n  ]);\n\n  const startColumnShadow = useMemo(() => {\n    if (stickedToStartColumnsWidth === 0) {\n      return Option.None();\n    }\n    return Option.Some(\n      <View\n        style={[\n          styles.startColumnsShadow,\n          {\n            width: stickedToStartColumnsWidth,\n            opacity: Option.fromNullable(horizontalScrollPosition)\n              .map(value => (value === \"Start\" || value === \"NoScroll\" ? 0 : 1))\n              .getOr(0),\n          },\n        ]}\n      />,\n    );\n  }, [stickedToStartColumnsWidth, horizontalScrollPosition]);\n\n  const endColumnShadow = useMemo(() => {\n    if (stickedToEndColumnsWidth === 0) {\n      return Option.None();\n    }\n    return Option.Some(\n      <View\n        style={[\n          styles.endColumnsShadow,\n          {\n            width: stickedToEndColumnsWidth,\n            opacity: Option.fromNullable(horizontalScrollPosition)\n              .map(value => (value === \"End\" || value === \"NoScroll\" ? 0 : 1))\n              .getOr(0),\n          },\n        ]}\n      />,\n    );\n  }, [stickedToEndColumnsWidth, horizontalScrollPosition]);\n\n  if (\n    data.length === 0 &&\n    !Option.fromNullable(loading)\n      .map(({ isLoading }) => isLoading)\n      .getOr(false)\n  ) {\n    return (\n      <ScrollView style={styles.container} contentContainerStyle={styles.emptyListContentContainer}>\n        {renderEmptyList()}\n      </ScrollView>\n    );\n  }\n\n  return (\n    <ScrollView\n      ref={scrollViewRef}\n      both={true}\n      style={[styles.container, { marginHorizontal }]}\n      onScroll={onScroll}\n      scrollEventThrottle={32}\n      contentContainerStyle={{\n        height: containerContainerHeight,\n        width: contentContainerWidth,\n      }}\n    >\n      {header}\n\n      {rowsToRender\n        .map(({ startIndex, endIndex, data }) => (\n          <View style={styles.rowsContainer} ref={rowsContainerRef}>\n            {data.map((item, index) => (\n              <VirtualizedRow<T, ExtraInfo>\n                key={keyExtractor(item, startIndex + index)}\n                viewId={viewId}\n                item={item}\n                rowHeight={rowHeight}\n                absoluteIndex={startIndex + index}\n                variant={variant}\n                stickedToStartColumnsWidth={stickedToStartColumnsWidth}\n                centerColumnsWidth={centerColumnsWidth}\n                stickedToEndColumnsWidth={stickedToEndColumnsWidth}\n                stickedToStartColumns={stickedToStartColumns}\n                columns={columns}\n                stickedToEndColumns={stickedToEndColumns}\n                extraInfo={extraInfo}\n                horizontalScrollPosition={horizontalScrollPosition ?? \"NoScroll\"}\n                stickedToStartFirstCellLeftPadding={stickedToStartFirstCellLeftPadding}\n                centerFirstCellLeftPadding={centerFirstCellLeftPadding}\n                centerLastCellLeftPadding={centerLastCellLeftPadding}\n                stickedToEndLastCellRightPadding={stickedToEndLastCellRightPadding}\n              />\n            ))}\n\n            {Option.fromNullable(loading)\n              .flatMap(({ isLoading, count }) => (isLoading ? Option.Some(count) : Option.None()))\n              .map(count => (\n                <View\n                  aria-busy={true}\n                  style={[\n                    styles.loadingPlaceholder,\n                    {\n                      top: endIndex * rowHeight,\n                    },\n                  ]}\n                >\n                  <VirtualizedListPlaceholder\n                    count={count}\n                    headerHeight={0}\n                    rowHeight={rowHeight}\n                  />\n                </View>\n              ))\n              .toNull()}\n          </View>\n        ))\n        .toNull()}\n\n      {Option.fromNullable(clientHeight)\n        .map(clientHeight => (\n          <View style={styles.shadowsLayerContainer}>\n            <View style={[styles.shadowsLayer, { height: clientHeight - 12 }]}>\n              {startColumnShadow.toNull()}\n\n              <View style={{ width: centerColumnsWidth }}></View>\n\n              {endColumnShadow.toNull()}\n            </View>\n          </View>\n        ))\n        .toNull()}\n\n      <View\n        style={[styles.scrollTracker, { height: onEndReachedThreshold }]}\n        ref={scrollTrackerRef}\n      />\n    </ScrollView>\n  );\n};\n\ntype VirtualizedRowProps<T, ExtraInfo> = {\n  viewId: string;\n  rowHeight: number;\n  absoluteIndex: number;\n  variant: \"accented\" | \"default\";\n  stickedToStartColumnsWidth: number;\n  centerColumnsWidth: number;\n  stickedToEndColumnsWidth: number;\n  stickedToStartColumns?: ColumnConfig<T, ExtraInfo>[];\n  columns: ColumnConfig<T, ExtraInfo>[];\n  stickedToEndColumns?: ColumnConfig<T, ExtraInfo>[];\n  extraInfo: ExtraInfo;\n  getRowLink?: (config: LinkConfig<T, ExtraInfo>) => ReactElement | undefined;\n  horizontalScrollPosition: \"NoScroll\" | \"Start\" | \"Middle\" | \"End\";\n  item: T;\n  stickedToStartFirstCellLeftPadding: number;\n  centerFirstCellLeftPadding: number;\n  centerLastCellLeftPadding: number;\n  stickedToEndLastCellRightPadding: number;\n};\n\nconst RawVirtualizedRow = <T, ExtraInfo>({\n  viewId,\n  rowHeight,\n  absoluteIndex,\n  variant,\n  stickedToStartColumnsWidth,\n  centerColumnsWidth,\n  stickedToEndColumnsWidth,\n  stickedToStartColumns,\n  columns,\n  stickedToEndColumns,\n  extraInfo,\n  item,\n  horizontalScrollPosition,\n  getRowLink,\n  stickedToStartFirstCellLeftPadding,\n  centerFirstCellLeftPadding,\n  centerLastCellLeftPadding,\n  stickedToEndLastCellRightPadding,\n}: VirtualizedRowProps<T, ExtraInfo>) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const elementRef = useRef<View>(null);\n\n  useHover(elementRef, {\n    onHoverStart: () => setIsHovered(true),\n    onHoverEnd: () => setIsHovered(false),\n  });\n\n  const rootElement =\n    getRowLink != null ? (\n      (getRowLink({ item, index: absoluteIndex, extraInfo }) ?? <View />)\n    ) : (\n      <View />\n    );\n  return cloneElement(rootElement, {\n    ref: elementRef,\n    style: [\n      styles.row,\n      {\n        backgroundColor: backgroundColorVariants[variant],\n        top: absoluteIndex * rowHeight,\n        height: rowHeight,\n      },\n      isHovered && {\n        backgroundColor:\n          variant === \"accented\"\n            ? backgroundColorVariants.default\n            : backgroundColorVariants.accented,\n      },\n    ],\n    children: (\n      <>\n        {Option.fromNullable(stickedToStartColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToStartColumnGroup,\n                horizontalScrollPosition === \"NoScroll\" && styles.stickedToStartColumnGroupLocked,\n                {\n                  width: stickedToStartColumnsWidth,\n                  backgroundColor: isHovered\n                    ? backgroundColorVariants[variant === \"accented\" ? \"default\" : \"accented\"]\n                    : backgroundColorVariants[variant],\n                },\n              ]}\n            >\n              {columns.map(({ id, width, renderCell }, index) => {\n                const columnId = `${viewId}_${id}`;\n                const paddingLeft = index === 0 ? stickedToStartFirstCellLeftPadding : 0;\n\n                return (\n                  <View\n                    style={[styles.cell, { width: width + paddingLeft, paddingLeft }]}\n                    key={columnId}\n                    aria-describedby={columnId}\n                  >\n                    {renderCell({\n                      columnId,\n                      item,\n                      index: absoluteIndex,\n                      extraInfo,\n                      isHovered: false,\n                    })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n\n        <View\n          style={[\n            styles.cellsContainer,\n            {\n              width: centerColumnsWidth,\n              backgroundColor: isHovered\n                ? backgroundColorVariants[variant === \"accented\" ? \"default\" : \"accented\"]\n                : backgroundColorVariants[variant],\n            },\n          ]}\n        >\n          {columns.map(({ id, width, renderCell }, index) => {\n            const columnId = `${viewId}_${id}`;\n            const paddingLeft = index === 0 ? centerFirstCellLeftPadding : 0;\n            const paddingRight = index === columns.length - 1 ? centerLastCellLeftPadding : 0;\n\n            return (\n              <View\n                style={[\n                  styles.cell,\n                  { width: width + paddingLeft + paddingRight, paddingLeft, paddingRight },\n                ]}\n                key={columnId}\n                aria-describedby={columnId}\n              >\n                {renderCell({\n                  columnId,\n                  item,\n                  index: absoluteIndex,\n                  extraInfo,\n                  isHovered: false,\n                })}\n              </View>\n            );\n          })}\n        </View>\n\n        {Option.fromNullable(stickedToEndColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToEndColumnGroup,\n                horizontalScrollPosition === \"NoScroll\" && styles.stickedToEndColumnGroupLocked,\n                {\n                  width: stickedToEndColumnsWidth,\n                  backgroundColor: isHovered\n                    ? backgroundColorVariants[variant === \"accented\" ? \"default\" : \"accented\"]\n                    : backgroundColorVariants[variant],\n                },\n              ]}\n            >\n              {columns.map(({ id, width, renderCell }, index) => {\n                const columnId = `${viewId}_${id}`;\n                const paddingRight =\n                  index === columns.length - 1 ? stickedToEndLastCellRightPadding : 0;\n\n                return (\n                  <View\n                    style={[styles.cell, { width: width + paddingRight, paddingRight }]}\n                    key={columnId}\n                    aria-describedby={columnId}\n                  >\n                    {renderCell({\n                      columnId,\n                      item,\n                      index: absoluteIndex,\n                      extraInfo,\n                      isHovered: false,\n                    })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n      </>\n    ),\n  });\n};\n\nconst VirtualizedRow = memo(RawVirtualizedRow) as typeof RawVirtualizedRow;\n\ntype VirtualizedListPlaceholderProps = {\n  count: number;\n  rowHeight: number;\n  groupHeaderHeight?: number;\n  headerHeight?: number;\n  marginHorizontal?: string;\n};\n\nexport const VirtualizedListPlaceholder = ({\n  count,\n  rowHeight,\n  groupHeaderHeight,\n  headerHeight,\n  marginHorizontal,\n}: VirtualizedListPlaceholderProps) => {\n  return (\n    <View style={[styles.container, { marginHorizontal }]}>\n      {headerHeight != null ? <View style={{ height: headerHeight }} /> : null}\n      {groupHeaderHeight != groupHeaderHeight ? <View style={{ height: headerHeight }} /> : null}\n\n      <View>\n        {Array.from({ length: count }, (_, index) => {\n          const top = index * rowHeight;\n\n          return (\n            <View\n              key={String(index)}\n              style={[styles.placeholderRowContainer, { height: rowHeight, top }]}\n            >\n              <View style={styles.placeholderRowContents}>\n                <View style={styles.placeholderRow} />\n                <Space width={32} />\n                <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                <Space width={32} />\n\n                <View style={styles.placeholderRowEnd}>\n                  <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                </View>\n              </View>\n            </View>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n","import { Meta, StoryFn } from \"@storybook/react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { Box } from \"../src/components/Box\";\nimport {\n  ColumnCellConfig,\n  ColumnTitleConfig,\n  FixedListView,\n  FixedListViewEmpty,\n  FixedListViewPlaceholder,\n} from \"../src/components/FixedListView\";\nimport {\n  EndAlignedCell,\n  LinkCell,\n  SimpleHeaderCell,\n  SimpleRegularTextCell,\n  SimpleTitleCell,\n} from \"../src/components/FixedListViewCells\";\nimport { LakeButton } from \"../src/components/LakeButton\";\nimport { LakeLabelledCheckbox } from \"../src/components/LakeCheckbox\";\nimport { Space } from \"../src/components/Space\";\nimport { Tag } from \"../src/components/Tag\";\nimport { VirtualizedList } from \"../src/components/VirtualizedList\";\n\nexport default {\n  title: \"Layout/VirtualizedList\",\n  component: VirtualizedList,\n} as Meta<typeof VirtualizedList>;\n\ntype TestRow = {\n  id: string;\n  name: string;\n};\n\nconst keyExtractor = ({ id }: TestRow) => id;\n\ntype SortInfo = {\n  key: string;\n  order: \"Asc\" | \"Desc\";\n};\n\nconst generateRandomName = () => {\n  const names = [\n    \"Matthias\",\n    \"John\",\n    \"Jane\",\n    \"Camille\",\n    \"Charlotte\",\n    \"Francis\",\n    \"Émilie\",\n    \"François\",\n    \"Laura\",\n    \"Marie\",\n    \"Natasha\",\n    \"Nicolas\",\n    \"Pierre\",\n    \"Thomas\",\n    \"Valérie\",\n    \"Yann\",\n    \"Zoé\",\n    \"Jérôme\",\n    \"Thomas\",\n  ] as const;\n\n  return names[Math.floor(Math.random() * names.length)] ?? names[0];\n};\n\nconst generateItem = (): TestRow => {\n  return {\n    id: uuid(),\n    name: generateRandomName(),\n  };\n};\n\nconst EditableFixedListView = () => {\n  const [sort, setSort] = useState<SortInfo>({ key: \"name\", order: \"Desc\" });\n  const [endReachedTimes, setEndReachedTimes] = useState(0);\n  const [withInfiniteScroll, setWithInfiniteScroll] = useState(false);\n  const [showFakeLoader, setShowFakeLoader] = useState(false);\n  const [forceIsLoading, setForceIsLoading] = useState(false);\n\n  const [data, setData] = useState(() => Array.from({ length: 20 }, _ => generateItem()));\n\n  const onEndReached = useCallback(() => {\n    setEndReachedTimes(v => v + 1);\n    if (withInfiniteScroll) {\n      setShowFakeLoader(true);\n    }\n  }, [withInfiniteScroll]);\n\n  useEffect(() => {\n    if (showFakeLoader) {\n      const timeout = setTimeout(() => {\n        setShowFakeLoader(false);\n        setData(data => [...data, ...Array.from({ length: 20 }, _ => generateItem())]);\n      }, 1000);\n\n      return () => clearTimeout(timeout);\n    }\n  });\n\n  const { stickedToStartColumns, columns, stickedToEndColumns } = useMemo(() => {\n    const stickedToStartColumns = [\n      {\n        width: 300,\n        id: \"name\",\n        title: \"Name\",\n        renderTitle: ({ title, extraInfo, id }: ColumnTitleConfig<SortInfo>) => (\n          <SimpleHeaderCell\n            text={title}\n            sort={extraInfo.key === id ? extraInfo.order : undefined}\n            onPress={() => setSort({ key: id, order: extraInfo.order === \"Desc\" ? \"Asc\" : \"Desc\" })}\n          />\n        ),\n        renderCell: ({ item: { name } }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <SimpleTitleCell text={name} />\n        ),\n      },\n    ];\n\n    const columns = [\n      {\n        width: 500,\n        id: \"event_id\",\n        title: \"Event ID\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: ({ item: { id } }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <SimpleRegularTextCell text={id} />\n        ),\n      },\n      {\n        width: 150,\n        id: \"link_before\",\n        title: \"Link before\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: () => (\n          <LinkCell onPress={() => {}} buttonPosition=\"start\">\n            <Tag color=\"shakespear\">Demo link</Tag>\n          </LinkCell>\n        ),\n      },\n      {\n        width: 500,\n        id: \"onboarding_id\",\n        title: \"Onboarding ID\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: ({ item: { id } }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <SimpleRegularTextCell text={id} />\n        ),\n      },\n      {\n        width: 150,\n        id: \"link_after\",\n        title: \"Link after\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: () => (\n          <LinkCell onPress={() => {}} buttonPosition=\"end\">\n            <Tag color=\"shakespear\">Demo link</Tag>\n          </LinkCell>\n        ),\n      },\n      {\n        width: 500,\n        id: \"account_id\",\n        title: \"Account ID\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: ({ item: { id } }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <SimpleRegularTextCell text={id} />\n        ),\n      },\n    ];\n\n    const stickedToEndColumns = [\n      {\n        width: 72,\n        id: \"dot\",\n        title: \"Settings\",\n        renderTitle: () => <SimpleHeaderCell text={\"End\"} justifyContent=\"flex-end\" />,\n        renderCell: () => (\n          <EndAlignedCell>\n            <LakeButton mode=\"tertiary\" icon=\"chevron-right-filled\" ariaLabel=\"test\" size=\"small\" />\n          </EndAlignedCell>\n        ),\n      },\n    ];\n\n    return { stickedToStartColumns, columns, stickedToEndColumns };\n  }, []);\n\n  return (\n    <>\n      <Box direction=\"row\" alignItems=\"center\">\n        <LakeButton\n          icon=\"add-circle-filled\"\n          color=\"live\"\n          size=\"small\"\n          onPress={() => setData(data => [generateItem(), ...data])}\n        >\n          Prepend\n        </LakeButton>\n\n        <Space width={16} />\n\n        <LakeButton\n          icon=\"add-circle-filled\"\n          color=\"live\"\n          size=\"small\"\n          onPress={() => setData(data => [...data.slice(0, 1), generateItem(), ...data.slice(1)])}\n        >\n          Insert in 2nd\n        </LakeButton>\n\n        <Space width={16} />\n\n        <LakeButton\n          icon=\"add-circle-filled\"\n          color=\"live\"\n          size=\"small\"\n          onPress={() => setData(data => [...data, generateItem()])}\n        >\n          Append\n        </LakeButton>\n\n        <Space width={16} />\n\n        <LakeButton icon=\"delete-filled\" color=\"negative\" size=\"small\" onPress={() => setData([])}>\n          Clear\n        </LakeButton>\n\n        <Space width={16} />\n        <Tag label=\"End reached\">{endReachedTimes} times</Tag>\n        <Space width={16} />\n\n        <LakeLabelledCheckbox\n          label=\"With infinite scroll\"\n          value={withInfiniteScroll}\n          onValueChange={setWithInfiniteScroll}\n        />\n\n        <Space width={16} />\n\n        <LakeLabelledCheckbox\n          label=\"Force loading state\"\n          value={forceIsLoading}\n          onValueChange={setForceIsLoading}\n        />\n      </Box>\n\n      <Space height={16} />\n\n      <VirtualizedList\n        variant=\"default\"\n        extraInfo={sort}\n        keyExtractor={keyExtractor}\n        data={data}\n        stickedToStartColumns={stickedToStartColumns}\n        columns={columns}\n        stickedToEndColumns={stickedToEndColumns}\n        rowHeight={48}\n        headerHeight={48}\n        onEndReached={onEndReached}\n        onEndReachedThreshold={300}\n        renderEmptyList={() => (\n          <FixedListViewEmpty icon=\"lake-inbox-empty\" title=\"Nothing to see here\" />\n        )}\n        loading={{\n          isLoading: forceIsLoading || showFakeLoader,\n          count: 20,\n        }}\n      />\n    </>\n  );\n};\n\nexport const Primary: StoryFn<typeof FixedListView> = () => {\n  return <EditableFixedListView />;\n};\n\nexport const WithoutBackground: StoryFn<typeof FixedListView> = () => {\n  return <EditableFixedListView />;\n};\n\nexport const Placeholder: StoryFn<typeof FixedListView> = () => {\n  return (\n    <FixedListViewPlaceholder rowHeight={48} rowVerticalSpacing={4} headerHeight={48} count={3} />\n  );\n};\n"],"names":["HORIZONTAL_ROW_PADDING","styles","StyleSheet","commonStyles","spacings","colors","VirtualizedList","variant","data","stickedToStartColumns","columns","stickedToEndColumns","headerHeight","rowHeight","renderThreshold","onEndReached","onEndReachedThreshold","loading","extraInfo","keyExtractor","marginHorizontal","renderEmptyList","viewId","useId","scrollViewRef","useRef","scrollTrackerRef","fullDataHeight","loadingDataPlaceholderHeight","Option","isLoading","count","containerContainerHeight","stickedToStartFirstCellLeftPadding","centerFirstCellLeftPadding","centerLastCellLeftPadding","stickedToEndLastCellRightPadding","stickedToStartColumnsWidth","useMemo","acc","column","centerColumnsWidth","stickedToEndColumnsWidth","contentContainerWidth","backgroundColor","backgroundColorVariants","rangeToRender","setRangeToRender","useState","clientHeight","setClientHeight","horizontalScrollPosition","setHasHorizontalScrollPosition","rowsToRender","startIndex","endIndex","clampedEndIndex","onLayoutUpdate","useCallback","element","ref","previousRangeToRender","scrollView","useLayoutEffect","scrollTimeoutRef","rowsContainerRef","onScroll","useEffect","resizeObserver","scrollTracker","scrollTrackerElement","intersectionObserver","entries","entry","header","jsxs","View","jsx","id","width","title","renderTitle","index","columnId","paddingLeft","paddingRight","startColumnShadow","value","endColumnShadow","ScrollView","item","VirtualizedRow","VirtualizedListPlaceholder","RawVirtualizedRow","absoluteIndex","getRowLink","isHovered","setIsHovered","elementRef","useHover","rootElement","cloneElement","Fragment","renderCell","memo","groupHeaderHeight","_","top","Space","VirtualizedListView_stories","component","generateRandomName","names","Math","floor","random","length","generateItem","uuid","name","EditableFixedListView","sort","setSort","key","order","endReachedTimes","setEndReachedTimes","withInfiniteScroll","setWithInfiniteScroll","showFakeLoader","setShowFakeLoader","forceIsLoading","setForceIsLoading","setData","Array","from","v","timeout","setTimeout","clearTimeout","SimpleHeaderCell","undefined","SimpleTitleCell","SimpleRegularTextCell","LinkCell","Tag","EndAlignedCell","LakeButton","Box","slice","LakeLabelledCheckbox","FixedListViewEmpty","Primary","WithoutBackground","Placeholder","FixedListViewPlaceholder"],"mappings":"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"}