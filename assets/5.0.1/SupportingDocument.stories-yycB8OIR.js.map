{"version":3,"file":"SupportingDocument.stories-yycB8OIR.js","sources":["../../../packages/lake/src/components/Form.tsx","../../../packages/shared-business/src/constants/uploads.ts","../../../packages/shared-business/src/components/SupportingDocument.tsx"],"sourcesContent":["import { forwardRef, memo, ReactNode } from \"react\";\nimport { unstable_createElement as createElement, View, ViewProps } from \"react-native\";\nimport { Except } from \"type-fest\";\nimport { commonStyles } from \"../constants/commonStyles\";\n\ntype Props = Except<ViewProps, \"role\"> & {\n  children?: ReactNode;\n  onReset?: (event: React.FormEvent<HTMLElement>) => void;\n  onSubmit?: (event: React.FormEvent<HTMLElement>) => void;\n};\n\nexport const Form = memo(\n  forwardRef<View, Props>(({ style, onReset, onSubmit, ...props }, forwardedRef) =>\n    createElement(\"form\", {\n      ...props,\n      ref: forwardedRef,\n      onReset: (event: React.FormEvent<HTMLElement>) => {\n        event.preventDefault();\n        onReset?.(event);\n      },\n      onSubmit: (event: React.FormEvent<HTMLElement>) => {\n        event.preventDefault();\n        onSubmit?.(event);\n      },\n      style: [commonStyles.view, style],\n    }),\n  ),\n);\n\nForm.displayName = \"Form\";\n","export const MAX_SUPPORTING_DOCUMENT_UPLOAD_SIZE_MB = 20;\n\n// just below 20MB (* 1000 instead of * 1024) in bytes to account for the rest of the payload\nexport const MAX_SUPPORTING_DOCUMENT_UPLOAD_SIZE =\n  MAX_SUPPORTING_DOCUMENT_UPLOAD_SIZE_MB * 1000 * 1000;\n","import { Dict } from \"@swan-io/boxed\";\nimport { Form } from \"@swan-io/lake/src/components/Form\";\nimport { LakeButton, LakeButtonGroup } from \"@swan-io/lake/src/components/LakeButton\";\nimport { LakeLabel } from \"@swan-io/lake/src/components/LakeLabel\";\nimport { LakeText } from \"@swan-io/lake/src/components/LakeText\";\nimport { LakeTooltip } from \"@swan-io/lake/src/components/LakeTooltip\";\nimport { Space } from \"@swan-io/lake/src/components/Space\";\nimport { isNotNullishOrEmpty, isNullish } from \"@swan-io/lake/src/utils/nullish\";\nimport { FormConfig, Validator, useForm } from \"@swan-io/use-form\";\nimport {\n  ForwardedRef,\n  Fragment,\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useState,\n} from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport {\n  MAX_SUPPORTING_DOCUMENT_UPLOAD_SIZE,\n  MAX_SUPPORTING_DOCUMENT_UPLOAD_SIZE_MB,\n} from \"../constants/uploads\";\nimport { isTranslationKey, locale, t } from \"../utils/i18n\";\nimport { LakeModal } from \"./LakeModal\";\nimport { UploadArea, UploadFileStatus } from \"./UploadArea\";\n\nconst ACCEPTED_FORMATS = [\"application/pdf\", \"image/png\", \"image/jpeg\"];\nconst NO_ID_YET = \"NO_ID_YET\";\n\nexport type Document<Purpose extends string> = {\n  id: string;\n  name?: string;\n  downloadUrl?: string;\n  purpose: Purpose;\n};\n\ntype FormValue = UploadFileStatus[];\n\ntype FormValues<Purpose extends string> = Required<Record<Purpose, FormValue>>;\n\ntype Props<Purpose extends string> = {\n  getAwsUrl: (\n    file: File,\n    purpose: Purpose,\n  ) => Promise<{ upload: { url: string; fields: { key: string; value: string }[] }; id: string }>;\n  documents: Document<Purpose>[];\n  requiredDocumentPurposes: Purpose[];\n  onChange?: (documents: Document<Purpose>[]) => void;\n  onboardingLanguage?: string;\n};\n\nconst validateNotEmpty: Validator<FormValue> = value => {\n  if (value.length === 0) {\n    return t(\"error.requiredField\");\n  }\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    opacity: 1,\n  },\n  buttonWithDefaultCursor: {\n    opacity: 1,\n    cursor: \"default\",\n  },\n});\n\ntype HelpProps =\n  | {\n      type: \"tooltip\";\n      text: string;\n      width?: number;\n    }\n  | {\n      type: \"button\";\n      label: string;\n      onPress: () => void;\n    };\n\nconst Help = (props: HelpProps) => {\n  return match(props)\n    .with({ type: \"tooltip\" }, ({ text, width }) => (\n      <LakeTooltip content={text} width={width} togglableOnFocus={true} placement=\"top\">\n        <LakeButton\n          mode=\"tertiary\"\n          size=\"small\"\n          color=\"gray\"\n          icon=\"question-circle-regular\"\n          disabled={true}\n          style={[styles.button, styles.buttonWithDefaultCursor]}\n          ariaLabel={t(\"supportingDocuments.help.whatIsThis\")}\n        />\n      </LakeTooltip>\n    ))\n    .with({ type: \"button\" }, ({ label, onPress }) => (\n      <LakeButton\n        mode=\"tertiary\"\n        size=\"small\"\n        color=\"gray\"\n        icon=\"question-circle-regular\"\n        onPress={onPress}\n        style={styles.button}\n        ariaLabel={t(\"supportingDocuments.help.whatIsThis\")}\n      >\n        {label}\n      </LakeButton>\n    ))\n    .exhaustive();\n};\n\nexport type SupportingDocumentRef = {\n  submit: (callback: (value: boolean) => void) => void;\n};\n\nexport const getSupportingDocumentPurposeLabel = (purpose: string) => {\n  const key = `supportingDocuments.purpose.${purpose}`;\n  if (isTranslationKey(key)) {\n    return t(key);\n  } else {\n    return purpose;\n  }\n};\n\nexport const getSupportingDocumentPurposeDescriptionLabel = (purpose: string) => {\n  const key = `supportingDocuments.purpose.${purpose}.description`;\n  if (isTranslationKey(key)) {\n    return t(key);\n  } else {\n    return \"\";\n  }\n};\n\nconst SupportingDocumentWithRef = <Purpose extends string>(\n  {\n    documents,\n    getAwsUrl,\n    onChange,\n    requiredDocumentPurposes,\n    onboardingLanguage = locale.language,\n  }: Props<Purpose>,\n  externalRef: ForwardedRef<SupportingDocumentRef>,\n) => {\n  const initialValues = useMemo(\n    () =>\n      documents.reduce<Partial<FormValues<Purpose>>>((acc, doc) => {\n        return {\n          ...acc,\n          [doc.purpose]: [\n            ...(acc[doc.purpose] ?? []),\n            {\n              status: \"finished\",\n              id: doc.id,\n              name: doc.name,\n              fileUrl: doc.downloadUrl,\n            },\n          ],\n        };\n      }, {}),\n    [documents],\n  );\n\n  const [showPowerOfAttorneyModal, setShowPowerOfAttorneyModal] = useState(false);\n  const [showSwornStatementModal, setShowSwornStatementModal] = useState(false);\n\n  const { Field, setFieldValue, getFieldValue, listenFields, submitForm } = useForm<\n    FormValues<Purpose>\n  >(\n    requiredDocumentPurposes.reduce<FormConfig<FormValues<Purpose>>>(\n      (acc, purpose) => ({\n        ...acc,\n        [purpose]: {\n          initialValue: initialValues[purpose] ?? [],\n          validate: validateNotEmpty,\n        },\n      }),\n      {} as FormConfig<FormValues<Purpose>>,\n    ),\n  );\n\n  useImperativeHandle(externalRef, () => {\n    return {\n      submit: (callback: (value: boolean) => void) => {\n        submitForm({\n          onSuccess: () => callback(true),\n          onFailure: () => callback(false),\n        });\n      },\n    };\n  });\n\n  useEffect(() => {\n    const removeListener = listenFields(requiredDocumentPurposes, state => {\n      let documents: Document<Purpose>[] = [];\n\n      Dict.entries(state).forEach(([key, { value: values = [] }]) => {\n        documents = [\n          ...documents,\n          ...values.map(v => ({\n            id: v.id,\n            name: v.name,\n            downloadUrl: v.fileUrl,\n            purpose: key,\n          })),\n        ];\n      });\n\n      onChange?.(documents);\n    });\n\n    return () => removeListener();\n  }, [listenFields, onChange, requiredDocumentPurposes]);\n\n  const handleUpload = (files: File[], fieldName: Purpose) => {\n    const file = files[0];\n\n    if (isNullish(file)) {\n      return;\n    }\n\n    getAwsUrl(file, fieldName)\n      .then(({ upload: { url, fields }, id }) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", url, true);\n\n        const state = getFieldValue(fieldName);\n        setFieldValue(\n          fieldName,\n          state.map(doc =>\n            doc.id === NO_ID_YET\n              ? {\n                  status: \"uploading\",\n                  progress: 0,\n                  name: file.name,\n                  id,\n                }\n              : doc,\n          ),\n        );\n\n        xhr.upload.onprogress = event => {\n          const progress = (event.loaded / event.total) * 100;\n\n          const state = getFieldValue(fieldName);\n          setFieldValue(\n            fieldName,\n            state.map(uploadState =>\n              uploadState.id === id ? { ...uploadState, progress } : uploadState,\n            ),\n          );\n        };\n\n        xhr.onerror = () => {\n          const state = getFieldValue(fieldName);\n          setFieldValue(\n            fieldName,\n            state.map(uploadState =>\n              uploadState.id === id\n                ? {\n                    status: \"failed\",\n                    id: uploadState.id,\n                    name: uploadState.name,\n                    fileUrl: uploadState.fileUrl,\n                    error: t(\"supportingDocuments.errorUpload\"),\n                  }\n                : uploadState,\n            ),\n          );\n        };\n\n        xhr.onload = () => {\n          const state = getFieldValue(fieldName);\n\n          if (xhr.status !== 200 && xhr.status !== 204) {\n            setFieldValue(\n              fieldName,\n              state.map(uploadState =>\n                uploadState.id === id\n                  ? {\n                      status: \"failed\",\n                      id: uploadState.id,\n                      name: uploadState.name,\n                      fileUrl: uploadState.fileUrl,\n                      error: t(\"supportingDocuments.errorUpload\"),\n                    }\n                  : uploadState,\n              ),\n            );\n            return;\n          }\n\n          setFieldValue(\n            fieldName,\n            state.map(uploadState =>\n              uploadState.id === id ? { ...uploadState, status: \"finished\" } : uploadState,\n            ),\n          );\n        };\n\n        const formData = new FormData();\n        fields.forEach(({ key, value }) => {\n          formData.append(key, value);\n        });\n        formData.append(\"file\", file);\n        xhr.send(formData);\n      })\n      .catch(() => {\n        const state = getFieldValue(fieldName);\n        setFieldValue(\n          fieldName,\n          state.map(uploadState =>\n            uploadState.id === NO_ID_YET\n              ? {\n                  status: \"failed\",\n                  id: uploadState.id,\n                  name: uploadState.name,\n                  fileUrl: uploadState.fileUrl,\n                  error: t(\"supportingDocuments.errorUpload\"),\n                }\n              : uploadState,\n          ),\n        );\n      });\n  };\n\n  return (\n    <Form>\n      {requiredDocumentPurposes.map(purpose => {\n        return (\n          <Fragment key={purpose}>\n            <LakeLabel\n              label={getSupportingDocumentPurposeLabel(purpose)}\n              help={match(purpose as string)\n                .with(\"PowerOfAttorney\", () => (\n                  <Help\n                    type=\"button\"\n                    label={t(\"supportingDocuments.help.whatIsThis\")}\n                    onPress={() => setShowPowerOfAttorneyModal(true)}\n                  />\n                ))\n                .with(\"SwornStatement\", () => (\n                  <Help\n                    type=\"button\"\n                    label={t(\"supportingDocuments.help.whatIsThis\")}\n                    onPress={() => setShowSwornStatementModal(true)}\n                  />\n                ))\n                .otherwise(() => {\n                  const label = getSupportingDocumentPurposeDescriptionLabel(purpose);\n                  return isNotNullishOrEmpty(label) ? <Help type=\"tooltip\" text={label} /> : null;\n                })}\n              render={() => (\n                <Field name={purpose}>\n                  {({ value, onChange, error }) => (\n                    <UploadArea\n                      layout=\"horizontal\"\n                      error={error}\n                      onDropAccepted={files => {\n                        onChange([...value, { id: NO_ID_YET, status: \"uploading\", progress: 0 }]);\n                        handleUpload(files, purpose);\n                      }}\n                      documents={value}\n                      accept={ACCEPTED_FORMATS}\n                      icon=\"document-regular\"\n                      description={t(\"supportingDocuments.documentTypes\", {\n                        maxSizeMB: MAX_SUPPORTING_DOCUMENT_UPLOAD_SIZE_MB,\n                      })}\n                      maxSize={MAX_SUPPORTING_DOCUMENT_UPLOAD_SIZE}\n                    />\n                  )}\n                </Field>\n              )}\n            />\n\n            <Space height={24} />\n          </Fragment>\n        );\n      })}\n\n      {requiredDocumentPurposes.length === 0 ? (\n        <>\n          <Space height={24} />\n          <LakeText>{t(\"supportingDocuments.noRequiredDocuments\")}</LakeText>\n          <Space height={24} />\n        </>\n      ) : null}\n\n      <LakeModal\n        visible={showPowerOfAttorneyModal}\n        title={t(\"supportingDocuments.powerOfAttorneyModal.title\")}\n        icon=\"document-regular\"\n        onPressClose={() => setShowPowerOfAttorneyModal(false)}\n      >\n        <LakeText>{t(\"supportingDocuments.powerOfAttorneyModal.description\")}</LakeText>\n        <Space height={16} />\n\n        <LakeButtonGroup paddingBottom={0}>\n          <LakeButton\n            grow={true}\n            color=\"current\"\n            onPress={() =>\n              window.open(\n                `/power-of-attorney-template/${match(onboardingLanguage)\n                  .with(\"fr\", () => \"fr\")\n                  .with(\"de\", () => \"de\")\n                  .with(\"es\", () => \"es\")\n                  .otherwise(() => \"en\")}.pdf`,\n              )\n            }\n          >\n            {t(\"supportingDocuments.downloadTemplate\")}\n          </LakeButton>\n        </LakeButtonGroup>\n      </LakeModal>\n\n      <LakeModal\n        visible={showSwornStatementModal}\n        title={t(\"supportingDocuments.purpose.SwornStatement\")}\n        icon=\"document-regular\"\n        onPressClose={() => setShowSwornStatementModal(false)}\n      >\n        <LakeText>{t(\"supportingDocuments.purpose.SwornStatement.description\")}</LakeText>\n        <Space height={16} />\n\n        <LakeButtonGroup paddingBottom={0}>\n          <LakeButton\n            grow={true}\n            color=\"current\"\n            onPress={() => window.open(\"/sworn-statement-template/es.pdf\")}\n          >\n            {t(\"supportingDocuments.downloadTemplate\")}\n          </LakeButton>\n        </LakeButtonGroup>\n      </LakeModal>\n    </Form>\n  );\n};\n\nexport const SupportingDocument = forwardRef(SupportingDocumentWithRef) as <I extends string>(\n  props: Props<I> & { ref?: ForwardedRef<SupportingDocumentRef> },\n) => ReturnType<typeof SupportingDocumentWithRef>;\n"],"names":["Form","memo","forwardRef","style","onReset","onSubmit","props","forwardedRef","createElement","event","commonStyles","MAX_SUPPORTING_DOCUMENT_UPLOAD_SIZE_MB","MAX_SUPPORTING_DOCUMENT_UPLOAD_SIZE","ACCEPTED_FORMATS","NO_ID_YET","validateNotEmpty","value","t","styles","StyleSheet","Help","match","text","width","jsx","LakeTooltip","LakeButton","label","onPress","getSupportingDocumentPurposeLabel","purpose","key","isTranslationKey","getSupportingDocumentPurposeDescriptionLabel","SupportingDocumentWithRef","documents","getAwsUrl","onChange","requiredDocumentPurposes","onboardingLanguage","locale","externalRef","initialValues","useMemo","acc","doc","showPowerOfAttorneyModal","setShowPowerOfAttorneyModal","useState","showSwornStatementModal","setShowSwornStatementModal","Field","setFieldValue","getFieldValue","listenFields","submitForm","useForm","useImperativeHandle","callback","useEffect","removeListener","state","documents2","Dict","values","v","handleUpload","files","fieldName","file","isNullish","url","fields","id","xhr","progress","state2","uploadState","formData","jsxs","Fragment2","LakeLabel","isNotNullishOrEmpty","onChange2","error","UploadArea","Space","Fragment","LakeText","LakeModal","LakeButtonGroup","SupportingDocument"],"mappings":"2tCAWO,MAAAA,EAAAC,EAAA,KAAaC,EAAA,WAClB,CAAA,CAAA,MAAAC,EAAA,QAAAC,EAAA,SAAAC,EAAA,GAAAC,GAAAC,IAAAC,GAAA,OAAA,CACwB,GAAAF,EACjB,IAAAC,EACE,QAAAE,GAAA,CAEHA,EAAA,eAAA,EACAL,GAAA,MAAAA,EAAAK,EAAe,EACjB,SAAAA,GAAA,CAEEA,EAAA,eAAA,EACAJ,GAAA,MAAAA,EAAAI,EAAgB,EAClB,MAAA,CAAAC,GAAA,KAAAP,CAAA,CACgC,CAAA,CACjC,CAEL,EAEAH,EAAA,YAAA;;grHC7BO,MAAMW,EAAyC,GAGzCC,GACXD,EAAyC,IAAO,ICwBlDE,GAAA,CAAA,kBAAA,YAAA,YAAA,EACAC,EAAA,YAwBAC,GAAAC,GAAA,CACE,GAAAA,EAAA,SAAA,EACE,OAAAC,EAAA,qBAAA,CAEJ,EAEAC,EAAAC,EAAA,OAAA,CAAiC,OAAA,CACvB,QAAA,CACG,EACX,wBAAA,CACyB,QAAA,EACd,OAAA,SACD,CAEZ,CAAA,EAcAC,EAAAd,GACEe,EAAAf,CAAA,EAAA,KAAA,CAAA,KAAA,WAAA,CAAA,CAAA,KAAAgB,EAAA,MAAAC,CAAA,IAAAC,EAAAC,GAAA,CAAA,QAAAH,EAAA,MAAAC,EAAA,iBAAA,GAAA,UAAA,MAAA,SAAAC,EAGME,EAAC,CAAA,KAAA,WACM,KAAA,QACA,MAAA,OACC,KAAA,0BACD,SAAA,GACK,MAAA,CAAAR,EAAA,OAAAA,EAAA,uBAAA,EAC2C,UAAAD,EAAA,qCAAA,CACH,CAAA,EAAA,CAAA,EAAA,KAAA,CAAA,KAAA,QAAA,EAAA,CAAA,CAAA,MAAAU,EAAA,QAAAC,CAAA,IAAAJ,EAKtDE,EAAC,CAAA,KAAA,WACM,KAAA,QACA,MAAA,OACC,KAAA,0BACD,QAAAE,EACL,MAAAV,EAAA,OACc,UAAAD,EAAA,qCAAA,EACoC,SAAAU,CAEjD,CAAA,CAAA,EAAA,WAAA,EAUFE,EAAAC,GAAA,CACL,MAAAC,EAAA,+BAAAD,CAAA,GACA,OAAAE,EAAAD,CAAA,EACEd,EAAAc,CAAA,EAEAD,CAEJ,EAEOG,EAAAH,GAAA,CACL,MAAAC,EAAA,+BAAAD,CAAA,eACA,OAAAE,EAAAD,CAAA,EACEd,EAAAc,CAAA,EAEA,EAEJ,EAEAG,GAAA,CAAA,CACE,UAAAC,EACE,UAAAC,EACA,SAAAC,EACA,yBAAAC,EACA,mBAAAC,EAAAC,GAAA,QAEF,EAAAC,IAAA,CAGA,MAAAC,EAAAC,EAAA,QAAsB,IAAAR,EAAA,OAAA,CAAAS,EAAAC,KAGhB,CAAO,GAAAD,EACF,CAAAC,EAAA,OAAA,EAAA,CACY,GAAAD,EAAAC,EAAA,OAAA,GAAA,CAAA,EACY,CACzB,OAAA,WACU,GAAAA,EAAA,GACA,KAAAA,EAAA,KACE,QAAAA,EAAA,WACG,CACf,CACF,GACF,EAAA,EACG,CAAAV,CAAA,CACG,EAGZ,CAAAW,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EAEA,CAAA,MAAAG,EAAA,cAAAC,EAAA,cAAAC,EAAA,aAAAC,EAAA,WAAAC,CAAA,EAAAC,GAA0ElB,EAAA,OAG/C,CAAAM,EAAAd,KAAA,CACJ,GAAAc,EACd,CAAAd,CAAA,EAAA,CACQ,aAAAY,EAAAZ,CAAA,GAAA,CAAA,EACgC,SAAAf,EAC/B,CACZ,GACF,CAAA,CACC,CACH,EAGF0C,EAAA,oBAAAhB,EAAA,KACE,CAAO,OAAAiB,GAAA,CAEHH,EAAA,CAAW,UAAA,IAAAG,EAAA,EAAA,EACqB,UAAA,IAAAA,EAAA,EAAA,CACC,CAAA,CAChC,CACH,EACF,EAGFC,EAAAA,UAAA,IAAA,CACE,MAAAC,EAAAN,EAAAhB,EAAAuB,GAAA,CACE,IAAAC,EAAA,CAAA,EAEAC,GAAA,QAAAF,CAAA,EAAA,QAAA,CAAA,CAAA9B,EAAA,CAAA,MAAAiC,EAAA,CAAA,CAAA,CAAA,IAAA,CACEF,EAAA,CAAY,GAAAA,EACP,GAAAE,EAAA,IAAAC,IAAA,CACiB,GAAAA,EAAA,GACZ,KAAAA,EAAA,KACE,YAAAA,EAAA,QACO,QAAAlC,CACN,EAAA,CACT,CACJ,CAAA,EAGFM,GAAA,MAAAA,EAAAyB,EAAoB,CAAA,EAGtB,MAAA,IAAAF,EAAA,CAA4B,EAAA,CAAAN,EAAAjB,EAAAC,CAAA,CAAA,EAG9B,MAAA4B,EAAA,CAAAC,EAAAC,IAAA,CACE,MAAAC,EAAAF,EAAA,CAAA,EAEAG,GAAAD,CAAA,GAIAjC,EAAAiC,EAAAD,CAAA,EAAA,KAAA,CAAA,CAAA,OAAA,CAAA,IAAAG,EAAA,OAAAC,CAAA,EAAA,GAAAC,CAAA,IAAA,CAEI,MAAAC,EAAA,IAAA,eACAA,EAAA,KAAA,OAAAH,EAAA,EAAA,EAEA,MAAAV,EAAAR,EAAAe,CAAA,EACAhB,EAAAgB,EACEP,EAAA,IACMhB,GAAAA,EAAA,KAAA/B,EAAA,CAEA,OAAA,YACU,SAAA,EACE,KAAAuD,EAAA,KACC,GAAAI,CACX,EAAA5B,CAEF,CACN,EAGF6B,EAAA,OAAA,WAAAjE,GAAA,CACE,MAAAkE,EAAAlE,EAAA,OAAAA,EAAA,MAAA,IAEAmE,EAAAvB,EAAAe,CAAA,EACAhB,EAAAgB,EACEQ,EAAA,IACMC,GAAAA,EAAA,KAAAJ,EAAA,CAAA,GAAAI,EAAA,SAAAF,CAAA,EAAAE,CACmD,CACzD,CACF,EAGFH,EAAA,QAAA,IAAA,CACE,MAAAE,EAAAvB,EAAAe,CAAA,EACAhB,EAAAgB,EACEQ,EAAA,IACMC,GAAAA,EAAA,KAAAJ,EAAA,CAEA,OAAA,SACU,GAAAI,EAAA,GACQ,KAAAA,EAAA,KACE,QAAAA,EAAA,QACG,MAAA5D,EAAA,iCAAA,CACqB,EAAA4D,CAE5C,CACN,CACF,EAGFH,EAAA,OAAA,IAAA,CACE,MAAAE,EAAAvB,EAAAe,CAAA,EAEA,GAAAM,EAAA,SAAA,KAAAA,EAAA,SAAA,IAAA,CACEtB,EAAAgB,EACEQ,EAAA,IACMC,GAAAA,EAAA,KAAAJ,EAAA,CAEA,OAAA,SACU,GAAAI,EAAA,GACQ,KAAAA,EAAA,KACE,QAAAA,EAAA,QACG,MAAA5D,EAAA,iCAAA,CACqB,EAAA4D,CAE5C,CACN,EAEF,MAAA,CAGFzB,EAAAgB,EACEQ,EAAA,IACMC,GAAAA,EAAA,KAAAJ,EAAA,CAAA,GAAAI,EAAA,OAAA,UAAA,EAAAA,CAC6D,CACnE,CACF,EAGF,MAAAC,EAAA,IAAA,SACAN,EAAA,QAAA,CAAA,CAAA,IAAAzC,EAAA,MAAAf,CAAA,IAAA,CACE8D,EAAA,OAAA/C,EAAAf,CAAA,CAA0B,CAAA,EAE5B8D,EAAA,OAAA,OAAAT,CAAA,EACAK,EAAA,KAAAI,CAAA,CAAiB,CAAA,EAAA,MAAA,IAAA,CAGjB,MAAAjB,EAAAR,EAAAe,CAAA,EACAhB,EAAAgB,EACEP,EAAA,IACMgB,GAAAA,EAAA,KAAA/D,EAAA,CAEA,OAAA,SACU,GAAA+D,EAAA,GACQ,KAAAA,EAAA,KACE,QAAAA,EAAA,QACG,MAAA5D,EAAA,iCAAA,CACqB,EAAA4D,CAE5C,CACN,CACF,CAAA,CACD,EAGL,OAAAE,EAAA/E,EAAA,CAAA,SAAA,CAEKsC,EAAA,IAAAR,GACCiD,EAAAC,WAAA,CAAA,SAAA,CAEIxD,EAAAyD,GAAC,CAAA,MAAApD,EAAAC,CAAA,EACiD,KAAAT,EAAAS,CAAA,EAAA,KAAA,kBAAA,IAAAN,EAG5CJ,EAAC,CAAA,KAAA,SACM,MAAAH,EAAA,qCAAA,EACyC,QAAA,IAAA8B,EAAA,EAAA,CACC,CAAA,CAAA,EAAA,KAAA,iBAAA,IAAAvB,EAIjDJ,EAAC,CAAA,KAAA,SACM,MAAAH,EAAA,qCAAA,EACyC,QAAA,IAAAiC,EAAA,EAAA,CACA,CAAA,CAAA,EAAA,UAAA,IAAA,CAIhD,MAAAvB,EAAAM,EAAAH,CAAA,EACA,OAAAoD,GAAAvD,CAAA,EAAAH,EAAAJ,EAAA,CAAA,KAAA,UAAA,KAAAO,CAAA,CAAA,EAAA,IAA2E,CAAA,EAC5E,OAAA,IAAAH,EAAA2B,EAAA,CAAA,KAAArB,EAAA,SAAA,CAAA,CAAA,MAAAd,EAAA,SAAAmE,EAAA,MAAAC,CAAA,IAAA5D,EAIG6D,GAAC,CAAA,OAAA,aACQ,MAAAD,EACP,eAAAjB,GAAA,CAEEgB,EAAA,CAAA,GAAAnE,EAAA,CAAA,GAAAF,EAAA,OAAA,YAAA,SAAA,CAAA,CAAA,CAAA,EACAoD,EAAAC,EAAArC,CAAA,CAA2B,EAC7B,UAAAd,EACW,OAAAH,GACH,KAAA,mBACH,YAAAI,EAAA,oCAAA,CAC+C,UAAAN,CACvC,CAAA,EACZ,QAAAC,EACQ,CAAA,EAAA,CAGf,CAAA,EAEJY,EAAA8D,EAAA,CAAA,OAAA,EAAA,CAAA,CAEmB,CAAA,EAAAxD,CAAA,CACrB,EAEHQ,EAAA,SAAA,EAAAyC,EAAAQ,GAAA,CAAA,SAAA,CAIG/D,EAAA8D,EAAA,CAAA,OAAA,EAAA,CAAA,EAAmB9D,EAAAgE,EAAA,CAAA,SAAAvE,EAAA,yCAAA,CAAA,CAAA,EACqCO,EAAA8D,EAAA,CAAA,OAAA,EAAA,CAAA,CACrC,CAAA,CAAA,EAAA,KAEnBP,EAEJU,EAAC,CAAA,QAAA3C,EACU,MAAA7B,EAAA,gDAAA,EACgD,KAAA,mBACpD,aAAA,IAAA8B,EAAA,EAAA,EACgD,SAAA,CAErDvB,EAAAgE,EAAA,CAAA,SAAAvE,EAAA,sDAAA,CAAA,CAAA,EAAqEO,EAAA8D,EAAA,CAAA,OAAA,EAAA,CAAA,EAClD9D,EAAAkE,EAAA,CAAA,cAAA,EAAA,SAAAlE,EAGjBE,EAAC,CAAA,KAAA,GACO,MAAA,UACA,QAAA,IAAA,OAAA,KAEG,+BAAAL,EAAAkB,CAAA,EAAA,KAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,IAAA,IAAA,EAAA,UAAA,IAAA,IAAA,CAAA,MAKmB,EAC1B,SAAAtB,EAAA,sCAAA,CAGuC,CAAA,EAAA,CAE7C,CAAA,CAAA,EACF8D,EAEAU,EAAC,CAAA,QAAAxC,EACU,MAAAhC,EAAA,4CAAA,EAC4C,KAAA,mBAChD,aAAA,IAAAiC,EAAA,EAAA,EAC+C,SAAA,CAEpD1B,EAAAgE,EAAA,CAAA,SAAAvE,EAAA,wDAAA,CAAA,CAAA,EAAuEO,EAAA8D,EAAA,CAAA,OAAA,EAAA,CAAA,EACpD9D,EAAAkE,EAAA,CAAA,cAAA,EAAA,SAAAlE,EAGjBE,EAAC,CAAA,KAAA,GACO,MAAA,UACA,QAAA,IAAA,OAAA,KAAA,kCAAA,EACuD,SAAAT,EAAA,sCAAA,CAEpB,CAAA,EAAA,CAE7C,CAAA,CAAA,CACF,CAAA,CAAA,CAGN,EAEO0E,EAAAzF,EAAAA,WAAAgC,EAAA;;;;;;;;;;;;;;;;"}