{"version":3,"file":"MultiSelect.stories-gdJNferY.js","sources":["../../../packages/lake/src/components/InputError.tsx","../../../packages/lake/src/components/MultiSelect.tsx"],"sourcesContent":["import { StyleProp, StyleSheet, TextStyle } from \"react-native\";\nimport { colors, texts } from \"../constants/design\";\nimport { LakeText } from \"./LakeText\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  base: {\n    color: colors.negative[500],\n    lineHeight: texts.h1.lineHeight,\n    minHeight: 32,\n    paddingHorizontal: 3, // borderRadius / 2\n    paddingVertical: 4,\n  },\n});\n\ntype Props = {\n  message?: string;\n  style?: StyleProp<TextStyle>;\n};\n\nexport const InputError = ({ message = \"\", style }: Props) =>\n  message !== \"\" ? (\n    <LakeText variant=\"smallRegular\" style={[styles.base, style]}>\n      {message}\n    </LakeText>\n  ) : (\n    <Space height={32} />\n  );\n","import { Array, Dict, Option } from \"@swan-io/boxed\";\nimport { memo, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  FlatList,\n  ListRenderItemInfo,\n  Pressable,\n  SectionList,\n  SectionListData,\n  SectionListRenderItemInfo,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from \"react-native\";\nimport { ColorVariants, backgroundColor, colors, radii, shadows, texts } from \"../constants/design\";\nimport { useDisclosure } from \"../hooks/useDisclosure\";\nimport { groupBy } from \"../utils/array\";\nimport { isNotNullish, isNotNullishOrEmpty } from \"../utils/nullish\";\nimport { safeSplitAround } from \"../utils/string\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { InputError } from \"./InputError\";\nimport { Popover } from \"./Popover\";\nimport { PressableText, PressableTextInput } from \"./Pressable\";\nimport { Space } from \"./Space\";\nimport { Tag } from \"./Tag\";\n\nconst MAX_INPUT_HEIGHT = 120;\nconst ITEM_ELEMENT_HEIGHT = 32;\nconst NB_SUGGESTION_DISPLAYED = 10.5;\n\nconst styles = StyleSheet.create({\n  base: {\n    ...texts.regular,\n    backgroundColor: backgroundColor.accented,\n    borderColor: colors.gray[100],\n    borderRadius: radii[6],\n    borderWidth: 1,\n    cursor: \"default\",\n    overflow: \"hidden\",\n    transitionDuration: \"150ms\",\n    transitionProperty: \"border-color, box-shadow\",\n  },\n  errored: {\n    borderColor: colors.negative[500],\n  },\n  tag: {\n    marginRight: 4,\n    marginVertical: 2,\n  },\n  hovered: {\n    boxShadow: shadows.tile,\n  },\n  focused: {\n    borderColor: colors.gray[500],\n    boxShadow: shadows.tile,\n    outlineStyle: \"none\",\n  },\n  disabled: {\n    backgroundColor: colors.gray[50],\n    borderColor: colors.gray[100],\n    cursor: \"not-allowed\",\n  },\n  actions: {\n    marginVertical: \"auto\",\n    position: \"absolute\",\n    bottom: 0,\n    top: 0,\n    right: 20,\n  },\n  placeholder: {\n    ...texts.regular,\n    color: colors.gray[300],\n    userSelect: \"none\",\n  },\n  list: {\n    marginVertical: 4,\n    maxHeight: ITEM_ELEMENT_HEIGHT * NB_SUGGESTION_DISPLAYED,\n    minHeight: 224,\n  },\n  filterContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n    margin: 16,\n  },\n  filterInput: {\n    ...texts.regular,\n    backgroundColor: backgroundColor.accented,\n    borderColor: colors.gray[100],\n    borderRadius: 4,\n    borderWidth: 1,\n    flexGrow: 1,\n    flexShrink: 1,\n    height: 40,\n    outlineStyle: \"none\",\n    paddingHorizontal: 12,\n    paddingLeft: 40,\n    placeholderTextColor: colors.gray[300],\n  },\n  filterfocused: {\n    borderColor: colors.gray[200],\n  },\n  searchIcon: {\n    position: \"absolute\",\n    left: 14,\n  },\n  tagsList: {\n    flexWrap: \"wrap\",\n    maxHeight: MAX_INPUT_HEIGHT,\n    minHeight: 40,\n    overflowY: \"auto\",\n    paddingHorizontal: 16,\n    paddingRight: 60,\n    paddingVertical: 8,\n  },\n  groupTitleBase: {\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    flexShrink: 1,\n    justifyContent: \"space-between\",\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    transitionDuration: \"200ms\",\n    transitionProperty: \"background-color\",\n  },\n  groupTitle: {\n    ...texts.semibold,\n    userSelect: \"none\",\n  },\n  line: {\n    ...texts.regular,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    transitionDuration: \"200ms\",\n    transitionProperty: \"background-color\",\n    userSelect: \"none\",\n  },\n  lineInGroup: {\n    paddingLeft: 24,\n  },\n  emptyList: {\n    height: 136,\n  },\n  emptyListText: {\n    color: colors.gray.primary,\n  },\n});\n\nexport type MultiSelectItem = {\n  disabled?: boolean;\n  group: string;\n  label: string;\n  value: string;\n};\n\nexport type MultiSelectProps<I> = {\n  color?: ColorVariants;\n  disabled?: boolean;\n  error?: string;\n  emptyResultText?: string;\n  enableGroups?: boolean;\n  filterPlaceholder?: string;\n  items: I[];\n  onValueChange: (values: string[]) => void;\n  placeholder?: string;\n  renderTagGroup?: (items: readonly MultiSelectItem[]) => string;\n  style?: StyleProp<ViewStyle>;\n  values: string[];\n  id?: string;\n};\n\nexport const MultiSelect = memo<MultiSelectProps<MultiSelectItem>>(\n  ({\n    color = \"gray\",\n    disabled = false,\n    emptyResultText,\n    enableGroups = true,\n    filterPlaceholder,\n    items,\n    onValueChange,\n    placeholder,\n    renderTagGroup,\n    error,\n    style,\n    values,\n    id,\n  }) => {\n    const [filter, setFilter] = useState<string>(\"\");\n\n    const shouldScrollToBottomRef = useRef(false);\n    const selectedTagListRef = useRef<View & Element>(null);\n    const inputRef = useRef<View>(null);\n    const listRef = useRef<FlatList>(null);\n    const [visible, { open, close }] = useDisclosure(false);\n\n    const tint50 = colors[color][50];\n    const tint100 = colors[color][100];\n\n    useEffect(() => {\n      if (!visible) {\n        setFilter(\"\");\n      }\n    }, [visible]);\n\n    useEffect(() => {\n      if (shouldScrollToBottomRef.current) {\n        const top = selectedTagListRef.current?.scrollHeight;\n        selectedTagListRef.current?.scrollTo({ top });\n      }\n\n      shouldScrollToBottomRef.current = false;\n    }, [values]);\n\n    const handleSelectItem = (item: MultiSelectItem) => {\n      shouldScrollToBottomRef.current = true;\n      onValueChange([...values, item.value]);\n    };\n\n    const handleRemoveItem = (item: MultiSelectItem) => {\n      onValueChange(values.filter(index => index !== item.value));\n    };\n\n    const handleClearAll = () => {\n      onValueChange([]);\n    };\n\n    const handleSelectGroup = (groupItems: readonly MultiSelectItem[]) => {\n      shouldScrollToBottomRef.current = true;\n      const items = groupItems.map(item => item.value);\n      const newValue = [...new Set([...values, ...items])];\n      onValueChange(newValue);\n    };\n\n    // Used to get full selected value informations in O(1).\n    const valueItemMapping = useMemo(\n      () =>\n        items.reduce((acc: Record<string, MultiSelectItem>, item) => {\n          acc[item.value] = item;\n          return acc;\n        }, {}),\n      [items],\n    );\n\n    const selectedTags = useMemo(\n      () => values.map(value => valueItemMapping[value]).filter(isNotNullish),\n      [values, valueItemMapping],\n    );\n\n    const filteredItems = useMemo(() => {\n      const remainingTags = items.filter(item => !values.includes(item.value));\n      const cleanedFilter = filter.trim().toLowerCase();\n\n      return cleanedFilter === \"\"\n        ? remainingTags\n        : remainingTags.filter(({ label }) => label.toLowerCase().includes(cleanedFilter));\n    }, [filter, items, values]);\n\n    const sections = useMemo(() => {\n      return Array.filterMap(\n        Dict.entries(groupBy(filteredItems, ({ group }) => group)),\n        ([groupName, data]) =>\n          data === undefined ? Option.None() : Option.Some({ title: groupName, data }),\n      );\n    }, [filteredItems]);\n\n    const ListHeaderComponent = useMemo(\n      () => (\n        <Box direction=\"row\" alignItems=\"center\" style={styles.filterContainer}>\n          <PressableTextInput\n            autoComplete=\"off\"\n            inputMode=\"search\"\n            multiline={false}\n            rows={1}\n            onChangeText={filterValue => setFilter(filterValue)}\n            placeholder={filterPlaceholder}\n            value={filter}\n            style={({ focused }) => [styles.filterInput, focused && styles.filterfocused]}\n          />\n\n          <Icon\n            name=\"search-filled\"\n            color={colors[color].primary}\n            size={20}\n            style={styles.searchIcon}\n          />\n        </Box>\n      ),\n      [filter, filterPlaceholder, color],\n    );\n\n    const ListEmptyComponent = useMemo(\n      () => (\n        <Box justifyContent=\"center\" alignItems=\"center\" style={styles.emptyList}>\n          <Icon name=\"clipboard-search-regular\" size={24} color={colors.gray.primary} />\n\n          {isNotNullishOrEmpty(emptyResultText) && (\n            <>\n              <Space height={8} />\n              <Text style={styles.emptyListText}>{emptyResultText}</Text>\n            </>\n          )}\n        </Box>\n      ),\n      [emptyResultText],\n    );\n\n    return (\n      <View style={style}>\n        <Pressable\n          id={id}\n          ref={inputRef}\n          aria-haspopup=\"listbox\"\n          role=\"button\"\n          aria-expanded={visible}\n          disabled={disabled}\n          onPress={open}\n          style={({ hovered, focused }) => [\n            styles.base,\n            hovered && styles.hovered,\n            (focused || visible) && styles.focused,\n            disabled && styles.disabled,\n            isNotNullish(error) && styles.errored,\n          ]}\n        >\n          <Box ref={selectedTagListRef} alignItems=\"center\" direction=\"row\" style={styles.tagsList}>\n            {selectedTags.length > 0 ? (\n              selectedTags.map(item => (\n                <Tag\n                  key={item.value}\n                  color={color}\n                  onPressRemove={disabled ? undefined : () => handleRemoveItem(item)}\n                  style={styles.tag}\n                >\n                  {item.label}\n                </Tag>\n              ))\n            ) : placeholder !== \"\" ? (\n              <Text role=\"label\" numberOfLines={1} style={styles.placeholder}>\n                {placeholder}\n              </Text>\n            ) : null}\n          </Box>\n\n          <Box direction=\"row\" alignItems=\"center\" style={styles.actions}>\n            {selectedTags.length >= 1 && !disabled && (\n              <>\n                <Pressable role=\"button\" onPress={handleClearAll}>\n                  <Icon name=\"dismiss-filled\" color={colors.gray.primary} size={15} />\n                </Pressable>\n\n                <Space width={8} />\n              </>\n            )}\n\n            <Icon\n              color={colors.gray.primary}\n              name={visible ? \"chevron-up-filled\" : \"chevron-down-filled\"}\n              size={20}\n            />\n          </Box>\n        </Pressable>\n\n        <Popover\n          role=\"listbox\"\n          matchReferenceWidth={true}\n          onDismiss={close}\n          referenceRef={inputRef}\n          returnFocus={true}\n          visible={visible}\n          field={true}\n        >\n          <View style={styles.list}>\n            {enableGroups ? (\n              <SectionList\n                role=\"listbox\"\n                aria-multiselectable={true}\n                keyExtractor={(item, index) => `group-field-${item.value}-${index}`}\n                extraData={filter}\n                ListHeaderComponent={ListHeaderComponent}\n                ListEmptyComponent={ListEmptyComponent}\n                ListFooterComponent={<Space height={16} />}\n                sections={sections}\n                renderSectionHeader={({\n                  section: { title, data },\n                }: {\n                  section: SectionListData<MultiSelectItem>;\n                }) => (\n                  <Pressable\n                    role=\"listitem\"\n                    onPress={() => handleSelectGroup(data)}\n                    style={({ hovered, pressed, focused }) => [\n                      styles.groupTitleBase,\n                      (hovered || focused) && { backgroundColor: tint50 },\n                      pressed && { backgroundColor: tint100 },\n                    ]}\n                  >\n                    <Text numberOfLines={1} style={styles.groupTitle}>\n                      {title}\n                    </Text>\n\n                    {isNotNullish(renderTagGroup) && (\n                      <Tag color={color}>{renderTagGroup(data)}</Tag>\n                    )}\n                  </Pressable>\n                )}\n                renderItem={({ item }: SectionListRenderItemInfo<MultiSelectItem>) => (\n                  <LineItem\n                    color={color}\n                    filter={filter}\n                    item={item}\n                    handleSelectItem={handleSelectItem}\n                    style={styles.lineInGroup}\n                  />\n                )}\n              />\n            ) : (\n              <FlatList\n                ref={listRef}\n                role=\"list\"\n                data={filteredItems}\n                extraData={filter}\n                keyExtractor={item => `field-${item.value}`}\n                ListHeaderComponent={ListHeaderComponent}\n                ListEmptyComponent={ListEmptyComponent}\n                ListFooterComponent={<Space height={8} />}\n                renderItem={({ item }: ListRenderItemInfo<MultiSelectItem>) => (\n                  <LineItem\n                    color={color}\n                    filter={filter}\n                    item={item}\n                    handleSelectItem={handleSelectItem}\n                  />\n                )}\n              />\n            )}\n          </View>\n        </Popover>\n\n        <InputError message={error} />\n      </View>\n    );\n  },\n);\n\ntype LineItemProps = {\n  color: ColorVariants;\n  filter: string;\n  handleSelectItem: (item: MultiSelectItem) => void;\n  item: MultiSelectItem;\n  style?: StyleProp<TextStyle>;\n};\n\nconst LineItem = ({ item, color, filter, handleSelectItem, style }: LineItemProps) => {\n  const { label, disabled = false } = item;\n  const cleanFilter = filter.trim().toLowerCase();\n\n  const tint50 = colors[color][50];\n  const tint100 = colors[color][100];\n\n  const tokens = useMemo(\n    () => (disabled || cleanFilter === \"\" ? label : safeSplitAround(label, cleanFilter)),\n    [label, disabled, cleanFilter],\n  );\n\n  return (\n    <PressableText\n      role=\"listitem\"\n      disabled={disabled}\n      numberOfLines={1}\n      onPress={() => handleSelectItem(item)}\n      style={({ hovered, pressed }) => [\n        styles.line,\n        style,\n        hovered && { backgroundColor: tint50 },\n        pressed && { backgroundColor: tint100 },\n        disabled && { backgroundColor: colors.gray[50], color: colors.gray[100] },\n      ]}\n    >\n      {typeof tokens === \"string\"\n        ? tokens\n        : tokens.map((token, index) => {\n            const colored = token.toLowerCase() === cleanFilter;\n\n            if (!colored) {\n              return token;\n            }\n\n            return (\n              <Text key={index} style={{ color }}>\n                {token}\n              </Text>\n            );\n          })}\n    </PressableText>\n  );\n};\n"],"names":["styles","StyleSheet","colors","texts","InputError","message","style","jsx","LakeText","Space","MAX_INPUT_HEIGHT","ITEM_ELEMENT_HEIGHT","NB_SUGGESTION_DISPLAYED","backgroundColor","radii","shadows","MultiSelect","memo","color","disabled","emptyResultText","enableGroups","filterPlaceholder","items","onValueChange","placeholder","renderTagGroup","error","values","id","filter","setFilter","useState","shouldScrollToBottomRef","useRef","selectedTagListRef","inputRef","listRef","visible","open","close","useDisclosure","tint50","tint100","useEffect","top","_a","_b","handleSelectItem","item","handleRemoveItem","index","handleClearAll","handleSelectGroup","groupItems","items2","newValue","valueItemMapping","useMemo","acc","selectedTags","value","isNotNullish","filteredItems","remainingTags","cleanedFilter","label","sections","Array","Dict","groupBy","group","groupName","data","Option","ListHeaderComponent","jsxs","Box","PressableTextInput","filterValue","focused","Icon","ListEmptyComponent","isNotNullishOrEmpty","Fragment","Text","View","Pressable","hovered","Tag","Popover","SectionList","title","pressed","LineItem","FlatList","cleanFilter","tokens","safeSplitAround","PressableText","token"],"mappings":"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"}