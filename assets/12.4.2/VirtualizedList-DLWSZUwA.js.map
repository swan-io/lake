{"version":3,"file":"VirtualizedList-DLWSZUwA.js","sources":["../../../packages/lake/src/components/Cells.tsx","../../../packages/lake/src/components/VirtualizedList.tsx"],"sourcesContent":["import { ComponentProps, ReactNode, useCallback, useState } from \"react\";\nimport { GestureResponderEvent, StyleProp, StyleSheet, View, ViewStyle } from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { Except } from \"type-fest\";\nimport { colors, invariantColors, spacings } from \"../constants/design\";\nimport { setClipboardText } from \"../utils/clipboard\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { Icon } from \"./Icon\";\nimport { LakeText, TextVariant } from \"./LakeText\";\nimport { LakeTooltip } from \"./LakeTooltip\";\nimport { Pressable } from \"./Pressable\";\nimport { Space } from \"./Space\";\n\nconst directionStyles = StyleSheet.create({\n  column: { flexDirection: \"column\" },\n  row: { flexDirection: \"row\" },\n});\n\nconst alignItemsStyles = StyleSheet.create({\n  left: { alignItems: \"flex-start\" },\n  center: { alignItems: \"center\" },\n  right: { alignItems: \"flex-end\" },\n});\n\nconst justifyContentStyles = StyleSheet.create({\n  left: { justifyContent: \"flex-start\" },\n  center: { justifyContent: \"center\" },\n  right: { justifyContent: \"flex-end\" },\n});\n\nconst fadeOnLeftMask = `linear-gradient(to right, ${invariantColors.transparent}, ${invariantColors.black} ${spacings[8]})`;\nconst fadeOnRightMask = `linear-gradient(to left, ${invariantColors.transparent}, ${invariantColors.black} ${spacings[8]})`;\n\nconst styles = StyleSheet.create({\n  cell: {\n    flexDirection: \"row\",\n    flexGrow: 1,\n    flexShrink: 1,\n    paddingHorizontal: spacings[8],\n  },\n  cellContentContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n    overflow: \"hidden\",\n  },\n  fadeOnLeft: {\n    maskImage: fadeOnLeftMask,\n    WebkitMaskImage: fadeOnLeftMask,\n  },\n  fadeOnRight: {\n    maskImage: fadeOnRightMask,\n    WebkitMaskImage: fadeOnRightMask,\n  },\n  noCursor: {\n    cursor: \"text\",\n  },\n  sortIcon: {\n    transitionProperty: \"transform\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rotated: {\n    transform: \"rotate(-180deg)\",\n  },\n  headerUnderline: {\n    backgroundColor: colors.gray[900],\n    borderBottomColor: colors.current[500],\n    bottom: -10,\n    height: 2,\n    position: \"absolute\",\n    width: \"100%\",\n  },\n  headerUnderlineActive: {\n    backgroundColor: colors.current[500],\n  },\n  buttonUnderline: {\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: spacings[8],\n    height: 2,\n    backgroundColor: \"currentColor\",\n  },\n  buttonEndUnderline: {\n    right: 0,\n    left: spacings[8],\n  },\n  fullHeight: {\n    height: \"100%\",\n  },\n  button: {\n    justifyContent: \"center\",\n    height: \"100%\",\n    paddingRight: spacings[8],\n  },\n  buttonEnd: {\n    paddingRight: 0,\n    paddingLeft: spacings[8],\n  },\n});\n\ntype Align = \"left\" | \"center\" | \"right\";\ntype FadeOn = \"left\" | \"right\";\ntype SortDirection = \"Desc\" | \"Asc\";\ntype TooltipProp = Except<ComponentProps<typeof LakeTooltip>, \"children\">;\n\ntype CellProps = {\n  children: ReactNode;\n  align?: Align;\n  direction?: keyof typeof directionStyles;\n  fadeOn?: FadeOn;\n  style?: StyleProp<ViewStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n};\n\nexport const Cell = ({\n  children,\n  align = \"left\",\n  direction = \"row\",\n  fadeOn,\n  style,\n  contentContainerStyle,\n}: CellProps) => (\n  <View style={[styles.cell, style]}>\n    <View\n      style={[\n        styles.cellContentContainer,\n        directionStyles[direction],\n        alignItemsStyles[direction === \"row\" ? \"center\" : align],\n        justifyContentStyles[direction === \"row\" ? align : \"center\"],\n        fadeOn === \"left\" && styles.fadeOnLeft,\n        fadeOn === \"right\" && styles.fadeOnRight,\n        contentContainerStyle,\n      ]}\n    >\n      {children}\n    </View>\n  </View>\n);\n\ntype HeaderCellProps = {\n  align?: Align;\n  sort?: SortDirection;\n  text: string;\n  onPress?: (direction: SortDirection) => void;\n};\n\nexport const HeaderCell = ({ align = \"left\", sort, text, onPress }: HeaderCellProps) => {\n  const sortActive = isNotNullish(sort) && isNotNullish(onPress);\n  const disabled = isNullish(onPress);\n\n  return (\n    <Pressable\n      role=\"columnheader\"\n      disabled={disabled}\n      style={[styles.cell, disabled && styles.noCursor]}\n      onPress={() => {\n        onPress?.(\n          match(sort)\n            .returnType<SortDirection>()\n            .with(\"Desc\", () => \"Asc\")\n            .otherwise(() => \"Desc\"),\n        );\n      }}\n    >\n      {({ hovered }) => (\n        <View\n          style={[\n            styles.cellContentContainer,\n            directionStyles[\"row\"],\n            alignItemsStyles[\"center\"],\n            justifyContentStyles[align],\n          ]}\n        >\n          <LakeText\n            numberOfLines={1}\n            align={align}\n            color={sortActive ? colors.current[500] : colors.gray[900]}\n            variant=\"medium\"\n          >\n            {text}\n          </LakeText>\n\n          {isNotNullish(onPress) && (\n            <>\n              <Space width={8} />\n\n              <Icon\n                size={15}\n                color={sortActive ? colors.current[500] : colors.gray[500]}\n                name={sortActive ? \"arrow-down-filled\" : \"chevron-up-down-regular\"}\n                style={[styles.sortIcon, sort === \"Asc\" && styles.rotated]}\n              />\n            </>\n          )}\n\n          {(hovered || sortActive) && (\n            <View style={[styles.headerUnderline, sortActive && styles.headerUnderlineActive]} />\n          )}\n        </View>\n      )}\n    </Pressable>\n  );\n};\n\ntype TextCellProps = {\n  align?: Align;\n  color?: string;\n  text: string;\n  tooltip?: TooltipProp;\n  variant?: TextVariant;\n};\n\nexport const TextCell = ({\n  align = \"left\",\n  color = colors.gray[900],\n  text,\n  tooltip,\n  variant = \"regular\",\n}: TextCellProps) => (\n  <Cell align={align}>\n    <LakeText numberOfLines={1} align={align} color={color} tooltip={tooltip} variant={variant}>\n      {text}\n    </LakeText>\n  </Cell>\n);\n\ntype CopyableTextCellProps = {\n  copiedWording: string;\n  copyWording: string;\n  text: string;\n  textToCopy?: string;\n  tooltip?: TooltipProp;\n  variant?: TextVariant;\n};\n\nexport const CopyableTextCell = ({\n  copiedWording,\n  copyWording,\n  text,\n  textToCopy,\n  tooltip,\n  variant = \"regular\",\n}: CopyableTextCellProps) => {\n  const [visibleState, setVisibleState] = useState<\"copy\" | \"copied\">(\"copy\");\n  const clipboardText = textToCopy ?? text;\n\n  const onPress = useCallback(\n    (event: GestureResponderEvent) => {\n      event.preventDefault();\n      setClipboardText(clipboardText);\n      setVisibleState(\"copied\");\n    },\n    [clipboardText],\n  );\n\n  return (\n    <Cell style={styles.fullHeight}>\n      <LakeTooltip\n        content={visibleState === \"copy\" ? copyWording : copiedWording}\n        onHide={() => setVisibleState(\"copy\")}\n        placement=\"left\"\n        togglableOnFocus={true}\n        containerStyle={styles.fullHeight}\n      >\n        <Pressable aria-label={copyWording} role=\"button\" onPress={onPress} style={styles.button}>\n          {({ hovered }) => (\n            <>\n              <Icon\n                name={hovered ? \"copy-filled\" : \"copy-regular\"}\n                color=\"currentColor\"\n                size={14}\n              />\n\n              {hovered && <View role=\"none\" style={styles.buttonUnderline} />}\n            </>\n          )}\n        </Pressable>\n      </LakeTooltip>\n\n      <LakeText numberOfLines={1} color={colors.gray[900]} tooltip={tooltip} variant={variant}>\n        {text}\n      </LakeText>\n    </Cell>\n  );\n};\n\ntype BalanceCellProps = {\n  align?: Align;\n  currency: string;\n  formatCurrency: (value: number, currency: string) => string;\n  originalValue?: { value: number; currency: string };\n  value: number;\n  variant?: TextVariant;\n};\n\n// TODO: handle `+` sign properly\nexport const BalanceCell = ({\n  align = \"left\",\n  currency,\n  formatCurrency,\n  originalValue,\n  value,\n  variant = \"medium\",\n}: BalanceCellProps) => (\n  <Cell align={align} direction=\"column\">\n    <LakeText\n      numberOfLines={1}\n      align={align}\n      color={colors.gray[900]}\n      variant={variant}\n      style={[\n        value > 0 && { color: colors.positive.primary },\n        value < 0 && { color: colors.negative.primary },\n      ]}\n    >\n      {(value > 0 ? \"+\" : \"\") + formatCurrency(value, currency)}\n    </LakeText>\n\n    {isNotNullish(originalValue) && originalValue.currency !== currency && (\n      <LakeText numberOfLines={1} align={align} color={colors.gray[500]} variant=\"smallRegular\">\n        {(originalValue.value > 0 ? \"+\" : \"\") +\n          formatCurrency(originalValue.value, originalValue.currency)}\n      </LakeText>\n    )}\n  </Cell>\n);\n\ntype LinkCellProps = {\n  buttonPosition?: \"start\" | \"end\";\n  children: ReactNode;\n  external?: boolean;\n  fadeOn?: FadeOn;\n  onPress: () => void;\n  tooltip?: TooltipProp;\n  variant?: TextVariant;\n};\n\nexport const LinkCell = ({\n  buttonPosition = \"start\",\n  children,\n  external = false,\n  fadeOn,\n  onPress,\n  tooltip,\n  variant = \"medium\",\n}: LinkCellProps) => {\n  const atEnd = buttonPosition === \"end\";\n\n  const button = (\n    <Pressable\n      style={[styles.button, atEnd && styles.buttonEnd]}\n      onPress={event => {\n        event.preventDefault();\n        onPress();\n      }}\n    >\n      {({ hovered }) => (\n        <>\n          <Icon size={14} name={external ? \"open-regular\" : \"arrow-right-filled\"} />\n\n          {hovered && (\n            <View\n              role=\"none\"\n              style={[styles.buttonUnderline, atEnd && styles.buttonEndUnderline]}\n            />\n          )}\n        </>\n      )}\n    </Pressable>\n  );\n\n  const text = (\n    <LakeText numberOfLines={1} color={colors.gray[900]} variant={variant} tooltip={tooltip}>\n      {children}\n    </LakeText>\n  );\n\n  return (\n    <Cell fadeOn={fadeOn}>\n      {atEnd ? (\n        <>\n          {text}\n          {button}\n        </>\n      ) : (\n        <>\n          {button}\n          {text}\n        </>\n      )}\n    </Cell>\n  );\n};\n","import { Option } from \"@swan-io/boxed\";\nimport {\n  cloneElement,\n  memo,\n  ReactElement,\n  ReactNode,\n  RefObject,\n  useCallback,\n  useEffect,\n  useId,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport { backgroundColor as backgroundColorVariants, colors, spacings } from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { Pressable } from \"./Pressable\";\nimport { ScrollView, ScrollViewRef } from \"./ScrollView\";\nimport { Space } from \"./Space\";\n\nconst HORIZONTAL_ROW_PADDING = 16;\n\nconst styles = StyleSheet.create({\n  container: {\n    ...commonStyles.fill,\n    height: 1,\n    alignSelf: \"stretch\",\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  contentContainer: {\n    minWidth: \"100%\",\n  },\n  emptyListContentContainer: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: spacings[48],\n    minHeight: \"100%\",\n  },\n  headerRow: {\n    position: \"sticky\",\n    top: 0,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    zIndex: 2,\n  },\n  cellsContainer: {\n    boxShadow: `0 -1px ${colors.gray[100]}`,\n    flexDirection: \"row\",\n    transform: \"translateZ(0)\",\n  },\n  stickedToStartColumnGroup: {\n    position: \"sticky\",\n    left: 0,\n    zIndex: 1,\n  },\n  stickedToStartColumnGroupLocked: {\n    position: \"relative\",\n  },\n  centerColumnGroup: {\n    flexGrow: 1,\n  },\n  stickedToEndColumnGroup: {\n    position: \"sticky\",\n    right: 0,\n    zIndex: 1,\n  },\n  stickedToEndColumnGroupLocked: {\n    position: \"relative\",\n  },\n  rowsContainer: {\n    position: \"relative\",\n  },\n  row: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  headerCell: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  cell: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  shadowsLayerContainer: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: \"none\",\n    zIndex: 4,\n  },\n  shadowsLayer: {\n    position: \"sticky\",\n    top: 12,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  startColumnsShadow: {\n    position: \"sticky\",\n    left: 0,\n    top: 0,\n    boxShadow: \"15px 0 10px -12px rgba(0, 0, 0, 0.1)\",\n    transition: \"100ms ease-in-out opacity\",\n  },\n  endColumnsShadow: {\n    position: \"sticky\",\n    right: 0,\n    top: 0,\n    boxShadow: \"-15px 0 10px -12px rgba(0, 0, 0, 0.1)\",\n    transition: \"100ms ease-in-out opacity\",\n  },\n  scrollTracker: {\n    pointerEvents: \"none\",\n    position: \"absolute\",\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n  placeholderRowContainer: {\n    position: \"absolute\",\n    alignItems: \"flex-start\",\n    top: 0,\n    left: 0,\n    right: 0,\n    animationKeyframes: {\n      \"50%\": {\n        opacity: 0.6,\n      },\n    },\n    animationDuration: \"2000ms\",\n    animationTimingFunction: \"linear\",\n    animationIterationCount: \"infinite\",\n    boxShadow: `inset 0 -1px ${colors.gray[100]}`,\n  },\n  placeholderRowContents: {\n    position: \"sticky\",\n    width: \"50%\",\n    left: 0,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    flexGrow: 1,\n    paddingHorizontal: spacings[24],\n  },\n  loadingPlaceholder: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n  },\n  placeholderRow: {\n    height: 14,\n    width: \"30%\",\n    backgroundColor: colors.gray[100],\n  },\n  placeholderRowEnd: {\n    paddingHorizontal: spacings[20],\n    position: \"sticky\",\n    right: 0,\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  smallPlaceholderRow: {\n    width: \"10%\",\n  },\n  resizeHandleZone: {\n    position: \"absolute\",\n    cursor: \"ew-resize\",\n    top: 0,\n    bottom: 0,\n    width: spacings[24],\n  },\n  resizeHandleZoneStart: {\n    right: 0,\n    alignItems: \"flex-end\",\n  },\n  resizeHandleZoneEnd: {\n    right: \"auto\",\n    left: 0,\n    alignItems: \"flex-start\",\n  },\n  resizeHandleLeft: {\n    right: \"auto\",\n    left: 0,\n  },\n  resizeHandle: {\n    backgroundColor: colors.gray[200],\n    height: \"100%\",\n    opacity: 0,\n    transitionDuration: \"200ms\",\n    transitionProperty: \"opacity\",\n    width: 3,\n  },\n  resizeHandleActive: {\n    opacity: 1,\n  },\n});\n\nexport type ColumnTitleConfig<ExtraInfo> = {\n  title: string;\n  extraInfo: ExtraInfo;\n  id: string;\n};\n\nexport type ColumnCellConfig<T, ExtraInfo> = {\n  columnId: string;\n  item: T;\n  isHovered: boolean;\n  index: number;\n  extraInfo: ExtraInfo;\n};\n\nexport type ColumnConfig<T, ExtraInfo> = {\n  id: string;\n  grow?: boolean;\n  width: number;\n  title: string;\n  renderTitle: (props: ColumnTitleConfig<ExtraInfo>) => ReactNode;\n  renderCell: (props: ColumnCellConfig<T, ExtraInfo>) => ReactNode;\n};\n\nexport type LinkConfig<T, ExtraInfo> = {\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n};\n\nexport type VirtualizedListProps<T, ExtraInfo> = {\n  variant: \"default\" | \"accented\";\n  data: T[];\n  keyExtractor: (item: T, index: number) => string;\n  headerHeight: number;\n  rowHeight: number;\n  extraInfo: ExtraInfo;\n  stickedToStartColumns?: ColumnConfig<T, ExtraInfo>[];\n  columns: ColumnConfig<T, ExtraInfo>[];\n  stickedToEndColumns?: ColumnConfig<T, ExtraInfo>[];\n  renderThreshold?: number;\n  onEndReached?: () => void;\n  onEndReachedThreshold?: number;\n  getRowLink?: (config: LinkConfig<T, ExtraInfo>) => ReactElement | undefined;\n  renderEmptyList: () => ReactNode;\n  marginHorizontal?: string;\n  loading?: {\n    isLoading: boolean;\n    count: number;\n  };\n  onColumnResize?: (values: { id: string; width: number }) => void;\n};\n\ntype ResizeHandleProps = {\n  id: string;\n  width: number;\n  end?: boolean;\n  onResize?: (values: { id: string; width: number }) => void;\n  scrollViewRef: RefObject<ScrollViewRef | null>;\n};\n\nconst ResizeHandle = ({ id, end = false, width, onResize, scrollViewRef }: ResizeHandleProps) => {\n  const ref = useRef<View>(null);\n  const [isDragging, setIsDragging] = useState(false);\n\n  const widthRef = useRef(width);\n  const onResizeRef = useRef(onResize);\n\n  useLayoutEffect(() => {\n    widthRef.current = width;\n    onResizeRef.current = onResize;\n  }, [width, onResize]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies(scrollViewRef.current.element.style): _\n  // biome-ignore lint/correctness/useExhaustiveDependencies(scrollViewRef.current?.element): _\n  useEffect(() => {\n    const element = ref.current as HTMLDivElement | null;\n    if (element != null) {\n      let startX: number | null = null;\n      let startWidth: number | null = null;\n\n      const onMouseMove = (event: MouseEvent) => {\n        if (startX != null && startWidth != null) {\n          onResizeRef.current?.({\n            id,\n            width: Math.max(24, startWidth + (event.clientX - startX) * (end ? -1 : 1)),\n          });\n        }\n      };\n\n      const onMouseUp = (event: MouseEvent) => {\n        if (scrollViewRef.current?.element != null) {\n          scrollViewRef.current.element.style.webkitUserSelect = \"\";\n        }\n        if (startX != null && startWidth != null) {\n          onResizeRef.current?.({\n            id,\n            width: Math.max(24, startWidth + (event.clientX - startX) * (end ? -1 : 1)),\n          });\n        }\n        startX = null;\n        document.documentElement.removeEventListener(\"mousemove\", onMouseMove);\n        setIsDragging(false);\n      };\n\n      const onMouseDown = (event: MouseEvent) => {\n        if (scrollViewRef.current?.element != null) {\n          scrollViewRef.current.element.style.webkitUserSelect = \"none\";\n        }\n        startX = event.clientX;\n        startWidth = widthRef.current;\n        document.documentElement.addEventListener(\"mousemove\", onMouseMove);\n        document.documentElement.addEventListener(\"mouseup\", onMouseUp);\n        setIsDragging(true);\n      };\n\n      element.addEventListener(\"mousedown\", onMouseDown);\n\n      return () => {\n        if (scrollViewRef.current?.element != null) {\n          scrollViewRef.current.element.style.webkitUserSelect = \"\";\n        }\n        setIsDragging(false);\n        element.removeEventListener(\"mousedown\", onMouseDown);\n        document.documentElement.removeEventListener(\"mousemove\", onMouseMove);\n        document.documentElement.removeEventListener(\"mouseup\", onMouseUp);\n      };\n    }\n  }, [id, end]);\n\n  return (\n    <Pressable\n      ref={ref}\n      role=\"none\"\n      style={[\n        styles.resizeHandleZone,\n        end ? styles.resizeHandleZoneEnd : styles.resizeHandleZoneStart,\n      ]}\n    >\n      {({ hovered }) => (\n        <View style={[styles.resizeHandle, (hovered || isDragging) && styles.resizeHandleActive]} />\n      )}\n    </Pressable>\n  );\n};\n\nexport const VirtualizedList = <T, ExtraInfo>({\n  variant,\n  data,\n  stickedToStartColumns,\n  columns,\n  stickedToEndColumns,\n  headerHeight,\n  rowHeight,\n  renderThreshold = 1000,\n  onEndReached,\n  onEndReachedThreshold = 200,\n  loading,\n  extraInfo,\n  keyExtractor,\n  marginHorizontal,\n  renderEmptyList,\n  onColumnResize,\n  getRowLink,\n}: VirtualizedListProps<T, ExtraInfo>) => {\n  // Used for unique IDs generation (usefull for header IDs and cells aria-describedBy pointing to them)\n  const viewId = useId();\n  const scrollViewRef = useRef<ScrollViewRef>(null);\n  const scrollTrackerRef = useRef<View>(null);\n\n  // Theoretical height of all actual data if rendered\n  const fullDataHeight = rowHeight * data.length;\n\n  const loadingDataPlaceholderHeight = Option.fromNullable(loading)\n    .flatMap(({ isLoading, count }) => (isLoading ? Option.Some(rowHeight * count) : Option.None()))\n    .getOr(0);\n\n  const containerContainerHeight = headerHeight + fullDataHeight + loadingDataPlaceholderHeight;\n\n  const stickedToStartFirstCellLeftPadding = Option.fromNullable(stickedToStartColumns)\n    .map(() => HORIZONTAL_ROW_PADDING)\n    .getOr(0);\n\n  const centerFirstCellLeftPadding = Option.fromNullable(stickedToStartColumns)\n    .map(() => 0)\n    .getOr(HORIZONTAL_ROW_PADDING);\n\n  const centerLastCellLeftPadding = Option.fromNullable(stickedToEndColumns)\n    .map(() => 0)\n    .getOr(HORIZONTAL_ROW_PADDING);\n\n  const stickedToEndLastCellRightPadding = Option.fromNullable(stickedToEndColumns)\n    .map(() => HORIZONTAL_ROW_PADDING)\n    .getOr(0);\n\n  const stickedToStartColumnsWidth = useMemo(\n    () =>\n      Option.fromNullable(stickedToStartColumns)\n        .map(columns => columns.reduce((acc, column) => acc + column.width, 0))\n        .getOr(0) + stickedToStartFirstCellLeftPadding,\n    [stickedToStartColumns, stickedToStartFirstCellLeftPadding],\n  );\n\n  const centerColumnsWidth = useMemo(\n    () =>\n      columns.reduce((acc, column) => acc + column.width, 0) +\n      centerFirstCellLeftPadding +\n      centerLastCellLeftPadding,\n    [columns, centerFirstCellLeftPadding, centerLastCellLeftPadding],\n  );\n\n  const stickedToEndColumnsWidth = useMemo(\n    () =>\n      Option.fromNullable(stickedToEndColumns)\n        .map(columns => columns.reduce((acc, column) => acc + column.width, 0))\n        .getOr(0) + stickedToEndLastCellRightPadding,\n    [stickedToEndColumns, stickedToEndLastCellRightPadding],\n  );\n\n  const contentContainerWidth =\n    stickedToStartColumnsWidth + centerColumnsWidth + stickedToEndColumnsWidth;\n\n  const backgroundColor = backgroundColorVariants[variant];\n\n  // We store the `startIndex` and `endIndex` rather than the scroll position\n  // so that it triggers way less re-renders\n  const [rangeToRender, setRangeToRender] = useState<\n    { startIndex: number; endIndex: number } | undefined\n  >(undefined);\n\n  const [clientHeight, setClientHeight] = useState<number | undefined>(undefined);\n\n  const [horizontalScrollPosition, setHasHorizontalScrollPosition] = useState<\n    \"Start\" | \"Middle\" | \"End\" | \"NoScroll\" | undefined\n  >(undefined);\n\n  const rowsToRender = useMemo(() => {\n    return Option.fromNullable(rangeToRender).map(({ startIndex, endIndex }) => {\n      const clampedEndIndex = Math.min(data.length, endIndex);\n      return {\n        startIndex,\n        endIndex: clampedEndIndex,\n        data: data.slice(startIndex, clampedEndIndex),\n      };\n    });\n  }, [data, rangeToRender]);\n\n  const onLayoutUpdate = useCallback(() => {\n    const element = Option.fromNullable(scrollViewRef.current).flatMap(ref =>\n      Option.fromNullable(ref.element),\n    );\n    setRangeToRender(previousRangeToRender =>\n      element\n        .map(scrollView => {\n          const startIndex = Math.max(\n            0,\n            Math.floor((scrollView.scrollTop - renderThreshold) / rowHeight),\n          );\n\n          const endIndex =\n            startIndex + Math.ceil((scrollView.scrollHeight + renderThreshold * 2) / rowHeight);\n\n          if (\n            previousRangeToRender?.startIndex === startIndex &&\n            previousRangeToRender.endIndex === endIndex\n          ) {\n            return previousRangeToRender;\n          }\n\n          return { startIndex, endIndex };\n        })\n        .toUndefined(),\n    );\n\n    setClientHeight(element.map(scrollView => scrollView.clientHeight).toUndefined());\n\n    setHasHorizontalScrollPosition(\n      element\n        .map(scrollView =>\n          scrollView.scrollWidth === scrollView.clientWidth ||\n          scrollView.clientWidth - (stickedToEndColumnsWidth + stickedToStartColumnsWidth) < 300\n            ? \"NoScroll\"\n            : scrollView.scrollLeft <= 0\n              ? \"Start\"\n              : scrollView.scrollLeft >= scrollView.scrollWidth - scrollView.clientWidth\n                ? \"End\"\n                : \"Middle\",\n        )\n        .toUndefined(),\n    );\n  }, [renderThreshold, rowHeight, stickedToStartColumnsWidth, stickedToEndColumnsWidth]);\n\n  useLayoutEffect(() => {\n    onLayoutUpdate();\n  }, [onLayoutUpdate]);\n\n  const scrollTimeoutRef = useRef<number>(undefined);\n  const rowsContainerRef = useRef<View>(null);\n\n  const onScroll = useCallback(() => {\n    // Disable interactions in cells during scroll, avoids useless\n    // re-renders\n    if (scrollTimeoutRef.current != null) {\n      clearTimeout(scrollTimeoutRef.current);\n    }\n    if (rowsContainerRef.current instanceof HTMLElement) {\n      rowsContainerRef.current.style.pointerEvents = \"none\";\n    }\n    scrollTimeoutRef.current = window.setTimeout(() => {\n      if (rowsContainerRef.current instanceof HTMLElement) {\n        rowsContainerRef.current.style.pointerEvents = \"auto\";\n      }\n    }, 100);\n\n    onLayoutUpdate();\n  }, [onLayoutUpdate]);\n\n  useEffect(() => {\n    const element = Option.fromNullable(scrollViewRef.current).flatMap(ref =>\n      Option.fromNullable(ref.element),\n    );\n    return element\n      .map(element => {\n        const resizeObserver = new ResizeObserver(() => {\n          onLayoutUpdate();\n        });\n        resizeObserver.observe(element);\n        return () => resizeObserver.unobserve(element);\n      })\n      .toUndefined();\n  }, [onLayoutUpdate]);\n\n  // tracks if the threshold to initiate the next data load is reached\n  // biome-ignore lint/correctness/useExhaustiveDependencies(data.length):\n  useEffect(() => {\n    const scrollTracker = scrollTrackerRef.current;\n    if (scrollTracker != null) {\n      const scrollTrackerElement = scrollTracker as unknown as HTMLElement;\n      const intersectionObserver = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            if (onEndReached != null) {\n              onEndReached();\n            }\n          }\n        });\n      });\n      intersectionObserver.observe(scrollTrackerElement);\n      return () => intersectionObserver.unobserve(scrollTrackerElement);\n    }\n  }, [onEndReached, data.length]);\n\n  const header = useMemo(() => {\n    return (\n      <View style={[styles.headerRow, { height: headerHeight }]}>\n        {Option.fromNullable(stickedToStartColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToStartColumnGroup,\n                horizontalScrollPosition === \"NoScroll\" && styles.stickedToStartColumnGroupLocked,\n                { width: stickedToStartColumnsWidth, backgroundColor, height: headerHeight },\n              ]}\n            >\n              {columns.map(({ id, width, title, renderTitle }, index) => {\n                const columnId = `${viewId}_${id}`;\n                const paddingLeft = index === 0 ? stickedToStartFirstCellLeftPadding : 0;\n\n                return (\n                  <View\n                    style={[styles.headerCell, { width: width + paddingLeft, paddingLeft }]}\n                    id={columnId}\n                    key={columnId}\n                  >\n                    {renderTitle({ title, extraInfo, id })}\n                    <ResizeHandle\n                      width={width}\n                      id={id}\n                      onResize={onColumnResize}\n                      scrollViewRef={scrollViewRef}\n                    />\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n\n        <View\n          style={[\n            styles.cellsContainer,\n            styles.centerColumnGroup,\n            { width: centerColumnsWidth, backgroundColor, height: headerHeight },\n          ]}\n        >\n          {columns.map(({ id, grow = false, width, title, renderTitle }, index) => {\n            const columnId = `${viewId}_${id}`;\n            const paddingLeft = index === 0 ? centerFirstCellLeftPadding : 0;\n            const paddingRight = index === columns.length - 1 ? centerLastCellLeftPadding : 0;\n\n            return (\n              <View\n                style={[\n                  styles.headerCell,\n                  grow && styles.grow,\n                  { width: width + paddingLeft + paddingRight, paddingLeft, paddingRight },\n                ]}\n                id={columnId}\n                key={columnId}\n              >\n                {renderTitle({ title, extraInfo, id })}\n                <ResizeHandle\n                  width={width}\n                  id={id}\n                  onResize={onColumnResize}\n                  scrollViewRef={scrollViewRef}\n                />\n              </View>\n            );\n          })}\n        </View>\n\n        {Option.fromNullable(stickedToEndColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToEndColumnGroup,\n                horizontalScrollPosition === \"NoScroll\" && styles.stickedToEndColumnGroupLocked,\n                { width: stickedToEndColumnsWidth, backgroundColor, height: headerHeight },\n              ]}\n            >\n              {columns.map(({ id, width, title, renderTitle }, index) => {\n                const columnId = `${viewId}_${id}`;\n                const paddingRight =\n                  index === columns.length - 1 ? stickedToEndLastCellRightPadding : 0;\n\n                return (\n                  <View\n                    style={[styles.headerCell, { width: width + paddingRight, paddingRight }]}\n                    id={columnId}\n                    key={columnId}\n                  >\n                    {renderTitle({ title, extraInfo, id })}\n                    <ResizeHandle\n                      end={true}\n                      width={width}\n                      id={id}\n                      onResize={onColumnResize}\n                      scrollViewRef={scrollViewRef}\n                    />\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n      </View>\n    );\n  }, [\n    backgroundColor,\n    stickedToStartColumnsWidth,\n    centerColumnsWidth,\n    stickedToEndColumnsWidth,\n    headerHeight,\n    extraInfo,\n    stickedToStartColumns,\n    columns,\n    stickedToEndColumns,\n    viewId,\n    horizontalScrollPosition,\n    stickedToStartFirstCellLeftPadding,\n    centerFirstCellLeftPadding,\n    centerLastCellLeftPadding,\n    stickedToEndLastCellRightPadding,\n    onColumnResize,\n  ]);\n\n  const startColumnShadow = useMemo(() => {\n    if (stickedToStartColumnsWidth === 0) {\n      return Option.None();\n    }\n    return Option.Some(\n      <View\n        style={[\n          styles.startColumnsShadow,\n          {\n            width: stickedToStartColumnsWidth,\n            opacity: Option.fromNullable(horizontalScrollPosition)\n              .map(value => (value === \"Start\" || value === \"NoScroll\" ? 0 : 1))\n              .getOr(0),\n          },\n        ]}\n      />,\n    );\n  }, [stickedToStartColumnsWidth, horizontalScrollPosition]);\n\n  const endColumnShadow = useMemo(() => {\n    if (stickedToEndColumnsWidth === 0) {\n      return Option.None();\n    }\n    return Option.Some(\n      <View\n        style={[\n          styles.endColumnsShadow,\n          {\n            width: stickedToEndColumnsWidth,\n            opacity: Option.fromNullable(horizontalScrollPosition)\n              .map(value => (value === \"End\" || value === \"NoScroll\" ? 0 : 1))\n              .getOr(0),\n          },\n        ]}\n      />,\n    );\n  }, [stickedToEndColumnsWidth, horizontalScrollPosition]);\n\n  if (\n    data.length === 0 &&\n    !Option.fromNullable(loading)\n      .map(({ isLoading }) => isLoading)\n      .getOr(false)\n  ) {\n    return (\n      <ScrollView style={styles.container} contentContainerStyle={styles.emptyListContentContainer}>\n        {renderEmptyList()}\n      </ScrollView>\n    );\n  }\n\n  return (\n    <ScrollView\n      ref={scrollViewRef}\n      both={true}\n      style={[styles.container, { marginHorizontal }]}\n      onScroll={onScroll}\n      scrollEventThrottle={32}\n      contentContainerStyle={[\n        styles.contentContainer,\n        {\n          height: containerContainerHeight,\n          width: contentContainerWidth,\n        },\n      ]}\n    >\n      {header}\n\n      {rowsToRender\n        .map(({ startIndex, endIndex, data }) => (\n          <View style={styles.rowsContainer} ref={rowsContainerRef}>\n            {data.map((item, index) => (\n              <VirtualizedRow<T, ExtraInfo>\n                key={keyExtractor(item, startIndex + index)}\n                viewId={viewId}\n                item={item}\n                rowHeight={rowHeight}\n                absoluteIndex={startIndex + index}\n                variant={variant}\n                stickedToStartColumnsWidth={stickedToStartColumnsWidth}\n                centerColumnsWidth={centerColumnsWidth}\n                stickedToEndColumnsWidth={stickedToEndColumnsWidth}\n                stickedToStartColumns={stickedToStartColumns}\n                columns={columns}\n                stickedToEndColumns={stickedToEndColumns}\n                extraInfo={extraInfo}\n                getRowLink={getRowLink}\n                horizontalScrollPosition={horizontalScrollPosition ?? \"NoScroll\"}\n                stickedToStartFirstCellLeftPadding={stickedToStartFirstCellLeftPadding}\n                centerFirstCellLeftPadding={centerFirstCellLeftPadding}\n                centerLastCellLeftPadding={centerLastCellLeftPadding}\n                stickedToEndLastCellRightPadding={stickedToEndLastCellRightPadding}\n              />\n            ))}\n\n            {Option.fromNullable(loading)\n              .flatMap(({ isLoading, count }) => (isLoading ? Option.Some(count) : Option.None()))\n              .map(count => (\n                <View\n                  aria-busy={true}\n                  style={[\n                    styles.loadingPlaceholder,\n                    {\n                      top: endIndex * rowHeight,\n                    },\n                  ]}\n                >\n                  <VirtualizedListPlaceholder\n                    count={count}\n                    headerHeight={0}\n                    rowHeight={rowHeight}\n                  />\n                </View>\n              ))\n              .toNull()}\n          </View>\n        ))\n        .toNull()}\n\n      {Option.fromNullable(clientHeight)\n        .map(clientHeight => (\n          <View style={styles.shadowsLayerContainer}>\n            <View style={[styles.shadowsLayer, { height: clientHeight - 12 }]}>\n              {startColumnShadow.toNull()}\n\n              <View style={[styles.centerColumnGroup, { width: centerColumnsWidth }]} />\n\n              {endColumnShadow.toNull()}\n            </View>\n          </View>\n        ))\n        .toNull()}\n\n      <View\n        style={[styles.scrollTracker, { height: onEndReachedThreshold }]}\n        ref={scrollTrackerRef}\n      />\n    </ScrollView>\n  );\n};\n\ntype VirtualizedRowProps<T, ExtraInfo> = {\n  viewId: string;\n  rowHeight: number;\n  absoluteIndex: number;\n  variant: \"accented\" | \"default\";\n  stickedToStartColumnsWidth: number;\n  centerColumnsWidth: number;\n  stickedToEndColumnsWidth: number;\n  stickedToStartColumns?: ColumnConfig<T, ExtraInfo>[];\n  columns: ColumnConfig<T, ExtraInfo>[];\n  stickedToEndColumns?: ColumnConfig<T, ExtraInfo>[];\n  extraInfo: ExtraInfo;\n  getRowLink?: (config: LinkConfig<T, ExtraInfo>) => ReactElement | undefined;\n  horizontalScrollPosition: \"NoScroll\" | \"Start\" | \"Middle\" | \"End\";\n  item: T;\n  stickedToStartFirstCellLeftPadding: number;\n  centerFirstCellLeftPadding: number;\n  centerLastCellLeftPadding: number;\n  stickedToEndLastCellRightPadding: number;\n};\n\nconst RawVirtualizedRow = <T, ExtraInfo>({\n  viewId,\n  rowHeight,\n  absoluteIndex,\n  variant,\n  stickedToStartColumnsWidth,\n  centerColumnsWidth,\n  stickedToEndColumnsWidth,\n  stickedToStartColumns,\n  columns,\n  stickedToEndColumns,\n  extraInfo,\n  item,\n  horizontalScrollPosition,\n  getRowLink,\n  stickedToStartFirstCellLeftPadding,\n  centerFirstCellLeftPadding,\n  centerLastCellLeftPadding,\n  stickedToEndLastCellRightPadding,\n}: VirtualizedRowProps<T, ExtraInfo>) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const elementRef = useRef<View>(null);\n\n  useHover(elementRef, {\n    onHoverStart: () => setIsHovered(true),\n    onHoverEnd: () => setIsHovered(false),\n  });\n\n  const rootElement =\n    getRowLink != null ? (\n      (getRowLink({ item, index: absoluteIndex, extraInfo }) ?? <View />)\n    ) : (\n      <View />\n    );\n\n  return cloneElement(rootElement, {\n    ref: elementRef,\n    style: [\n      styles.row,\n      {\n        backgroundColor: backgroundColorVariants[variant],\n        top: absoluteIndex * rowHeight,\n        height: rowHeight,\n      },\n      isHovered && {\n        backgroundColor:\n          variant === \"accented\"\n            ? backgroundColorVariants.default\n            : backgroundColorVariants.accented,\n      },\n    ],\n    children: (\n      <>\n        {Option.fromNullable(stickedToStartColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToStartColumnGroup,\n                horizontalScrollPosition === \"NoScroll\" && styles.stickedToStartColumnGroupLocked,\n                {\n                  height: rowHeight,\n                  width: stickedToStartColumnsWidth,\n                  backgroundColor: isHovered\n                    ? backgroundColorVariants[variant === \"accented\" ? \"default\" : \"accented\"]\n                    : backgroundColorVariants[variant],\n                },\n              ]}\n            >\n              {columns.map(({ id, width, renderCell }, index) => {\n                const columnId = `${viewId}_${id}`;\n                const paddingLeft = index === 0 ? stickedToStartFirstCellLeftPadding : 0;\n\n                return (\n                  <View\n                    style={[styles.cell, { width: width + paddingLeft, paddingLeft }]}\n                    key={columnId}\n                    aria-describedby={columnId}\n                  >\n                    {renderCell({\n                      columnId,\n                      item,\n                      index: absoluteIndex,\n                      extraInfo,\n                      isHovered,\n                    })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n\n        <View\n          style={[\n            styles.cellsContainer,\n            styles.centerColumnGroup,\n            {\n              width: centerColumnsWidth,\n              height: rowHeight,\n              backgroundColor: isHovered\n                ? backgroundColorVariants[variant === \"accented\" ? \"default\" : \"accented\"]\n                : backgroundColorVariants[variant],\n            },\n          ]}\n        >\n          {columns.map(({ id, grow = false, width, renderCell }, index) => {\n            const columnId = `${viewId}_${id}`;\n            const paddingLeft = index === 0 ? centerFirstCellLeftPadding : 0;\n            const paddingRight = index === columns.length - 1 ? centerLastCellLeftPadding : 0;\n\n            return (\n              <View\n                style={[\n                  styles.cell,\n                  grow && styles.grow,\n                  { width: width + paddingLeft + paddingRight, paddingLeft, paddingRight },\n                ]}\n                key={columnId}\n                aria-describedby={columnId}\n              >\n                {renderCell({\n                  columnId,\n                  item,\n                  index: absoluteIndex,\n                  extraInfo,\n                  isHovered,\n                })}\n              </View>\n            );\n          })}\n        </View>\n\n        {Option.fromNullable(stickedToEndColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToEndColumnGroup,\n                horizontalScrollPosition === \"NoScroll\" && styles.stickedToEndColumnGroupLocked,\n                {\n                  width: stickedToEndColumnsWidth,\n                  height: rowHeight,\n                  backgroundColor: isHovered\n                    ? backgroundColorVariants[variant === \"accented\" ? \"default\" : \"accented\"]\n                    : backgroundColorVariants[variant],\n                },\n              ]}\n            >\n              {columns.map(({ id, width, renderCell }, index) => {\n                const columnId = `${viewId}_${id}`;\n                const paddingRight =\n                  index === columns.length - 1 ? stickedToEndLastCellRightPadding : 0;\n\n                return (\n                  <View\n                    style={[styles.cell, { width: width + paddingRight, paddingRight }]}\n                    key={columnId}\n                    aria-describedby={columnId}\n                  >\n                    {renderCell({\n                      columnId,\n                      item,\n                      index: absoluteIndex,\n                      extraInfo,\n                      isHovered,\n                    })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n      </>\n    ),\n  });\n};\n\nconst VirtualizedRow = memo(RawVirtualizedRow) as typeof RawVirtualizedRow;\n\ntype VirtualizedListPlaceholderProps = {\n  count: number;\n  rowHeight: number;\n  groupHeaderHeight?: number;\n  headerHeight?: number;\n  marginHorizontal?: string;\n};\n\nexport const VirtualizedListPlaceholder = ({\n  count,\n  rowHeight,\n  groupHeaderHeight,\n  headerHeight,\n  marginHorizontal,\n}: VirtualizedListPlaceholderProps) => {\n  return (\n    <View style={[styles.container, { marginHorizontal }]}>\n      {headerHeight != null ? <View style={{ height: headerHeight }} /> : null}\n      {groupHeaderHeight != null ? <View style={{ height: groupHeaderHeight }} /> : null}\n\n      <View>\n        {Array.from({ length: count }, (_, index) => {\n          const top = index * rowHeight;\n\n          return (\n            <View\n              key={String(index)}\n              style={[styles.placeholderRowContainer, { height: rowHeight, top }]}\n            >\n              <View style={styles.placeholderRowContents}>\n                <View style={styles.placeholderRow} />\n                <Space width={32} />\n                <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                <Space width={32} />\n\n                <View style={styles.placeholderRowEnd}>\n                  <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                </View>\n              </View>\n            </View>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n"],"names":["directionStyles","StyleSheet","alignItemsStyles","justifyContentStyles","fadeOnLeftMask","invariantColors","spacings","fadeOnRightMask","styles","colors","Cell","children","align","direction","fadeOn","style","contentContainerStyle","View","jsx","HeaderCell","sort","text","onPress","sortActive","isNotNullish","disabled","isNullish","Pressable","match","hovered","jsxs","LakeText","Fragment","Space","Icon","TextCell","color","tooltip","variant","LinkCell","buttonPosition","external","atEnd","button","event","HORIZONTAL_ROW_PADDING","commonStyles","ResizeHandle","id","end","width","onResize","scrollViewRef","ref","useRef","isDragging","setIsDragging","useState","widthRef","onResizeRef","useLayoutEffect","useEffect","element","startX","startWidth","onMouseMove","_a","onMouseUp","_b","onMouseDown","VirtualizedList","data","stickedToStartColumns","columns","stickedToEndColumns","headerHeight","rowHeight","renderThreshold","onEndReached","onEndReachedThreshold","loading","extraInfo","keyExtractor","marginHorizontal","renderEmptyList","onColumnResize","getRowLink","viewId","useId","scrollTrackerRef","fullDataHeight","loadingDataPlaceholderHeight","Option","isLoading","count","containerContainerHeight","stickedToStartFirstCellLeftPadding","centerFirstCellLeftPadding","centerLastCellLeftPadding","stickedToEndLastCellRightPadding","stickedToStartColumnsWidth","useMemo","acc","column","centerColumnsWidth","stickedToEndColumnsWidth","contentContainerWidth","backgroundColor","backgroundColorVariants","rangeToRender","setRangeToRender","clientHeight","setClientHeight","horizontalScrollPosition","setHasHorizontalScrollPosition","rowsToRender","startIndex","endIndex","clampedEndIndex","onLayoutUpdate","useCallback","previousRangeToRender","scrollView","scrollTimeoutRef","rowsContainerRef","onScroll","resizeObserver","scrollTracker","scrollTrackerElement","intersectionObserver","entries","entry","header","title","renderTitle","index","columnId","paddingLeft","grow","paddingRight","startColumnShadow","value","endColumnShadow","ScrollView","item","VirtualizedRow","VirtualizedListPlaceholder","RawVirtualizedRow","absoluteIndex","isHovered","setIsHovered","elementRef","useHover","rootElement","cloneElement","renderCell","memo","groupHeaderHeight","_","top"],"mappings":"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"}