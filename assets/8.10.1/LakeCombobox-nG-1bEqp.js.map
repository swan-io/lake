{"version":3,"file":"LakeCombobox-nG-1bEqp.js","sources":["../../../packages/lake/src/components/LakeCombobox.tsx"],"sourcesContent":["import { AsyncData, Result } from \"@swan-io/boxed\";\nimport {\n  ForwardedRef,\n  ReactNode,\n  Ref,\n  RefObject,\n  forwardRef,\n  useCallback,\n  useId,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  NativeSyntheticEvent,\n  Pressable,\n  StyleSheet,\n  Text,\n  TextInput,\n  TextInputKeyPressEventData,\n  View,\n} from \"react-native\";\nimport { backgroundColor, colors, spacings } from \"../constants/design\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { getFocusableElements } from \"../utils/a11y\";\nimport { isNotEmpty } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { FlatList } from \"./FlatList\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeText } from \"./LakeText\";\nimport { LakeTextInput, LakeTextInputProps } from \"./LakeTextInput\";\nimport { LoadingView } from \"./LoadingView\";\nimport { Popover } from \"./Popover\";\nimport { Separator } from \"./Separator\";\nimport { Space } from \"./Space\";\n\nconst DEFAULT_ELEMENT_HEIGHT = 64;\nconst DEFAULT_NB_SUGGESTION_DISPLAYED = 3.5;\n\nconst styles = StyleSheet.create({\n  list: {\n    marginVertical: spacings[8],\n  },\n  flatList: {\n    scrollBehavior: \"smooth\",\n  },\n  item: {\n    flexShrink: 1,\n    flexGrow: 1,\n    justifyContent: \"center\",\n    paddingHorizontal: spacings[24],\n    paddingVertical: 0,\n    transitionProperty: \"background-color\",\n    transitionDuration: \"200ms\",\n    outlineStyle: \"none\",\n    justifyContents: \"center\",\n  },\n  hoveredItem: {\n    backgroundColor: colors.gray[0],\n  },\n  focusedItem: {\n    backgroundColor: colors.gray[0],\n  },\n  pressedItem: {\n    backgroundColor: colors.gray[100],\n  },\n  itemText: {\n    userSelect: \"none\",\n  },\n  loader: {\n    padding: spacings[24],\n  },\n  listContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  loaderAdditional: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  loaderAdditionalUnderlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: backgroundColor.accented,\n    opacity: 0.8,\n  },\n  emptyList: {\n    height: 136,\n  },\n  emptyListText: {\n    color: colors.gray.primary,\n  },\n  input: {\n    width: 1,\n    flexGrow: 1,\n  },\n});\n\nexport type LakeComboboxProps<I> = {\n  inputRef?: RefObject<unknown>;\n  value: string;\n  items: AsyncData<Result<I[], unknown>>;\n  itemHeight?: number;\n  nbItemsDisplayed?: number;\n  ListFooterComponent?: ReactNode;\n  onChange?: LakeTextInputProps[\"onChange\"];\n  onValueChange: (value: string) => void;\n  onSelectItem: (value: I) => void | Promise<unknown>;\n  renderItem: (item: I) => ReactNode | null;\n  keyExtractor: (item: I) => string;\n  icon?: IconName;\n  placeholder?: string;\n  disabled?: boolean;\n  emptyResultText: string;\n  error?: string;\n  hideErrors?: boolean;\n  id?: string;\n  readOnly?: boolean;\n};\n\nexport type LakeComboboxRef = { close: () => void; open: () => void };\n\nconst LakeComboboxWithRef = <I,>(\n  {\n    inputRef,\n    value,\n    items,\n    itemHeight = DEFAULT_ELEMENT_HEIGHT,\n    nbItemsDisplayed = DEFAULT_NB_SUGGESTION_DISPLAYED,\n    ListFooterComponent,\n    onChange,\n    onValueChange,\n    onSelectItem,\n    renderItem,\n    keyExtractor,\n    icon,\n    placeholder,\n    disabled = false,\n    emptyResultText,\n    readOnly,\n    id,\n    error,\n    hideErrors,\n  }: LakeComboboxProps<I>,\n  forwardedRef: ForwardedRef<LakeComboboxRef>,\n) => {\n  const ref = useRef<TextInput>(null);\n\n  const inputTextRef = useMergeRefs(ref, inputRef as RefObject<unknown>);\n\n  const listContainerRef = useRef<View>(null);\n  const blurTimeoutId = useRef<number | undefined>(undefined);\n  const [isFetchingAdditionalInfo, setIsFetchingAdditionalInfo] = useState(false);\n\n  // The Combobox has two distinct closed states: \"closed\" and \"dismissed\"\n  // When it's \"closed\", it will open on input focus or text change\n  // When it's \"dismissed\", it will NOT open on input focus, but will on text change\n  const [state, setState] = useState<\"opened\" | \"closed\" | \"dismissed\">(\"closed\");\n  const open = useCallback(() => setState(\"opened\"), []);\n  const close = useCallback(() => setState(\"closed\"), []);\n  const dismiss = useCallback(() => setState(\"dismissed\"), []);\n\n  useImperativeHandle(forwardedRef, () => {\n    return {\n      open,\n      close,\n    };\n  });\n\n  const suggestionsId = useId();\n\n  const handleKeyPress = useCallback((event: NativeSyntheticEvent<TextInputKeyPressEventData>) => {\n    if (event.nativeEvent.key === \"ArrowDown\") {\n      const listElement = listContainerRef.current;\n\n      if (listElement != null) {\n        const element = listElement as unknown as Element;\n        const focusableElements = getFocusableElements(element, false);\n        focusableElements[0]?.focus();\n        event.preventDefault();\n      }\n    }\n  }, []);\n\n  const handleListItemKeyPress = useCallback(\n    (event: NativeSyntheticEvent<TextInputKeyPressEventData>) => {\n      if (event.nativeEvent.key === \"ArrowDown\" || event.nativeEvent.key === \"ArrowUp\") {\n        const listElement = listContainerRef.current;\n\n        if (listElement != null) {\n          const element = listElement as unknown as Element;\n          const target = event.currentTarget as unknown as HTMLElement;\n          const focusableElements = getFocusableElements(element, false);\n          const index = focusableElements.indexOf(target);\n          const direction = event.nativeEvent.key === \"ArrowDown\" ? 1 : -1;\n\n          if (index === -1) {\n            return;\n          }\n\n          const nextIndex = index + direction;\n          event.preventDefault();\n\n          if (nextIndex === -1) {\n            ref.current?.focus();\n          } else {\n            focusableElements[nextIndex === focusableElements.length ? 0 : nextIndex]?.focus();\n          }\n        }\n      }\n    },\n    [],\n  );\n\n  const handleChangeText = useCallback(\n    (value: string) => {\n      onValueChange(value);\n      setState(isNotEmpty(value) ? \"opened\" : \"closed\");\n    },\n    [onValueChange],\n  );\n\n  const handleFocus = useCallback(() => {\n    if (isNotEmpty(value)) {\n      window.clearTimeout(blurTimeoutId.current);\n\n      blurTimeoutId.current = window.setTimeout(() => {\n        setState(prevState => (prevState === \"closed\" ? \"opened\" : prevState));\n      }, 100);\n    }\n  }, [value]);\n\n  const handleBlur = useCallback(() => {\n    window.clearTimeout(blurTimeoutId.current);\n\n    blurTimeoutId.current = window.setTimeout(() => {\n      setState(\"dismissed\");\n    }, 100);\n  }, []);\n\n  return (\n    <View>\n      <LakeTextInput\n        containerRef={inputTextRef as Ref<View>}\n        style={styles.input}\n        ariaExpanded={state === \"opened\"}\n        ariaControls={state === \"opened\" ? suggestionsId : \"\"}\n        enterKeyHint=\"search\"\n        icon={icon}\n        role=\"combobox\"\n        placeholder={placeholder}\n        value={value}\n        disabled={disabled}\n        error={error}\n        hideErrors={hideErrors}\n        onChangeText={handleChangeText}\n        onChange={onChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onKeyPress={handleKeyPress}\n        id={id}\n        readOnly={readOnly}\n      />\n\n      <Popover\n        id={suggestionsId}\n        role=\"listbox\"\n        matchReferenceWidth={true}\n        onEscapeKey={dismiss}\n        referenceRef={ref}\n        autoFocus={false}\n        returnFocus={true}\n        visible={state === \"opened\" && !items.isNotAsked()}\n        underlay={false}\n        forcedMode=\"Dropdown\"\n      >\n        <View style={[styles.list, { maxHeight: itemHeight * nbItemsDisplayed }]}>\n          {items.match({\n            NotAsked: () => null,\n            Loading: () => <LoadingView style={styles.loader} />,\n            Done: items =>\n              items.match({\n                Error: _ => (\n                  <Icon name=\"error-circle-regular\" size={22} color={colors.negative[500]} />\n                ),\n                Ok: items => (\n                  <View ref={listContainerRef} style={styles.listContainer}>\n                    {items.length === 0 ? (\n                      <Box justifyContent=\"center\" alignItems=\"center\" style={styles.emptyList}>\n                        <Icon\n                          name=\"clipboard-search-regular\"\n                          size={24}\n                          color={colors.gray.primary}\n                        />\n\n                        <Space height={8} />\n                        <Text style={styles.emptyListText}>{emptyResultText}</Text>\n                      </Box>\n                    ) : (\n                      <FlatList\n                        keyExtractor={keyExtractor}\n                        role=\"list\"\n                        data={items}\n                        style={styles.flatList}\n                        ItemSeparatorComponent={<Separator />}\n                        renderItem={({ item }) => {\n                          const rendered = renderItem(item);\n\n                          return (\n                            <Pressable\n                              onFocus={handleFocus}\n                              onBlur={handleBlur}\n                              role=\"listitem\"\n                              onKeyDown={handleListItemKeyPress}\n                              style={({ hovered, pressed, focused }) => [\n                                styles.item,\n                                hovered && styles.hoveredItem,\n                                focused && styles.focusedItem,\n                                pressed && styles.pressedItem,\n                                { height: itemHeight },\n                              ]}\n                              onPress={() => {\n                                window.clearTimeout(blurTimeoutId.current);\n                                setIsFetchingAdditionalInfo(true);\n\n                                void Promise.resolve(onSelectItem(item)).finally(() => {\n                                  setIsFetchingAdditionalInfo(false);\n                                  dismiss();\n                                });\n                              }}\n                            >\n                              {typeof rendered === \"string\" || typeof rendered === \"number\" ? (\n                                <LakeText numberOfLines={1} style={styles.itemText}>\n                                  {rendered}\n                                </LakeText>\n                              ) : (\n                                rendered\n                              )}\n                            </Pressable>\n                          );\n                        }}\n                      />\n                    )}\n\n                    {ListFooterComponent}\n\n                    {isFetchingAdditionalInfo ? (\n                      <View style={styles.loaderAdditional}>\n                        <View style={styles.loaderAdditionalUnderlay} />\n                        <LoadingView />\n                      </View>\n                    ) : null}\n                  </View>\n                ),\n              }),\n          })}\n        </View>\n      </Popover>\n    </View>\n  );\n};\n\nexport const LakeCombobox = forwardRef(LakeComboboxWithRef) as <I>(\n  props: LakeComboboxProps<I> & { ref?: RefObject<LakeComboboxRef> },\n) => ReturnType<typeof LakeComboboxWithRef>;\n"],"names":["DEFAULT_ELEMENT_HEIGHT","DEFAULT_NB_SUGGESTION_DISPLAYED","styles","StyleSheet","spacings","colors","backgroundColor","LakeComboboxWithRef","inputRef","value","items","itemHeight","nbItemsDisplayed","ListFooterComponent","onChange","onValueChange","onSelectItem","renderItem","keyExtractor","icon","placeholder","disabled","emptyResultText","readOnly","id","error","hideErrors","forwardedRef","ref","useRef","inputTextRef","useMergeRefs","listContainerRef","blurTimeoutId","isFetchingAdditionalInfo","setIsFetchingAdditionalInfo","useState","state","setState","open","useCallback","close","dismiss","useImperativeHandle","suggestionsId","useId","handleKeyPress","event","listElement","_a","getFocusableElements","handleListItemKeyPress","element","target","focusableElements","index","direction","nextIndex","_b","handleChangeText","isNotEmpty","handleFocus","prevState","handleBlur","View","jsx","LakeTextInput","Popover","LoadingView","_","Icon","jsxs","Box","Space","Text","FlatList","Separator","item","rendered","Pressable","hovered","pressed","focused","LakeText","LakeCombobox","forwardRef"],"mappings":"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"}