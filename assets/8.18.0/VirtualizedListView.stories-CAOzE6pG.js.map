{"version":3,"file":"VirtualizedListView.stories-CAOzE6pG.js","sources":["../../../packages/lake/src/components/VirtualizedList.tsx","../../../packages/lake/__stories__/VirtualizedListView.stories.tsx"],"sourcesContent":["import { Option } from \"@swan-io/boxed\";\nimport {\n  cloneElement,\n  memo,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useId,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport { backgroundColor as backgroundColorVariants, colors, spacings } from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { ScrollView, ScrollViewRef } from \"./ScrollView\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  container: {\n    ...commonStyles.fill,\n    alignSelf: \"stretch\",\n  },\n  headerRow: {\n    position: \"sticky\",\n    top: 0,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    zIndex: 2,\n  },\n  cellsContainer: {\n    flexDirection: \"row\",\n    transform: \"translateZ(0)\",\n  },\n  stickedToStartColumnGroup: {\n    position: \"sticky\",\n    left: 0,\n    zIndex: 1,\n  },\n  stickedToEndColumnGroup: {\n    position: \"sticky\",\n    right: 0,\n    zIndex: 1,\n  },\n  rowsContainer: {\n    position: \"relative\",\n  },\n  row: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  headerCell: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    alignItems: \"center\",\n  },\n  cell: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    alignItems: \"stretch\",\n    boxShadow: `inset 0 -1px ${colors.gray[100]}`,\n  },\n  shadowsLayerContainer: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    pointerEvents: \"none\",\n    zIndex: 4,\n  },\n  shadowsLayer: {\n    position: \"sticky\",\n    top: 12,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  startColumnsShadow: {\n    position: \"sticky\",\n    left: 0,\n    top: 0,\n    boxShadow: \"15px 0 10px -12px rgba(0, 0, 0, 0.1)\",\n    transition: \"100ms ease-in-out opacity\",\n  },\n  endColumnsShadow: {\n    position: \"sticky\",\n    right: 0,\n    top: 0,\n    boxShadow: \"-15px 0 10px -12px rgba(0, 0, 0, 0.1)\",\n    transition: \"100ms ease-in-out opacity\",\n  },\n  scrollTracker: {\n    pointerEvents: \"none\",\n    position: \"absolute\",\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n  placeholderRowContainer: {\n    position: \"absolute\",\n    alignItems: \"flex-start\",\n    top: 0,\n    left: 0,\n    right: 0,\n    animationKeyframes: {\n      \"50%\": {\n        opacity: 0.6,\n      },\n    },\n    animationDuration: \"2000ms\",\n    animationTimingFunction: \"linear\",\n    animationIterationCount: \"infinite\",\n    boxShadow: `inset 0 -1px ${colors.gray[100]}`,\n  },\n  placeholderRowContents: {\n    position: \"sticky\",\n    width: \"50%\",\n    left: 0,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    flexGrow: 1,\n    paddingHorizontal: spacings[20],\n  },\n  loadingPlaceholder: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n  },\n  placeholderRow: {\n    height: 14,\n    width: \"30%\",\n    backgroundColor: colors.gray[100],\n  },\n  placeholderRowEnd: {\n    paddingHorizontal: spacings[20],\n    position: \"sticky\",\n    right: 0,\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  smallPlaceholderRow: {\n    width: \"10%\",\n  },\n});\n\nexport type ColumnTitleConfig<ExtraInfo> = {\n  title: string;\n  extraInfo: ExtraInfo;\n  id: string;\n};\n\nexport type ColumnCellConfig<T, ExtraInfo> = {\n  columnId: string;\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n  isHovered: boolean;\n};\n\nexport type ColumnConfig<T, ExtraInfo> = {\n  id: string;\n  width: number;\n  title: string;\n  renderTitle: (props: ColumnTitleConfig<ExtraInfo>) => ReactNode;\n  renderCell: (props: ColumnCellConfig<T, ExtraInfo>) => ReactNode;\n};\n\nexport type LinkConfig<T, ExtraInfo> = {\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n};\n\nexport type VirtualizedListProps<T, ExtraInfo> = {\n  variant: \"default\" | \"accented\";\n  data: T[];\n  keyExtractor: (item: T, index: number) => string;\n  highlightedRowId?: string;\n  headerHeight: number;\n  rowHeight: number;\n  extraInfo: ExtraInfo;\n  stickedToStartColumns?: ColumnConfig<T, ExtraInfo>[];\n  columns: ColumnConfig<T, ExtraInfo>[];\n  stickedToEndColumns?: ColumnConfig<T, ExtraInfo>[];\n  renderThreshold?: number;\n  onEndReached?: () => void;\n  onEndReachedThreshold?: number;\n  getRowLink?: (config: LinkConfig<T, ExtraInfo>) => ReactElement | undefined;\n  renderEmptyList?: () => ReactNode;\n  loading?: {\n    isLoading: boolean;\n    count: number;\n  };\n};\n\nexport const VirtualizedList = <T, ExtraInfo>({\n  variant,\n  data,\n  stickedToStartColumns,\n  columns,\n  stickedToEndColumns,\n  headerHeight,\n  rowHeight,\n  renderThreshold = 1000,\n  onEndReached,\n  onEndReachedThreshold = 200,\n  loading,\n  extraInfo,\n  keyExtractor,\n}: VirtualizedListProps<T, ExtraInfo>) => {\n  // Used for unique IDs generation (usefull for header IDs and cells aria-describedBy pointing to them)\n  const viewId = useId();\n  const scrollViewRef = useRef<ScrollViewRef>(null);\n  const scrollTrackerRef = useRef<View>(null);\n\n  // Theoretical height of all actual data if rendered\n  const fullDataHeight = rowHeight * data.length;\n\n  const loadingDataPlaceholderHeight = Option.fromNullable(loading)\n    .flatMap(({ isLoading, count }) => (isLoading ? Option.Some(rowHeight * count) : Option.None()))\n    .getOr(0);\n\n  const containerContainerHeight = headerHeight + fullDataHeight + loadingDataPlaceholderHeight;\n\n  const stickedToStartColumnsWidth = useMemo(\n    () =>\n      Option.fromNullable(stickedToStartColumns)\n        .map(columns => columns.reduce((acc, column) => acc + column.width, 0))\n        .getOr(0),\n    [stickedToStartColumns],\n  );\n\n  const centerColumnsWidth = useMemo(\n    () => columns.reduce((acc, column) => acc + column.width, 0),\n    [columns],\n  );\n\n  const stickedToEndColumnsWidth = useMemo(\n    () =>\n      Option.fromNullable(stickedToEndColumns)\n        .map(columns => columns.reduce((acc, column) => acc + column.width, 0))\n        .getOr(0),\n    [stickedToEndColumns],\n  );\n\n  const contentContainerWidth =\n    stickedToStartColumnsWidth + centerColumnsWidth + stickedToEndColumnsWidth;\n\n  const backgroundColor = backgroundColorVariants[variant];\n\n  // We store the `startIndex` and `endIndex` rather than the scroll position\n  // so that it triggers way less re-renders\n  const [rangeToRender, setRangeToRender] = useState<\n    { startIndex: number; endIndex: number } | undefined\n  >(undefined);\n\n  const [clientHeight, setClientHeight] = useState<number | undefined>(undefined);\n\n  const [horizontalScrollPosition, setHasHorizontalScrollPosition] = useState<\n    \"Start\" | \"Middle\" | \"End\" | \"NoScroll\" | undefined\n  >(undefined);\n\n  const rowsToRender = useMemo(() => {\n    return Option.fromNullable(rangeToRender).map(({ startIndex, endIndex }) => ({\n      startIndex,\n      endIndex,\n      data: data.slice(startIndex, endIndex),\n    }));\n  }, [data, rangeToRender]);\n\n  useLayoutEffect(() => {\n    const element = Option.fromNullable(scrollViewRef.current).flatMap(ref =>\n      Option.fromNullable(ref.element),\n    );\n    setRangeToRender(previousRangeToRender =>\n      element\n        .map(scrollView => {\n          const startIndex = Math.max(\n            0,\n            Math.floor((scrollView.scrollTop - renderThreshold) / rowHeight),\n          );\n\n          const endIndex = Math.min(\n            data.length,\n            startIndex + Math.ceil((scrollView.scrollHeight + renderThreshold * 2) / rowHeight),\n          );\n\n          if (\n            previousRangeToRender?.startIndex === startIndex &&\n            previousRangeToRender.endIndex === endIndex\n          ) {\n            return previousRangeToRender;\n          }\n\n          return { startIndex, endIndex };\n        })\n        .toUndefined(),\n    );\n\n    setClientHeight(element.map(scrollView => scrollView.clientHeight).toUndefined());\n\n    setHasHorizontalScrollPosition(\n      element\n        .map(scrollView =>\n          scrollView.scrollWidth === scrollView.clientWidth\n            ? \"NoScroll\"\n            : scrollView.scrollLeft <= 0\n              ? \"Start\"\n              : scrollView.scrollLeft >= scrollView.scrollWidth - scrollView.clientWidth\n                ? \"End\"\n                : \"Middle\",\n        )\n        .toUndefined(),\n    );\n  }, [data, renderThreshold, rowHeight]);\n\n  const scrollTimeoutRef = useRef<number | undefined>(undefined);\n  const rowsContainerRef = useRef<View>(null);\n\n  const onScroll = useCallback(() => {\n    const element = Option.fromNullable(scrollViewRef.current).flatMap(ref =>\n      Option.fromNullable(ref.element),\n    );\n\n    // Disable interactions in cells during scroll, avoids useless\n    // re-renders\n    if (scrollTimeoutRef.current != null) {\n      clearTimeout(scrollTimeoutRef.current);\n    }\n    if (rowsContainerRef.current instanceof HTMLElement) {\n      rowsContainerRef.current.style.pointerEvents = \"none\";\n    }\n    scrollTimeoutRef.current = window.setTimeout(() => {\n      if (rowsContainerRef.current instanceof HTMLElement) {\n        rowsContainerRef.current.style.pointerEvents = \"auto\";\n      }\n    }, 100);\n\n    setRangeToRender(previousRangeToRender =>\n      element\n        .map(scrollView => {\n          const startIndex = Math.max(\n            0,\n            Math.floor((scrollView.scrollTop - renderThreshold) / rowHeight),\n          );\n\n          const endIndex = Math.min(\n            data.length,\n            startIndex + Math.ceil((scrollView.scrollHeight + renderThreshold * 2) / rowHeight),\n          );\n\n          if (\n            previousRangeToRender?.startIndex === startIndex &&\n            previousRangeToRender.endIndex === endIndex\n          ) {\n            return previousRangeToRender;\n          }\n\n          return { startIndex, endIndex };\n        })\n        .toUndefined(),\n    );\n\n    setHasHorizontalScrollPosition(\n      element\n        .map(scrollView =>\n          scrollView.scrollWidth === scrollView.clientWidth\n            ? \"NoScroll\"\n            : scrollView.scrollLeft <= 0\n              ? \"Start\"\n              : scrollView.scrollLeft >= scrollView.scrollWidth - scrollView.clientWidth\n                ? \"End\"\n                : \"Middle\",\n        )\n        .toUndefined(),\n    );\n  }, [data, renderThreshold, rowHeight]);\n\n  // tracks if the threshold to initiate the next data load is reached\n  useEffect(() => {\n    const scrollTracker = scrollTrackerRef.current;\n    if (scrollTracker != null) {\n      const scrollTrackerElement = scrollTracker as unknown as HTMLElement;\n      const intersectionObserver = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            if (onEndReached != null) {\n              onEndReached();\n            }\n          }\n        });\n      });\n      intersectionObserver.observe(scrollTrackerElement);\n      return () => intersectionObserver.unobserve(scrollTrackerElement);\n    }\n  }, [onEndReached, data.length]);\n\n  const header = useMemo(() => {\n    return (\n      <View style={[styles.headerRow, { height: headerHeight }]}>\n        {Option.fromNullable(stickedToStartColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToStartColumnGroup,\n                { width: stickedToStartColumnsWidth, backgroundColor },\n              ]}\n            >\n              {columns.map(({ id, width, title, renderTitle }) => {\n                const columnId = `${viewId}_${id}`;\n\n                return (\n                  <View style={[styles.headerCell, { width }]} id={columnId} key={columnId}>\n                    {renderTitle({ title, extraInfo, id })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n\n        <View style={[styles.cellsContainer, { width: centerColumnsWidth, backgroundColor }]}>\n          {columns.map(({ id, width, title, renderTitle }) => {\n            const columnId = `${viewId}_${id}`;\n\n            return (\n              <View style={[styles.headerCell, { width }]} id={columnId} key={columnId}>\n                {renderTitle({ title, extraInfo, id })}\n              </View>\n            );\n          })}\n        </View>\n\n        {Option.fromNullable(stickedToEndColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToEndColumnGroup,\n                { width: stickedToEndColumnsWidth, backgroundColor },\n              ]}\n            >\n              {columns.map(({ id, width, title, renderTitle }) => {\n                const columnId = `${viewId}_${id}`;\n\n                return (\n                  <View style={[styles.headerCell, { width }]} id={columnId} key={columnId}>\n                    {renderTitle({ title, extraInfo, id })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n      </View>\n    );\n  }, [\n    backgroundColor,\n    stickedToStartColumnsWidth,\n    centerColumnsWidth,\n    stickedToEndColumnsWidth,\n    headerHeight,\n    extraInfo,\n    stickedToStartColumns,\n    columns,\n    stickedToEndColumns,\n    viewId,\n  ]);\n\n  const startColumnShadow = useMemo(() => {\n    if (stickedToStartColumnsWidth === 0) {\n      return Option.None();\n    }\n    return Option.Some(\n      <View\n        style={[\n          styles.startColumnsShadow,\n          {\n            width: stickedToStartColumnsWidth,\n            opacity: Option.fromNullable(horizontalScrollPosition)\n              .map(value => (value === \"Start\" || value === \"NoScroll\" ? 0 : 1))\n              .getOr(0),\n          },\n        ]}\n      />,\n    );\n  }, [stickedToStartColumnsWidth, horizontalScrollPosition]);\n\n  const endColumnShadow = useMemo(() => {\n    if (stickedToEndColumnsWidth === 0) {\n      return Option.None();\n    }\n    return Option.Some(\n      <View\n        style={[\n          styles.endColumnsShadow,\n          {\n            width: stickedToEndColumnsWidth,\n            opacity: Option.fromNullable(horizontalScrollPosition)\n              .map(value => (value === \"End\" || value === \"NoScroll\" ? 0 : 1))\n              .getOr(0),\n          },\n        ]}\n      />,\n    );\n  }, [stickedToEndColumnsWidth, horizontalScrollPosition]);\n\n  return (\n    <ScrollView\n      ref={scrollViewRef}\n      both={true}\n      style={styles.container}\n      onScroll={onScroll}\n      scrollEventThrottle={32}\n      contentContainerStyle={{\n        height: containerContainerHeight,\n        width: contentContainerWidth,\n      }}\n    >\n      {header}\n\n      {rowsToRender\n        .map(({ startIndex, endIndex, data }) => (\n          <View style={styles.rowsContainer} ref={rowsContainerRef}>\n            {data.map((item, index) => (\n              <VirtualizedRow<T, ExtraInfo>\n                key={keyExtractor(item, startIndex + index)}\n                viewId={viewId}\n                item={item}\n                rowHeight={rowHeight}\n                absoluteIndex={startIndex + index}\n                variant={variant}\n                stickedToStartColumnsWidth={stickedToStartColumnsWidth}\n                centerColumnsWidth={centerColumnsWidth}\n                stickedToEndColumnsWidth={stickedToEndColumnsWidth}\n                stickedToStartColumns={stickedToStartColumns}\n                columns={columns}\n                stickedToEndColumns={stickedToEndColumns}\n                extraInfo={extraInfo}\n              />\n            ))}\n\n            {Option.fromNullable(loading)\n              .flatMap(({ isLoading, count }) => (isLoading ? Option.Some(count) : Option.None()))\n              .map(count => (\n                <View\n                  aria-busy={true}\n                  style={[\n                    styles.loadingPlaceholder,\n                    {\n                      top: endIndex * rowHeight,\n                    },\n                  ]}\n                >\n                  <VirtualizedListPlaceholder\n                    count={count}\n                    headerHeight={0}\n                    rowHeight={rowHeight}\n                  />\n                </View>\n              ))\n              .toNull()}\n          </View>\n        ))\n        .toNull()}\n\n      {Option.fromNullable(clientHeight)\n        .map(clientHeight => (\n          <View style={styles.shadowsLayerContainer}>\n            <View style={[styles.shadowsLayer, { height: clientHeight - 12 }]}>\n              {startColumnShadow.toNull()}\n\n              <View style={{ width: centerColumnsWidth }}></View>\n\n              {endColumnShadow.toNull()}\n            </View>\n          </View>\n        ))\n        .toNull()}\n\n      <View\n        style={[styles.scrollTracker, { height: onEndReachedThreshold }]}\n        ref={scrollTrackerRef}\n      />\n    </ScrollView>\n  );\n};\n\ntype VirtualizedRowProps<T, ExtraInfo> = {\n  viewId: string;\n  rowHeight: number;\n  absoluteIndex: number;\n  variant: \"accented\" | \"default\";\n  stickedToStartColumnsWidth: number;\n  centerColumnsWidth: number;\n  stickedToEndColumnsWidth: number;\n  stickedToStartColumns?: ColumnConfig<T, ExtraInfo>[];\n  columns: ColumnConfig<T, ExtraInfo>[];\n  stickedToEndColumns?: ColumnConfig<T, ExtraInfo>[];\n  extraInfo: ExtraInfo;\n  getRowLink?: (config: LinkConfig<T, ExtraInfo>) => ReactElement | undefined;\n  item: T;\n};\n\nconst RawVirtualizedRow = <T, ExtraInfo>({\n  viewId,\n  rowHeight,\n  absoluteIndex,\n  variant,\n  stickedToStartColumnsWidth,\n  centerColumnsWidth,\n  stickedToEndColumnsWidth,\n  stickedToStartColumns,\n  columns,\n  stickedToEndColumns,\n  extraInfo,\n  item,\n  getRowLink,\n}: VirtualizedRowProps<T, ExtraInfo>) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const elementRef = useRef<View>(null);\n\n  useHover(elementRef, {\n    onHoverStart: () => setIsHovered(true),\n    onHoverEnd: () => setIsHovered(false),\n  });\n\n  const rootElement =\n    getRowLink != null ? (\n      (getRowLink({ item, index: absoluteIndex, extraInfo }) ?? <View />)\n    ) : (\n      <View />\n    );\n  return cloneElement(rootElement, {\n    ref: elementRef,\n    style: [\n      styles.row,\n      isHovered && {\n        backgroundColor:\n          variant === \"accented\"\n            ? backgroundColorVariants.default\n            : backgroundColorVariants.accented,\n      },\n      {\n        backgroundColor: backgroundColorVariants[variant],\n        top: absoluteIndex * rowHeight,\n        height: rowHeight,\n      },\n    ],\n    children: (\n      <>\n        {Option.fromNullable(stickedToStartColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToStartColumnGroup,\n                {\n                  width: stickedToStartColumnsWidth,\n                  backgroundColor: isHovered\n                    ? backgroundColorVariants[variant === \"accented\" ? \"default\" : \"accented\"]\n                    : backgroundColorVariants[variant],\n                },\n              ]}\n            >\n              {columns.map(({ id, width, renderCell }) => {\n                const columnId = `${viewId}_${id}`;\n\n                return (\n                  <View style={[styles.cell, { width }]} key={columnId} aria-describedby={columnId}>\n                    {renderCell({\n                      columnId,\n                      item,\n                      index: absoluteIndex,\n                      extraInfo,\n                      isHovered: false,\n                    })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n\n        <View\n          style={[\n            styles.cellsContainer,\n            {\n              width: centerColumnsWidth,\n              backgroundColor: isHovered\n                ? backgroundColorVariants[variant === \"accented\" ? \"default\" : \"accented\"]\n                : backgroundColorVariants[variant],\n            },\n          ]}\n        >\n          {columns.map(({ id, width, renderCell }) => {\n            const columnId = `${viewId}_${id}`;\n\n            return (\n              <View style={[styles.cell, { width }]} key={columnId} aria-describedby={columnId}>\n                {renderCell({\n                  columnId,\n                  item,\n                  index: absoluteIndex,\n                  extraInfo,\n                  isHovered: false,\n                })}\n              </View>\n            );\n          })}\n        </View>\n\n        {Option.fromNullable(stickedToEndColumns)\n          .map(columns => (\n            <View\n              style={[\n                styles.cellsContainer,\n                styles.stickedToEndColumnGroup,\n                {\n                  width: stickedToEndColumnsWidth,\n                  backgroundColor: isHovered\n                    ? backgroundColorVariants[variant === \"accented\" ? \"default\" : \"accented\"]\n                    : backgroundColorVariants[variant],\n                },\n              ]}\n            >\n              {columns.map(({ id, width, renderCell }) => {\n                const columnId = `${viewId}_${id}`;\n\n                return (\n                  <View style={[styles.cell, { width }]} key={columnId} aria-describedby={columnId}>\n                    {renderCell({\n                      columnId,\n                      item,\n                      index: absoluteIndex,\n                      extraInfo,\n                      isHovered: false,\n                    })}\n                  </View>\n                );\n              })}\n            </View>\n          ))\n          .toNull()}\n      </>\n    ),\n  });\n};\n\nconst VirtualizedRow = memo(RawVirtualizedRow) as typeof RawVirtualizedRow;\n\ntype VirtualizedListPlaceholderProps = {\n  count: number;\n  rowHeight: number;\n  groupHeaderHeight?: number;\n  headerHeight?: number;\n};\n\nexport const VirtualizedListPlaceholder = ({\n  count,\n  rowHeight,\n  groupHeaderHeight,\n  headerHeight,\n}: VirtualizedListPlaceholderProps) => {\n  return (\n    <View style={styles.container}>\n      {headerHeight != null ? <View style={{ height: headerHeight }} /> : null}\n      {groupHeaderHeight != groupHeaderHeight ? <View style={{ height: headerHeight }} /> : null}\n\n      <View>\n        {Array.from({ length: count }, (_, index) => {\n          const top = index * rowHeight;\n\n          return (\n            <View\n              key={String(index)}\n              style={[styles.placeholderRowContainer, { height: rowHeight, top }]}\n            >\n              <View style={styles.placeholderRowContents}>\n                <View style={styles.placeholderRow} />\n                <Space width={32} />\n                <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                <Space width={32} />\n\n                <View style={styles.placeholderRowEnd}>\n                  <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                </View>\n              </View>\n            </View>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n","import { Meta, StoryFn } from \"@storybook/react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { Box } from \"../src/components/Box\";\nimport {\n  ColumnCellConfig,\n  ColumnTitleConfig,\n  FixedListView,\n  FixedListViewEmpty,\n  FixedListViewPlaceholder,\n} from \"../src/components/FixedListView\";\nimport {\n  ColorPatchCell,\n  EndAlignedCell,\n  LinkCell,\n  SimpleHeaderCell,\n  SimpleRegularTextCell,\n  SimpleTitleCell,\n} from \"../src/components/FixedListViewCells\";\nimport { LakeButton } from \"../src/components/LakeButton\";\nimport { LakeLabelledCheckbox } from \"../src/components/LakeCheckbox\";\nimport { Space } from \"../src/components/Space\";\nimport { Tag } from \"../src/components/Tag\";\nimport { VirtualizedList } from \"../src/components/VirtualizedList\";\n\nexport default {\n  title: \"Layout/VirtualizedList\",\n  component: VirtualizedList,\n} as Meta<typeof VirtualizedList>;\n\ntype TestRow = {\n  id: string;\n  name: string;\n};\n\nconst keyExtractor = ({ id }: TestRow) => id;\n\ntype SortInfo = {\n  key: string;\n  order: \"Asc\" | \"Desc\";\n};\n\nconst generateRandomName = () => {\n  const names = [\n    \"Matthias\",\n    \"John\",\n    \"Jane\",\n    \"Camille\",\n    \"Charlotte\",\n    \"Francis\",\n    \"Émilie\",\n    \"François\",\n    \"Laura\",\n    \"Marie\",\n    \"Natasha\",\n    \"Nicolas\",\n    \"Pierre\",\n    \"Thomas\",\n    \"Valérie\",\n    \"Yann\",\n    \"Zoé\",\n    \"Jérôme\",\n    \"Thomas\",\n  ] as const;\n\n  return names[Math.floor(Math.random() * names.length)] ?? names[0];\n};\n\nconst generateItem = (): TestRow => {\n  return {\n    id: uuid(),\n    name: generateRandomName(),\n  };\n};\n\nconst EditableFixedListView = () => {\n  const [sort, setSort] = useState<SortInfo>({ key: \"name\", order: \"Desc\" });\n  const [endReachedTimes, setEndReachedTimes] = useState(0);\n  const [withInfiniteScroll, setWithInfiniteScroll] = useState(false);\n  const [showFakeLoader, setShowFakeLoader] = useState(false);\n  const [forceIsLoading, setForceIsLoading] = useState(false);\n\n  const [data, setData] = useState(() => Array.from({ length: 20 }, _ => generateItem()));\n\n  const onEndReached = useCallback(() => {\n    setEndReachedTimes(v => v + 1);\n    if (withInfiniteScroll) {\n      setShowFakeLoader(true);\n    }\n  }, [withInfiniteScroll]);\n\n  useEffect(() => {\n    if (showFakeLoader) {\n      const timeout = setTimeout(() => {\n        setShowFakeLoader(false);\n        setData(data => [...data, ...Array.from({ length: 20 }, _ => generateItem())]);\n      }, 1000);\n\n      return () => clearTimeout(timeout);\n    }\n  });\n\n  const { stickedToStartColumns, columns, stickedToEndColumns } = useMemo(() => {\n    const stickedToStartColumns = [\n      {\n        width: 4,\n        id: \"color\",\n        title: \"Color\",\n        renderTitle: () => null,\n        renderCell: ({ isHovered }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <ColorPatchCell isHovered={isHovered} color=\"live\" />\n        ),\n      },\n      {\n        width: 300,\n        id: \"name\",\n        title: \"Name\",\n        renderTitle: ({ title, extraInfo, id }: ColumnTitleConfig<SortInfo>) => (\n          <SimpleHeaderCell\n            text={title}\n            sort={extraInfo.key === id ? extraInfo.order : undefined}\n            onPress={() => setSort({ key: id, order: extraInfo.order === \"Desc\" ? \"Asc\" : \"Desc\" })}\n          />\n        ),\n        renderCell: ({ item: { name } }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <SimpleTitleCell text={name} />\n        ),\n      },\n    ];\n\n    const columns = [\n      {\n        width: 500,\n        id: \"event_id\",\n        title: \"Event ID\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: ({ item: { id } }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <SimpleRegularTextCell text={id} />\n        ),\n      },\n      {\n        width: 150,\n        id: \"link_before\",\n        title: \"Link before\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: () => (\n          <LinkCell onPress={() => {}} buttonPosition=\"start\">\n            <Tag color=\"shakespear\">Demo link</Tag>\n          </LinkCell>\n        ),\n      },\n      {\n        width: 500,\n        id: \"onboarding_id\",\n        title: \"Onboarding ID\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: ({ item: { id } }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <SimpleRegularTextCell text={id} />\n        ),\n      },\n      {\n        width: 150,\n        id: \"link_after\",\n        title: \"Link after\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: () => (\n          <LinkCell onPress={() => {}} buttonPosition=\"end\">\n            <Tag color=\"shakespear\">Demo link</Tag>\n          </LinkCell>\n        ),\n      },\n      {\n        width: 500,\n        id: \"account_id\",\n        title: \"Account ID\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: ({ item: { id } }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <SimpleRegularTextCell text={id} />\n        ),\n      },\n    ];\n\n    const stickedToEndColumns = [\n      {\n        width: 100,\n        id: \"dot\",\n        title: \"Settings\",\n        renderTitle: () => <SimpleHeaderCell text={\"End\"} justifyContent=\"flex-end\" />,\n        renderCell: () => (\n          <EndAlignedCell>\n            <LakeButton mode=\"tertiary\" icon=\"chevron-right-filled\" ariaLabel=\"test\" size=\"small\" />\n          </EndAlignedCell>\n        ),\n      },\n    ];\n\n    return { stickedToStartColumns, columns, stickedToEndColumns };\n  }, []);\n\n  return (\n    <>\n      <Box direction=\"row\" alignItems=\"center\">\n        <LakeButton\n          icon=\"add-circle-filled\"\n          color=\"live\"\n          onPress={() => setData(data => [generateItem(), ...data])}\n        >\n          Prepend\n        </LakeButton>\n\n        <Space width={16} />\n\n        <LakeButton icon=\"delete-filled\" color=\"negative\" onPress={() => setData([])}>\n          Clear\n        </LakeButton>\n\n        <Space width={16} />\n        <Tag label=\"End reached\">{endReachedTimes} times</Tag>\n        <Space width={16} />\n\n        <LakeLabelledCheckbox\n          label=\"With infinite scroll\"\n          value={withInfiniteScroll}\n          onValueChange={setWithInfiniteScroll}\n        />\n\n        <Space width={16} />\n\n        <LakeLabelledCheckbox\n          label=\"Force loading state\"\n          value={forceIsLoading}\n          onValueChange={setForceIsLoading}\n        />\n      </Box>\n\n      <Space height={16} />\n\n      <VirtualizedList\n        variant=\"default\"\n        extraInfo={sort}\n        keyExtractor={keyExtractor}\n        data={data}\n        stickedToStartColumns={stickedToStartColumns}\n        columns={columns}\n        stickedToEndColumns={stickedToEndColumns}\n        rowHeight={48}\n        headerHeight={48}\n        onEndReached={onEndReached}\n        onEndReachedThreshold={300}\n        renderEmptyList={() => (\n          <FixedListViewEmpty icon=\"lake-inbox-empty\" title=\"Nothing to see here\" />\n        )}\n        loading={{\n          isLoading: forceIsLoading || showFakeLoader,\n          count: 20,\n        }}\n      />\n    </>\n  );\n};\n\nexport const Primary: StoryFn<typeof FixedListView> = () => {\n  return <EditableFixedListView />;\n};\n\nexport const WithoutBackground: StoryFn<typeof FixedListView> = () => {\n  return <EditableFixedListView />;\n};\n\nexport const Placeholder: StoryFn<typeof FixedListView> = () => {\n  return (\n    <FixedListViewPlaceholder rowHeight={48} rowVerticalSpacing={4} headerHeight={48} count={3} />\n  );\n};\n"],"names":["styles","StyleSheet","commonStyles","colors","spacings","VirtualizedList","variant","data","stickedToStartColumns","columns","stickedToEndColumns","headerHeight","rowHeight","renderThreshold","onEndReached","onEndReachedThreshold","loading","extraInfo","keyExtractor","viewId","useId","scrollViewRef","useRef","scrollTrackerRef","fullDataHeight","loadingDataPlaceholderHeight","Option","isLoading","count","containerContainerHeight","stickedToStartColumnsWidth","useMemo","acc","column","centerColumnsWidth","stickedToEndColumnsWidth","contentContainerWidth","backgroundColor","backgroundColorVariants","rangeToRender","setRangeToRender","useState","clientHeight","setClientHeight","horizontalScrollPosition","setHasHorizontalScrollPosition","rowsToRender","startIndex","endIndex","useLayoutEffect","element","ref","previousRangeToRender","scrollView","scrollTimeoutRef","rowsContainerRef","onScroll","useCallback","useEffect","scrollTracker","scrollTrackerElement","intersectionObserver","entries","entry","header","jsxs","View","jsx","id","width","title","renderTitle","columnId","startColumnShadow","value","endColumnShadow","ScrollView","item","index","VirtualizedRow","VirtualizedListPlaceholder","RawVirtualizedRow","absoluteIndex","getRowLink","isHovered","setIsHovered","elementRef","useHover","rootElement","cloneElement","Fragment","renderCell","memo","groupHeaderHeight","_","top","Space","VirtualizedListView_stories","component","generateRandomName","names","Math","floor","random","length","generateItem","uuid","name","EditableFixedListView","sort","setSort","key","order","endReachedTimes","setEndReachedTimes","withInfiniteScroll","setWithInfiniteScroll","showFakeLoader","setShowFakeLoader","forceIsLoading","setForceIsLoading","setData","Array","from","v","timeout","setTimeout","clearTimeout","ColorPatchCell","SimpleHeaderCell","undefined","SimpleTitleCell","SimpleRegularTextCell","LinkCell","Tag","EndAlignedCell","LakeButton","Box","LakeLabelledCheckbox","FixedListViewEmpty","Primary","WithoutBackground","Placeholder","FixedListViewPlaceholder"],"mappings":"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"}