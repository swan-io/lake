{"version":3,"file":"MultiSelect.stories-CMvL1t-r.js","sources":["../../../packages/lake/src/components/InputError.tsx","../../../packages/lake/src/components/SectionList.tsx","../../../packages/lake/src/components/MultiSelect.tsx"],"sourcesContent":["import { StyleProp, StyleSheet, TextStyle } from \"react-native\";\nimport { colors, texts } from \"../constants/design\";\nimport { LakeText } from \"./LakeText\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  base: {\n    color: colors.negative[500],\n    lineHeight: texts.h1.lineHeight,\n    minHeight: 32,\n    paddingHorizontal: 3, // borderRadius / 2\n    paddingVertical: 4,\n  },\n});\n\ntype Props = {\n  message?: string;\n  style?: StyleProp<TextStyle>;\n};\n\nexport const InputError = ({ message = \"\", style }: Props) =>\n  message !== \"\" ? (\n    <LakeText variant=\"smallRegular\" style={[styles.base, style]}>\n      {message}\n    </LakeText>\n  ) : (\n    <Space height={32} />\n  );\n","import { ForwardedRef, Fragment, ReactNode, forwardRef, useEffect, useId, useRef } from \"react\";\nimport { StyleProp, StyleSheet, View, ViewStyle, WebRole } from \"react-native\";\nimport { ListRenderItemInfo } from \"./FlatList\";\nimport { ScrollView, ScrollViewProps, ScrollViewRef } from \"./ScrollView\";\n\nconst styles = StyleSheet.create({\n  scrollTracker: {\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    right: 0,\n    bottom: 0,\n  },\n});\n\nexport type SectionListRef = ScrollViewRef;\n\ntype Section<T> = {\n  title: string;\n  data: T[];\n};\n\ntype Props<T> = {\n  ItemSeparatorComponent?: ReactNode;\n  ListEmptyComponent?: ReactNode;\n  ListFooterComponent?: ReactNode;\n  ListHeaderComponent?: ReactNode;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  horizontal?: boolean;\n  keyExtractor: (item: T, index: number) => string;\n  onEndReached?: () => void;\n  onEndReachedThresholdPx?: number;\n  onKeyDown?: ScrollViewProps[\"onKeyDown\"];\n  onScroll?: ScrollViewProps[\"onScroll\"];\n  renderItem: (info: ListRenderItemInfo<T>) => ReactNode;\n  renderSectionHeader?: (section: Section<T>) => ReactNode;\n  role?: WebRole;\n  scrollEventThrottle?: number;\n  sections: Section<T>[];\n  showsScrollIndicators?: boolean;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst SectionListWithRef = <T,>(\n  {\n    ItemSeparatorComponent,\n    ListEmptyComponent,\n    ListFooterComponent,\n    ListHeaderComponent,\n    contentContainerStyle,\n    horizontal = false,\n    keyExtractor,\n    onEndReached,\n    onEndReachedThresholdPx = 200,\n    onKeyDown,\n    onScroll,\n    renderItem,\n    renderSectionHeader,\n    role,\n    scrollEventThrottle = 16,\n    sections,\n    showsScrollIndicators = true,\n    style,\n  }: Props<T>,\n  forwardedRef: ForwardedRef<SectionListRef>,\n) => {\n  const groupId = useId();\n  const scrollTrackerRef = useRef<View>(null);\n\n  const scrollTrackerStyle = horizontal\n    ? { top: 0, width: onEndReachedThresholdPx }\n    : { left: 0, height: onEndReachedThresholdPx };\n\n  useEffect(() => {\n    const element = scrollTrackerRef.current as unknown as HTMLElement;\n\n    if (element != null) {\n      const observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            onEndReached?.();\n          }\n        });\n      });\n\n      observer.observe(element);\n\n      return () => {\n        observer.unobserve(element);\n      };\n    }\n    // re-create an observer only on list length change\n  }, [sections.length]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <ScrollView\n      contentContainerStyle={contentContainerStyle}\n      horizontal={horizontal}\n      onKeyDown={onKeyDown}\n      onScroll={onScroll}\n      ref={forwardedRef}\n      role={role}\n      scrollEventThrottle={scrollEventThrottle}\n      showsScrollIndicators={showsScrollIndicators}\n      style={style}\n    >\n      {ListHeaderComponent}\n\n      {sections.length <= 0\n        ? ListEmptyComponent\n        : sections.map(section => (\n            <Fragment key={`group-${groupId}-${section.title}`}>\n              {renderSectionHeader?.(section)}\n\n              {section.data.map((item, index) => (\n                <Fragment key={keyExtractor(item, index)}>\n                  {index !== 0 && ItemSeparatorComponent}\n                  {renderItem({ item, index })}\n                </Fragment>\n              ))}\n            </Fragment>\n          ))}\n\n      {ListFooterComponent}\n\n      <View role=\"none\" ref={scrollTrackerRef} style={[styles.scrollTracker, scrollTrackerStyle]} />\n    </ScrollView>\n  );\n};\n\nexport const SectionList = forwardRef(SectionListWithRef) as <T>(\n  props: Props<T> & { ref?: ForwardedRef<SectionListRef> },\n) => ReturnType<typeof SectionListWithRef>;\n","import { Array, Dict, Option } from \"@swan-io/boxed\";\nimport { memo, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  Pressable,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextInput,\n  TextStyle,\n  View,\n  ViewStyle,\n} from \"react-native\";\nimport { ColorVariants, backgroundColor, colors, radii, shadows, texts } from \"../constants/design\";\nimport { useBoolean } from \"../hooks/useBoolean\";\nimport { useDisclosure } from \"../hooks/useDisclosure\";\nimport { groupBy } from \"../utils/array\";\nimport { isNotNullish, isNotNullishOrEmpty } from \"../utils/nullish\";\nimport { safeSplitAround } from \"../utils/string\";\nimport { Box } from \"./Box\";\nimport { FlatList } from \"./FlatList\";\nimport { Icon } from \"./Icon\";\nimport { InputError } from \"./InputError\";\nimport { Popover } from \"./Popover\";\nimport { PressableText } from \"./Pressable\";\nimport { SectionList } from \"./SectionList\";\nimport { Space } from \"./Space\";\nimport { Tag } from \"./Tag\";\n\nconst MAX_INPUT_HEIGHT = 120;\nconst ITEM_ELEMENT_HEIGHT = 32;\nconst NB_SUGGESTION_DISPLAYED = 10.5;\n\nconst styles = StyleSheet.create({\n  base: {\n    ...texts.regular,\n    backgroundColor: backgroundColor.accented,\n    borderColor: colors.gray[100],\n    borderRadius: radii[6],\n    borderWidth: 1,\n    cursor: \"default\",\n    overflow: \"hidden\",\n    transitionDuration: \"150ms\",\n    transitionProperty: \"border-color, box-shadow\",\n  },\n  errored: {\n    borderColor: colors.negative[500],\n  },\n  tag: {\n    marginRight: 4,\n    marginVertical: 2,\n  },\n  hovered: {\n    boxShadow: shadows.tile,\n  },\n  focused: {\n    borderColor: colors.gray[500],\n    boxShadow: shadows.tile,\n    outlineStyle: \"none\",\n  },\n  disabled: {\n    backgroundColor: colors.gray[50],\n    borderColor: colors.gray[100],\n    cursor: \"not-allowed\",\n  },\n  actions: {\n    marginVertical: \"auto\",\n    position: \"absolute\",\n    bottom: 0,\n    top: 0,\n    right: 20,\n  },\n  placeholder: {\n    ...texts.regular,\n    color: colors.gray[300],\n    userSelect: \"none\",\n  },\n  list: {\n    marginVertical: 4,\n    maxHeight: ITEM_ELEMENT_HEIGHT * NB_SUGGESTION_DISPLAYED,\n    minHeight: 224,\n  },\n  filterContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n    margin: 16,\n  },\n  filterInput: {\n    ...texts.regular,\n    backgroundColor: backgroundColor.accented,\n    borderColor: colors.gray[100],\n    borderRadius: 4,\n    borderWidth: 1,\n    flexGrow: 1,\n    flexShrink: 1,\n    height: 40,\n    outlineStyle: \"none\",\n    paddingHorizontal: 12,\n    paddingLeft: 40,\n    placeholderTextColor: colors.gray[300],\n  },\n  filterFocused: {\n    borderColor: colors.gray[200],\n  },\n  searchIcon: {\n    position: \"absolute\",\n    left: 14,\n  },\n  tagsList: {\n    flexWrap: \"wrap\",\n    maxHeight: MAX_INPUT_HEIGHT,\n    minHeight: 40,\n    overflowY: \"auto\",\n    paddingHorizontal: 16,\n    paddingRight: 60,\n    paddingVertical: 8,\n  },\n  groupTitleBase: {\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    flexShrink: 1,\n    justifyContent: \"space-between\",\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    transitionDuration: \"200ms\",\n    transitionProperty: \"background-color\",\n  },\n  groupTitle: {\n    ...texts.semibold,\n    userSelect: \"none\",\n  },\n  line: {\n    ...texts.regular,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    transitionDuration: \"200ms\",\n    transitionProperty: \"background-color\",\n    userSelect: \"none\",\n  },\n  lineInGroup: {\n    paddingLeft: 24,\n  },\n  emptyList: {\n    height: 136,\n  },\n  emptyListText: {\n    color: colors.gray.primary,\n  },\n});\n\nexport type MultiSelectItem = {\n  disabled?: boolean;\n  group: string;\n  label: string;\n  value: string;\n};\n\nexport type MultiSelectProps<I> = {\n  color?: ColorVariants;\n  disabled?: boolean;\n  error?: string;\n  emptyResultText?: string;\n  enableGroups?: boolean;\n  filterPlaceholder?: string;\n  items: I[];\n  onValueChange: (values: string[]) => void;\n  placeholder?: string;\n  renderTagGroup?: (items: readonly MultiSelectItem[]) => string;\n  style?: StyleProp<ViewStyle>;\n  values: string[];\n  id?: string;\n};\n\nexport const MultiSelect = memo<MultiSelectProps<MultiSelectItem>>(\n  ({\n    color = \"gray\",\n    disabled = false,\n    emptyResultText,\n    enableGroups = true,\n    filterPlaceholder,\n    items,\n    onValueChange,\n    placeholder,\n    renderTagGroup,\n    error,\n    style,\n    values,\n    id,\n  }) => {\n    const [filter, setFilter] = useState<string>(\"\");\n    const [filterFocused, setFilterFocused] = useBoolean(false);\n\n    const shouldScrollToBottomRef = useRef(false);\n    const selectedTagListRef = useRef<View & Element>(null);\n    const inputRef = useRef<View>(null);\n    const [visible, { open, close }] = useDisclosure(false);\n\n    const tint50 = colors[color][50];\n    const tint100 = colors[color][100];\n\n    useEffect(() => {\n      if (!visible) {\n        setFilter(\"\");\n      }\n    }, [visible]);\n\n    useEffect(() => {\n      if (shouldScrollToBottomRef.current) {\n        const top = selectedTagListRef.current?.scrollHeight;\n        selectedTagListRef.current?.scrollTo({ top });\n      }\n\n      shouldScrollToBottomRef.current = false;\n    }, [values]);\n\n    const handleSelectItem = (item: MultiSelectItem) => {\n      shouldScrollToBottomRef.current = true;\n      onValueChange([...values, item.value]);\n    };\n\n    const handleRemoveItem = (item: MultiSelectItem) => {\n      onValueChange(values.filter(index => index !== item.value));\n    };\n\n    const handleClearAll = () => {\n      onValueChange([]);\n    };\n\n    const handleSelectGroup = (groupItems: readonly MultiSelectItem[]) => {\n      shouldScrollToBottomRef.current = true;\n      const items = groupItems.map(item => item.value);\n      const newValue = [...new Set([...values, ...items])];\n      onValueChange(newValue);\n    };\n\n    // Used to get full selected value informations in O(1).\n    const valueItemMapping = useMemo(\n      () =>\n        items.reduce((acc: Record<string, MultiSelectItem>, item) => {\n          acc[item.value] = item;\n          return acc;\n        }, {}),\n      [items],\n    );\n\n    const selectedTags = useMemo(\n      () => values.map(value => valueItemMapping[value]).filter(isNotNullish),\n      [values, valueItemMapping],\n    );\n\n    const filteredItems = useMemo(() => {\n      const remainingTags = items.filter(item => !values.includes(item.value));\n      const cleanedFilter = filter.trim().toLowerCase();\n\n      return cleanedFilter === \"\"\n        ? remainingTags\n        : remainingTags.filter(({ label }) => label.toLowerCase().includes(cleanedFilter));\n    }, [filter, items, values]);\n\n    const sections = useMemo(() => {\n      return Array.filterMap(\n        Dict.entries(groupBy(filteredItems, ({ group }) => group)),\n        ([groupName, data]) =>\n          data === undefined ? Option.None() : Option.Some({ title: groupName, data }),\n      );\n    }, [filteredItems]);\n\n    const ListHeaderComponent = useMemo(\n      () => (\n        <Box direction=\"row\" alignItems=\"center\" style={styles.filterContainer}>\n          <TextInput\n            autoComplete=\"off\"\n            inputMode=\"search\"\n            multiline={false}\n            rows={1}\n            onChangeText={filterValue => setFilter(filterValue)}\n            placeholder={filterPlaceholder}\n            value={filter}\n            onFocus={setFilterFocused.on}\n            onBlur={setFilterFocused.off}\n            style={[styles.filterInput, filterFocused && styles.filterFocused]}\n          />\n\n          <Icon\n            name=\"search-filled\"\n            color={colors[color].primary}\n            size={20}\n            style={styles.searchIcon}\n          />\n        </Box>\n      ),\n      [filter, filterFocused, setFilterFocused, filterPlaceholder, color],\n    );\n\n    const ListEmptyComponent = useMemo(\n      () => (\n        <Box justifyContent=\"center\" alignItems=\"center\" style={styles.emptyList}>\n          <Icon name=\"clipboard-search-regular\" size={24} color={colors.gray.primary} />\n\n          {isNotNullishOrEmpty(emptyResultText) && (\n            <>\n              <Space height={8} />\n              <Text style={styles.emptyListText}>{emptyResultText}</Text>\n            </>\n          )}\n        </Box>\n      ),\n      [emptyResultText],\n    );\n\n    return (\n      <View style={style}>\n        <Pressable\n          id={id}\n          ref={inputRef}\n          aria-haspopup=\"listbox\"\n          role=\"button\"\n          aria-expanded={visible}\n          disabled={disabled}\n          onPress={open}\n          style={({ hovered, focused }) => [\n            styles.base,\n            hovered && styles.hovered,\n            (focused || visible) && styles.focused,\n            disabled && styles.disabled,\n            isNotNullish(error) && styles.errored,\n          ]}\n        >\n          <Box ref={selectedTagListRef} alignItems=\"center\" direction=\"row\" style={styles.tagsList}>\n            {selectedTags.length > 0 ? (\n              selectedTags.map(item => (\n                <Tag\n                  key={item.value}\n                  color={color}\n                  onPressRemove={disabled ? undefined : () => handleRemoveItem(item)}\n                  style={styles.tag}\n                >\n                  {item.label}\n                </Tag>\n              ))\n            ) : placeholder !== \"\" ? (\n              <Text role=\"label\" numberOfLines={1} style={styles.placeholder}>\n                {placeholder}\n              </Text>\n            ) : null}\n          </Box>\n\n          <Box direction=\"row\" alignItems=\"center\" style={styles.actions}>\n            {selectedTags.length >= 1 && !disabled && (\n              <>\n                <Pressable role=\"button\" onPress={handleClearAll}>\n                  <Icon name=\"dismiss-filled\" color={colors.gray.primary} size={15} />\n                </Pressable>\n\n                <Space width={8} />\n              </>\n            )}\n\n            <Icon\n              color={colors.gray.primary}\n              name={visible ? \"chevron-up-filled\" : \"chevron-down-filled\"}\n              size={20}\n            />\n          </Box>\n        </Pressable>\n\n        <Popover\n          role=\"listbox\"\n          matchReferenceWidth={true}\n          onDismiss={close}\n          referenceRef={inputRef}\n          returnFocus={true}\n          visible={visible}\n        >\n          <View style={styles.list}>\n            {enableGroups ? (\n              <SectionList\n                role=\"listbox\"\n                aria-multiselectable={true}\n                keyExtractor={(item, index) => `group-field-${item.value}-${index}`}\n                ListHeaderComponent={ListHeaderComponent}\n                ListEmptyComponent={ListEmptyComponent}\n                ListFooterComponent={<Space height={16} />}\n                sections={sections}\n                renderSectionHeader={({ title, data }) => (\n                  <Pressable\n                    role=\"listitem\"\n                    onPress={() => handleSelectGroup(data)}\n                    style={({ hovered, pressed, focused }) => [\n                      styles.groupTitleBase,\n                      (hovered || focused) && { backgroundColor: tint50 },\n                      pressed && { backgroundColor: tint100 },\n                    ]}\n                  >\n                    <Text numberOfLines={1} style={styles.groupTitle}>\n                      {title}\n                    </Text>\n\n                    {isNotNullish(renderTagGroup) && (\n                      <Tag color={color}>{renderTagGroup(data)}</Tag>\n                    )}\n                  </Pressable>\n                )}\n                renderItem={({ item }) => (\n                  <LineItem\n                    color={color}\n                    filter={filter}\n                    item={item}\n                    handleSelectItem={handleSelectItem}\n                    style={styles.lineInGroup}\n                  />\n                )}\n              />\n            ) : (\n              <FlatList\n                role=\"list\"\n                data={filteredItems}\n                keyExtractor={item => `field-${item.value}`}\n                ListHeaderComponent={ListHeaderComponent}\n                ListEmptyComponent={ListEmptyComponent}\n                ListFooterComponent={<Space height={8} />}\n                renderItem={({ item }) => (\n                  <LineItem\n                    color={color}\n                    filter={filter}\n                    item={item}\n                    handleSelectItem={handleSelectItem}\n                  />\n                )}\n              />\n            )}\n          </View>\n        </Popover>\n\n        <InputError message={error} />\n      </View>\n    );\n  },\n);\n\ntype LineItemProps = {\n  color: ColorVariants;\n  filter: string;\n  handleSelectItem: (item: MultiSelectItem) => void;\n  item: MultiSelectItem;\n  style?: StyleProp<TextStyle>;\n};\n\nconst LineItem = ({ item, color, filter, handleSelectItem, style }: LineItemProps) => {\n  const { label, disabled = false } = item;\n  const cleanFilter = filter.trim().toLowerCase();\n\n  const tint50 = colors[color][50];\n  const tint100 = colors[color][100];\n\n  const tokens = useMemo(\n    () => (disabled || cleanFilter === \"\" ? label : safeSplitAround(label, cleanFilter)),\n    [label, disabled, cleanFilter],\n  );\n\n  return (\n    <PressableText\n      role=\"listitem\"\n      disabled={disabled}\n      numberOfLines={1}\n      onPress={() => handleSelectItem(item)}\n      style={({ hovered, pressed }) => [\n        styles.line,\n        style,\n        hovered && { backgroundColor: tint50 },\n        pressed && { backgroundColor: tint100 },\n        disabled && { backgroundColor: colors.gray[50], color: colors.gray[100] },\n      ]}\n    >\n      {typeof tokens === \"string\"\n        ? tokens\n        : tokens.map((token, index) => {\n            const colored = token.toLowerCase() === cleanFilter;\n\n            if (!colored) {\n              return token;\n            }\n\n            return (\n              <Text key={index} style={{ color }}>\n                {token}\n              </Text>\n            );\n          })}\n    </PressableText>\n  );\n};\n"],"names":["styles","StyleSheet","colors","texts","InputError","message","style","jsx","LakeText","Space","SectionListWithRef","ItemSeparatorComponent","ListEmptyComponent","ListFooterComponent","ListHeaderComponent","contentContainerStyle","horizontal","keyExtractor","onEndReached","onEndReachedThresholdPx","onKeyDown","onScroll","renderItem","renderSectionHeader","role","scrollEventThrottle","sections","showsScrollIndicators","forwardedRef","groupId","useId","scrollTrackerRef","useRef","scrollTrackerStyle","useEffect","element","observer","entries","entry","jsxs","ScrollView","section","Fragment","item","index","View","SectionList","forwardRef","MAX_INPUT_HEIGHT","ITEM_ELEMENT_HEIGHT","NB_SUGGESTION_DISPLAYED","backgroundColor","radii","shadows","MultiSelect","memo","color","disabled","emptyResultText","enableGroups","filterPlaceholder","items","onValueChange","placeholder","renderTagGroup","error","values","id","filter","setFilter","useState","filterFocused","setFilterFocused","useBoolean","shouldScrollToBottomRef","selectedTagListRef","inputRef","visible","open","close","useDisclosure","tint50","tint100","top","_a","_b","handleSelectItem","handleRemoveItem","handleClearAll","handleSelectGroup","groupItems","newValue","valueItemMapping","useMemo","acc","selectedTags","value","isNotNullish","filteredItems","remainingTags","cleanedFilter","label","Array","Dict","groupBy","group","groupName","data","Option","Box","TextInput","filterValue","Icon","isNotNullishOrEmpty","Text","Pressable","hovered","focused","Tag","Popover","title","pressed","LineItem","FlatList","cleanFilter","tokens","safeSplitAround","PressableText","token"],"mappings":"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"}