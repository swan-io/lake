{"version":3,"file":"FixedListViewCells-CCqARV0k.js","sources":["../../../packages/lake/src/components/FixedListView.tsx","../../../packages/lake/src/components/FixedListViewCells.tsx"],"sourcesContent":["/**\n * ## FixedListView\n *\n * The FixedListView is a component designed to render big amounts of tabular data.\n *\n * For usability, the data can be display in three types of columns:\n *\n * - Sticked to start columns (usually the main identifier, always visible)\n * - Center columns (scrollable columns, with additional information)\n * - Sticked to end columns (so that some actions are always accesible at the end of each line)\n *\n * ┌────────────────────────────────────────────────────────────────────────────────────────┐\n * │ ┌────────────────┐ ┌────────────────────────────────────────┐ ┌────────────────┐       │\n * │ │ ╔════════════╗ │ │ ╔════════════════════════════════════╗ │ │ ╔════════════╗ │       │\n * │ │ ║   Header   ║ │ │ ║               Header               ║ │ │ ║   Header   ║ │ ▲     │\n * │ │ ║            ║ │ │ ║◀──────────────────────────────────▶║ │ │ ║            ║ │ │     │\n * │ │ ╚════════════╝ │ │ ╚════════════════════════════════════╝ │ │ ╚════════════╝ │ │     │\n * │ │                │ │                                        │ │                │ │     │\n * │ │ ┌───────────┐  │ │ ┌────────────────────────────────────┐ │ │ ┌────────────┐ │ │     │\n * │ │ │  Cell A1  │──┼─┼▷│              Cell B1               ├─┼─┼─▷  Cell C1   │ │ │     │\n * │ │ └───────────┘  │ │ └────────────────────────────────────┘ │ │ └────────────┘ │ │     │\n * │ │ ┌───────────┐  │ │ ┌────────────────────────────────────┐ │ │ ┌────────────┐ │ │     │\n * │ │ │  Cell A2  │──┼─┼▷│              Cell B2               │─┼─┼─▷  Cell C2   │ │ │     │\n * │ │ └───────────┘  │ │ └────────────────────────────────────┘ │ │ └────────────┘ │ │     │\n * │ │                │ │                                        │ │                │ │     │\n * │ │                │ │ ◀────────────────────────────────────▶ │ │                │ ▼     │\n * └─┴────────────────┴─┴────────────────────────────────────────┴─┴────────────────┴───────┘\n *\n * ╔════╗\n * ║    ║   Sticky\n * ╚════╝\n * ◀────▶   Scrollable\n * ─────▷   Emulated tab order\n *\n */\nimport {\n  cloneElement,\n  Fragment,\n  memo,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  LayoutChangeEvent,\n  NativeScrollEvent,\n  NativeSyntheticEvent,\n  ScrollView,\n  StyleSheet,\n  View,\n  ViewProps,\n} from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { v4 as uuid } from \"uuid\";\nimport {\n  backgroundColor,\n  colors,\n  invariantColors,\n  radii,\n  shadows,\n  spacings,\n} from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { getFocusableElements } from \"../utils/a11y\";\nimport { first, last, sortedIndexOf } from \"../utils/array\";\nimport { noop } from \"../utils/function\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { BorderedIcon } from \"./BorderedIcon\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeHeading } from \"./LakeHeading\";\nimport { LakeText } from \"./LakeText\";\nimport { Space } from \"./Space\";\n\nexport type ColumnTitleConfig<ExtraInfo> = {\n  title: string;\n  extraInfo: ExtraInfo;\n  id: string;\n};\n\nexport type ColumnCellConfig<T, ExtraInfo> = {\n  columnId: string;\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n  isHovered: boolean;\n};\n\nexport type LinkConfig<T, ExtraInfo> = {\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n};\n\nexport type ColumnConfig<T, ExtraInfo> = {\n  id: string;\n  width: number;\n  title: string;\n  renderTitle: (props: ColumnTitleConfig<ExtraInfo>) => ReactNode;\n  renderCell: (props: ColumnCellConfig<T, ExtraInfo>) => ReactNode;\n};\n\ntype Mode = \"tile\" | \"plain\";\n\nexport type FixedListViewProps<T, ExtraInfo> = {\n  mode?: Mode;\n  data: T[];\n  keyExtractor: (item: T, index: number) => string;\n  highlightedRowId?: string;\n  headerBackgroundColor?: string;\n  headerHeight: number;\n  rowHeight: number;\n  rowVerticalSpacing: number;\n  horizontalPadding?: number;\n  extraInfo: ExtraInfo;\n  stickedToStartColumns?: ColumnConfig<T, ExtraInfo>[];\n  columns: ColumnConfig<T, ExtraInfo>[];\n  stickedToEndColumns?: ColumnConfig<T, ExtraInfo>[];\n  renderThreshold?: number;\n  onEndReached?: () => void;\n  onEndReachedThresholdPx?: number;\n  getRowLink?: (config: LinkConfig<T, ExtraInfo>) => ReactElement | undefined;\n  renderEmptyList?: () => ReactNode;\n  loading?: {\n    isLoading: boolean;\n    count: number;\n  };\n};\n\nconst HORIZONTAL_SAFE_AREA = 10;\nexport const SCROLLBAR_RESERVED_SPACE = 20;\n\nconst styles = StyleSheet.create({\n  root: {\n    height: 1,\n    alignSelf: \"stretch\",\n    flexGrow: 1,\n  },\n  container: {\n    height: 1,\n    alignSelf: \"stretch\",\n    flexGrow: 1,\n  },\n  containerTile: {\n    marginHorizontal: -HORIZONTAL_SAFE_AREA,\n  },\n  contentContainer: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    flexGrow: 1,\n  },\n  scrollContentContainer: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  centerColumnsContainer: {\n    width: 1,\n    flexGrow: 1,\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n  },\n  centerColumns: {\n    flexGrow: 1,\n  },\n  centerColumnsContentContainer: {\n    flexDirection: \"column\",\n    flexGrow: 1,\n  },\n  stickyColumn: {\n    flexGrow: 0,\n    zIndex: 1,\n  },\n  stickyColumnStartOverflow: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    right: \"100%\",\n  },\n  stickyColumnEndOverflow: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    left: \"100%\",\n  },\n  rowSegment: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    display: \"flex\",\n    flexGrow: 1,\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n    overflow: \"hidden\",\n  },\n  headingSegment: {\n    position: \"sticky\",\n    top: 0,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    zIndex: 2,\n  },\n  segment: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    overflow: \"hidden\",\n  },\n  segmentOverflow: {\n    overflow: \"hidden\",\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  visibleGradient: {\n    opacity: 1,\n  },\n  leftToRightGradient: {\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    height: \"100%\",\n    width: 10,\n    backgroundImage: \"linear-gradient(to right, rgba(0, 0, 0, 0.06), rgba(0, 0, 0, 0))\",\n    opacity: 0,\n    transition: \"150ms ease-in-out opacity\",\n    pointerEvents: \"none\",\n  },\n  rightToLeftGradient: {\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n    height: \"100%\",\n    width: 10,\n    backgroundImage: \"linear-gradient(to left, rgba(0, 0, 0, 0.06), rgba(0, 0, 0, 0))\",\n    opacity: 0,\n    transition: \"150ms ease-in-out opacity\",\n    pointerEvents: \"none\",\n  },\n  horizontalScrollbar: {\n    position: \"sticky\",\n    bottom: 0,\n    borderBottomWidth: 5,\n    borderBottomColor: invariantColors.transparent,\n    flexGrow: 0,\n    height: SCROLLBAR_RESERVED_SPACE,\n  },\n  cell: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  evenRow: {\n    backgroundColor: backgroundColor.accented,\n  },\n  oddRow: {\n    backgroundColor: backgroundColor.default,\n  },\n  rowShadow: {\n    boxShadow: shadows.tile,\n  },\n  hoveredRowShadow: {\n    boxShadow: shadows.tileHover,\n  },\n  highlightedRow: {\n    borderColor: colors.current.primary,\n    borderWidth: 1,\n  },\n  segmentHeaderCell: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    alignItems: \"center\",\n  },\n  rowBackground: {\n    borderRadius: radii[4],\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rowPlainBackground: {\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rowBackgroundContainer: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    justifyContent: \"center\",\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rowBackgroundContainerPlain: {\n    left: -10,\n    right: -10,\n    boxShadow: `inset 0 -1px ${colors.gray[100]}`,\n  },\n  backgroundRows: {\n    position: \"absolute\",\n    left: HORIZONTAL_SAFE_AREA,\n    right: HORIZONTAL_SAFE_AREA,\n    top: 0,\n    bottom: 0,\n  },\n  placeholderRowContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    top: 0,\n    left: 20,\n    right: 20,\n    animationKeyframes: {\n      \"50%\": {\n        opacity: 0.6,\n      },\n    },\n    animationDuration: \"2000ms\",\n    animationTimingFunction: \"linear\",\n    animationIterationCount: \"infinite\",\n  },\n  placeholderRowContainerPlain: {\n    left: 10,\n  },\n  placeholderRow: {\n    height: 14,\n    width: \"30%\",\n    backgroundColor: colors.gray[200],\n    borderRadius: radii[6],\n  },\n  placeholderRowEnd: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  smallPlaceholderRow: {\n    width: \"10%\",\n  },\n  centerSegmentContainer: {\n    flexGrow: 1,\n  },\n  rowLeftRadii: {\n    borderTopLeftRadius: radii[4],\n    borderBottomLeftRadius: radii[4],\n  },\n  rowRightRadii: {\n    borderTopRightRadius: radii[4],\n    borderBottomRightRadius: radii[4],\n  },\n  emptyListContainer: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: backgroundColor.default,\n  },\n  emptyListContentContainer: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: spacings[48],\n    minHeight: \"100%\",\n  },\n  emptyList: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  loadingPlaceholder: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n  },\n  topGradient: {\n    height: 30,\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: \"100%\",\n    backgroundImage: `linear-gradient(to bottom, ${backgroundColor.default}, ${backgroundColor.defaultTransparent})`,\n    opacity: 0,\n    transition: \"200ms ease-in-out opacity\",\n    pointerEvents: \"none\",\n  },\n  visibleTopGradient: {\n    opacity: 1,\n  },\n});\n\ntype RowBackgroundProps = {\n  absoluteIndex: number;\n  id: string;\n  isHovered: boolean;\n  isHighlighted: boolean;\n  top: number;\n  rowVerticalSpacing: number;\n  rowHeight: number;\n  onMouseEnter: (id: string) => void;\n  onMouseLeave: () => void;\n  mode: Mode;\n};\n\nconst RowBackground = ({\n  absoluteIndex,\n  id,\n  isHovered,\n  isHighlighted,\n  top,\n  rowHeight,\n  rowVerticalSpacing,\n  onMouseEnter,\n  onMouseLeave,\n  mode,\n}: RowBackgroundProps) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart: () => onMouseEnter(id),\n    onHoverEnd: () => onMouseLeave(),\n  });\n\n  return (\n    <View\n      style={[\n        styles.rowBackgroundContainer,\n        mode === \"plain\" && styles.rowBackgroundContainerPlain,\n        { top, paddingVertical: rowVerticalSpacing / 2 },\n      ]}\n      ref={containerRef}\n    >\n      {mode === \"tile\" ? (\n        <View\n          style={[\n            styles.rowBackground,\n            isHovered ? styles.hoveredRowShadow : styles.rowShadow,\n            isHighlighted && styles.highlightedRow,\n            absoluteIndex % 2 === 0 ? styles.evenRow : styles.oddRow,\n            { height: rowHeight },\n          ]}\n        />\n      ) : (\n        <View style={[styles.rowPlainBackground, { height: rowHeight }]} />\n      )}\n    </View>\n  );\n};\n\nconst MemoizedRowBackground = memo<RowBackgroundProps>(RowBackground);\n\ntype RowSegmentProps<T, ExtraInfo> = {\n  mode?: Mode;\n  columns: ColumnConfig<T, ExtraInfo>[];\n  item: T;\n  style: ViewProps[\"style\"];\n  absoluteIndex: number;\n  viewId: string;\n  segmentColumn: \"start\" | \"center\" | \"end\";\n  width: number;\n  rowVerticalSpacing: number;\n  onMouseEnter: (id: string) => void;\n  onMouseLeave: () => void;\n  id: string;\n  isHovered: boolean;\n  onEndReached?: () => void;\n  extraInfo: ExtraInfo;\n  createRowWrapper: (props: {\n    item: T;\n    absoluteIndex: number;\n    extraInfo: ExtraInfo;\n  }) => ReactElement;\n  focusId: string;\n  top: number;\n  totalRowHeight: number;\n  minWidth?: number;\n};\n\nconst SEGMENTS_MAP = {\n  start: \"0\",\n  center: \"1\",\n  end: \"2\",\n};\n\nconst RowSegment = <T, ExtraInfo>({\n  columns,\n  item,\n  style,\n  absoluteIndex,\n  viewId,\n  segmentColumn,\n  rowVerticalSpacing,\n  width,\n  id,\n  isHovered,\n  extraInfo,\n  onMouseEnter,\n  onMouseLeave,\n  createRowWrapper,\n  focusId,\n  top,\n  totalRowHeight,\n  minWidth,\n}: RowSegmentProps<T, ExtraInfo>) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart: () => onMouseEnter(id),\n    onHoverEnd: () => onMouseLeave(),\n  });\n\n  const wrapper = createRowWrapper({ item, absoluteIndex, extraInfo });\n\n  return cloneElement(\n    wrapper,\n    {\n      id: focusId,\n      tabIndex: 0,\n      style: [\n        styles.rowSegment,\n        {\n          top,\n          height: totalRowHeight,\n          width: isNullish(minWidth) ? width : undefined,\n          minWidth,\n        },\n      ],\n    },\n    <View\n      style={[\n        styles.segment,\n        { width, paddingVertical: rowVerticalSpacing / 2 },\n        segmentColumn === \"center\" && styles.centerSegmentContainer,\n        segmentColumn === \"start\" && {\n          borderTopLeftRadius: radii[4],\n          borderBottomLeftRadius: radii[4],\n        },\n        segmentColumn === \"end\" && {\n          borderTopRightRadius: radii[4],\n          borderBottomRightRadius: radii[4],\n        },\n      ]}\n      ref={containerRef}\n      aria-hidden={false}\n    >\n      <View style={[styles.segmentOverflow, style]}>\n        {columns.map(({ id, width, renderCell }, index) => {\n          const columnId = `${viewId}_${id}`;\n          const paddedIndex = String(absoluteIndex).padStart(10, \"0\");\n          const paddedCellIndex = String(index).padStart(10, \"0\");\n\n          // The reason we use this shape is so that the IDs alphabetical order matches the semantical one:\n          // 1. Row index\n          // 2. Column index\n          // 3. Cell index\n          // -> See the `onKeyDown` handler\n          const focusId = `${viewId}__Row_${paddedIndex}_Segment_${SEGMENTS_MAP[segmentColumn]}_Cell_${paddedCellIndex}`;\n\n          return (\n            <View\n              style={[styles.cell, { width }]}\n              key={columnId}\n              aria-describedby={columnId}\n              id={focusId}\n            >\n              {renderCell({ columnId, item, index: absoluteIndex, extraInfo, isHovered })}\n            </View>\n          );\n        })}\n      </View>\n    </View>,\n  );\n};\n\nconst MemoizedRowSegment = memo(RowSegment) as typeof RowSegment;\n\ntype HeaderSegmentProps<T, ExtraInfo> = {\n  columns: ColumnConfig<T, ExtraInfo>[];\n  viewId: string;\n  extraInfo: ExtraInfo;\n  width: number;\n};\n\nconst HeaderSegment = <T, ExtraInfo>({\n  columns,\n  viewId,\n  extraInfo,\n  width,\n}: HeaderSegmentProps<T, ExtraInfo>) => {\n  return (\n    <View style={[styles.segment, { width }]}>\n      {columns.map(({ id, width, title, renderTitle }) => {\n        const columnId = `${viewId}_${id}`;\n\n        return (\n          <View style={[styles.segmentHeaderCell, { width }]} id={columnId} key={columnId}>\n            {renderTitle({ title, extraInfo, id })}\n          </View>\n        );\n      })}\n    </View>\n  );\n};\n\nconst findNextFocusableElement = (\n  sortedCellIds: string[],\n  currentCellIndex: number,\n  direction: -1 | 1,\n) => {\n  let index = currentCellIndex + direction;\n\n  while (index >= 0 && index < sortedCellIds.length) {\n    const nextCellId = sortedCellIds[index];\n\n    if (isNotNullish(nextCellId)) {\n      const previousCell = document.getElementById(nextCellId);\n\n      if (isNotNullish(previousCell)) {\n        const focusableElements = getFocusableElements(previousCell, false);\n        const nextFocusableElement =\n          direction === -1 ? last(focusableElements) : first(focusableElements);\n\n        if (isNotNullish(nextFocusableElement)) {\n          return nextFocusableElement;\n        }\n      }\n    }\n    index = index + direction;\n  }\n};\n\nconst EMPTY_COLUMNS: ColumnConfig<unknown, unknown>[] = [];\nconst ZERO = 0;\n\nexport const FixedListView = <T, ExtraInfo>({\n  data: originalData,\n  mode = \"tile\",\n  keyExtractor,\n  highlightedRowId,\n  rowHeight,\n  rowVerticalSpacing,\n  horizontalPadding = HORIZONTAL_SAFE_AREA,\n  headerBackgroundColor = backgroundColor.default,\n  headerHeight,\n  renderThreshold = 1000,\n  stickedToStartColumns: initialStickedToStartColumns = EMPTY_COLUMNS,\n  columns: initialColumns,\n  stickedToEndColumns: initialStickedToEndColumns = EMPTY_COLUMNS,\n  extraInfo,\n  onEndReached,\n  onEndReachedThresholdPx = 200,\n  getRowLink,\n  renderEmptyList,\n  loading,\n}: FixedListViewProps<T, ExtraInfo>) => {\n  const [viewId] = useState(() => uuid());\n  // Those three refs are used to synchronize the horizontal scroll in the center columns\n  const centerHeadersRef = useRef<ScrollView | null>(null);\n  const centerColumnsRef = useRef<ScrollView | null>(null);\n  const horizontalScrollbarRef = useRef<ScrollView | null>(null);\n  const totalRowHeight = rowHeight + rowVerticalSpacing;\n  const rowsHeight = originalData.length * totalRowHeight;\n  const totalHeight = headerHeight + rowsHeight;\n  // It might seem off to use the range in state instead of storing scroll/layout and deriving it,\n  // but it saves a lot of render phases by allowing to bail out from rendering when the range doesn't change\n  const [\n    {\n      data,\n      range: [renderedRangeStartIndex, renderedRangeEndIndex],\n    },\n    setDataAndRenderRange,\n  ] = useState({ data: originalData, range: [0, 20] });\n\n  const startFocusAnchorRef = useRef<View | null>(null);\n  const endFocusAnchorRef = useRef<View | null>(null);\n\n  const [hasHorizontalScroll, setHasHorizontalScroll] = useState(false);\n  const [shouldAvoidStickyColumns, setShouldAvoidStickyColumns] = useState(false);\n  const [shouldShowStartGradient, setShouldShowStartGradient] = useState(false);\n  const [shouldShowEndGradient, setShouldShowEndGradient] = useState(true);\n  const [hoveredRow, setHoveredRow] = useState<string | undefined>(undefined);\n  const currentScrollY = useRef(0);\n  const lastKnownHeight = useRef(0);\n\n  const { stickedToStartColumns, columns, stickedToEndColumns } = useMemo(() => {\n    if (shouldAvoidStickyColumns) {\n      return {\n        stickedToStartColumns: [],\n        columns: [\n          ...initialStickedToStartColumns,\n          ...initialColumns,\n          ...initialStickedToEndColumns,\n        ],\n        stickedToEndColumns: [],\n      };\n    } else {\n      return {\n        stickedToStartColumns: initialStickedToStartColumns,\n        columns: initialColumns,\n        stickedToEndColumns: initialStickedToEndColumns,\n      };\n    }\n  }, [\n    initialStickedToStartColumns,\n    initialColumns,\n    initialStickedToEndColumns,\n    shouldAvoidStickyColumns,\n  ]);\n\n  const [isScrolled, setIsScrolled] = useState(false);\n\n  const removeHoveredRow = useCallback(() => {\n    setHoveredRow(undefined);\n  }, []);\n\n  const initialStickedToStartColumnsWidth = useMemo(\n    () => initialStickedToStartColumns.reduce((total, { width }) => total + width, 0),\n    [initialStickedToStartColumns],\n  );\n\n  const initialStickedToEndColumnsWidth = useMemo(\n    () => initialStickedToEndColumns.reduce((total, { width }) => total + width, 0),\n    [initialStickedToEndColumns],\n  );\n\n  const stickedToStartColumnsWidth = useMemo(\n    () => stickedToStartColumns.reduce((total, { width }) => total + width, 0),\n    [stickedToStartColumns],\n  );\n\n  const stickedToEndColumnsWidth = useMemo(\n    () => stickedToEndColumns.reduce((total, { width }) => total + width, 0),\n    [stickedToEndColumns],\n  );\n\n  const centerColumnsWidth = useMemo(\n    () => columns.reduce((total, { width }) => total + width, 0),\n    [columns],\n  );\n\n  const centerSegmentStyle = useMemo(\n    () => [\n      stickedToStartColumns.length === 0 && styles.rowLeftRadii,\n      stickedToEndColumns.length === 0 && styles.rowRightRadii,\n    ],\n    [stickedToStartColumns, stickedToEndColumns],\n  );\n\n  const createRowWrapper = useCallback(\n    ({\n      item,\n      absoluteIndex,\n      extraInfo,\n    }: {\n      item: T;\n      absoluteIndex: number;\n      extraInfo: ExtraInfo;\n    }) => {\n      const customLinkElement = getRowLink?.({ item, index: absoluteIndex, extraInfo });\n      return isNullish(customLinkElement) ? <View /> : customLinkElement;\n    },\n    [getRowLink],\n  );\n\n  const [backgroundRows, startRows, centerRows, endRows] = useMemo(() => {\n    const length = Math.max(0, renderedRangeEndIndex - renderedRangeStartIndex);\n\n    const backgroundRows = Array(length) as ReactNode[];\n    const startRows = Array(length) as ReactNode[];\n    const centerRows = Array(length) as ReactNode[];\n    const endRows = Array(length) as ReactNode[];\n\n    let index = -1;\n\n    while (++index < length) {\n      const absoluteIndex = renderedRangeStartIndex + index;\n      const item = data[absoluteIndex];\n\n      if (isNullish(item)) {\n        continue;\n      }\n\n      const key = keyExtractor(item, absoluteIndex);\n      const top = absoluteIndex * totalRowHeight;\n      const isHoveredRow = hoveredRow === key;\n      const isHighlightedRow = highlightedRowId === key;\n\n      const paddedIndex = String(absoluteIndex).padStart(10, \"0\");\n      const focusId = `${viewId}__Row_${paddedIndex}`;\n\n      backgroundRows[index] = (\n        <MemoizedRowBackground\n          key={key}\n          mode={mode}\n          isHovered={isHoveredRow}\n          isHighlighted={isHighlightedRow}\n          absoluteIndex={absoluteIndex}\n          top={top}\n          id={key}\n          rowHeight={rowHeight}\n          rowVerticalSpacing={rowVerticalSpacing}\n          onMouseEnter={setHoveredRow}\n          onMouseLeave={removeHoveredRow}\n        />\n      );\n\n      if (stickedToStartColumns.length > 0) {\n        startRows[index] = (\n          <MemoizedRowSegment<T, ExtraInfo>\n            key={key}\n            createRowWrapper={createRowWrapper}\n            focusId={focusId}\n            top={top}\n            totalRowHeight={totalRowHeight}\n            id={key}\n            style={styles.rowLeftRadii}\n            onMouseEnter={setHoveredRow}\n            onMouseLeave={removeHoveredRow}\n            segmentColumn=\"start\"\n            columns={stickedToStartColumns}\n            width={stickedToStartColumnsWidth}\n            item={item}\n            absoluteIndex={absoluteIndex}\n            rowVerticalSpacing={rowVerticalSpacing}\n            viewId={viewId}\n            isHovered={isHoveredRow}\n            extraInfo={extraInfo}\n          />\n        );\n      }\n\n      centerRows[index] = (\n        <MemoizedRowSegment<T, ExtraInfo>\n          key={key}\n          mode={mode}\n          createRowWrapper={createRowWrapper}\n          focusId={focusId}\n          top={top}\n          totalRowHeight={totalRowHeight}\n          minWidth={centerColumnsWidth}\n          id={key}\n          style={centerSegmentStyle}\n          onMouseEnter={setHoveredRow}\n          onMouseLeave={removeHoveredRow}\n          segmentColumn=\"center\"\n          columns={columns}\n          width={centerColumnsWidth}\n          item={item}\n          absoluteIndex={absoluteIndex}\n          rowVerticalSpacing={rowVerticalSpacing}\n          viewId={viewId}\n          isHovered={isHoveredRow}\n          extraInfo={extraInfo}\n        />\n      );\n\n      if (stickedToEndColumns.length > 0) {\n        endRows[index] = (\n          <MemoizedRowSegment<T, ExtraInfo>\n            key={key}\n            createRowWrapper={createRowWrapper}\n            focusId={focusId}\n            top={top}\n            totalRowHeight={totalRowHeight}\n            id={key}\n            style={styles.rowLeftRadii}\n            onMouseEnter={setHoveredRow}\n            onMouseLeave={removeHoveredRow}\n            segmentColumn=\"end\"\n            columns={stickedToEndColumns}\n            width={stickedToEndColumnsWidth}\n            item={item}\n            absoluteIndex={absoluteIndex}\n            rowVerticalSpacing={rowVerticalSpacing}\n            viewId={viewId}\n            isHovered={isHoveredRow}\n            extraInfo={extraInfo}\n          />\n        );\n      }\n    }\n\n    return [backgroundRows, startRows, centerRows, endRows];\n  }, [\n    data,\n    renderedRangeStartIndex,\n    renderedRangeEndIndex,\n    keyExtractor,\n    highlightedRowId,\n    rowHeight,\n    totalRowHeight,\n    columns,\n    stickedToEndColumns,\n    stickedToStartColumns,\n    viewId,\n    stickedToStartColumnsWidth,\n    centerColumnsWidth,\n    stickedToEndColumnsWidth,\n    hoveredRow,\n    rowVerticalSpacing,\n    extraInfo,\n    removeHoveredRow,\n    centerSegmentStyle,\n    createRowWrapper,\n    mode,\n  ]);\n\n  // Used to fix some scrollbar behavior. See `main.css`.\n  useLayoutEffect(() => {\n    if (centerHeadersRef.current instanceof Element) {\n      centerHeadersRef.current.setAttribute(\"data-hide-scrollbar\", String(true));\n    }\n    if (centerColumnsRef.current instanceof Element) {\n      centerColumnsRef.current.setAttribute(\"data-hide-scrollbar\", String(true));\n    }\n    if (horizontalScrollbarRef.current instanceof Element) {\n      horizontalScrollbarRef.current.setAttribute(\"data-force-scrollbar\", String(true));\n    }\n  }, []);\n\n  // To synchronize scrolls, we keep track of the initiator in order to ignore the scroll events\n  // we provoke ourselves with the sync.\n  const lastHorizontalScroll = useRef<{\n    initiator: \"headers\" | \"columns\" | \"scrollbar\";\n    date: number;\n  }>({\n    initiator: \"columns\",\n    date: 0,\n  });\n\n  useEffect(() => {\n    if (\n      isNotNullish(centerHeadersRef.current) &&\n      isNotNullish(centerColumnsRef.current) &&\n      isNotNullish(horizontalScrollbarRef.current)\n    ) {\n      const SCROLL_THRESHOLD_MS = 500;\n      const centerColumns = centerColumnsRef.current as unknown as HTMLElement;\n      const centerHeaders = centerHeadersRef.current as unknown as HTMLElement;\n      const horizontalScrollbar = horizontalScrollbarRef.current as unknown as HTMLElement;\n      const onColumnsScroll = () => {\n        const now = Date.now();\n        if (\n          lastHorizontalScroll.current.initiator === \"columns\" ||\n          now - lastHorizontalScroll.current.date > SCROLL_THRESHOLD_MS\n        ) {\n          const scrollLeft = centerColumns.scrollLeft;\n          setShouldShowStartGradient(scrollLeft > 0);\n          setShouldShowEndGradient(\n            centerColumns.scrollWidth - horizontalPadding * 2 >=\n              scrollLeft + centerColumns.clientWidth,\n          );\n          centerHeaders.scrollLeft = scrollLeft;\n          horizontalScrollbar.scrollLeft = scrollLeft;\n          lastHorizontalScroll.current = { initiator: \"columns\", date: now };\n        }\n      };\n      const onHeadersScroll = () => {\n        const now = Date.now();\n        if (\n          lastHorizontalScroll.current.initiator === \"headers\" ||\n          now - lastHorizontalScroll.current.date > SCROLL_THRESHOLD_MS\n        ) {\n          const scrollLeft = centerHeaders.scrollLeft;\n          setShouldShowStartGradient(scrollLeft > 0);\n          setShouldShowEndGradient(\n            centerHeaders.scrollWidth - horizontalPadding * 2 >=\n              scrollLeft + centerHeaders.clientWidth,\n          );\n          centerColumns.scrollLeft = scrollLeft;\n          horizontalScrollbar.scrollLeft = scrollLeft;\n          lastHorizontalScroll.current = { initiator: \"headers\", date: now };\n        }\n      };\n      const onScrollbarScroll = () => {\n        const now = Date.now();\n        if (\n          lastHorizontalScroll.current.initiator === \"scrollbar\" ||\n          now - lastHorizontalScroll.current.date > SCROLL_THRESHOLD_MS\n        ) {\n          const scrollLeft = horizontalScrollbar.scrollLeft;\n          setShouldShowStartGradient(scrollLeft > 0);\n          setShouldShowEndGradient(\n            horizontalScrollbar.scrollWidth - horizontalPadding * 2 >=\n              scrollLeft + horizontalScrollbar.clientWidth,\n          );\n          centerHeaders.scrollLeft = scrollLeft;\n          centerColumns.scrollLeft = scrollLeft;\n          lastHorizontalScroll.current = { initiator: \"scrollbar\", date: now };\n        }\n      };\n      centerColumns.addEventListener(\"scroll\", onColumnsScroll, { passive: true });\n      centerHeaders.addEventListener(\"scroll\", onHeadersScroll, { passive: true });\n      horizontalScrollbar.addEventListener(\"scroll\", onScrollbarScroll, { passive: true });\n      return () => {\n        centerColumns.removeEventListener(\"scroll\", onColumnsScroll);\n        centerHeaders.removeEventListener(\"scroll\", onHeadersScroll);\n        horizontalScrollbar.removeEventListener(\"scroll\", onScrollbarScroll);\n      };\n    }\n  }, [horizontalPadding]);\n\n  const onKeyDown = useCallback(\n    (event: NativeSyntheticEvent<React.KeyboardEvent>) => {\n      const target = event.nativeEvent.target as Element;\n      const currentTarget = event.nativeEvent.currentTarget;\n      const currentCell = target.closest(`[id^=\"${viewId}__Row\"]`);\n      const currentCellId = currentCell?.id;\n      if (event.nativeEvent.key === \"Tab\" && isNotNullish(currentCell)) {\n        const focusableElements = getFocusableElements(currentCell, false);\n        const firstFocusableElement = first(focusableElements);\n        const lastFocusableElement = last(focusableElements);\n        const sortedCellIds = Array.from(\n          currentTarget.querySelectorAll(`[id^=\"${viewId}__Row\"]`),\n          item => item.id,\n        ).sort();\n        const currentCellIndex = sortedIndexOf(sortedCellIds, currentCellId);\n        const isTargetFirst = isNullish(firstFocusableElement) || firstFocusableElement === target;\n        const isTargetLast = isNullish(lastFocusableElement) || lastFocusableElement === target;\n        if (isTargetFirst && event.nativeEvent.shiftKey && first(sortedCellIds) !== currentCellId) {\n          const lastFocusableElement = findNextFocusableElement(\n            sortedCellIds,\n            currentCellIndex,\n            -1,\n          );\n          if (isNotNullish(lastFocusableElement)) {\n            event.preventDefault();\n            lastFocusableElement.focus();\n          } else {\n            event.preventDefault();\n            startFocusAnchorRef.current?.focus();\n          }\n        }\n        if (isTargetLast && !event.nativeEvent.shiftKey && last(sortedCellIds) !== currentCellId) {\n          const firstFocusableElement = findNextFocusableElement(\n            sortedCellIds,\n            currentCellIndex,\n            1,\n          );\n          if (isNotNullish(firstFocusableElement)) {\n            event.preventDefault();\n            firstFocusableElement.focus();\n          } else {\n            event.preventDefault();\n            endFocusAnchorRef.current?.focus();\n          }\n        }\n      }\n    },\n    [viewId],\n  );\n\n  useLayoutEffect(() => {\n    const renderedRangeStartIndex = Math.max(\n      0,\n      Math.floor((currentScrollY.current - renderThreshold) / totalRowHeight),\n    );\n\n    const renderedRangeEndIndex = Math.min(\n      originalData.length,\n      renderedRangeStartIndex +\n        Math.ceil((lastKnownHeight.current + renderThreshold * 2) / totalRowHeight),\n    );\n    setDataAndRenderRange(prevRenderRange => {\n      const {\n        data,\n        range: [prevRenderedRangeStartIndex, prevRenderedRangeEndIndex],\n      } = prevRenderRange;\n      if (\n        prevRenderedRangeStartIndex === renderedRangeStartIndex &&\n        prevRenderedRangeEndIndex === renderedRangeEndIndex &&\n        data === originalData\n      ) {\n        return prevRenderRange;\n      }\n      return { data: originalData, range: [renderedRangeStartIndex, renderedRangeEndIndex] };\n    });\n  }, [originalData, renderThreshold, totalRowHeight]);\n\n  const onLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { height, width },\n      },\n    }: LayoutChangeEvent) => {\n      lastKnownHeight.current = height;\n      const renderedRangeStartIndex = Math.max(\n        0,\n        Math.floor((currentScrollY.current - renderThreshold) / totalRowHeight),\n      );\n      const renderedRangeEndIndex = Math.min(\n        originalData.length,\n        renderedRangeStartIndex + Math.ceil((height + renderThreshold * 2) / totalRowHeight),\n      );\n      setDataAndRenderRange(prevRenderRange => {\n        const {\n          data,\n          range: [prevRenderedRangeStartIndex, prevRenderedRangeEndIndex],\n        } = prevRenderRange;\n        if (\n          prevRenderedRangeStartIndex === renderedRangeStartIndex &&\n          prevRenderedRangeEndIndex === renderedRangeEndIndex &&\n          data === originalData\n        ) {\n          return prevRenderRange;\n        }\n        return { data: originalData, range: [renderedRangeStartIndex, renderedRangeEndIndex] };\n      });\n\n      if (\n        isNotNullish(onEndReached) &&\n        !hasEndReachedBeenCalled.current &&\n        height >= totalHeight - onEndReachedThresholdPx\n      ) {\n        hasEndReachedBeenCalled.current = true;\n        onEndReached();\n      }\n      setShouldAvoidStickyColumns(\n        width - (initialStickedToStartColumnsWidth + initialStickedToEndColumnsWidth) < 300,\n      );\n    },\n    [\n      originalData,\n      renderThreshold,\n      totalRowHeight,\n      onEndReached,\n      onEndReachedThresholdPx,\n      totalHeight,\n      initialStickedToStartColumnsWidth,\n      initialStickedToEndColumnsWidth,\n    ],\n  );\n\n  const scrollTimeoutRef = useRef<number | undefined>(undefined);\n  const scrollContentsRef = useRef<View | null>(null);\n\n  const hasEndReachedBeenCalled = useRef(false);\n\n  useEffect(() => {\n    if (\n      isNotNullish(onEndReached) &&\n      !hasEndReachedBeenCalled.current &&\n      lastKnownHeight.current >= totalHeight - onEndReachedThresholdPx\n    ) {\n      hasEndReachedBeenCalled.current = true;\n      onEndReached();\n      return;\n    }\n\n    hasEndReachedBeenCalled.current = false;\n  }, [data, onEndReached, onEndReachedThresholdPx, totalHeight]);\n\n  const onScroll = useCallback(\n    ({\n      nativeEvent: {\n        contentOffset: { y },\n        layoutMeasurement: { height },\n        contentSize: { height: contentHeight },\n      },\n    }: NativeSyntheticEvent<NativeScrollEvent>) => {\n      setIsScrolled(y > 0);\n\n      lastKnownHeight.current = height;\n      currentScrollY.current = y;\n      if (isNotNullish(scrollTimeoutRef.current)) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n      if (scrollContentsRef.current instanceof HTMLElement) {\n        scrollContentsRef.current.style.pointerEvents = \"none\";\n      }\n      scrollTimeoutRef.current = window.setTimeout(() => {\n        if (scrollContentsRef.current instanceof HTMLElement) {\n          scrollContentsRef.current.style.pointerEvents = \"auto\";\n        }\n      }, 100);\n\n      const renderedRangeStartIndex = Math.max(\n        0,\n        Math.floor((currentScrollY.current - renderThreshold) / totalRowHeight),\n      );\n\n      const renderedRangeEndIndex = Math.min(\n        data.length,\n        renderedRangeStartIndex + Math.ceil((height + renderThreshold * 2) / totalRowHeight),\n      );\n\n      setDataAndRenderRange(prevRenderRange => {\n        const {\n          data,\n          range: [prevRenderedRangeStartIndex, prevRenderedRangeEndIndex],\n        } = prevRenderRange;\n\n        return prevRenderedRangeStartIndex === renderedRangeStartIndex &&\n          prevRenderedRangeEndIndex === renderedRangeEndIndex &&\n          data === data\n          ? prevRenderRange\n          : { data, range: [renderedRangeStartIndex, renderedRangeEndIndex] };\n      });\n\n      if (\n        isNotNullish(onEndReached) &&\n        !hasEndReachedBeenCalled.current &&\n        y + height >= contentHeight - onEndReachedThresholdPx\n      ) {\n        hasEndReachedBeenCalled.current = true;\n        onEndReached();\n      }\n    },\n    [data.length, renderThreshold, totalRowHeight, onEndReached, onEndReachedThresholdPx],\n  );\n\n  const onCenterTrackLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { width },\n      },\n    }: LayoutChangeEvent) => {\n      setHasHorizontalScroll(centerColumnsWidth > width);\n    },\n    [centerColumnsWidth],\n  );\n\n  const isLoading = isNotNullish(loading) && loading.isLoading;\n\n  return (\n    <View style={styles.root}>\n      <View ref={startFocusAnchorRef} tabIndex={0} />\n\n      <ScrollView\n        onKeyDown={onKeyDown}\n        onLayout={onLayout}\n        onScroll={onScroll}\n        scrollEventThrottle={32}\n        style={[styles.container, mode === \"tile\" && styles.containerTile]}\n        contentContainerStyle={[\n          styles.contentContainer,\n          {\n            height:\n              totalHeight +\n              SCROLLBAR_RESERVED_SPACE +\n              (isLoading ? loading.count * (rowHeight + rowVerticalSpacing) : 0),\n          },\n        ]}\n      >\n        <View\n          aria-busy={isLoading}\n          style={[\n            styles.loadingPlaceholder,\n            {\n              top: rowsHeight,\n              marginLeft: horizontalPadding * 2,\n              marginRight: horizontalPadding * 2,\n            },\n          ]}\n        >\n          {isLoading\n            ? match(mode)\n                .with(\"tile\", () => (\n                  <FixedListViewPlaceholder\n                    count={loading.count}\n                    headerHeight={headerHeight}\n                    rowHeight={rowHeight}\n                    rowVerticalSpacing={rowVerticalSpacing}\n                    paddingHorizontal={0}\n                  />\n                ))\n                .with(\"plain\", () => (\n                  <PlainListViewPlaceholder\n                    count={loading.count}\n                    headerHeight={headerHeight}\n                    rowHeight={rowHeight}\n                    rowVerticalSpacing={rowVerticalSpacing}\n                    paddingHorizontal={0}\n                  />\n                ))\n                .exhaustive()\n            : null}\n        </View>\n\n        <View style={[styles.backgroundRows, { top: headerHeight }]}>{backgroundRows}</View>\n\n        <View style={styles.scrollContentContainer} ref={scrollContentsRef}>\n          {stickedToStartColumns.length > 0 ? (\n            <View\n              style={[\n                styles.stickyColumn,\n                {\n                  width: stickedToStartColumnsWidth + horizontalPadding,\n                  paddingLeft: horizontalPadding,\n                },\n              ]}\n            >\n              <View\n                style={[\n                  styles.headingSegment,\n                  { height: headerHeight, backgroundColor: headerBackgroundColor },\n                ]}\n              >\n                <HeaderSegment\n                  columns={stickedToStartColumns}\n                  extraInfo={extraInfo}\n                  viewId={viewId}\n                  width={stickedToStartColumnsWidth}\n                />\n\n                <View\n                  style={[\n                    styles.stickyColumnStartOverflow,\n                    { width: horizontalPadding, backgroundColor: headerBackgroundColor },\n                  ]}\n                />\n\n                <View style={[styles.topGradient, isScrolled && styles.visibleTopGradient]} />\n              </View>\n\n              <View style={{ height: rowsHeight }}>{startRows}</View>\n            </View>\n          ) : null}\n\n          <View\n            style={[\n              styles.centerColumnsContainer,\n              {\n                paddingLeft: stickedToStartColumns.length === 0 ? horizontalPadding : ZERO,\n                paddingRight: stickedToEndColumns.length === 0 ? horizontalPadding : ZERO,\n              },\n            ]}\n          >\n            <View\n              style={[\n                styles.headingSegment,\n                { height: headerHeight, backgroundColor: headerBackgroundColor },\n              ]}\n            >\n              <ScrollView\n                ref={centerHeadersRef}\n                horizontal={true}\n                onLayout={onCenterTrackLayout}\n                style={styles.centerColumns}\n                contentContainerStyle={{\n                  minWidth:\n                    centerColumnsWidth +\n                    (stickedToStartColumns.length === 0 ? horizontalPadding : 0) +\n                    (stickedToEndColumns.length === 0 ? horizontalPadding : 0),\n                }}\n              >\n                <HeaderSegment\n                  columns={columns}\n                  extraInfo={extraInfo}\n                  viewId={viewId}\n                  width={centerColumnsWidth}\n                />\n              </ScrollView>\n\n              <View style={[styles.topGradient, isScrolled && styles.visibleTopGradient]} />\n            </View>\n\n            <ScrollView\n              horizontal={true}\n              ref={centerColumnsRef}\n              style={styles.centerColumns}\n              contentContainerStyle={[\n                styles.centerColumnsContentContainer,\n                {\n                  minWidth:\n                    centerColumnsWidth +\n                    (stickedToStartColumns.length === 0 ? horizontalPadding : 0) +\n                    (stickedToEndColumns.length === 0 ? horizontalPadding : 0),\n                },\n              ]}\n            >\n              {centerRows}\n            </ScrollView>\n\n            <ScrollView\n              ref={horizontalScrollbarRef}\n              horizontal={true}\n              style={styles.horizontalScrollbar}\n              contentContainerStyle={{\n                minWidth:\n                  centerColumnsWidth +\n                  (stickedToStartColumns.length === 0 ? horizontalPadding : 0) +\n                  (stickedToEndColumns.length === 0 ? horizontalPadding : 0),\n              }}\n            />\n\n            {stickedToStartColumns.length > 0 && hasHorizontalScroll ? (\n              <View\n                style={[\n                  styles.leftToRightGradient,\n                  {\n                    maxHeight: data.length * totalRowHeight,\n                    top: headerHeight,\n                    bottom: SCROLLBAR_RESERVED_SPACE + rowVerticalSpacing / 2,\n                  },\n                  shouldShowStartGradient && styles.visibleGradient,\n                ]}\n              ></View>\n            ) : null}\n\n            {stickedToEndColumns.length > 0 && hasHorizontalScroll ? (\n              <View\n                style={[\n                  styles.rightToLeftGradient,\n                  {\n                    maxHeight: data.length * totalRowHeight,\n                    top: headerHeight,\n                    bottom: SCROLLBAR_RESERVED_SPACE + rowVerticalSpacing / 2,\n                  },\n                  shouldShowEndGradient && styles.visibleGradient,\n                ]}\n              ></View>\n            ) : null}\n          </View>\n\n          {stickedToEndColumns.length > 0 ? (\n            <View\n              style={[\n                styles.stickyColumn,\n                {\n                  width: stickedToEndColumnsWidth + horizontalPadding,\n                  paddingRight: horizontalPadding,\n                },\n              ]}\n            >\n              <View\n                style={[\n                  styles.headingSegment,\n                  { height: headerHeight, backgroundColor: headerBackgroundColor },\n                ]}\n              >\n                <View\n                  style={[\n                    styles.stickyColumnEndOverflow,\n                    { width: horizontalPadding, backgroundColor: headerBackgroundColor },\n                  ]}\n                />\n\n                <HeaderSegment\n                  columns={stickedToEndColumns}\n                  extraInfo={extraInfo}\n                  viewId={viewId}\n                  width={stickedToEndColumnsWidth}\n                />\n\n                <View style={[styles.topGradient, isScrolled && styles.visibleTopGradient]} />\n              </View>\n\n              <View style={{ height: rowsHeight }}>{endRows}</View>\n            </View>\n          ) : null}\n        </View>\n      </ScrollView>\n\n      {data.length === 0 && isNotNullish(renderEmptyList) && !isLoading ? (\n        <ScrollView\n          style={styles.emptyListContainer}\n          contentContainerStyle={styles.emptyListContentContainer}\n        >\n          {renderEmptyList()}\n        </ScrollView>\n      ) : null}\n\n      <View ref={endFocusAnchorRef} tabIndex={0} />\n    </View>\n  );\n};\n\ntype PlaceholderProps = {\n  count: number;\n  rowHeight: number;\n  rowVerticalSpacing: number;\n  groupHeaderHeight?: number;\n  headerHeight?: number;\n  paddingHorizontal?: number;\n};\n\nexport const FixedListViewPlaceholder = ({\n  count,\n  rowHeight,\n  rowVerticalSpacing,\n  groupHeaderHeight,\n  headerHeight,\n  paddingHorizontal = HORIZONTAL_SAFE_AREA,\n}: PlaceholderProps) => {\n  const totalRowHeight = rowHeight + rowVerticalSpacing;\n\n  return (\n    <View style={[styles.container, styles.containerTile, { paddingHorizontal }]}>\n      {isNotNullish(headerHeight) ? <View style={{ height: headerHeight }} /> : null}\n      {isNotNullish(groupHeaderHeight) ? <View style={{ height: headerHeight }} /> : null}\n\n      <View>\n        {Array.from({ length: count }, (_, index) => {\n          const top = index * totalRowHeight + rowVerticalSpacing / 2;\n\n          return (\n            <Fragment key={String(index)}>\n              <MemoizedRowBackground\n                isHovered={false}\n                isHighlighted={false}\n                absoluteIndex={index}\n                top={top}\n                rowVerticalSpacing={rowVerticalSpacing}\n                id={String(index)}\n                rowHeight={rowHeight}\n                onMouseEnter={noop}\n                onMouseLeave={noop}\n                mode=\"tile\"\n              />\n\n              <View\n                style={[styles.placeholderRowContainer, { top, height: totalRowHeight }]}\n                key={String(index)}\n              >\n                <View style={styles.placeholderRow} />\n                <Space width={32} />\n                <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                <Space width={32} />\n\n                <View style={styles.placeholderRowEnd}>\n                  <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                </View>\n              </View>\n            </Fragment>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\nexport const PlainListViewPlaceholder = ({\n  count,\n  rowHeight,\n  rowVerticalSpacing,\n  groupHeaderHeight,\n  headerHeight,\n  paddingHorizontal = HORIZONTAL_SAFE_AREA,\n}: PlaceholderProps) => {\n  const totalRowHeight = rowHeight + rowVerticalSpacing;\n\n  return (\n    <View style={[styles.container, { paddingHorizontal }]}>\n      {isNotNullish(headerHeight) ? <View style={{ height: headerHeight }} /> : null}\n      {isNotNullish(groupHeaderHeight) ? <View style={{ height: headerHeight }} /> : null}\n\n      <View>\n        {Array.from({ length: count }, (_, index) => {\n          const top = index * totalRowHeight + rowVerticalSpacing / 2;\n\n          return (\n            <Fragment key={String(index)}>\n              <MemoizedRowBackground\n                isHovered={false}\n                isHighlighted={false}\n                absoluteIndex={index}\n                top={top}\n                rowVerticalSpacing={rowVerticalSpacing}\n                id={String(index)}\n                rowHeight={rowHeight}\n                onMouseEnter={noop}\n                onMouseLeave={noop}\n                mode=\"plain\"\n              />\n\n              <View\n                style={[\n                  styles.placeholderRowContainer,\n                  styles.placeholderRowContainerPlain,\n                  { top, height: totalRowHeight },\n                ]}\n                key={String(index)}\n              >\n                <View style={styles.placeholderRow} />\n                <Space width={32} />\n                <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                <Space width={32} />\n\n                <View style={styles.placeholderRowEnd}>\n                  <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                </View>\n              </View>\n            </Fragment>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\ntype EmptyProps = {\n  icon: IconName;\n  borderedIcon?: boolean;\n  title?: string;\n  subtitle?: ReactNode;\n  children?: ReactNode;\n};\n\nexport const FixedListViewEmpty = ({\n  icon,\n  borderedIcon = false,\n  title,\n  subtitle,\n  children,\n}: EmptyProps) => (\n  <View style={styles.emptyList}>\n    {borderedIcon ? (\n      <BorderedIcon name={icon} />\n    ) : (\n      <Icon name={icon} size={96} color={colors.current.primary} />\n    )}\n\n    <Space height={32} />\n\n    {isNotNullish(title) && (\n      <LakeHeading level={3} variant=\"h3\" color={colors.gray[700]} align=\"center\">\n        {title}\n      </LakeHeading>\n    )}\n\n    <Space height={8} />\n\n    {isNotNullish(subtitle) && <LakeText align=\"center\">{subtitle}</LakeText>}\n\n    <Space height={8} />\n\n    {children}\n  </View>\n);\n","import { ComponentProps, ReactNode, useCallback, useState } from \"react\";\nimport { Clipboard, GestureResponderEvent, StyleSheet, View } from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { visuallyHiddenStyle } from \"../constants/commonStyles\";\nimport { ColorVariants, colors, spacings } from \"../constants/design\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { LakeText, TextVariant } from \"./LakeText\";\nimport { LakeTooltip } from \"./LakeTooltip\";\nimport { Pressable } from \"./Pressable\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  cellContainer: {\n    display: \"flex\",\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  balanceCellContainer: {\n    width: \"100%\",\n  },\n  cell: {\n    display: \"flex\",\n    paddingHorizontal: spacings[16],\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  disabledCellHeader: {\n    cursor: \"text\",\n  },\n  icon: {\n    alignSelf: \"stretch\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingHorizontal: spacings[4],\n  },\n  iconContainer: {\n    flexDirection: \"row\",\n    alignSelf: \"stretch\",\n    alignItems: \"stretch\",\n    justifyContent: \"center\",\n  },\n  centeredCell: {\n    justifyContent: \"center\",\n  },\n  endAlignedCell: {\n    justifyContent: \"flex-end\",\n  },\n  regularText: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    width: 1,\n    flexGrow: 1,\n    whiteSpace: \"nowrap\",\n  },\n  mediumText: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    width: 1,\n    flexGrow: 1,\n    whiteSpace: \"nowrap\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  colorPatch: {\n    flexGrow: 1,\n  },\n  alternativeText: visuallyHiddenStyle,\n  sortIcon: {\n    transitionProperty: \"transform\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  sortIconReversed: {\n    transform: \"rotate(-180deg)\",\n  },\n  cellAction: {\n    paddingVertical: spacings[16],\n    paddingHorizontal: spacings[8],\n  },\n  underline: {\n    boxShadow: \"inset 0 -2px currentColor\",\n  },\n  sortHorizontalBar: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 2,\n    bottom: -10,\n    backgroundColor: colors.current[500],\n    borderBottomColor: colors.current[500],\n  },\n});\n\ntype Justify = \"flex-start\" | \"center\" | \"flex-end\";\ntype SortDirection = \"Desc\" | \"Asc\";\n\nexport const SimpleHeaderCell = ({\n  text,\n  sort,\n  justifyContent = \"flex-start\",\n  onPress,\n}: {\n  text: string;\n  justifyContent?: Justify;\n  sort?: SortDirection;\n  onPress?: (direction: SortDirection) => void;\n}) => {\n  const sortActive = isNotNullish(sort) && isNotNullish(onPress);\n  const disabled = isNullish(onPress);\n\n  return (\n    <Pressable\n      onPress={() => {\n        onPress?.(\n          match(sort)\n            .returnType<SortDirection>()\n            .with(\"Desc\", () => \"Asc\")\n            .with(\"Asc\", () => \"Desc\")\n            .otherwise(() => \"Desc\"),\n        );\n      }}\n      disabled={disabled}\n      style={[styles.cellContainer, disabled && styles.disabledCellHeader]}\n      role=\"columnheader\"\n    >\n      {({ hovered }) => (\n        <View style={[styles.cell, { justifyContent }]}>\n          <View>\n            <Box direction=\"row\" alignItems=\"center\">\n              <LakeText\n                numberOfLines={1}\n                variant=\"medium\"\n                color={sortActive ? colors.current[500] : colors.gray[900]}\n                style={{\n                  textAlign: match(justifyContent)\n                    .with(\"flex-start\", () => \"left\" as const)\n                    .with(\"center\", () => \"center\" as const)\n                    .with(\"flex-end\", () => \"right\" as const)\n                    .exhaustive(),\n                }}\n              >\n                {text}\n              </LakeText>\n\n              {isNotNullish(onPress) ? (\n                <>\n                  <Space width={8} />\n\n                  <Box style={[styles.sortIcon, sort === \"Asc\" && styles.sortIconReversed]}>\n                    <Icon\n                      size={15}\n                      color={sortActive ? colors.current[500] : colors.gray[500]}\n                      name={sortActive ? \"arrow-down-filled\" : \"chevron-up-down-regular\"}\n                    />\n                  </Box>\n                </>\n              ) : null}\n            </Box>\n\n            {sortActive ? (\n              <View style={styles.sortHorizontalBar} />\n            ) : hovered ? (\n              <View style={[styles.sortHorizontalBar, { backgroundColor: colors.gray[900] }]} />\n            ) : null}\n          </View>\n        </View>\n      )}\n    </Pressable>\n  );\n};\n\nexport const ColorPatchCell = ({\n  isHovered,\n  alternativeText,\n  color,\n}: {\n  isHovered: boolean;\n  alternativeText?: string;\n  color: ColorVariants;\n}) => {\n  return isHovered ? (\n    <View style={[styles.colorPatch, { backgroundColor: colors[color].primary }]}>\n      {isNotNullish(alternativeText) ? (\n        <LakeText style={styles.alternativeText}>{alternativeText}</LakeText>\n      ) : null}\n    </View>\n  ) : null;\n};\n\nexport const SimpleTitleCell = ({\n  isHighlighted = false,\n  text,\n  tooltip,\n}: {\n  isHighlighted?: boolean;\n  text: string;\n  tooltip?: Omit<ComponentProps<typeof LakeTooltip>, \"children\">;\n}) => (\n  <View style={styles.cell}>\n    <LakeText\n      numberOfLines={1}\n      color={isHighlighted ? colors.current.primary : colors.gray[900]}\n      style={styles.regularText}\n      variant=\"medium\"\n      tooltip={tooltip}\n    >\n      {text}\n    </LakeText>\n  </View>\n);\n\nexport const SimpleRegularTextCell = ({\n  variant = \"regular\",\n  text,\n  textAlign = \"left\",\n  color = colors.gray[900],\n}: {\n  variant?: TextVariant;\n  text: string;\n  textAlign?: \"left\" | \"center\" | \"right\";\n  color?: string;\n}) => {\n  return (\n    <View style={styles.cell}>\n      <LakeText align={textAlign} color={color} style={styles.regularText} variant={variant}>\n        {text}\n      </LakeText>\n    </View>\n  );\n};\n\nexport const CopyableRegularTextCell = ({\n  variant = \"regular\",\n  text,\n  textToCopy,\n  copyWording,\n  copiedWording,\n  tooltip,\n}: {\n  variant?: TextVariant;\n  text: string;\n  textToCopy?: string;\n  copyWording: string;\n  copiedWording: string;\n  tooltip?: Omit<ComponentProps<typeof LakeTooltip>, \"children\">;\n}) => {\n  const [visibleState, setVisibleState] = useState<\"copy\" | \"copied\">(\"copy\");\n  const clipboardText = textToCopy ?? text;\n\n  const onPress = useCallback(\n    (event: GestureResponderEvent) => {\n      event.preventDefault();\n      Clipboard.setString(clipboardText);\n      setVisibleState(\"copied\");\n    },\n    [clipboardText],\n  );\n\n  return (\n    <View style={styles.cell}>\n      <LakeTooltip\n        placement=\"top\"\n        onHide={() => setVisibleState(\"copy\")}\n        togglableOnFocus={true}\n        content={visibleState === \"copy\" ? copyWording : copiedWording}\n        containerStyle={styles.iconContainer}\n      >\n        <Pressable\n          role=\"button\"\n          aria-label={copyWording}\n          onPress={onPress}\n          style={({ hovered }) => [styles.icon, hovered && styles.underline]}\n        >\n          {({ hovered }) => (\n            <Icon name={hovered ? \"copy-filled\" : \"copy-regular\"} color=\"currentColor\" size={14} />\n          )}\n        </Pressable>\n      </LakeTooltip>\n\n      <Space width={4} />\n\n      <LakeText\n        tooltip={tooltip}\n        color={colors.gray[900]}\n        style={styles.regularText}\n        variant={variant}\n      >\n        {text}\n      </LakeText>\n    </View>\n  );\n};\n\n// TODO: handle `+` sign properly\nexport const BalanceCell = ({\n  value,\n  currency,\n  originalValue,\n  formatCurrency,\n  textAlign = \"right\",\n  variant = \"medium\",\n}: {\n  value: number;\n  currency: string;\n  originalValue?: { value: number; currency: string };\n  formatCurrency: (value: number, currency: string) => string;\n  textAlign?: \"left\" | \"center\" | \"right\";\n  variant?: TextVariant;\n}) => {\n  return (\n    <View style={styles.balanceCellContainer}>\n      <View style={styles.cell}>\n        <LakeText\n          align={textAlign}\n          color={colors.gray[900]}\n          variant={variant}\n          style={[\n            styles.mediumText,\n            {\n              justifyContent: match(textAlign)\n                .with(\"left\", () => \"flex-start\" as const)\n                .with(\"center\", () => \"center\" as const)\n                .with(\"right\", () => \"flex-end\" as const)\n                .exhaustive(),\n            },\n            value > 0 && { color: colors.positive.primary },\n            value < 0 && { color: colors.negative.primary },\n          ]}\n        >\n          {value > 0 && \"+\"}\n          {formatCurrency(value, currency)}\n        </LakeText>\n      </View>\n\n      {isNotNullish(originalValue) && originalValue.currency !== currency && (\n        <View style={styles.cell}>\n          <LakeText\n            style={styles.mediumText}\n            align={textAlign}\n            color={colors.gray[500]}\n            variant=\"smallRegular\"\n          >\n            {originalValue.value > 0 && \"+\"}\n            {formatCurrency(originalValue.value, originalValue.currency)}\n          </LakeText>\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport const LinkCell = ({\n  children,\n  external = false,\n  onPress,\n  variant = \"medium\",\n  tooltip,\n}: {\n  children: ReactNode;\n  onPress: () => void;\n  external?: boolean;\n  variant?: TextVariant;\n  tooltip?: Omit<ComponentProps<typeof LakeTooltip>, \"children\">;\n}) => {\n  return (\n    <View style={styles.cell}>\n      <Pressable\n        style={({ hovered }) => [styles.icon, hovered && styles.underline]}\n        onPress={event => {\n          event.preventDefault();\n          onPress();\n        }}\n      >\n        <Icon size={14} name={external ? \"open-regular\" : \"arrow-right-filled\"} />\n      </Pressable>\n\n      <Space width={8} />\n\n      <LakeText\n        color={colors.gray[900]}\n        variant={variant}\n        style={styles.mediumText}\n        tooltip={tooltip}\n      >\n        {children}\n      </LakeText>\n    </View>\n  );\n};\n\nexport const StartAlignedCell = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.cell}>{children}</View>;\n};\n\nexport const CenteredCell = ({ children }: { children: ReactNode }) => {\n  return <View style={[styles.cell, styles.centeredCell]}>{children}</View>;\n};\n\nexport const EndAlignedCell = ({ children }: { children: ReactNode }) => {\n  return <View style={[styles.cell, styles.endAlignedCell]}>{children}</View>;\n};\n\nexport const CellAction = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.cellAction}>{children}</View>;\n};\n"],"names":["HORIZONTAL_SAFE_AREA","SCROLLBAR_RESERVED_SPACE","styles","StyleSheet","invariantColors","backgroundColor","shadows","colors","radii","spacings","RowBackground","absoluteIndex","id","isHovered","isHighlighted","top","rowHeight","rowVerticalSpacing","onMouseEnter","onMouseLeave","mode","containerRef","useRef","useHover","jsx","View","MemoizedRowBackground","memo","SEGMENTS_MAP","RowSegment","columns","item","style","viewId","segmentColumn","width","extraInfo","createRowWrapper","focusId","totalRowHeight","minWidth","wrapper","cloneElement","isNullish","id2","width2","renderCell","index","columnId","paddedIndex","paddedCellIndex","focusId2","MemoizedRowSegment","HeaderSegment","title","renderTitle","findNextFocusableElement","sortedCellIds","currentCellIndex","direction","nextCellId","isNotNullish","previousCell","focusableElements","getFocusableElements","nextFocusableElement","last","first","EMPTY_COLUMNS","ZERO","FixedListView","originalData","keyExtractor","highlightedRowId","horizontalPadding","headerBackgroundColor","headerHeight","renderThreshold","initialStickedToStartColumns","initialColumns","initialStickedToEndColumns","onEndReached","onEndReachedThresholdPx","getRowLink","renderEmptyList","loading","useState","uuid","centerHeadersRef","centerColumnsRef","horizontalScrollbarRef","rowsHeight","totalHeight","data","renderedRangeStartIndex","renderedRangeEndIndex","setDataAndRenderRange","startFocusAnchorRef","endFocusAnchorRef","hasHorizontalScroll","setHasHorizontalScroll","shouldAvoidStickyColumns","setShouldAvoidStickyColumns","shouldShowStartGradient","setShouldShowStartGradient","shouldShowEndGradient","setShouldShowEndGradient","hoveredRow","setHoveredRow","currentScrollY","lastKnownHeight","stickedToStartColumns","stickedToEndColumns","useMemo","isScrolled","setIsScrolled","removeHoveredRow","useCallback","initialStickedToStartColumnsWidth","total","initialStickedToEndColumnsWidth","stickedToStartColumnsWidth","stickedToEndColumnsWidth","centerColumnsWidth","centerSegmentStyle","extraInfo2","customLinkElement","backgroundRows","startRows","centerRows","endRows","length","backgroundRows2","startRows2","centerRows2","endRows2","key","isHoveredRow","isHighlightedRow","useLayoutEffect","lastHorizontalScroll","useEffect","centerColumns","centerHeaders","horizontalScrollbar","onColumnsScroll","now","scrollLeft","onHeadersScroll","onScrollbarScroll","onKeyDown","event","target","currentTarget","currentCell","currentCellId","firstFocusableElement","lastFocusableElement","sortedIndexOf","isTargetFirst","isTargetLast","lastFocusableElement2","_a","firstFocusableElement2","_b","renderedRangeStartIndex2","renderedRangeEndIndex2","prevRenderRange","data2","prevRenderedRangeStartIndex","prevRenderedRangeEndIndex","onLayout","height","hasEndReachedBeenCalled","scrollTimeoutRef","scrollContentsRef","onScroll","y","contentHeight","onCenterTrackLayout","isLoading","jsxs","ScrollView","match","FixedListViewPlaceholder","PlainListViewPlaceholder","count","groupHeaderHeight","paddingHorizontal","Fragment","noop","Space","FixedListViewEmpty","icon","borderedIcon","subtitle","children","BorderedIcon","Icon","LakeHeading","LakeText","visuallyHiddenStyle","SimpleHeaderCell","text","sort","justifyContent","onPress","sortActive","disabled","Pressable","hovered","Box","ColorPatchCell","alternativeText","color","SimpleTitleCell","tooltip","SimpleRegularTextCell","variant","textAlign","CopyableRegularTextCell","textToCopy","copyWording","copiedWording","visibleState","setVisibleState","clipboardText","Clipboard","LakeTooltip","BalanceCell","value","currency","originalValue","formatCurrency","LinkCell","external","StartAlignedCell","CenteredCell","EndAlignedCell","CellAction"],"mappings":"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"}