{"version":3,"file":"Stepper.stories-BuVkGEd1.js","sources":["../../../packages/lake/src/components/LakeStepper.tsx"],"sourcesContent":["import { Option } from \"@swan-io/boxed\";\nimport { Link } from \"@swan-io/chicane\";\nimport { CSSProperties, ReactNode } from \"react\";\nimport { StyleProp, StyleSheet, View, ViewStyle } from \"react-native\";\nimport { P, match } from \"ts-pattern\";\nimport { colors } from \"../constants/design\";\nimport { Box } from \"./Box\";\nimport { Grid } from \"./Grid\";\nimport { LakeHeading } from \"./LakeHeading\";\nimport { LakeText } from \"./LakeText\";\nimport { Space } from \"./Space\";\n\nconst linkStyle: CSSProperties = {\n  textDecoration: \"none\",\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: \"flex-end\",\n  },\n  bar: {\n    width: \"100%\",\n    height: 4,\n    borderRadius: 2,\n    backgroundColor: colors.gray[100],\n    overflow: \"hidden\",\n    transformOrigin: \"bottom\",\n    transform: \"scaleY(0.5)\",\n    transitionDuration: \"300ms\",\n    transitionProperty: \"transform\",\n  },\n  barActive: {\n    transform: \"scaleY(1)\",\n  },\n  progressBar: {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: colors.current[500],\n    transformOrigin: \"left\",\n    transform: \"scaleX(0)\",\n    transitionDuration: \"300ms\",\n  },\n  progressBarDone: {\n    transform: \"scaleX(1)\",\n  },\n  progressBarError: {\n    backgroundColor: colors.negative[500],\n  },\n\n  mobileContainer: {\n    borderBottomWidth: 1,\n    borderBottomColor: colors.gray[100],\n    paddingBottom: 10,\n  },\n  mobileNumber: {\n    minWidth: 28,\n    height: 24,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: colors.current[100],\n    backgroundColor: colors.current[50],\n  },\n  mobileNumberError: {\n    borderColor: colors.negative[100],\n    backgroundColor: colors.negative[50],\n  },\n});\n\ntype StepLinkProps = {\n  to: string;\n  disabled: boolean;\n  style?: CSSProperties;\n  children: ReactNode;\n};\n\nconst StepLink = ({ to, disabled, style, children }: StepLinkProps) => {\n  return disabled ? (\n    <span style={style}>{children}</span>\n  ) : (\n    <Link to={to} style={style}>\n      {children}\n    </Link>\n  );\n};\n\nexport type Step = {\n  id: string;\n  label: string;\n  url: string;\n  hasErrors?: boolean;\n};\n\nexport type StepWithChildren = { label: string; children: Step[] };\nexport type TopLevelStep = Step | StepWithChildren;\n\ntype Props = {\n  steps: TopLevelStep[];\n  activeStepId: string;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport const LakeStepper = ({ steps, activeStepId, style }: Props) => {\n  const stepIds = steps\n    .map(step =>\n      match(step)\n        .with({ id: P.string }, ({ id }) => [id])\n        .with({ children: P.array(P.any) }, ({ children }) => children.map(({ id }) => id))\n        .exhaustive(),\n    )\n    .flat();\n  const activeStepIndex = stepIds.indexOf(activeStepId);\n\n  return (\n    <Grid numColumns={steps.length} horizontalSpace={12} style={[styles.container, style]}>\n      {steps.map((step, index) => {\n        const stepNumber = index + 1;\n        const currentId = match(step)\n          .with({ id: P.string }, ({ id }) => id)\n          .with({ children: P.array(P.any) }, ({ children }) => children[0]?.id ?? \"\")\n          .exhaustive();\n\n        const isActive = match(step)\n          .with({ id: activeStepId }, () => true)\n          .with({ children: P.array(P.any) }, ({ children }) =>\n            children.some(({ id }) => id === activeStepId),\n          )\n          .otherwise(() => false);\n        const isDone = match(step)\n          .with({ id: P.string }, ({ id }) => stepIds.indexOf(id) < activeStepIndex)\n          .with({ children: P.array(P.any) }, ({ children }) =>\n            children.every(({ id }) => stepIds.indexOf(id) < activeStepIndex),\n          )\n          .exhaustive();\n\n        const hasErrors = match(step)\n          .with({ hasErrors: true }, () => true)\n          .with({ children: P.array(P.any) }, ({ children }) =>\n            children.some(({ hasErrors }) => hasErrors),\n          )\n          .otherwise(() => false);\n\n        const stepUrl = match(step)\n          .with({ id: P.string }, ({ url }) => url)\n          .with({ children: P.array(P.any) }, ({ children }) => children[0]?.url ?? \"\")\n          .exhaustive();\n\n        const subSteps = match(step)\n          .with({ id: P.string }, step => [step])\n          .with({ children: P.array(P.any) }, ({ children }) => children)\n          .exhaustive();\n\n        return (\n          <StepLink key={currentId} to={stepUrl} disabled={!isDone} style={linkStyle}>\n            <LakeText\n              variant={isActive ? \"medium\" : \"regular\"}\n              color={\n                hasErrors && (isDone || isActive)\n                  ? colors.negative[500]\n                  : isActive || isDone\n                    ? colors.current[500]\n                    : colors.gray[300]\n              }\n            >\n              {stepNumber}. {step.label}\n            </LakeText>\n\n            <Space height={12} />\n\n            <Grid numColumns={subSteps.length} horizontalSpace={12}>\n              {subSteps.map(subStep => {\n                const isActive = subStep.id === activeStepId;\n                const isDone = stepIds.indexOf(subStep.id) < activeStepIndex;\n                const hasErrors = subStep.hasErrors === true;\n\n                return (\n                  <View key={subStep.id} style={[styles.bar, isActive && styles.barActive]}>\n                    <View\n                      style={[\n                        styles.progressBar,\n                        (isActive || isDone) && styles.progressBarDone,\n                        hasErrors && styles.progressBarError,\n                      ]}\n                    />\n                  </View>\n                );\n              })}\n            </Grid>\n          </StepLink>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport const MobileStepTitle = ({ steps, activeStepId }: Props) => {\n  const currentStep = Option.fromNullable(\n    steps\n      .map((step, index) =>\n        match(step)\n          .with({ id: P.string }, step => ({ ...step, number: `${index + 1}` }))\n          .with({ children: P.array(P.any) }, ({ children }) =>\n            children.map((child, subIndex) => ({\n              ...child,\n              number: `${index + 1}.${subIndex + 1}`,\n            })),\n          )\n          .exhaustive(),\n      )\n      .flat()\n      .find(({ id }) => id === activeStepId),\n  ).map(({ label, hasErrors, number }) => ({\n    number,\n    label,\n    isErrorState: hasErrors === true,\n  }));\n\n  return currentStep.match({\n    Some: ({ number, label, isErrorState }) => (\n      <Box\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        style={styles.mobileContainer}\n      >\n        <Box\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          style={[styles.mobileNumber, isErrorState && styles.mobileNumberError]}\n        >\n          <LakeText\n            variant=\"smallMedium\"\n            color={isErrorState ? colors.negative[500] : colors.current[500]}\n          >\n            {number}\n          </LakeText>\n        </Box>\n\n        <Space width={8} />\n\n        <LakeHeading\n          level={4}\n          variant=\"h4\"\n          color={isErrorState ? colors.negative[500] : colors.current[500]}\n        >\n          {label}\n        </LakeHeading>\n      </Box>\n    ),\n    None: () => null,\n  });\n};\n"],"names":["linkStyle","styles","StyleSheet","colors","StepLink","to","disabled","style","children","jsx","Link","LakeStepper","steps","activeStepId","stepIds","match","step","P","id","activeStepIndex","Grid","index","stepNumber","currentId","_a","isActive","isDone","hasErrors","stepUrl","url","subSteps","jsxs","LakeText","Space","subStep","View"],"mappings":"wkBAYA,MAAAA,EAAA,CACA,eAAA,MACA,EAEAC,EAAAC,EAAA,OAAA,CACA,UAAA,CACA,WAAA,UACA,EACA,IAAA,CACA,MAAA,OACA,OAAA,EACA,aAAA,EACA,gBAAAC,EAAA,KAAA,GAAA,EACA,SAAA,SACA,gBAAA,SACA,UAAA,cACA,mBAAA,QACA,mBAAA,WACA,EACA,UAAA,CACA,UAAA,WACA,EACA,YAAA,CACA,MAAA,OACA,OAAA,OACA,gBAAAA,EAAA,QAAA,GAAA,EACA,gBAAA,OACA,UAAA,YACA,mBAAA,OACA,EACA,gBAAA,CACA,UAAA,WACA,EACA,iBAAA,CACA,gBAAAA,EAAA,SAAA,GAAA,CACA,EAEA,gBAAA,CACA,kBAAA,EACA,kBAAAA,EAAA,KAAA,GAAA,EACA,cAAA,EACA,EACA,aAAA,CACA,SAAA,GACA,OAAA,GACA,aAAA,GACA,YAAA,EACA,YAAAA,EAAA,QAAA,GAAA,EACA,gBAAAA,EAAA,QAAA,EAAA,CACA,EACA,kBAAA,CACA,YAAAA,EAAA,SAAA,GAAA,EACA,gBAAAA,EAAA,SAAA,EAAA,CACA,CACA,CAAA,EASAC,EAAA,CAAA,CAAA,GAAAC,EAAA,SAAAC,EAAA,MAAAC,EAAA,SAAAC,KACAF,EACAG,EAAA,IAAA,OAAA,CAAA,MAAAF,EAAA,SAAAC,CAAA,CAAA,EAEAC,EAAA,IAAAC,EAAA,CAAA,GAAAL,EAAA,MAAAE,EACA,SAAAC,CACA,CAAA,EAoBAG,EAAA,CAAA,CAAA,MAAAC,EAAA,aAAAC,EAAA,MAAAN,KAAA,CACA,MAAAO,EAAAF,EACA,OACAG,EAAAC,CAAA,EACA,KAAA,CAAA,GAAAC,EAAA,MAAA,EAAA,CAAA,CAAA,GAAAC,CAAA,IAAA,CAAAA,CAAA,CAAA,EACA,KAAA,CAAA,SAAAD,EAAA,MAAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,SAAAT,CAAA,IAAAA,EAAA,IAAA,CAAA,CAAA,GAAAU,KAAAA,CAAA,CAAA,EACA,WAAA,GAEA,KAAA,EACAC,EAAAL,EAAA,QAAAD,CAAA,EAEA,aACAO,EAAA,CAAA,WAAAR,EAAA,OAAA,gBAAA,GAAA,MAAA,CAAAX,EAAA,UAAAM,CAAA,EACA,WAAA,IAAA,CAAAS,EAAAK,IAAA,CACA,MAAAC,EAAAD,EAAA,EACAE,EAAAR,EAAAC,CAAA,EACA,KAAA,CAAA,GAAAC,EAAA,MAAA,EAAA,CAAA,CAAA,GAAAC,CAAA,IAAAA,CAAA,EACA,KAAA,CAAA,SAAAD,EAAA,MAAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,SAAAT,CAAA,IAAA,OAAA,QAAAgB,EAAAhB,EAAA,CAAA,IAAA,YAAAgB,EAAA,KAAA,GAAA,EACA,WAAA,EAEAC,EAAAV,EAAAC,CAAA,EACA,KAAA,CAAA,GAAAH,CAAA,EAAA,IAAA,EAAA,EACA,KAAA,CAAA,SAAAI,EAAA,MAAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,SAAAT,CACA,IAAAA,EAAA,KAAA,CAAA,CAAA,GAAAU,CAAA,IAAAA,IAAAL,CAAA,CAAA,EAEA,UAAA,IAAA,EAAA,EACAa,EAAAX,EAAAC,CAAA,EACA,KAAA,CAAA,GAAAC,EAAA,QAAA,CAAA,CAAA,GAAAC,KAAAJ,EAAA,QAAAI,CAAA,EAAAC,CAAA,EACA,KAAA,CAAA,SAAAF,EAAA,MAAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,SAAAT,CAAA,IACAA,EAAA,MAAA,CAAA,CAAA,GAAAU,CAAA,IAAAJ,EAAA,QAAAI,CAAA,EAAAC,CAAA,GAEA,WAAA,EAEAQ,EAAAZ,EAAAC,CAAA,EACA,KAAA,CAAA,UAAA,EAAA,EAAA,IAAA,EAAA,EACA,KAAA,CAAA,SAAAC,EAAA,MAAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,SAAAT,CACA,IAAAA,EAAA,KAAA,CAAA,CAAA,UAAAmB,CAAA,IAAAA,CAAA,CAAA,EAEA,UAAA,IAAA,EAAA,EAEAC,EAAAb,EAAAC,CAAA,EACA,KAAA,CAAA,GAAAC,EAAA,MAAA,EAAA,CAAA,CAAA,IAAAY,CAAA,IAAAA,CAAA,EACA,KAAA,CAAA,SAAAZ,EAAA,MAAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,SAAAT,CAAA,IAAA,OAAA,QAAAgB,EAAAhB,EAAA,CAAA,IAAA,YAAAgB,EAAA,MAAA,GAAA,EACA,WAAA,EAEAM,EAAAf,EAAAC,CAAA,EACA,KAAA,CAAA,GAAAC,EAAA,MAAA,EAAAD,GAAA,CAAAA,CAAA,CAAA,EACA,KAAA,CAAA,SAAAC,EAAA,MAAAA,EAAA,GAAA,GAAA,CAAA,CAAA,SAAAT,CAAA,IAAAA,CAAA,EACA,WAAA,EAGA,OAAAuB,OAAA3B,GAAA,GAAAwB,EAAA,SAAA,CAAAF,EAAA,MAAA1B,EACA,SAAA,CAAA+B,EAAA,KAAAC,EAAA,CACA,QAAAP,EAAA,SAAA,UACA,MACAE,IAAAD,GAAAD,GACAtB,EAAA,SAAA,GAAA,EACAsB,GAAAC,EACAvB,EAAA,QAAA,GAAA,EACAA,EAAA,KAAA,GAAA,EAGA,SAAA,CAAAmB,EAAA,KAAAN,EAAA,KAAA,CAAA,CACA,EAEAP,EAAAA,IAAAwB,EAAA,CAAA,OAAA,EAAA,CAAA,EAEAxB,EAAAA,IAAAW,GAAA,WAAAU,EAAA,OAAA,gBAAA,GACA,SAAAA,EAAA,IAAAI,GAAA,CACAT,MAAAA,EAAAS,EAAA,KAAArB,EACAa,EAAAZ,EAAA,QAAAoB,EAAA,EAAA,EAAAf,EACAQ,EAAAO,EAAA,YAAA,GAGA,OAAAzB,MAAA0B,GAAA,MAAA,CAAAlC,EAAA,IAAAwB,GAAAxB,EAAA,SAAA,EACA,SAAAQ,EAAA,IAAA0B,EAAA,CACA,MAAA,CACAlC,EAAA,aACAwB,GAAAC,IAAAzB,EAAA,gBACA0B,GAAA1B,EAAA,gBACA,CAAA,CAAA,GANAiC,EAAA,EAQA,CAEA,CAAA,EACA,CAAA,CAAA,EAlCAX,CAmCA,CAEA,CAAA,CACA,CAAA,CAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}