{"version":3,"file":"Pressable-Bcg9LWlT.js","sources":["../../../packages/lake/src/hooks/useForceableState.ts","../../../node_modules/react-native-web/dist/cjs/modules/mergeRefs/index.js","../../../node_modules/react-native-web/dist/cjs/modules/useMergeRefs/index.js","../../../packages/lake/src/hooks/useMergeRefs.ts","../../../node_modules/react-native-web/dist/cjs/modules/usePressEvents/PressResponder.js","../../../node_modules/react-native-web/dist/cjs/modules/usePressEvents/index.js","../../../packages/lake/src/hooks/usePressEvents.ts","../../../packages/lake/src/components/Pressable.tsx"],"sourcesContent":["// https://github.com/necolas/react-native-web/blob/0.20.0/packages/react-native-web/src/exports/Pressable/index.js#L221\n\nimport { useState } from \"react\";\n\nexport const useForceableState = (forced: boolean): [boolean, (value: boolean) => void] => {\n  const [value, setValue] = useState(false);\n  return [value || forced, setValue];\n};\n","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nexports.__esModule = true;\nexports.default = mergeRefs;\nvar React = _interopRequireWildcard(require(\"react\"));\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction mergeRefs() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return function forwardRef(node) {\n    args.forEach(ref => {\n      if (ref == null) {\n        return;\n      }\n      if (typeof ref === 'function') {\n        ref(node);\n        return;\n      }\n      if (typeof ref === 'object') {\n        ref.current = node;\n        return;\n      }\n      console.error(\"mergeRefs cannot handle Refs of type boolean, number or string, received ref \" + String(ref));\n    });\n  };\n}\nmodule.exports = exports.default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nexports.__esModule = true;\nexports.default = useMergeRefs;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _mergeRefs = _interopRequireDefault(require(\"../mergeRefs\"));\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction useMergeRefs() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return React.useMemo(() => (0, _mergeRefs.default)(...args),\n  // eslint-disable-next-line\n  [...args]);\n}\nmodule.exports = exports.default;","// https://github.com/necolas/react-native-web/blob/0.20.0/packages/react-native-web/src/modules/useMergeRefs/index.js\n\nimport { Ref } from \"react\";\n// @ts-expect-error\nimport originalUseMergeRefs from \"react-native-web/dist/cjs/modules/useMergeRefs\";\n\nexport const useMergeRefs = originalUseMergeRefs as <T>(...refs: (Ref<T> | undefined)[]) => Ref<T>;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nexports.__esModule = true;\nexports.default = void 0;\nvar DELAY = 'DELAY';\nvar ERROR = 'ERROR';\nvar LONG_PRESS_DETECTED = 'LONG_PRESS_DETECTED';\nvar NOT_RESPONDER = 'NOT_RESPONDER';\nvar RESPONDER_ACTIVE_LONG_PRESS_START = 'RESPONDER_ACTIVE_LONG_PRESS_START';\nvar RESPONDER_ACTIVE_PRESS_START = 'RESPONDER_ACTIVE_PRESS_START';\nvar RESPONDER_INACTIVE_PRESS_START = 'RESPONDER_INACTIVE_PRESS_START';\nvar RESPONDER_GRANT = 'RESPONDER_GRANT';\nvar RESPONDER_RELEASE = 'RESPONDER_RELEASE';\nvar RESPONDER_TERMINATED = 'RESPONDER_TERMINATED';\nvar Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: ERROR,\n    RESPONDER_TERMINATED: ERROR,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_START: {\n    DELAY: RESPONDER_ACTIVE_PRESS_START,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  ERROR: {\n    DELAY: NOT_RESPONDER,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: NOT_RESPONDER\n  }\n});\nvar getElementRole = element => element.getAttribute('role');\nvar getElementType = element => element.tagName.toLowerCase();\nvar isActiveSignal = signal => signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\nvar isButtonRole = element => getElementRole(element) === 'button';\nvar isPressStartSignal = signal => signal === RESPONDER_INACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\nvar isTerminalSignal = signal => signal === RESPONDER_TERMINATED || signal === RESPONDER_RELEASE;\nvar isValidKeyPress = event => {\n  var key = event.key,\n    target = event.target;\n  var isSpacebar = key === ' ' || key === 'Spacebar';\n  var isButtonish = getElementType(target) === 'button' || isButtonRole(target);\n  return key === 'Enter' || isSpacebar && isButtonish;\n};\nvar DEFAULT_LONG_PRESS_DELAY_MS = 450; // 500 - 50\nvar DEFAULT_PRESS_DELAY_MS = 50;\n\n/**\n * =========================== PressResponder Tutorial ===========================\n *\n * The `PressResponder` class helps you create press interactions by analyzing the\n * geometry of elements and observing when another responder (e.g. ScrollView)\n * has stolen the touch lock. It offers hooks for your component to provide\n * interaction feedback to the user:\n *\n * - When a press has activated (e.g. highlight an element)\n * - When a press has deactivated (e.g. un-highlight an element)\n * - When a press sould trigger an action, meaning it activated and deactivated\n *   while within the geometry of the element without the lock being stolen.\n *\n * A high quality interaction isn't as simple as you might think. There should\n * be a slight delay before activation. Moving your finger beyond an element's\n * bounds should trigger deactivation, but moving the same finger back within an\n * element's bounds should trigger reactivation.\n *\n * In order to use `PressResponder`, do the following:\n *\n *     const pressResponder = new PressResponder(config);\n *\n * 2. Choose the rendered component who should collect the press events. On that\n *    element, spread `pressability.getEventHandlers()` into its props.\n *\n *    return (\n *      <View {...this.state.pressResponder.getEventHandlers()} />\n *    );\n *\n * 3. Reset `PressResponder` when your component unmounts.\n *\n *    componentWillUnmount() {\n *      this.state.pressResponder.reset();\n *    }\n *\n * ==================== Implementation Details ====================\n *\n * `PressResponder` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n * # Geometry\n *\n *  ┌────────────────────────┐\n *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`.\n *  │  │  ┌────────────┐  │  │\n *  │  │  │ VisualRect │  │  │\n *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time\n *  │  │    HitRect       │  │   before letting up, `VisualRect` activates.\n *  │  └──────────────────┘  │\n *  │       Out Region   o   │\n *  └────────────────────│───┘\n *                       └────── When the press is released outside the `HitRect`,\n *                               the responder is NOT eligible for a \"press\".\n *\n * # State Machine\n *\n * ┌───────────────┐ ◀──── RESPONDER_RELEASE\n * │ NOT_RESPONDER │\n * └───┬───────────┘ ◀──── RESPONDER_TERMINATED\n *     │\n *     │ RESPONDER_GRANT (HitRect)\n *     │\n *     ▼\n * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │\n * │ PRESS_START         ├────────▶ │ PRESS_START       ├────────────▶ │ LONG_PRESS_START  │\n * └─────────────────────┘          └───────────────────┘              └───────────────────┘\n *\n * T + DELAY => LONG_PRESS_DELAY + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the invocation of `onLongPress`. Only when the browser produces a\n * `click` event is `onPress` invoked.\n */\nclass PressResponder {\n  constructor(config) {\n    this._eventHandlers = null;\n    this._isPointerTouch = false;\n    this._longPressDelayTimeout = null;\n    this._longPressDispatched = false;\n    this._pressDelayTimeout = null;\n    this._pressOutDelayTimeout = null;\n    this._touchState = NOT_RESPONDER;\n    this._responderElement = null;\n    this.configure(config);\n  }\n  configure(config) {\n    this._config = config;\n  }\n\n  /**\n   * Resets any pending timers. This should be called on unmount.\n   */\n  reset() {\n    this._cancelLongPressDelayTimeout();\n    this._cancelPressDelayTimeout();\n    this._cancelPressOutDelayTimeout();\n  }\n\n  /**\n   * Returns a set of props to spread into the interactive element.\n   */\n  getEventHandlers() {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n    return this._eventHandlers;\n  }\n  _createEventHandlers() {\n    var start = (event, shouldDelay) => {\n      event.persist();\n      this._cancelPressOutDelayTimeout();\n      this._longPressDispatched = false;\n      this._selectionTerminated = false;\n      this._touchState = NOT_RESPONDER;\n      this._isPointerTouch = event.nativeEvent.type === 'touchstart';\n      this._receiveSignal(RESPONDER_GRANT, event);\n      var delayPressStart = normalizeDelay(this._config.delayPressStart, 0, DEFAULT_PRESS_DELAY_MS);\n      if (shouldDelay !== false && delayPressStart > 0) {\n        this._pressDelayTimeout = setTimeout(() => {\n          this._receiveSignal(DELAY, event);\n        }, delayPressStart);\n      } else {\n        this._receiveSignal(DELAY, event);\n      }\n      var delayLongPress = normalizeDelay(this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS);\n      this._longPressDelayTimeout = setTimeout(() => {\n        this._handleLongPress(event);\n      }, delayLongPress + delayPressStart);\n    };\n    var end = event => {\n      this._receiveSignal(RESPONDER_RELEASE, event);\n    };\n    var keyupHandler = event => {\n      var onPress = this._config.onPress;\n      var target = event.target;\n      if (this._touchState !== NOT_RESPONDER && isValidKeyPress(event)) {\n        end(event);\n        document.removeEventListener('keyup', keyupHandler);\n        var role = target.getAttribute('role');\n        var elementType = getElementType(target);\n        var isNativeInteractiveElement = role === 'link' || elementType === 'a' || elementType === 'button' || elementType === 'input' || elementType === 'select' || elementType === 'textarea';\n        var isActiveElement = this._responderElement === target;\n        if (onPress != null && !isNativeInteractiveElement && isActiveElement) {\n          onPress(event);\n        }\n        this._responderElement = null;\n      }\n    };\n    return {\n      onStartShouldSetResponder: event => {\n        var disabled = this._config.disabled;\n        if (disabled && isButtonRole(event.currentTarget)) {\n          event.stopPropagation();\n        }\n        if (disabled == null) {\n          return true;\n        }\n        return !disabled;\n      },\n      onKeyDown: event => {\n        var disabled = this._config.disabled;\n        var key = event.key,\n          target = event.target;\n        if (!disabled && isValidKeyPress(event)) {\n          if (this._touchState === NOT_RESPONDER) {\n            start(event, false);\n            this._responderElement = target;\n            // Listen to 'keyup' on document to account for situations where\n            // focus is moved to another element during 'keydown'.\n            document.addEventListener('keyup', keyupHandler);\n          }\n          var isSpacebarKey = key === ' ' || key === 'Spacebar';\n          var role = getElementRole(target);\n          var isButtonLikeRole = role === 'button' || role === 'menuitem';\n          if (isSpacebarKey && isButtonLikeRole && getElementType(target) !== 'button') {\n            // Prevent spacebar scrolling the window if using non-native button\n            event.preventDefault();\n          }\n          event.stopPropagation();\n        }\n      },\n      onResponderGrant: event => start(event),\n      onResponderMove: event => {\n        if (this._config.onPressMove != null) {\n          this._config.onPressMove(event);\n        }\n        var touch = getTouchFromResponderEvent(event);\n        if (this._touchActivatePosition != null) {\n          var deltaX = this._touchActivatePosition.pageX - touch.pageX;\n          var deltaY = this._touchActivatePosition.pageY - touch.pageY;\n          if (Math.hypot(deltaX, deltaY) > 10) {\n            this._cancelLongPressDelayTimeout();\n          }\n        }\n      },\n      onResponderRelease: event => end(event),\n      onResponderTerminate: event => {\n        if (event.nativeEvent.type === 'selectionchange') {\n          this._selectionTerminated = true;\n        }\n        this._receiveSignal(RESPONDER_TERMINATED, event);\n      },\n      onResponderTerminationRequest: event => {\n        var _this$_config = this._config,\n          cancelable = _this$_config.cancelable,\n          disabled = _this$_config.disabled,\n          onLongPress = _this$_config.onLongPress;\n        // If `onLongPress` is provided, don't terminate on `contextmenu` as default\n        // behavior will be prevented for non-mouse pointers.\n        if (!disabled && onLongPress != null && this._isPointerTouch && event.nativeEvent.type === 'contextmenu') {\n          return false;\n        }\n        if (cancelable == null) {\n          return true;\n        }\n        return cancelable;\n      },\n      // NOTE: this diverges from react-native in 3 significant ways:\n      // * The `onPress` callback is not connected to the responder system (the native\n      //  `click` event must be used but is dispatched in many scenarios where no pointers\n      //   are on the screen.) Therefore, it's possible for `onPress` to be called without\n      //   `onPress{Start,End}` being called first.\n      // * The `onPress` callback is only be called on the first ancestor of the native\n      //   `click` target that is using the PressResponder.\n      // * The event's `nativeEvent` is a `MouseEvent` not a `TouchEvent`.\n      onClick: event => {\n        var _this$_config2 = this._config,\n          disabled = _this$_config2.disabled,\n          onPress = _this$_config2.onPress;\n        if (!disabled) {\n          // If long press dispatched, cancel default click behavior.\n          // If the responder terminated because text was selected during the gesture,\n          // cancel the default click behavior.\n          event.stopPropagation();\n          if (this._longPressDispatched || this._selectionTerminated) {\n            event.preventDefault();\n          } else if (onPress != null && event.altKey === false) {\n            onPress(event);\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      },\n      // If `onLongPress` is provided and a touch pointer is being used, prevent the\n      // default context menu from opening.\n      onContextMenu: event => {\n        var _this$_config3 = this._config,\n          disabled = _this$_config3.disabled,\n          onLongPress = _this$_config3.onLongPress;\n        if (!disabled) {\n          if (onLongPress != null && this._isPointerTouch && !event.defaultPrevented) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      }\n    };\n  }\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   */\n  _receiveSignal(signal, event) {\n    var prevState = this._touchState;\n    var nextState = null;\n    if (Transitions[prevState] != null) {\n      nextState = Transitions[prevState][signal];\n    }\n    if (this._touchState === NOT_RESPONDER && signal === RESPONDER_RELEASE) {\n      return;\n    }\n    if (nextState == null || nextState === ERROR) {\n      console.error(\"PressResponder: Invalid signal \" + signal + \" for state \" + prevState + \" on responder\");\n    } else if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n      this._touchState = nextState;\n    }\n  }\n\n  /**\n   * Performs a transition between touchable states and identify any activations\n   * or deactivations (and callback invocations).\n   */\n  _performTransitionSideEffects(prevState, nextState, signal, event) {\n    if (isTerminalSignal(signal)) {\n      // Pressable suppression of contextmenu on windows.\n      // On Windows, the contextmenu is displayed after pointerup.\n      // https://github.com/necolas/react-native-web/issues/2296\n      setTimeout(() => {\n        this._isPointerTouch = false;\n      }, 0);\n      this._touchActivatePosition = null;\n      this._cancelLongPressDelayTimeout();\n    }\n    if (isPressStartSignal(prevState) && signal === LONG_PRESS_DETECTED) {\n      var onLongPress = this._config.onLongPress;\n      // Long press is not supported for keyboards because 'click' can be dispatched\n      // immediately (and multiple times) after 'keydown'.\n      if (onLongPress != null && event.nativeEvent.key == null) {\n        onLongPress(event);\n        this._longPressDispatched = true;\n      }\n    }\n    var isPrevActive = isActiveSignal(prevState);\n    var isNextActive = isActiveSignal(nextState);\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n    if (isPressStartSignal(prevState) && signal === RESPONDER_RELEASE) {\n      var _this$_config4 = this._config,\n        _onLongPress = _this$_config4.onLongPress,\n        onPress = _this$_config4.onPress;\n      if (onPress != null) {\n        var isPressCanceledByLongPress = _onLongPress != null && prevState === RESPONDER_ACTIVE_LONG_PRESS_START;\n        if (!isPressCanceledByLongPress) {\n          // If we never activated (due to delays), activate and deactivate now.\n          if (!isNextActive && !isPrevActive) {\n            this._activate(event);\n            this._deactivate(event);\n          }\n        }\n      }\n    }\n    this._cancelPressDelayTimeout();\n  }\n  _activate(event) {\n    var _this$_config5 = this._config,\n      onPressChange = _this$_config5.onPressChange,\n      onPressStart = _this$_config5.onPressStart;\n    var touch = getTouchFromResponderEvent(event);\n    this._touchActivatePosition = {\n      pageX: touch.pageX,\n      pageY: touch.pageY\n    };\n    if (onPressStart != null) {\n      onPressStart(event);\n    }\n    if (onPressChange != null) {\n      onPressChange(true);\n    }\n  }\n  _deactivate(event) {\n    var _this$_config6 = this._config,\n      onPressChange = _this$_config6.onPressChange,\n      onPressEnd = _this$_config6.onPressEnd;\n    function end() {\n      if (onPressEnd != null) {\n        onPressEnd(event);\n      }\n      if (onPressChange != null) {\n        onPressChange(false);\n      }\n    }\n    var delayPressEnd = normalizeDelay(this._config.delayPressEnd);\n    if (delayPressEnd > 0) {\n      this._pressOutDelayTimeout = setTimeout(() => {\n        end();\n      }, delayPressEnd);\n    } else {\n      end();\n    }\n  }\n  _handleLongPress(event) {\n    if (this._touchState === RESPONDER_ACTIVE_PRESS_START || this._touchState === RESPONDER_ACTIVE_LONG_PRESS_START) {\n      this._receiveSignal(LONG_PRESS_DETECTED, event);\n    }\n  }\n  _cancelLongPressDelayTimeout() {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  }\n  _cancelPressDelayTimeout() {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  }\n  _cancelPressOutDelayTimeout() {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  }\n}\nexports.default = PressResponder;\nfunction normalizeDelay(delay, min, fallback) {\n  if (min === void 0) {\n    min = 0;\n  }\n  if (fallback === void 0) {\n    fallback = 0;\n  }\n  return Math.max(min, delay !== null && delay !== void 0 ? delay : fallback);\n}\nfunction getTouchFromResponderEvent(event) {\n  var _event$nativeEvent = event.nativeEvent,\n    changedTouches = _event$nativeEvent.changedTouches,\n    touches = _event$nativeEvent.touches;\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n  return event.nativeEvent;\n}\nmodule.exports = exports.default;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nexports.__esModule = true;\nexports.default = usePressEvents;\nvar _PressResponder = _interopRequireDefault(require(\"./PressResponder\"));\nvar _react = require(\"react\");\nfunction usePressEvents(hostRef, config) {\n  var pressResponderRef = (0, _react.useRef)(null);\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new _PressResponder.default(config);\n  }\n  var pressResponder = pressResponderRef.current;\n\n  // Re-configure to use the current node and configuration.\n  (0, _react.useEffect)(() => {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n\n  // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n  (0, _react.useEffect)(() => {\n    return () => {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  (0, _react.useDebugValue)(config);\n  return pressResponder.getEventHandlers();\n}\nmodule.exports = exports.default;","// https://github.com/necolas/react-native-web/blob/0.20.0/packages/react-native-web/src/modules/usePressEvents/index.js\n\nimport { Ref } from \"react\";\nimport { GestureResponderEvent } from \"react-native\";\n// @ts-expect-error\nimport originalUsePressEvents from \"react-native-web/dist/cjs/modules/usePressEvents\";\n\ntype ClickEvent = unknown;\ntype KeyboardEvent = unknown;\ntype ResponderEvent = unknown;\n\nexport type PressResponderConfig = {\n  cancelable?: boolean;\n  delayLongPress?: number;\n  delayPressEnd?: number;\n  delayPressStart?: number;\n  disabled?: boolean;\n  onLongPress?: (event: ResponderEvent) => void;\n  onPress?: (event: GestureResponderEvent) => void;\n  onPressChange?: (event: ResponderEvent) => void;\n  onPressEnd?: (event: ResponderEvent) => void;\n  onPressMove?: (event: ResponderEvent) => void;\n  onPressStart?: (event: ResponderEvent) => void;\n};\n\ntype EventHandlers = {\n  onClick?: (event: ClickEvent) => void;\n  onContextMenu?: (event: ClickEvent) => void;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  onResponderGrant?: (event: ResponderEvent) => void;\n  onResponderMove?: (event: ResponderEvent) => void;\n  onResponderRelease?: (event: ResponderEvent) => void;\n  onResponderTerminate?: (event: ResponderEvent) => void;\n  onResponderTerminationRequest?: (event: ResponderEvent) => boolean;\n  onStartShouldSetResponder?: (event: ResponderEvent) => boolean;\n};\n\nexport const usePressEvents = originalUsePressEvents as <T>(\n  ref: Ref<T | null>,\n  config: PressResponderConfig,\n) => EventHandlers;\n","// https://github.com/necolas/react-native-web/blob/0.20.0/packages/react-native-web/src/exports/Pressable/index.js\n\nimport { ComponentType, FC, memo, ReactNode, Ref, useCallback, useMemo, useRef } from \"react\";\nimport {\n  HrefAttrs,\n  NativeSyntheticEvent,\n  PressableProps,\n  PressableStateCallbackType,\n  StyleSheet,\n  Text,\n  TextInputProps,\n  TextProps,\n  View,\n  ViewProps,\n} from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { Except, Merge } from \"type-fest\";\nimport { useForceableState } from \"../hooks/useForceableState\";\nimport { useHover } from \"../hooks/useHover\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { PressResponderConfig, usePressEvents } from \"../hooks/usePressEvents\";\n\nconst styles = StyleSheet.create({\n  active: {\n    cursor: \"pointer\",\n    touchAction: \"manipulation\",\n  },\n  disabled: {\n    cursor: \"not-allowed\",\n  },\n});\n\ntype Props<BaseProps extends TextProps | TextInputProps> = Merge<\n  BaseProps,\n  {\n    ref?: Ref<unknown>;\n    children?: ReactNode | ((state: PressableStateCallbackType) => ReactNode);\n    delayLongPress?: number;\n    delayPressIn?: number;\n    delayPressOut?: number;\n    disabled?: boolean;\n    onBlur?: (event: NativeSyntheticEvent<React.FocusEvent>) => void;\n    onContextMenu?: (event: NativeSyntheticEvent<React.SyntheticEvent>) => void;\n    onFocus?: (event: NativeSyntheticEvent<React.FocusEvent>) => void;\n    onHoverIn?: (event: unknown) => void;\n    onHoverOut?: (event: unknown) => void;\n    onKeyDown?: (event: NativeSyntheticEvent<React.KeyboardEvent>) => void;\n    onLayout?: BaseProps[\"onLayout\"];\n    onLongPress?: PressResponderConfig[\"onLongPress\"];\n    onPress?: PressResponderConfig[\"onPress\"];\n    onPressIn?: PressResponderConfig[\"onPressStart\"];\n    onPressMove?: PressResponderConfig[\"onPressMove\"];\n    onPressOut?: PressResponderConfig[\"onPressEnd\"];\n    style?: BaseProps[\"style\"] | ((state: PressableStateCallbackType) => BaseProps[\"style\"]);\n    /**\n     * Used only for documentation or testing (e.g. snapshot testing).\n     */\n    testOnly_hovered?: boolean;\n    testOnly_pressed?: boolean;\n  }\n>;\n\nconst getPressable = <P extends Props<TextProps | TextInputProps>>(\n  // biome-ignore lint/suspicious/noExplicitAny:\n  Component: ComponentType<any>,\n  config: { applyPressStyle?: boolean } = {},\n) => {\n  const { applyPressStyle = true } = config;\n\n  return (props: P) => {\n    const {\n      ref,\n      children,\n      delayLongPress,\n      delayPressIn,\n      delayPressOut,\n      disabled = false,\n      onBlur,\n      onContextMenu,\n      onFocus,\n      onHoverIn,\n      onHoverOut,\n      onKeyDown,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressMove,\n      onPressOut,\n      style,\n      tabIndex,\n      testOnly_hovered,\n      testOnly_pressed,\n      ...rest\n    } = props;\n\n    const [hovered, setHovered] = useForceableState(testOnly_hovered === true);\n    const [focused, setFocused] = useForceableState(false);\n    const [pressed, setPressed] = useForceableState(testOnly_pressed === true);\n\n    const hostRef = useRef<Element>(null);\n    const setRef = useMergeRefs(ref, hostRef);\n\n    const pressConfig = useMemo(\n      () => ({\n        delayLongPress,\n        delayPressStart: delayPressIn,\n        delayPressEnd: delayPressOut,\n        disabled,\n        onLongPress,\n        onPress,\n        onPressChange: setPressed,\n        onPressStart: onPressIn,\n        onPressMove,\n        onPressEnd: onPressOut,\n      }),\n      [\n        delayLongPress,\n        delayPressIn,\n        delayPressOut,\n        disabled,\n        onLongPress,\n        onPress,\n        onPressIn,\n        onPressMove,\n        onPressOut,\n        setPressed,\n      ],\n    );\n\n    // @ts-expect-error\n    const pressEventHandlers = usePressEvents(hostRef, pressConfig);\n    const { onContextMenu: onContextMenuPress, onKeyDown: onKeyDownPress } = pressEventHandlers;\n\n    useHover(hostRef, {\n      // The following line has been commented out as we want to event to bubble up\n      // contain: true,\n      disabled,\n      onHoverChange: setHovered,\n      onHoverStart: onHoverIn,\n      onHoverEnd: onHoverOut,\n    });\n\n    const interactionState = { hovered, focused, pressed };\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies(hostRef):\n    const blurHandler = useCallback(\n      (e: NativeSyntheticEvent<React.FocusEvent>) => {\n        if (e.nativeEvent.target === hostRef.current) {\n          setFocused(false);\n          onBlur?.(e);\n        }\n      },\n      [hostRef, setFocused, onBlur],\n    );\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies(hostRef):\n    const focusHandler = useCallback(\n      (e: NativeSyntheticEvent<React.FocusEvent>) => {\n        if (e.nativeEvent.target === hostRef.current) {\n          setFocused(true);\n          onFocus?.(e);\n        }\n      },\n      [hostRef, setFocused, onFocus],\n    );\n\n    const contextMenuHandler = useCallback(\n      (e: NativeSyntheticEvent<React.SyntheticEvent>) => {\n        onContextMenuPress?.(e);\n        onContextMenu?.(e);\n      },\n      [onContextMenu, onContextMenuPress],\n    );\n\n    const keyDownHandler = useCallback(\n      (e: NativeSyntheticEvent<React.KeyboardEvent>) => {\n        onKeyDownPress?.(e);\n        onKeyDown?.(e);\n      },\n      [onKeyDown, onKeyDownPress],\n    );\n\n    let _tabIndex: 0 | -1 | undefined;\n\n    if (tabIndex !== undefined) {\n      _tabIndex = tabIndex;\n    } else {\n      _tabIndex = disabled ? -1 : 0;\n    }\n\n    return (\n      <Component\n        {...rest}\n        {...pressEventHandlers}\n        aria-disabled={disabled}\n        onBlur={blurHandler}\n        onContextmenu={contextMenuHandler}\n        onFocus={focusHandler}\n        onKeyDown={keyDownHandler}\n        ref={setRef}\n        style={[\n          match({ disabled, applyPressStyle })\n            .with({ disabled: false, applyPressStyle: true }, () => styles.active)\n            .with({ disabled: true }, () => styles.disabled)\n            .otherwise(() => null),\n          typeof style === \"function\" ? style(interactionState) : style,\n        ]}\n        tabIndex={_tabIndex}\n      >\n        {typeof children === \"function\" ? children(interactionState) : children}\n      </Component>\n    );\n  };\n};\n\ntype ExtraProps = {\n  href?: string;\n  hrefAttrs?: HrefAttrs;\n};\n\nexport type PressableViewProps = Except<Props<ViewProps>, \"children\">;\nexport type PressableTextProps = Props<TextProps>;\n\nexport const Pressable = memo(\n  getPressable<PressableViewProps>(View, { applyPressStyle: true }),\n) as FC<PressableProps & ExtraProps & { ref?: Ref<View> }>;\n\nexport const PressableText = memo(\n  getPressable<PressableTextProps>(Text, { applyPressStyle: true }),\n) as FC<PressableTextProps & { ref?: Ref<Text> }>;\n\nPressableText.displayName = \"PressableText\";\n"],"names":["useForceableState","forced","value","setValue","useState","_interopRequireWildcard","require$$0","exports","mergeRefs","require$$1","_len","args","_key","node","ref","module","_interopRequireDefault","useMergeRefs","React","require$$2","_mergeRefs","require$$3","originalUseMergeRefs","DELAY","ERROR","LONG_PRESS_DETECTED","NOT_RESPONDER","RESPONDER_ACTIVE_LONG_PRESS_START","RESPONDER_ACTIVE_PRESS_START","RESPONDER_INACTIVE_PRESS_START","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","Transitions","getElementRole","element","getElementType","isActiveSignal","signal","isButtonRole","isPressStartSignal","isTerminalSignal","isValidKeyPress","event","key","target","isSpacebar","isButtonish","DEFAULT_LONG_PRESS_DELAY_MS","DEFAULT_PRESS_DELAY_MS","PressResponder","config","start","shouldDelay","delayPressStart","normalizeDelay","delayLongPress","end","keyupHandler","onPress","role","elementType","isNativeInteractiveElement","isActiveElement","disabled","isSpacebarKey","isButtonLikeRole","touch","getTouchFromResponderEvent","deltaX","deltaY","_this$_config","cancelable","onLongPress","_this$_config2","_this$_config3","prevState","nextState","isPrevActive","isNextActive","_this$_config4","_onLongPress","isPressCanceledByLongPress","_this$_config5","onPressChange","onPressStart","_this$_config6","onPressEnd","delayPressEnd","delay","min","fallback","_event$nativeEvent","changedTouches","touches","usePressEvents","_PressResponder","_react","hostRef","pressResponderRef","pressResponder","originalUsePressEvents","styles","StyleSheet","getPressable","Component","applyPressStyle","props","children","delayPressIn","delayPressOut","onBlur","onContextMenu","onFocus","onHoverIn","onHoverOut","onKeyDown","onPressIn","onPressMove","onPressOut","style","tabIndex","testOnly_hovered","testOnly_pressed","rest","hovered","setHovered","focused","setFocused","pressed","setPressed","useRef","setRef","pressConfig","useMemo","pressEventHandlers","onContextMenuPress","onKeyDownPress","useHover","interactionState","blurHandler","useCallback","e","focusHandler","contextMenuHandler","keyDownHandler","_tabIndex","jsx","match","Pressable","memo","View","PressableText","Text"],"mappings":"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","x_google_ignoreList":[1,2,4,5]}