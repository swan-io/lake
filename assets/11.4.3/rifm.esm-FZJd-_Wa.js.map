{"version":3,"file":"rifm.esm-FZJd-_Wa.js","sources":["../../../node_modules/rifm/dist/rifm.esm.js"],"sourcesContent":["import { useReducer, useRef, useLayoutEffect, useEffect } from 'react';\n\nconst useRifm = props => {\n  const [, refresh] = useReducer(c => c + 1, 0);\n  const valueRef = useRef(null);\n  const {\n    replace,\n    append\n  } = props;\n  const userValue = replace ? replace(props.format(props.value)) : props.format(props.value); // state of delete button see comments below about inputType support\n\n  const isDeleleteButtonDownRef = useRef(false);\n\n  const onChange = evt => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (evt.target.type === 'number') {\n        console.error('Rifm does not support input type=number, use type=tel instead.');\n        return;\n      }\n\n      if (evt.target.type === 'date') {\n        console.error('Rifm does not support input type=date.');\n        return;\n      }\n    }\n\n    const eventValue = evt.target.value;\n    valueRef.current = [eventValue, // eventValue\n    evt.target, // input\n    eventValue.length > userValue.length, // isSizeIncreaseOperation\n    isDeleleteButtonDownRef.current, // isDeleleteButtonDown\n    userValue === props.format(eventValue) // isNoOperation\n    ];\n\n    if (process.env.NODE_ENV !== 'production') {\n      const formattedEventValue = props.format(eventValue);\n\n      if (eventValue !== formattedEventValue && eventValue.toLowerCase() === formattedEventValue.toLowerCase()) {\n        console.warn('Case enforcement does not work with format. Please use replace={value => value.toLowerCase()} instead');\n      }\n    } // The main trick is to update underlying input with non formatted value (= eventValue)\n    // that allows us to calculate right cursor position after formatting (see getCursorPosition)\n    // then we format new value and call props.onChange with masked/formatted value\n    // and finally we are able to set cursor position into right place\n\n\n    refresh();\n  }; // React prints warn on server in non production mode about useLayoutEffect usage\n  // in both cases it's noop\n\n\n  if (process.env.NODE_ENV === 'production' || typeof window !== 'undefined') {\n    useLayoutEffect(() => {\n      if (valueRef.current == null) return;\n      let [eventValue, input, isSizeIncreaseOperation, isDeleleteButtonDown, // No operation means that value itself hasn't been changed, BTW cursor, selection etc can be changed\n      isNoOperation] = valueRef.current;\n      valueRef.current = null; // this usually occurs on deleting special symbols like ' here 123'123.00\n      // in case of isDeleleteButtonDown cursor should move differently vs backspace\n\n      const deleteWasNoOp = isDeleleteButtonDown && isNoOperation;\n      const valueAfterSelectionStart = eventValue.slice(input.selectionStart);\n      const acceptedCharIndexAfterDelete = valueAfterSelectionStart.search(props.accept || /\\d/g);\n      const charsToSkipAfterDelete = acceptedCharIndexAfterDelete !== -1 ? acceptedCharIndexAfterDelete : 0; // Create string from only accepted symbols\n\n      const clean = str => (str.match(props.accept || /\\d/g) || []).join('');\n\n      const valueBeforeSelectionStart = clean(eventValue.substr(0, input.selectionStart)); // trying to find cursor position in formatted value having knowledge about valueBeforeSelectionStart\n      // This works because we assume that format doesn't change the order of accepted symbols.\n      // Imagine we have formatter which adds ' symbol between numbers, and by default we refuse all non numeric symbols\n      // for example we had input = 1'2|'4 (| means cursor position) then user entered '3' symbol\n      // inputValue = 1'23'|4 so valueBeforeSelectionStart = 123 and formatted value = 1'2'3'4\n      // calling getCursorPosition(\"1'2'3'4\") will give us position after 3, 1'2'3|'4\n      // so for formatting just this function to determine cursor position after formatting is enough\n      // with masking we need to do some additional checks see `mask` below\n\n      const getCursorPosition = val => {\n        let start = 0;\n        let cleanPos = 0;\n\n        for (let i = 0; i !== valueBeforeSelectionStart.length; ++i) {\n          let newPos = val.indexOf(valueBeforeSelectionStart[i], start) + 1;\n          let newCleanPos = clean(val).indexOf(valueBeforeSelectionStart[i], cleanPos) + 1; // this skips position change if accepted symbols order was broken\n          // For example fixes edge case with fixed point numbers:\n          // You have '0|.00', then press 1, it becomes 01|.00 and after format 1.00, this breaks our assumption\n          // that order of accepted symbols is not changed after format,\n          // so here we don't update start position if other accepted symbols was inbetween current and new position\n\n          if (newCleanPos - cleanPos > 1) {\n            newPos = start;\n            newCleanPos = cleanPos;\n          }\n\n          cleanPos = Math.max(newCleanPos, cleanPos);\n          start = Math.max(start, newPos);\n        }\n\n        return start;\n      }; // Masking part, for masks if size of mask is above some value\n      // we need to replace symbols instead of do nothing as like in format\n\n\n      if (props.mask === true && isSizeIncreaseOperation && !isNoOperation) {\n        let start = getCursorPosition(eventValue);\n        const c = clean(eventValue.substr(start))[0];\n        start = eventValue.indexOf(c, start);\n        eventValue = `${eventValue.substr(0, start)}${eventValue.substr(start + 1)}`;\n      }\n\n      let formattedValue = props.format(eventValue);\n\n      if (append != null && // cursor at the end\n      input.selectionStart === eventValue.length && !isNoOperation) {\n        if (isSizeIncreaseOperation) {\n          formattedValue = append(formattedValue);\n        } else {\n          // If after delete last char is special character and we use append\n          // delete it too\n          // was: \"12-3|\" backspace pressed, then should be \"12|\"\n          if (clean(formattedValue.slice(-1)) === '') {\n            formattedValue = formattedValue.slice(0, -1);\n          }\n        }\n      }\n\n      const replacedValue = replace ? replace(formattedValue) : formattedValue;\n\n      if (userValue === replacedValue) {\n        // if nothing changed for formatted value, just refresh so userValue will be used at render\n        refresh();\n      } else {\n        props.onChange(replacedValue);\n      }\n\n      return () => {\n        let start = getCursorPosition(formattedValue); // Visually improves working with masked values,\n        // like cursor jumping over refused symbols\n        // as an example date mask: was \"5|1-24-3\" then user pressed \"6\"\n        // it becomes \"56-|12-43\" with this code, and \"56|-12-43\" without\n\n        if (props.mask != null && (isSizeIncreaseOperation || isDeleleteButtonDown && !deleteWasNoOp)) {\n          while (formattedValue[start] && clean(formattedValue[start]) === '') {\n            start += 1;\n          }\n        }\n\n        input.selectionStart = input.selectionEnd = start + (deleteWasNoOp ? 1 + charsToSkipAfterDelete : 0);\n      };\n    });\n  }\n\n  useEffect(() => {\n    // until https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType will be supported\n    // by all major browsers (now supported by: +chrome, +safari, ?edge, !firefox)\n    // there is no way I found to distinguish in onChange\n    // backspace or delete was called in some situations\n    // firefox track https://bugzilla.mozilla.org/show_bug.cgi?id=1447239\n    const handleKeyDown = evt => {\n      if (evt.code === 'Delete') {\n        isDeleleteButtonDownRef.current = true;\n      }\n    };\n\n    const handleKeyUp = evt => {\n      if (evt.code === 'Delete') {\n        isDeleleteButtonDownRef.current = false;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []);\n  return {\n    value: valueRef.current != null ? valueRef.current[0] : userValue,\n    onChange\n  };\n};\nconst Rifm = props => {\n  const renderProps = useRifm(props);\n  return props.children(renderProps);\n};\n\nexport { Rifm, useRifm };\n"],"names":["useRifm","props","refresh","useReducer","c","valueRef","useRef","replace","append","userValue","isDeleleteButtonDownRef","onChange","evt","eventValue","useLayoutEffect","input","isSizeIncreaseOperation","isDeleleteButtonDown","isNoOperation","deleteWasNoOp","acceptedCharIndexAfterDelete","charsToSkipAfterDelete","clean","str","valueBeforeSelectionStart","getCursorPosition","val","start","cleanPos","i","newPos","newCleanPos","formattedValue","replacedValue","useEffect","handleKeyDown","handleKeyUp","Rifm","renderProps"],"mappings":"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","x_google_ignoreList":[0]}