{"version":3,"file":"MultiSelect.stories-5c459762.js","sources":["../../../packages/lake/src/utils/string.ts","../../../packages/lake/src/components/InputError.tsx","../../../packages/lake/src/components/MultiSelect.tsx"],"sourcesContent":["export const safeSplitAround = (string: string, expression: string) => {\n  let index = 0;\n  const splitString: string[] = [];\n  while (index < string.length) {\n    const nextIndexOfExpression = string.indexOf(expression, index);\n    if (nextIndexOfExpression === -1) {\n      splitString.push(string.slice(index));\n      return splitString;\n    }\n    if (nextIndexOfExpression > index) {\n      const endIndex = nextIndexOfExpression + expression.length;\n      splitString.push(\n        string.slice(index, nextIndexOfExpression),\n        string.slice(nextIndexOfExpression, endIndex),\n      );\n      index = endIndex;\n      continue;\n    }\n    if (nextIndexOfExpression === index) {\n      const endIndex = nextIndexOfExpression + expression.length;\n      splitString.push(string.slice(nextIndexOfExpression, endIndex));\n      index = endIndex;\n      continue;\n    }\n    return splitString;\n  }\n  return splitString;\n};\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nconst deburredLetters: Record<string, string> = {\n  // Latin-1 Supplement block.\n  \"\\xc0\": \"A\",\n  \"\\xc1\": \"A\",\n  \"\\xc2\": \"A\",\n  \"\\xc3\": \"A\",\n  \"\\xc4\": \"A\",\n  \"\\xc5\": \"A\",\n  \"\\xe0\": \"a\",\n  \"\\xe1\": \"a\",\n  \"\\xe2\": \"a\",\n  \"\\xe3\": \"a\",\n  \"\\xe4\": \"a\",\n  \"\\xe5\": \"a\",\n  \"\\xc7\": \"C\",\n  \"\\xe7\": \"c\",\n  \"\\xd0\": \"D\",\n  \"\\xf0\": \"d\",\n  \"\\xc8\": \"E\",\n  \"\\xc9\": \"E\",\n  \"\\xca\": \"E\",\n  \"\\xcb\": \"E\",\n  \"\\xe8\": \"e\",\n  \"\\xe9\": \"e\",\n  \"\\xea\": \"e\",\n  \"\\xeb\": \"e\",\n  \"\\xcc\": \"I\",\n  \"\\xcd\": \"I\",\n  \"\\xce\": \"I\",\n  \"\\xcf\": \"I\",\n  \"\\xec\": \"i\",\n  \"\\xed\": \"i\",\n  \"\\xee\": \"i\",\n  \"\\xef\": \"i\",\n  \"\\xd1\": \"N\",\n  \"\\xf1\": \"n\",\n  \"\\xd2\": \"O\",\n  \"\\xd3\": \"O\",\n  \"\\xd4\": \"O\",\n  \"\\xd5\": \"O\",\n  \"\\xd6\": \"O\",\n  \"\\xd8\": \"O\",\n  \"\\xf2\": \"o\",\n  \"\\xf3\": \"o\",\n  \"\\xf4\": \"o\",\n  \"\\xf5\": \"o\",\n  \"\\xf6\": \"o\",\n  \"\\xf8\": \"o\",\n  \"\\xd9\": \"U\",\n  \"\\xda\": \"U\",\n  \"\\xdb\": \"U\",\n  \"\\xdc\": \"U\",\n  \"\\xf9\": \"u\",\n  \"\\xfa\": \"u\",\n  \"\\xfb\": \"u\",\n  \"\\xfc\": \"u\",\n  \"\\xdd\": \"Y\",\n  \"\\xfd\": \"y\",\n  \"\\xff\": \"y\",\n  \"\\xc6\": \"Ae\",\n  \"\\xe6\": \"ae\",\n  \"\\xde\": \"Th\",\n  \"\\xfe\": \"th\",\n  \"\\xdf\": \"ss\",\n  // Latin Extended-A block.\n  \"\\u0100\": \"A\",\n  \"\\u0102\": \"A\",\n  \"\\u0104\": \"A\",\n  \"\\u0101\": \"a\",\n  \"\\u0103\": \"a\",\n  \"\\u0105\": \"a\",\n  \"\\u0106\": \"C\",\n  \"\\u0108\": \"C\",\n  \"\\u010a\": \"C\",\n  \"\\u010c\": \"C\",\n  \"\\u0107\": \"c\",\n  \"\\u0109\": \"c\",\n  \"\\u010b\": \"c\",\n  \"\\u010d\": \"c\",\n  \"\\u010e\": \"D\",\n  \"\\u0110\": \"D\",\n  \"\\u010f\": \"d\",\n  \"\\u0111\": \"d\",\n  \"\\u0112\": \"E\",\n  \"\\u0114\": \"E\",\n  \"\\u0116\": \"E\",\n  \"\\u0118\": \"E\",\n  \"\\u011a\": \"E\",\n  \"\\u0113\": \"e\",\n  \"\\u0115\": \"e\",\n  \"\\u0117\": \"e\",\n  \"\\u0119\": \"e\",\n  \"\\u011b\": \"e\",\n  \"\\u011c\": \"G\",\n  \"\\u011e\": \"G\",\n  \"\\u0120\": \"G\",\n  \"\\u0122\": \"G\",\n  \"\\u011d\": \"g\",\n  \"\\u011f\": \"g\",\n  \"\\u0121\": \"g\",\n  \"\\u0123\": \"g\",\n  \"\\u0124\": \"H\",\n  \"\\u0126\": \"H\",\n  \"\\u0125\": \"h\",\n  \"\\u0127\": \"h\",\n  \"\\u0128\": \"I\",\n  \"\\u012a\": \"I\",\n  \"\\u012c\": \"I\",\n  \"\\u012e\": \"I\",\n  \"\\u0130\": \"I\",\n  \"\\u0129\": \"i\",\n  \"\\u012b\": \"i\",\n  \"\\u012d\": \"i\",\n  \"\\u012f\": \"i\",\n  \"\\u0131\": \"i\",\n  \"\\u0134\": \"J\",\n  \"\\u0135\": \"j\",\n  \"\\u0136\": \"K\",\n  \"\\u0137\": \"k\",\n  \"\\u0138\": \"k\",\n  \"\\u0139\": \"L\",\n  \"\\u013b\": \"L\",\n  \"\\u013d\": \"L\",\n  \"\\u013f\": \"L\",\n  \"\\u0141\": \"L\",\n  \"\\u013a\": \"l\",\n  \"\\u013c\": \"l\",\n  \"\\u013e\": \"l\",\n  \"\\u0140\": \"l\",\n  \"\\u0142\": \"l\",\n  \"\\u0143\": \"N\",\n  \"\\u0145\": \"N\",\n  \"\\u0147\": \"N\",\n  \"\\u014a\": \"N\",\n  \"\\u0144\": \"n\",\n  \"\\u0146\": \"n\",\n  \"\\u0148\": \"n\",\n  \"\\u014b\": \"n\",\n  \"\\u014c\": \"O\",\n  \"\\u014e\": \"O\",\n  \"\\u0150\": \"O\",\n  \"\\u014d\": \"o\",\n  \"\\u014f\": \"o\",\n  \"\\u0151\": \"o\",\n  \"\\u0154\": \"R\",\n  \"\\u0156\": \"R\",\n  \"\\u0158\": \"R\",\n  \"\\u0155\": \"r\",\n  \"\\u0157\": \"r\",\n  \"\\u0159\": \"r\",\n  \"\\u015a\": \"S\",\n  \"\\u015c\": \"S\",\n  \"\\u015e\": \"S\",\n  \"\\u0160\": \"S\",\n  \"\\u015b\": \"s\",\n  \"\\u015d\": \"s\",\n  \"\\u015f\": \"s\",\n  \"\\u0161\": \"s\",\n  \"\\u0162\": \"T\",\n  \"\\u0164\": \"T\",\n  \"\\u0166\": \"T\",\n  \"\\u0163\": \"t\",\n  \"\\u0165\": \"t\",\n  \"\\u0167\": \"t\",\n  \"\\u0168\": \"U\",\n  \"\\u016a\": \"U\",\n  \"\\u016c\": \"U\",\n  \"\\u016e\": \"U\",\n  \"\\u0170\": \"U\",\n  \"\\u0172\": \"U\",\n  \"\\u0169\": \"u\",\n  \"\\u016b\": \"u\",\n  \"\\u016d\": \"u\",\n  \"\\u016f\": \"u\",\n  \"\\u0171\": \"u\",\n  \"\\u0173\": \"u\",\n  \"\\u0174\": \"W\",\n  \"\\u0175\": \"w\",\n  \"\\u0176\": \"Y\",\n  \"\\u0177\": \"y\",\n  \"\\u0178\": \"Y\",\n  \"\\u0179\": \"Z\",\n  \"\\u017b\": \"Z\",\n  \"\\u017d\": \"Z\",\n  \"\\u017a\": \"z\",\n  \"\\u017c\": \"z\",\n  \"\\u017e\": \"z\",\n  \"\\u0132\": \"IJ\",\n  \"\\u0133\": \"ij\",\n  \"\\u0152\": \"Oe\",\n  \"\\u0153\": \"oe\",\n  \"\\u0149\": \"'n\",\n  \"\\u017f\": \"s\",\n};\n\nexport const deburr = (value: string): string => {\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  const reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  return value\n    .replace(reLatin, char => deburredLetters[char] ?? \"\")\n    .replace(/[\\u0300-\\u036f]/g, \"\");\n};\n\nexport const words = (string: string): string[] => {\n  return string.split(/\\b/).filter(x => /^[a-zA-Z0-9]+$/.test(x));\n};\n\nexport const capitalize = (string: string) => {\n  return `${string.charAt(0).toUpperCase()}${string.slice(1).toLowerCase()}`;\n};\n","import { StyleProp, StyleSheet, Text, TextStyle } from \"react-native\";\nimport { colors } from \"../constants/colors\";\nimport { typography } from \"../constants/typography\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  base: {\n    ...typography.bodySmall,\n    color: colors.red[100],\n    lineHeight: typography.lineHeights.input,\n    minHeight: 32,\n    paddingHorizontal: 3, // borderRadius / 2\n    paddingVertical: 4,\n  },\n});\n\ntype Props = {\n  message?: string;\n  style?: StyleProp<TextStyle>;\n};\n\nexport const InputError = ({ message = \"\", style }: Props) =>\n  message !== \"\" ? <Text style={[styles.base, style]}>{message}</Text> : <Space height={32} />;\n","import { Array, Dict, Option } from \"@swan-io/boxed\";\nimport { memo as reactMemo, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  FlatList,\n  ListRenderItemInfo,\n  Pressable,\n  SectionList,\n  SectionListData,\n  SectionListRenderItemInfo,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from \"react-native\";\nimport { ColorVariants, backgroundColor, colors, radii, shadows, texts } from \"../constants/design\";\nimport { useDisclosure } from \"../hooks/useDisclosure\";\nimport { groupBy } from \"../utils/array\";\nimport { isNotNullish, isNotNullishOrEmpty } from \"../utils/nullish\";\nimport { safeSplitAround } from \"../utils/string\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { InputError } from \"./InputError\";\nimport { Popover } from \"./Popover\";\nimport { PressableText, PressableTextInput } from \"./Pressable\";\nimport { Space } from \"./Space\";\nimport { Tag } from \"./Tag\";\n\nconst MAX_INPUT_HEIGHT = 120;\nconst ITEM_ELEMENT_HEIGHT = 32;\nconst NB_SUGGESTION_DISPLAYED = 10.5;\n\nconst styles = StyleSheet.create({\n  base: {\n    ...texts.regular,\n    backgroundColor: backgroundColor.accented,\n    borderColor: colors.gray[100],\n    borderRadius: radii[6],\n    borderWidth: 1,\n    cursor: \"default\",\n    overflow: \"hidden\",\n    transitionDuration: \"150ms\",\n    transitionProperty: \"border-color, box-shadow\",\n  },\n  errored: {\n    borderColor: colors.negative[500],\n  },\n  tag: {\n    marginRight: 4,\n    marginVertical: 2,\n  },\n  hovered: {\n    boxShadow: shadows.tile,\n  },\n  focused: {\n    borderColor: colors.gray[500],\n    boxShadow: shadows.tile,\n    outlineStyle: \"none\",\n  },\n  disabled: {\n    backgroundColor: colors.gray[50],\n    borderColor: colors.gray[100],\n    cursor: \"not-allowed\",\n  },\n  actions: {\n    marginVertical: \"auto\",\n    position: \"absolute\",\n    bottom: 0,\n    top: 0,\n    right: 20,\n  },\n  placeholder: {\n    ...texts.regular,\n    color: colors.gray[300],\n    userSelect: \"none\",\n  },\n  list: {\n    marginVertical: 4,\n    maxHeight: ITEM_ELEMENT_HEIGHT * NB_SUGGESTION_DISPLAYED,\n    minHeight: 224,\n  },\n  filterContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n    margin: 16,\n  },\n  filterInput: {\n    ...texts.regular,\n    backgroundColor: backgroundColor.accented,\n    borderColor: colors.gray[100],\n    borderRadius: 4,\n    borderWidth: 1,\n    flexGrow: 1,\n    flexShrink: 1,\n    height: 40,\n    outlineStyle: \"none\",\n    paddingHorizontal: 12,\n    paddingLeft: 40,\n    placeholderTextColor: colors.gray[300],\n  },\n  filterfocused: {\n    borderColor: colors.gray[200],\n  },\n  searchIcon: {\n    position: \"absolute\",\n    left: 14,\n  },\n  tagsList: {\n    flexWrap: \"wrap\",\n    maxHeight: MAX_INPUT_HEIGHT,\n    minHeight: 40,\n    overflowY: \"auto\",\n    paddingHorizontal: 16,\n    paddingRight: 60,\n    paddingVertical: 8,\n  },\n  groupTitleBase: {\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    flexShrink: 1,\n    justifyContent: \"space-between\",\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    transitionDuration: \"200ms\",\n    transitionProperty: \"background-color\",\n  },\n  groupTitle: {\n    ...texts.semibold,\n    userSelect: \"none\",\n  },\n  line: {\n    ...texts.regular,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    transitionDuration: \"200ms\",\n    transitionProperty: \"background-color\",\n    userSelect: \"none\",\n  },\n  lineInGroup: {\n    paddingLeft: 24,\n  },\n  emptyList: {\n    height: 136,\n  },\n  emptyListText: {\n    color: colors.gray.primary,\n  },\n});\n\nexport type MultiSelectItem = {\n  disabled?: boolean;\n  group: string;\n  label: string;\n  value: string;\n};\n\nexport type MultiSelectProps<I> = {\n  color?: ColorVariants;\n  disabled?: boolean;\n  error?: string;\n  emptyResultText?: string;\n  enableGroups?: boolean;\n  filterPlaceholder?: string;\n  items: I[];\n  onValueChange: (values: string[]) => void;\n  placeholder?: string;\n  renderTagGroup?: (items: readonly MultiSelectItem[]) => string;\n  style?: StyleProp<ViewStyle>;\n  values: string[];\n  id?: string;\n};\n\nconst memo: <P extends Record<string, unknown>>(\n  Component: (props: P) => JSX.Element | null,\n  propsAreEqual?: (prevProps: P, nextProps: P) => boolean,\n) => (<I extends MultiSelectItem>(props: MultiSelectProps<I>) => JSX.Element | null) & {\n  displayName?: string;\n} = reactMemo;\n\nexport const MultiSelect = memo<MultiSelectProps<MultiSelectItem>>(\n  ({\n    color = \"gray\",\n    disabled = false,\n    emptyResultText,\n    enableGroups = true,\n    filterPlaceholder,\n    items,\n    onValueChange,\n    placeholder,\n    renderTagGroup,\n    error,\n    style,\n    values,\n    id,\n  }) => {\n    const [filter, setFilter] = useState<string>(\"\");\n\n    const shouldScrollToBottomRef = useRef(false);\n    const selectedTagListRef = useRef<View & Element>(null);\n    const inputRef = useRef<View>(null);\n    const listRef = useRef<FlatList>(null);\n    const [visible, { open, close }] = useDisclosure(false);\n\n    const tint50 = colors[color][50];\n    const tint100 = colors[color][100];\n\n    useEffect(() => {\n      if (!visible) {\n        setFilter(\"\");\n      }\n    }, [visible]);\n\n    useEffect(() => {\n      if (shouldScrollToBottomRef.current) {\n        const top = selectedTagListRef.current?.scrollHeight;\n        selectedTagListRef.current?.scrollTo({ top });\n      }\n\n      shouldScrollToBottomRef.current = false;\n    }, [values]);\n\n    const handleSelectItem = (item: MultiSelectItem) => {\n      shouldScrollToBottomRef.current = true;\n      onValueChange([...values, item.value]);\n    };\n\n    const handleRemoveItem = (item: MultiSelectItem) => {\n      onValueChange(values.filter(index => index !== item.value));\n    };\n\n    const handleClearAll = () => {\n      onValueChange([]);\n    };\n\n    const handleSelectGroup = (groupItems: readonly MultiSelectItem[]) => {\n      shouldScrollToBottomRef.current = true;\n      const items = groupItems.map(item => item.value);\n      const newValue = [...new Set([...values, ...items])];\n      onValueChange(newValue);\n    };\n\n    // Used to get full selected value informations in O(1).\n    const valueItemMapping = useMemo(\n      () =>\n        items.reduce((acc: Record<string, MultiSelectItem>, item) => {\n          acc[item.value] = item;\n          return acc;\n        }, {}),\n      [items],\n    );\n\n    const selectedTags = useMemo(\n      () => values.map(value => valueItemMapping[value]).filter(isNotNullish),\n      [values, valueItemMapping],\n    );\n\n    const filteredItems = useMemo(() => {\n      const remainingTags = items.filter(item => !values.includes(item.value));\n      const cleanedFilter = filter.trim().toLowerCase();\n\n      return cleanedFilter === \"\"\n        ? remainingTags\n        : remainingTags.filter(({ label }) => label.toLowerCase().includes(cleanedFilter));\n    }, [filter, items, values]);\n\n    const sections = useMemo(() => {\n      return Array.filterMap(\n        Dict.entries(groupBy(filteredItems, ({ group }) => group)),\n        ([groupName, data]) =>\n          data === undefined ? Option.None() : Option.Some({ title: groupName, data }),\n      );\n    }, [filteredItems]);\n\n    const ListHeaderComponent = useMemo(\n      () => (\n        <Box direction=\"row\" alignItems=\"center\" style={styles.filterContainer}>\n          <PressableTextInput\n            autoComplete=\"off\"\n            inputMode=\"search\"\n            multiline={false}\n            rows={1}\n            onChangeText={filterValue => setFilter(filterValue)}\n            placeholder={filterPlaceholder}\n            value={filter}\n            style={({ focused }) => [styles.filterInput, focused && styles.filterfocused]}\n          />\n\n          <Icon\n            name=\"search-filled\"\n            color={colors[color].primary}\n            size={20}\n            style={styles.searchIcon}\n          />\n        </Box>\n      ),\n      [filter, filterPlaceholder, color],\n    );\n\n    const ListEmptyComponent = useMemo(\n      () => (\n        <Box justifyContent=\"center\" alignItems=\"center\" style={styles.emptyList}>\n          <Icon name=\"clipboard-search-regular\" size={24} color={colors.gray.primary} />\n\n          {isNotNullishOrEmpty(emptyResultText) && (\n            <>\n              <Space height={8} />\n              <Text style={styles.emptyListText}>{emptyResultText}</Text>\n            </>\n          )}\n        </Box>\n      ),\n      [emptyResultText],\n    );\n\n    return (\n      <View style={style}>\n        <Pressable\n          id={id}\n          ref={inputRef}\n          aria-haspopup=\"listbox\"\n          role=\"button\"\n          aria-expanded={visible}\n          disabled={disabled}\n          onPress={open}\n          style={({ hovered, focused }) => [\n            styles.base,\n            hovered && styles.hovered,\n            (focused || visible) && styles.focused,\n            disabled && styles.disabled,\n            isNotNullish(error) && styles.errored,\n          ]}\n        >\n          <Box ref={selectedTagListRef} alignItems=\"center\" direction=\"row\" style={styles.tagsList}>\n            {selectedTags.length > 0 ? (\n              selectedTags.map(item => (\n                <Tag\n                  key={item.value}\n                  color={color}\n                  onPressRemove={disabled ? undefined : () => handleRemoveItem(item)}\n                  style={styles.tag}\n                >\n                  {item.label}\n                </Tag>\n              ))\n            ) : placeholder !== \"\" ? (\n              <Text role=\"label\" numberOfLines={1} style={styles.placeholder}>\n                {placeholder}\n              </Text>\n            ) : null}\n          </Box>\n\n          <Box direction=\"row\" alignItems=\"center\" style={styles.actions}>\n            {selectedTags.length >= 1 && !disabled && (\n              <>\n                <Pressable role=\"button\" onPress={handleClearAll}>\n                  <Icon name=\"dismiss-filled\" color={colors.gray.primary} size={15} />\n                </Pressable>\n\n                <Space width={8} />\n              </>\n            )}\n\n            <Icon\n              color={colors.gray.primary}\n              name={visible ? \"chevron-up-filled\" : \"chevron-down-filled\"}\n              size={20}\n            />\n          </Box>\n        </Pressable>\n\n        <Popover\n          role=\"listbox\"\n          matchReferenceWidth={true}\n          onDismiss={close}\n          referenceRef={inputRef}\n          returnFocus={true}\n          visible={visible}\n        >\n          <View style={styles.list}>\n            {enableGroups ? (\n              <SectionList\n                role=\"listbox\"\n                aria-multiselectable={true}\n                keyExtractor={(item, index) => `group-field-${item.value}-${index}`}\n                extraData={filter}\n                ListHeaderComponent={ListHeaderComponent}\n                ListEmptyComponent={ListEmptyComponent}\n                ListFooterComponent={<Space height={16} />}\n                sections={sections}\n                renderSectionHeader={({\n                  section: { title, data },\n                }: {\n                  section: SectionListData<MultiSelectItem>;\n                }) => (\n                  <Pressable\n                    role=\"listitem\"\n                    onPress={() => handleSelectGroup(data)}\n                    style={({ hovered, pressed, focused }) => [\n                      styles.groupTitleBase,\n                      (hovered || focused) && { backgroundColor: tint50 },\n                      pressed && { backgroundColor: tint100 },\n                    ]}\n                  >\n                    <Text numberOfLines={1} style={styles.groupTitle}>\n                      {title}\n                    </Text>\n\n                    {isNotNullish(renderTagGroup) && (\n                      <Tag color={color}>{renderTagGroup(data)}</Tag>\n                    )}\n                  </Pressable>\n                )}\n                renderItem={({ item }: SectionListRenderItemInfo<MultiSelectItem>) => (\n                  <LineItem\n                    color={color}\n                    filter={filter}\n                    item={item}\n                    handleSelectItem={handleSelectItem}\n                    style={styles.lineInGroup}\n                  />\n                )}\n              />\n            ) : (\n              <FlatList\n                ref={listRef}\n                role=\"list\"\n                data={filteredItems}\n                extraData={filter}\n                keyExtractor={item => `field-${item.value}`}\n                ListHeaderComponent={ListHeaderComponent}\n                ListEmptyComponent={ListEmptyComponent}\n                ListFooterComponent={<Space height={8} />}\n                renderItem={({ item }: ListRenderItemInfo<MultiSelectItem>) => (\n                  <LineItem\n                    color={color}\n                    filter={filter}\n                    item={item}\n                    handleSelectItem={handleSelectItem}\n                  />\n                )}\n              />\n            )}\n          </View>\n        </Popover>\n\n        <InputError message={error} />\n      </View>\n    );\n  },\n);\n\ntype LineItemProps = {\n  color: ColorVariants;\n  filter: string;\n  handleSelectItem: (item: MultiSelectItem) => void;\n  item: MultiSelectItem;\n  style?: StyleProp<TextStyle>;\n};\n\nconst LineItem = ({ item, color, filter, handleSelectItem, style }: LineItemProps) => {\n  const { label, disabled = false } = item;\n  const cleanFilter = filter.trim().toLowerCase();\n\n  const tint50 = colors[color][50];\n  const tint100 = colors[color][100];\n\n  const tokens = useMemo(\n    () => (disabled || cleanFilter === \"\" ? label : safeSplitAround(label, cleanFilter)),\n    [label, disabled, cleanFilter],\n  );\n\n  return (\n    <PressableText\n      role=\"listitem\"\n      disabled={disabled}\n      numberOfLines={1}\n      onPress={() => handleSelectItem(item)}\n      style={({ hovered, pressed }) => [\n        styles.line,\n        style,\n        hovered && { backgroundColor: tint50 },\n        pressed && { backgroundColor: tint100 },\n        disabled && { backgroundColor: colors.gray[50], color: colors.gray[100] },\n      ]}\n    >\n      {typeof tokens === \"string\"\n        ? tokens\n        : tokens.map((token, index) => {\n            const colored = token.toLowerCase() === cleanFilter;\n\n            if (!colored) {\n              return token;\n            }\n\n            return (\n              <Text key={index} style={{ color }}>\n                {token}\n              </Text>\n            );\n          })}\n    </PressableText>\n  );\n};\n"],"names":["safeSplitAround","string","expression","index","splitString","nextIndexOfExpression","endIndex","styles","StyleSheet","typography","colors","InputError","message","style","jsx","Text","Space","MAX_INPUT_HEIGHT","ITEM_ELEMENT_HEIGHT","NB_SUGGESTION_DISPLAYED","texts","backgroundColor","radii","shadows","memo","reactMemo","MultiSelect","color","disabled","emptyResultText","enableGroups","filterPlaceholder","items","onValueChange","placeholder","renderTagGroup","error","values","id","filter","setFilter","useState","shouldScrollToBottomRef","useRef","selectedTagListRef","inputRef","listRef","visible","open","close","useDisclosure","tint50","tint100","useEffect","top","_a","_b","handleSelectItem","item","handleRemoveItem","handleClearAll","handleSelectGroup","groupItems","items2","newValue","valueItemMapping","useMemo","acc","selectedTags","value","isNotNullish","filteredItems","remainingTags","cleanedFilter","label","sections","Array","Dict","groupBy","group","groupName","data","Option","ListHeaderComponent","jsxs","Box","PressableTextInput","filterValue","focused","Icon","ListEmptyComponent","isNotNullishOrEmpty","Fragment","View","Pressable","hovered","Tag","Popover","SectionList","title","pressed","LineItem","FlatList","cleanFilter","tokens","PressableText","token"],"mappings":"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"}