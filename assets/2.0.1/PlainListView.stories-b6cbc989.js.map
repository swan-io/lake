{"version":3,"file":"PlainListView.stories-b6cbc989.js","sources":["../../../packages/lake/src/components/PlainListView.tsx"],"sourcesContent":["import {\n  cloneElement,\n  Fragment,\n  ReactElement,\n  ReactNode,\n  RefObject,\n  useCallback,\n  useEffect,\n  useId,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { PressableStateCallbackType, ScrollView, StyleSheet, View, ViewStyle } from \"react-native\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport { backgroundColor, breakpoints, colors, spacings } from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport {\n  ColumnCellConfig,\n  ColumnTitleConfig,\n  LinkConfig,\n  PlainListViewPlaceholder,\n} from \"./FixedListView\";\nimport { LakeHeading } from \"./LakeHeading\";\nimport { ResponsiveContainer } from \"./ResponsiveContainer\";\n\nexport type ColumnConfig<T, ExtraInfo> = {\n  id: string;\n  width: number | \"grow\";\n  title: string;\n  renderTitle: (props: ColumnTitleConfig<ExtraInfo>) => ReactNode;\n  renderCell: (props: ColumnCellConfig<T, ExtraInfo>) => ReactNode;\n};\n\nconst INHERIT = \"inherit\";\n\ntype Props<T, ExtraInfo> = {\n  data: T[];\n  keyExtractor: (item: T, index: number) => string;\n  highlightedRowId?: string;\n  headerHeight: number;\n  rowHeight: number;\n  groupHeaderHeight: number;\n  extraInfo: ExtraInfo;\n  columns: ColumnConfig<T, ExtraInfo>[];\n  smallColumns?: ColumnConfig<T, ExtraInfo>[];\n  onEndReached?: () => void;\n  onEndReachedThresholdPx?: number;\n  rowStyle?: (item: T, large: boolean) => ViewStyle | null | undefined;\n  getRowLink?: (\n    config: LinkConfig<T, ExtraInfo>,\n  ) => ReactElement<{ children: (state: PressableStateCallbackType) => React.ReactNode }>;\n  renderEmptyList?: () => ReactNode;\n  groupBy?: (item: T) => string;\n  onActiveRowChange?: (element: HTMLElement) => void;\n  activeRowId?: string;\n  loading?: {\n    isLoading: boolean;\n    count: number;\n  };\n  breakpoint?: number;\n  withoutScroll?: boolean;\n  stickyOffset?: number;\n};\n\nconst styles = StyleSheet.create({\n  root: {\n    height: 1,\n    alignSelf: \"stretch\",\n    flexGrow: 1,\n    backgroundColor: backgroundColor.default,\n  },\n  contentContainer: {\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    flexGrow: 1,\n  },\n  segment: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    overflow: \"hidden\",\n    paddingHorizontal: spacings[8],\n  },\n  segmentLarge: {\n    paddingHorizontal: spacings[24],\n  },\n  row: {\n    boxShadow: `inset 0 -1px ${colors.gray[100]}`,\n  },\n  activeRow: {\n    backgroundColor: backgroundColor.accented,\n  },\n  hoveredRow: {\n    backgroundColor: backgroundColor.accented,\n  },\n  segmentHeaderCell: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  stickyHeader: {\n    position: \"sticky\",\n    backgroundColor: backgroundColor.default90Transparency,\n    backdropFilter: \"blur(4px)\",\n    zIndex: 10,\n    paddingHorizontal: spacings[24],\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  stickyHeaderLarge: {\n    paddingHorizontal: spacings[40],\n  },\n  loadingPlaceholder: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: 0,\n  },\n  rowLink: {\n    color: INHERIT,\n    textDecorationLine: \"none\",\n  },\n  emptyListContainer: {\n    ...commonStyles.fill,\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: spacings[48],\n    backgroundColor: backgroundColor.default,\n  },\n  scrollTracker: {\n    pointerEvents: \"none\",\n    position: \"absolute\",\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n});\n\nconst ONE = 1;\nconst ZERO = 0;\n\nconst Row = <T, ExtraInfo>({\n  id,\n  item,\n  index,\n  rowHeight,\n  columns,\n  extraInfo,\n  isActive,\n  isHovered,\n  large,\n  style,\n  onMouseEnter,\n  onMouseLeave,\n}: {\n  id: string;\n  item: T;\n  index: number;\n  rowHeight: number;\n  columns: ColumnConfig<T, ExtraInfo>[];\n  extraInfo: ExtraInfo;\n  isActive: boolean;\n  isHovered: boolean;\n  large: boolean;\n  style?: (item: T, large: boolean) => ViewStyle | null | undefined;\n  onMouseEnter: (id: string) => void;\n  onMouseLeave: () => void;\n}) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart: () => onMouseEnter(id),\n    onHoverEnd: () => onMouseLeave(),\n  });\n\n  return (\n    <View\n      ref={containerRef}\n      style={[\n        styles.segment,\n        large && styles.segmentLarge,\n        styles.row,\n        style?.(item, large),\n        isActive && styles.activeRow,\n        isHovered && styles.hoveredRow,\n        { minHeight: rowHeight },\n      ]}\n    >\n      {columns.map(({ width, id: columnId, renderCell }) => (\n        <View\n          style={[\n            styles.segmentHeaderCell,\n            {\n              width: typeof width === \"number\" ? width : ONE,\n              flexGrow: width === \"grow\" ? ONE : ZERO,\n            },\n          ]}\n          id={columnId}\n          key={columnId}\n        >\n          {renderCell({ columnId, item, index, extraInfo, isHovered })}\n        </View>\n      ))}\n    </View>\n  );\n};\n\nexport const PlainListView = <T, ExtraInfo>({\n  data: originalData,\n  keyExtractor,\n  rowHeight,\n  groupHeaderHeight,\n  headerHeight,\n  columns,\n  smallColumns = columns,\n  extraInfo,\n  onEndReached,\n  onEndReachedThresholdPx = 200,\n  rowStyle,\n  getRowLink,\n  activeRowId,\n  renderEmptyList,\n  onActiveRowChange,\n  groupBy,\n  loading,\n  breakpoint = breakpoints.large,\n  withoutScroll = false,\n  stickyOffset = 0,\n}: Props<T, ExtraInfo>) => {\n  const viewId = useId();\n  const scrollTrackerRef = useRef<View>(null);\n\n  const groups: Map<string | null, T[]> = useMemo(() => {\n    if (groupBy == null) {\n      return new Map<null, T[]>([[null, originalData]]);\n    }\n    const map = new Map<string, T[]>();\n    originalData.forEach(item => {\n      const key = groupBy(item);\n      map.set(key, [...(map.get(key) ?? []), item]);\n    });\n    return map;\n  }, [groupBy, originalData]);\n\n  const totalHeight = rowHeight * originalData.length + groups.size * groupHeaderHeight;\n\n  const isLoading = isNotNullish(loading) && loading.isLoading;\n  const isEmpty = originalData.length === 0;\n\n  const [hoveredRow, setHoveredRow] = useState<string | undefined>(undefined);\n\n  const removeHoveredRow = useCallback(() => {\n    setHoveredRow(undefined);\n  }, []);\n\n  useEffect(() => {\n    const scrollTracker = scrollTrackerRef.current;\n    if (scrollTracker != null) {\n      const scrollTrackerElement = scrollTracker as unknown as HTMLElement;\n      const intersectionObserver = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            if (isNotNullish(onEndReached)) {\n              onEndReached();\n            }\n          }\n        });\n      });\n      intersectionObserver.observe(scrollTrackerElement);\n      return () => intersectionObserver.unobserve(scrollTrackerElement);\n    }\n  }, [onEndReached]);\n\n  const createRowWrapper = useCallback(\n    ({\n      item,\n      absoluteIndex,\n      extraInfo,\n    }: {\n      item: T;\n      absoluteIndex: number;\n      extraInfo: ExtraInfo;\n    }): ReactElement<{\n      children: ReactNode;\n      ref: RefObject<View> | null;\n      style?: ViewStyle;\n    }> => {\n      const customLinkElement = getRowLink?.({ item, index: absoluteIndex, extraInfo });\n      return isNullish(customLinkElement) ? <View /> : customLinkElement;\n    },\n    [getRowLink],\n  );\n\n  const activeItemRef = useRef<View>(null);\n\n  useEffect(() => {\n    const ref = activeItemRef.current;\n    if (activeRowId != null && ref != null) {\n      const element = ref as unknown as HTMLElement;\n      element.scrollIntoView({ behavior: \"smooth\", block: \"nearest\" });\n      onActiveRowChange?.(element);\n    }\n  }, [activeRowId, onActiveRowChange]);\n\n  const listWrapper = useMemo(\n    () =>\n      withoutScroll ? (\n        <View style={styles.contentContainer} />\n      ) : (\n        <ScrollView\n          scrollEventThrottle={32}\n          contentContainerStyle={[\n            styles.contentContainer,\n            {\n              minHeight: totalHeight + (isLoading ? loading.count * rowHeight : 0),\n            },\n          ]}\n        />\n      ),\n    [isLoading, loading?.count, rowHeight, totalHeight, withoutScroll],\n  );\n\n  return (\n    <ResponsiveContainer\n      style={withoutScroll ? (isEmpty ? commonStyles.fill : undefined) : styles.root}\n      breakpoint={breakpoint}\n    >\n      {({ large }) => {\n        const displayColumns = large ? columns : smallColumns;\n        return (\n          <>\n            {!isEmpty && large ? (\n              <View style={[styles.segment, large && styles.segmentLarge]}>\n                {displayColumns.map(({ id, width, title, renderTitle }) => {\n                  const columnId = `${viewId}_${id}`;\n\n                  return (\n                    <View\n                      style={[\n                        styles.segmentHeaderCell,\n                        {\n                          width: typeof width === \"number\" ? width : ONE,\n                          flexGrow: width === \"grow\" ? ONE : ZERO,\n                          height: headerHeight,\n                        },\n                      ]}\n                      id={columnId}\n                      key={columnId}\n                    >\n                      {renderTitle({ title, extraInfo, id })}\n                    </View>\n                  );\n                })}\n              </View>\n            ) : null}\n\n            {cloneElement(listWrapper, {\n              children: (\n                <>\n                  {Array.from(groups.entries()).map(([groupName, items]) => {\n                    return (\n                      <Fragment key={groupName}>\n                        {groupName != null ? (\n                          <View\n                            style={[\n                              styles.stickyHeader,\n                              large && styles.stickyHeaderLarge,\n                              { height: groupHeaderHeight, top: stickyOffset },\n                            ]}\n                          >\n                            <LakeHeading level={3} variant=\"h3\">\n                              {groupName}\n                            </LakeHeading>\n                          </View>\n                        ) : null}\n\n                        {items.map((item, index) => {\n                          const key = keyExtractor(item, index);\n                          const isActive = activeRowId === key;\n                          const isHovered = isNotNullish(getRowLink) && hoveredRow === key;\n\n                          const wrapper = createRowWrapper({\n                            item,\n                            absoluteIndex: index,\n                            extraInfo,\n                          });\n\n                          return cloneElement(wrapper, {\n                            style: { ...styles.rowLink, ...wrapper.props.style },\n                            key: index,\n                            ref: isActive ? activeItemRef : null,\n                            children: (\n                              <Row\n                                id={key}\n                                rowHeight={rowHeight}\n                                columns={displayColumns}\n                                item={item}\n                                index={index}\n                                extraInfo={extraInfo}\n                                isActive={isActive}\n                                isHovered={isHovered}\n                                large={large}\n                                style={rowStyle}\n                                onMouseEnter={setHoveredRow}\n                                onMouseLeave={removeHoveredRow}\n                              />\n                            ),\n                          });\n                        })}\n                      </Fragment>\n                    );\n                  })}\n\n                  <View>\n                    <View aria-busy={isLoading} style={styles.loadingPlaceholder}>\n                      {isLoading ? (\n                        <PlainListViewPlaceholder\n                          count={loading.count}\n                          rowHeight={rowHeight}\n                          rowVerticalSpacing={0}\n                          paddingHorizontal={0}\n                        />\n                      ) : null}\n                    </View>\n                  </View>\n\n                  {isEmpty && isNotNullish(renderEmptyList) && !isLoading ? (\n                    <View style={styles.emptyListContainer}>{renderEmptyList()}</View>\n                  ) : null}\n\n                  <View\n                    style={[styles.scrollTracker, { height: onEndReachedThresholdPx }]}\n                    ref={scrollTrackerRef}\n                  />\n                </>\n              ),\n            })}\n          </>\n        );\n      }}\n    </ResponsiveContainer>\n  );\n};\n"],"names":["INHERIT","styles","StyleSheet","backgroundColor","spacings","colors","commonStyles","ONE","ZERO","Row","id","item","index","rowHeight","columns","extraInfo","isActive","isHovered","large","style","onMouseEnter","onMouseLeave","containerRef","useRef","useHover","jsx","View","width","columnId","renderCell","PlainListView","originalData","keyExtractor","groupHeaderHeight","headerHeight","smallColumns","onEndReached","onEndReachedThresholdPx","rowStyle","getRowLink","activeRowId","renderEmptyList","onActiveRowChange","groupBy","loading","breakpoint","breakpoints","withoutScroll","stickyOffset","viewId","useId","scrollTrackerRef","groups","useMemo","map","key","totalHeight","isLoading","isNotNullish","isEmpty","hoveredRow","setHoveredRow","useState","removeHoveredRow","useCallback","useEffect","scrollTracker","scrollTrackerElement","intersectionObserver","entries","entry","createRowWrapper","absoluteIndex","extraInfo2","customLinkElement","isNullish","activeItemRef","ref","element","listWrapper","ScrollView","ResponsiveContainer","displayColumns","jsxs","Fragment","title","renderTitle","cloneElement","groupName","items","Fragment2","LakeHeading","wrapper","PlainListViewPlaceholder"],"mappings":"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"}