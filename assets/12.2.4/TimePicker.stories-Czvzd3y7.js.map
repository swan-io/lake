{"version":3,"file":"TimePicker.stories-Czvzd3y7.js","sources":["../../../packages/lake/src/components/TimePicker.tsx","../../../packages/lake/__stories__/TimePicker.stories.tsx"],"sourcesContent":["import { AsyncData, Option, Result } from \"@swan-io/boxed\";\nimport { useMemo } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Rifm } from \"rifm\";\nimport { colors } from \"../constants/design\";\nimport { noop } from \"../utils/function\";\nimport { isNotNullishOrEmpty, isNullish } from \"../utils/nullish\";\nimport { getRifmProps } from \"../utils/rifm\";\nimport { Box } from \"./Box\";\nimport { Fill } from \"./Fill\";\nimport { Icon } from \"./Icon\";\nimport { LakeCombobox } from \"./LakeCombobox\";\nimport { LakeLabel } from \"./LakeLabel\";\nimport { LakeText } from \"./LakeText\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  label: {\n    flex: 1,\n  },\n  arrowContainer: {\n    height: 40, // input height\n  },\n});\n\ntype Time = {\n  hour: number;\n  minute: number;\n};\n\nconst DEFAULT_START_TIME: Time = { hour: 0, minute: 0 };\nconst DEFAULT_END_TIME: Time = { hour: 23, minute: 59 };\nconst DEFAULT_INTERVAL_IN_MINUTES = 15;\n\nconst rifmTimeProps = getRifmProps({\n  accept: \"numeric\",\n  charMap: { 2: \":\" },\n  maxLength: 4,\n});\n\nexport const parseTime = (time: string): Option<Time> => {\n  const [hours, minutes] = time.split(\":\").map(Number);\n\n  if (isNullish(hours) || Number.isNaN(hours) || isNullish(minutes) || Number.isNaN(minutes)) {\n    return Option.None();\n  }\n\n  return Option.Some({ hour: hours, minute: minutes });\n};\n\nexport const parseTimeRange = (value: {\n  start?: string;\n  end?: string;\n}): { start: Option<Time>; end: Option<Time> } => {\n  const start = isNotNullishOrEmpty(value.start) ? parseTime(value.start) : Option.None();\n  const end = isNotNullishOrEmpty(value.end) ? parseTime(value.end) : Option.None();\n\n  return { start, end };\n};\n\nconst parseTypingHours = (time: string): Option<number> => {\n  const [hours, minutes] = time.split(\":\");\n\n  if (isNullish(hours) || hours?.length !== 2 || isNotNullishOrEmpty(minutes)) {\n    return Option.None();\n  }\n\n  const parsedHours = Number(hours);\n\n  if (parsedHours < 0 || parsedHours > 23) {\n    return Option.None();\n  }\n\n  if (Number.isNaN(parsedHours)) {\n    return Option.None();\n  }\n\n  return Option.Some(parsedHours);\n};\n\nconst stringifyTime = (time: Time): string => {\n  return `${time.hour.toString().padStart(2, \"0\")}:${time.minute.toString().padStart(2, \"0\")}`;\n};\n\nconst timeToMinutes = (time: Time): number => {\n  return time.hour * 60 + time.minute;\n};\n\nconst minutesToTime = (minutes: number): Time => {\n  return {\n    hour: Math.floor(minutes / 60),\n    minute: minutes % 60,\n  };\n};\n\nconst addMinutes = (time: Time, minutes: number): Time => {\n  return minutesToTime(timeToMinutes(time) + minutes);\n};\n\nconst floorTime = (time: Time, intervalInMinutes: number): Time => {\n  const minutes = timeToMinutes(time);\n  const flooredMinutes = Math.floor(minutes / intervalInMinutes) * intervalInMinutes;\n\n  return minutesToTime(flooredMinutes);\n};\n\nexport const validateTime = (time: Time): boolean => {\n  return time.hour >= 0 && time.hour <= 23 && time.minute >= 0 && time.minute <= 59;\n};\n\nconst isTimeBefore = (time1: Time, time2: Time): boolean => {\n  return timeToMinutes(time1) < timeToMinutes(time2);\n};\n\nexport const validateTimeRange = (range: { start: Option<Time>; end: Option<Time> }): boolean => {\n  if (range.start.isNone() || range.end.isNone()) {\n    return true;\n  }\n\n  return isTimeBefore(range.start.value, range.end.value);\n};\n\nconst minTime = (...times: Time[]): Time => {\n  const timesInMinutes = times.map(timeToMinutes);\n  const minTimeInMinutes = Math.min(...timesInMinutes);\n  return minutesToTime(minTimeInMinutes);\n};\n\nconst maxTime = (...times: Time[]): Time => {\n  const timesInMinutes = times.map(timeToMinutes);\n  const maxTimeInMinutes = Math.max(...timesInMinutes);\n  return minutesToTime(maxTimeInMinutes);\n};\n\nconst generateTimeList = (start: Time, end: Time, intervalInMinutes: number): Time[] => {\n  const startMinutes = timeToMinutes(start);\n  const endMinutes = timeToMinutes(end);\n\n  const timeList = [];\n  for (let i = startMinutes; i <= endMinutes; i += intervalInMinutes) {\n    const time = minutesToTime(i);\n    timeList.push(time);\n  }\n\n  return timeList;\n};\n\nconst formatTimeDuration = (time: Time, minutesLabel: string, hoursLabel: string): string => {\n  if (time.hour === 0) {\n    return `${time.minute} ${minutesLabel}`;\n  }\n\n  if (time.minute === 0) {\n    return `${time.hour} ${hoursLabel}`;\n  }\n\n  return `${time.hour} ${hoursLabel} ${time.minute} ${minutesLabel}`;\n};\n\nexport type TimePickerProps = {\n  value?: string;\n  onChangeText: (value: string) => void;\n  suggestionStart?: Time;\n  suggestionEnd?: Time;\n  intervalInMinutes?: number;\n  nbMaxSuggestions?: number;\n  suggestionSuffix?: (option: Time) => string;\n  readOnly?: boolean;\n  disabled?: boolean;\n  error?: string;\n  hideErrors?: boolean;\n  noSuggestionLabel: string;\n};\n\nexport const TimePicker = ({\n  value,\n  onChangeText,\n  suggestionStart = DEFAULT_START_TIME,\n  suggestionEnd = DEFAULT_END_TIME,\n  intervalInMinutes = DEFAULT_INTERVAL_IN_MINUTES,\n  nbMaxSuggestions,\n  suggestionSuffix,\n  readOnly,\n  disabled,\n  error,\n  hideErrors,\n  noSuggestionLabel,\n}: TimePickerProps) => {\n  const typingHour = parseTypingHours(value ?? \"\");\n\n  const optionsInterval: [Time, Time] = useMemo(\n    () =>\n      typingHour.match({\n        Some: hour => [\n          maxTime({ hour, minute: 0 }, suggestionStart),\n          minTime({ hour, minute: 59 }, suggestionEnd),\n        ],\n        None: () => [suggestionStart, suggestionEnd],\n      }),\n    [typingHour, suggestionStart, suggestionEnd],\n  );\n\n  const options = useMemo(\n    () =>\n      generateTimeList(optionsInterval[0], optionsInterval[1], intervalInMinutes).slice(\n        0,\n        nbMaxSuggestions,\n      ),\n    [optionsInterval, intervalInMinutes, nbMaxSuggestions],\n  );\n\n  const items = useMemo(() => AsyncData.Done(Result.Ok(options)), [options]);\n\n  return (\n    <Rifm value={value ?? \"\"} onChange={onChangeText} {...rifmTimeProps}>\n      {({ value, onChange }) => (\n        <LakeCombobox\n          keyExtractor={stringifyTime}\n          placeholder=\"HH:MM\"\n          value={value}\n          items={items}\n          itemHeight={40}\n          nbItemsDisplayed={4.5}\n          renderItem={item => {\n            const text = stringifyTime(item);\n            const selected = text === value;\n            const suffix = suggestionSuffix?.(item);\n            const label = isNotNullishOrEmpty(suffix) ? `${text} ${suffix}` : text;\n\n            return (\n              <Box direction=\"row\" alignItems=\"center\">\n                <LakeText\n                  color={selected ? colors.gray[700] : colors.gray[900]}\n                  variant={selected ? \"smallRegular\" : \"medium\"}\n                >\n                  {label}\n                </LakeText>\n\n                <Fill minWidth={8} />\n\n                {selected && (\n                  <Icon name=\"checkmark-filled\" color={colors.positive[500]} size={16} />\n                )}\n              </Box>\n            );\n          }}\n          readOnly={readOnly}\n          disabled={disabled}\n          error={error}\n          hideErrors={hideErrors}\n          emptyResultText={noSuggestionLabel}\n          onChange={onChange}\n          onValueChange={noop}\n          onSelectItem={item => onChangeText(stringifyTime(item))}\n        />\n      )}\n    </Rifm>\n  );\n};\n\nexport type TimeRangePickerProps = {\n  value: { start?: string; end?: string };\n  onChange: (value: { start?: string; end?: string }) => void;\n  intervalInMinutes?: number;\n  nbMaxSuggestions?: number;\n  readOnly?: boolean;\n  disabled?: boolean;\n  error?: string;\n  startLabel: string;\n  endLabel: string;\n  minutesLabel: string;\n  hoursLabel: string;\n  noSuggestionLabel: string;\n};\n\nexport const TimeRangePicker = ({\n  value,\n  onChange,\n  intervalInMinutes = DEFAULT_INTERVAL_IN_MINUTES,\n  nbMaxSuggestions,\n  readOnly,\n  disabled,\n  error,\n  startLabel,\n  endLabel,\n  minutesLabel,\n  hoursLabel,\n  noSuggestionLabel,\n}: TimeRangePickerProps) => {\n  const start = parseTime(value.start ?? \"\");\n\n  const handleStartChange = (startValue: string) => {\n    onChange({\n      start: startValue,\n      end: value.end,\n    });\n  };\n\n  const handleEndChange = (endValue: string) => {\n    onChange({\n      start: value.start,\n      end: endValue,\n    });\n  };\n\n  return (\n    <View>\n      <Box direction=\"row\" alignItems=\"end\">\n        <LakeLabel\n          label={startLabel}\n          style={styles.label}\n          render={() => (\n            <TimePicker\n              value={value.start}\n              intervalInMinutes={intervalInMinutes}\n              nbMaxSuggestions={nbMaxSuggestions}\n              error={error}\n              hideErrors={true}\n              disabled={disabled}\n              readOnly={readOnly}\n              noSuggestionLabel={noSuggestionLabel}\n              onChangeText={handleStartChange}\n            />\n          )}\n        />\n\n        <Space width={12} />\n\n        <Box style={styles.arrowContainer} justifyContent=\"center\">\n          <Icon name=\"arrow-right-filled\" size={20} />\n        </Box>\n\n        <Space width={12} />\n\n        <LakeLabel\n          label={endLabel}\n          style={styles.label}\n          render={() => (\n            <TimePicker\n              value={value.end}\n              intervalInMinutes={intervalInMinutes}\n              nbMaxSuggestions={nbMaxSuggestions}\n              suggestionStart={start\n                .map(time => floorTime(time, intervalInMinutes))\n                .map(time => addMinutes(time, intervalInMinutes))\n                .match({\n                  Some: time => time,\n                  None: () => undefined,\n                })}\n              suggestionSuffix={time => {\n                if (start.isNone()) {\n                  return \"\";\n                }\n                const durationInMinutes = timeToMinutes(time) - timeToMinutes(start.value);\n                if (durationInMinutes > 0 && durationInMinutes <= 60) {\n                  const timeDuration = minutesToTime(durationInMinutes);\n                  return `(${formatTimeDuration(timeDuration, minutesLabel, hoursLabel)})`;\n                }\n                return \"\";\n              }}\n              error={error}\n              hideErrors={true}\n              disabled={disabled}\n              readOnly={readOnly}\n              noSuggestionLabel={noSuggestionLabel}\n              onChangeText={handleEndChange}\n            />\n          )}\n        />\n      </Box>\n\n      <Space height={4} />\n\n      <LakeText variant=\"smallRegular\" color={colors.negative[500]}>\n        {error ?? \" \"}\n      </LakeText>\n    </View>\n  );\n};\n","import { Meta } from \"@storybook/react\";\nimport { useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Except } from \"type-fest\";\nimport {\n  TimePicker,\n  TimePickerProps,\n  TimeRangePicker,\n  TimeRangePickerProps,\n  parseTimeRange,\n  validateTimeRange,\n} from \"../src/components/TimePicker\";\nimport { StoryBlock, StoryPart } from \"./_StoriesComponents\";\n\nconst styles = StyleSheet.create({\n  container: {\n    maxWidth: 430,\n  },\n});\n\nconst FIFTEEN_DAYS_AGO = new Date();\nFIFTEEN_DAYS_AGO.setDate(FIFTEEN_DAYS_AGO.getDate() - 15);\n\nconst FIFTEEN_DAYS_LATER = new Date();\nFIFTEEN_DAYS_LATER.setDate(FIFTEEN_DAYS_LATER.getDate() + 15);\n\nexport default {\n  title: \"Forms/TimePicker\",\n  component: TimePicker,\n} as Meta<typeof TimePicker>;\n\nconst InteractiveTimePicker = (props: Except<TimePickerProps, \"value\" | \"onChangeText\">) => {\n  const [value, setValue] = useState<string>();\n\n  return <TimePicker {...props} value={value} onChangeText={setValue} />;\n};\n\nconst InteractiveTimeRangePicker = (props: Except<TimeRangePickerProps, \"value\" | \"onChange\">) => {\n  const [value, setValue] = useState<TimeRangePickerProps[\"value\"]>({});\n  const parsed = parseTimeRange(value);\n  const error = validateTimeRange(parsed) ? undefined : \"Start time must be before end time\";\n\n  return <TimeRangePicker {...props} value={value} onChange={setValue} error={error} />;\n};\n\nexport const Default = () => {\n  return (\n    <StoryBlock title=\"TimePicker\">\n      <StoryPart title=\"Default\">\n        <View style={styles.container}>\n          <InteractiveTimePicker noSuggestionLabel=\"No time available\" />\n        </View>\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const RangePicker = () => {\n  return (\n    <StoryBlock title=\"TimeRangePicker\">\n      <StoryPart title=\"Default\">\n        <View style={styles.container}>\n          <InteractiveTimeRangePicker\n            startLabel=\"Start\"\n            endLabel=\"End\"\n            minutesLabel=\"Mins\"\n            hoursLabel=\"Hours\"\n            noSuggestionLabel=\"No time available\"\n            intervalInMinutes={15}\n          />\n        </View>\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n"],"names":["styles","StyleSheet","DEFAULT_START_TIME","DEFAULT_END_TIME","DEFAULT_INTERVAL_IN_MINUTES","rifmTimeProps","getRifmProps","parseTime","time","hours","minutes","isNullish","Option","parseTimeRange","value","start","isNotNullishOrEmpty","end","parseTypingHours","parsedHours","stringifyTime","timeToMinutes","minutesToTime","addMinutes","floorTime","intervalInMinutes","flooredMinutes","isTimeBefore","time1","time2","validateTimeRange","range","minTime","times","timesInMinutes","minTimeInMinutes","maxTime","maxTimeInMinutes","generateTimeList","startMinutes","endMinutes","timeList","i","formatTimeDuration","minutesLabel","hoursLabel","TimePicker","onChangeText","suggestionStart","suggestionEnd","nbMaxSuggestions","suggestionSuffix","readOnly","disabled","error","hideErrors","noSuggestionLabel","typingHour","optionsInterval","useMemo","hour","options","items","AsyncData","Result","jsx","Rifm","onChange","LakeCombobox","item","text","selected","suffix","label","jsxs","Box","LakeText","colors","Fill","Icon","noop","TimeRangePicker","startLabel","endLabel","handleStartChange","startValue","handleEndChange","endValue","View","LakeLabel","Space","durationInMinutes","timeDuration","create","container","maxWidth","FIFTEEN_DAYS_AGO","Date","setDate","getDate","FIFTEEN_DAYS_LATER","TimePicker_stories","title","component","InteractiveTimePicker","props","setValue","useState","InteractiveTimeRangePicker","parsed","undefined","Default","StoryBlock","StoryPart","RangePicker"],"mappings":"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"}