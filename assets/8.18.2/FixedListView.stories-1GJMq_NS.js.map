{"version":3,"file":"FixedListView.stories-1GJMq_NS.js","sources":["../../../packages/lake/__stories__/FixedListView.stories.tsx"],"sourcesContent":["import { Meta, StoryFn } from \"@storybook/react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { Box } from \"../src/components/Box\";\nimport {\n  ColumnCellConfig,\n  ColumnTitleConfig,\n  FixedListView,\n  FixedListViewEmpty,\n  FixedListViewPlaceholder,\n  FixedListViewProps,\n} from \"../src/components/FixedListView\";\nimport {\n  LinkCell,\n  SimpleHeaderCell,\n  SimpleRegularTextCell,\n  SimpleTitleCell,\n} from \"../src/components/FixedListViewCells\";\nimport { LakeButton } from \"../src/components/LakeButton\";\nimport { LakeLabelledCheckbox } from \"../src/components/LakeCheckbox\";\nimport { Space } from \"../src/components/Space\";\nimport { Tag } from \"../src/components/Tag\";\n\nexport default {\n  title: \"Layout/FixedListView\",\n  component: FixedListView,\n} as Meta<typeof FixedListView>;\n\ntype TestRow = {\n  id: string;\n  name: string;\n};\n\nconst keyExtractor = ({ id }: TestRow) => id;\n\ntype SortInfo = {\n  key: string;\n  order: \"Asc\" | \"Desc\";\n};\n\nconst generateRandomName = () => {\n  const names = [\n    \"Matthias\",\n    \"John\",\n    \"Jane\",\n    \"Camille\",\n    \"Charlotte\",\n    \"Francis\",\n    \"Émilie\",\n    \"François\",\n    \"Laura\",\n    \"Marie\",\n    \"Natasha\",\n    \"Nicolas\",\n    \"Pierre\",\n    \"Thomas\",\n    \"Valérie\",\n    \"Yann\",\n    \"Zoé\",\n    \"Jérôme\",\n    \"Thomas\",\n  ] as const;\n\n  return names[Math.floor(Math.random() * names.length)] ?? names[0];\n};\n\nconst generateItem = (): TestRow => {\n  return {\n    id: uuid(),\n    name: generateRandomName(),\n  };\n};\n\nconst EditableFixedListView = (props: Pick<FixedListViewProps<TestRow, SortInfo>, \"mode\">) => {\n  const [sort, setSort] = useState<SortInfo>({ key: \"name\", order: \"Desc\" });\n  const [endReachedTimes, setEndReachedTimes] = useState(0);\n  const [withInfiniteScroll, setWithInfiniteScroll] = useState(false);\n  const [showFakeLoader, setShowFakeLoader] = useState(false);\n  const [forceIsLoading, setForceIsLoading] = useState(false);\n\n  const [data, setData] = useState(() => Array.from({ length: 100 }, _ => generateItem()));\n\n  const onEndReached = useCallback(() => {\n    setEndReachedTimes(v => v + 1);\n    if (withInfiniteScroll) {\n      setShowFakeLoader(true);\n    }\n  }, [withInfiniteScroll]);\n\n  useEffect(() => {\n    if (showFakeLoader) {\n      const timeout = setTimeout(() => {\n        setShowFakeLoader(false);\n        setData(data => [...data, ...Array.from({ length: 100 }, _ => generateItem())]);\n      }, 1000);\n\n      return () => clearTimeout(timeout);\n    }\n  });\n\n  const { stickedToStartColumns, columns, stickedToEndColumns } = useMemo(() => {\n    const stickedToStartColumns = [\n      {\n        width: 300,\n        id: \"name\",\n        title: \"Name\",\n        renderTitle: ({ title, extraInfo, id }: ColumnTitleConfig<SortInfo>) => (\n          <SimpleHeaderCell\n            text={title}\n            sort={extraInfo.key === id ? extraInfo.order : undefined}\n            onPress={() => setSort({ key: id, order: extraInfo.order === \"Desc\" ? \"Asc\" : \"Desc\" })}\n          />\n        ),\n        renderCell: ({ item: { name } }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <SimpleTitleCell text={name} />\n        ),\n      },\n    ];\n\n    const columns = [\n      {\n        width: 500,\n        id: \"event_id\",\n        title: \"Event ID\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: ({ item: { id } }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <SimpleRegularTextCell text={id} />\n        ),\n      },\n      {\n        width: 150,\n        id: \"link_before\",\n        title: \"Link before\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: () => (\n          <LinkCell onPress={() => {}} buttonPosition=\"start\">\n            <Tag color=\"shakespear\">Demo link</Tag>\n          </LinkCell>\n        ),\n      },\n      {\n        width: 500,\n        id: \"onboarding_id\",\n        title: \"Onboarding ID\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: ({ item: { id } }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <SimpleRegularTextCell text={id} />\n        ),\n      },\n      {\n        width: 150,\n        id: \"link_after\",\n        title: \"Link after\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: () => (\n          <LinkCell onPress={() => {}} buttonPosition=\"end\">\n            <Tag color=\"shakespear\">Demo link</Tag>\n          </LinkCell>\n        ),\n      },\n      {\n        width: 500,\n        id: \"account_id\",\n        title: \"Account ID\",\n        renderTitle: ({ title }: ColumnTitleConfig<SortInfo>) => <SimpleHeaderCell text={title} />,\n        renderCell: ({ item: { id } }: ColumnCellConfig<TestRow, SortInfo>) => (\n          <SimpleRegularTextCell text={id} />\n        ),\n      },\n    ];\n\n    const stickedToEndColumns = [\n      {\n        width: 100,\n        id: \"dot\",\n        title: \"Settings\",\n        renderTitle: () => <SimpleHeaderCell text={\"End\"} />,\n        renderCell: () => <SimpleRegularTextCell text=\"...\" />,\n      },\n    ];\n\n    return { stickedToStartColumns, columns, stickedToEndColumns };\n  }, []);\n\n  return (\n    <>\n      <Box direction=\"row\" alignItems=\"center\">\n        <LakeButton\n          icon=\"add-circle-filled\"\n          color=\"live\"\n          onPress={() => setData(data => [generateItem(), ...data])}\n        >\n          Prepend\n        </LakeButton>\n\n        <Space width={16} />\n\n        <LakeButton icon=\"delete-filled\" color=\"negative\" onPress={() => setData([])}>\n          Clear\n        </LakeButton>\n\n        <Space width={16} />\n        <Tag label=\"End reached\">{endReachedTimes} times</Tag>\n        <Space width={16} />\n\n        <LakeLabelledCheckbox\n          label=\"With infinite scroll\"\n          value={withInfiniteScroll}\n          onValueChange={setWithInfiniteScroll}\n        />\n\n        <Space width={16} />\n\n        <LakeLabelledCheckbox\n          label=\"Force loading state\"\n          value={forceIsLoading}\n          onValueChange={setForceIsLoading}\n        />\n      </Box>\n\n      <Space height={16} />\n\n      <FixedListView\n        extraInfo={sort}\n        keyExtractor={keyExtractor}\n        data={data}\n        stickedToStartColumns={stickedToStartColumns}\n        columns={columns}\n        stickedToEndColumns={stickedToEndColumns}\n        rowHeight={48}\n        rowVerticalSpacing={4}\n        headerHeight={48}\n        onEndReached={onEndReached}\n        onEndReachedThresholdPx={300}\n        renderEmptyList={() => (\n          <FixedListViewEmpty icon=\"lake-inbox-empty\" title=\"Nothing to see here\" />\n        )}\n        loading={{\n          isLoading: forceIsLoading || showFakeLoader,\n          count: 5,\n        }}\n        {...props}\n      />\n    </>\n  );\n};\n\nexport const Primary: StoryFn<typeof FixedListView> = () => {\n  return <EditableFixedListView />;\n};\n\nexport const WithoutBackground: StoryFn<typeof FixedListView> = () => {\n  return <EditableFixedListView mode=\"plain\" />;\n};\n\nexport const Placeholder: StoryFn<typeof FixedListView> = () => {\n  return (\n    <FixedListViewPlaceholder rowHeight={48} rowVerticalSpacing={4} headerHeight={48} count={3} />\n  );\n};\n"],"names":["FixedListView_stories","title","component","FixedListView","keyExtractor","id","generateRandomName","names","Math","floor","random","length","generateItem","uuid","name","EditableFixedListView","props","sort","setSort","useState","key","order","endReachedTimes","setEndReachedTimes","withInfiniteScroll","setWithInfiniteScroll","showFakeLoader","setShowFakeLoader","forceIsLoading","setForceIsLoading","data","setData","Array","from","_","onEndReached","useCallback","v","useEffect","timeout","setTimeout","clearTimeout","stickedToStartColumns","columns","stickedToEndColumns","useMemo","width","renderTitle","extraInfo","jsx","SimpleHeaderCell","undefined","renderCell","item","SimpleTitleCell","SimpleRegularTextCell","LinkCell","Tag","jsxs","Fragment","Box","LakeButton","Space","LakeLabelledCheckbox","FixedListViewEmpty","isLoading","count","Primary","WithoutBackground","Placeholder","FixedListViewPlaceholder"],"mappings":"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"}