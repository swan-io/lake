{"version":3,"file":"LakeTextInput-b8be4da1.js","sources":["../../../packages/lake/src/hooks/useNativeProp.ts","../../../packages/lake/src/components/LakeTextInput.tsx"],"sourcesContent":["import { MutableRefObject, useLayoutEffect } from \"react\";\nimport { isNotNullish } from \"../utils/nullish\";\n\nexport const useNativeProp = <T>(\n  ref: MutableRefObject<T | null>,\n  name: string,\n  value: number | string | undefined,\n) => {\n  useLayoutEffect(() => {\n    if (isNotNullish(value) && ref.current instanceof Element) {\n      ref.current.setAttribute(name, String(value));\n    }\n  }, [ref, name, value]);\n};\n","import { ChangeEventHandler, forwardRef, ReactNode, useCallback, useRef, useState } from \"react\";\nimport {\n  ActivityIndicator,\n  NativeSyntheticEvent,\n  StyleSheet,\n  TextInput,\n  TextInputFocusEventData,\n  TextInputProps,\n  View,\n} from \"react-native\";\nimport { Except } from \"type-fest\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport {\n  backgroundColor,\n  colors,\n  ColorVariants,\n  radii,\n  shadows,\n  spacings,\n  texts,\n} from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { useNativeProp } from \"../hooks/useNativeProp\";\nimport { isNotNullish, isNotNullishOrEmpty, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { Fill } from \"./Fill\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeText } from \"./LakeText\";\n\nconst TRANSPARENT = \"transparent\";\n\nconst styles = StyleSheet.create({\n  root: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n  },\n  container: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  contents: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  input: {\n    ...texts.regular,\n    paddingHorizontal: spacings[16],\n    outlineStyle: \"none\",\n    height: 40,\n    borderColor: colors.gray[100],\n    placeholderTextColor: colors.gray[400],\n    borderWidth: 1,\n    borderRadius: radii[6],\n    backgroundColor: backgroundColor.accented,\n    color: colors.gray[900],\n    width: \"100%\",\n    flexShrink: 1,\n  },\n  multilineInput: {\n    height: \"auto\",\n    padding: spacings[8],\n  },\n  inputWithUnit: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n  hovered: {\n    boxShadow: shadows.tile,\n  },\n  disabled: {\n    backgroundColor: colors.gray[50],\n    borderColor: colors.gray[50],\n    color: colors.gray[900],\n    cursor: \"not-allowed\",\n  },\n  readOnly: {\n    backgroundColor: colors.gray[50],\n    borderColor: colors.gray[50],\n    color: colors.gray[900],\n  },\n  withIcon: {\n    paddingLeft: spacings[48],\n  },\n  error: {\n    borderColor: colors.negative[400],\n    paddingRight: spacings[48],\n  },\n  valid: {\n    borderColor: colors.positive[500],\n    paddingRight: spacings[48],\n  },\n  readOnlyError: {\n    borderColor: TRANSPARENT,\n    paddingRight: spacings[32],\n  },\n  endIcon: {\n    position: \"absolute\",\n    right: spacings[16],\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n  icon: {\n    position: \"absolute\",\n    left: spacings[16],\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n  readOnlyEndIcon: {\n    right: 0,\n  },\n\n  unit: {\n    backgroundColor: colors.gray[50],\n    paddingHorizontal: spacings[16],\n    paddingVertical: spacings[8],\n    maxHeight: 40,\n    borderTopRightRadius: radii[6],\n    borderBottomRightRadius: radii[6],\n    borderColor: colors.gray[100],\n    borderWidth: 1,\n    borderLeftWidth: 0,\n    flexShrink: 0,\n  },\n  unitDisabled: {\n    borderColor: colors.gray[50],\n  },\n  focused: {\n    borderColor: colors.gray[500],\n    boxShadow: shadows.tile,\n  },\n  descriptionLimitation: {\n    flexShrink: 0,\n  },\n  errorContainer: {\n    paddingTop: spacings[4],\n  },\n});\n\n// The `onChange` type change is for compatibity with Rifm\nexport type LakeTextInputProps = Except<\n  TextInputProps,\n  \"editable\" | \"keyboardType\" | \"onChange\"\n> & {\n  ariaExpanded?: boolean;\n  ariaControls?: string;\n  error?: string;\n  readOnly?: boolean;\n  validating?: boolean;\n  valid?: boolean;\n  disabled?: boolean;\n  color?: ColorVariants;\n  multiline?: boolean;\n  icon?: IconName;\n  unit?: string;\n  inputMode?: TextInputProps[\"inputMode\"];\n  pattern?: string;\n  children?: ReactNode;\n  hideErrors?: boolean;\n  style?: TextInputProps[\"style\"];\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n  maxCharCount?: number;\n  help?: string;\n};\n\nexport const LakeTextInput = forwardRef<TextInput | null, LakeTextInputProps>(\n  (\n    {\n      ariaExpanded,\n      ariaControls,\n      error,\n      disabled = false,\n      validating = false,\n      valid = false,\n      readOnly = false,\n      icon,\n      children,\n      unit,\n      color = \"gray\",\n      inputMode = \"text\",\n      hideErrors = false,\n      onChange,\n      pattern,\n      style: stylesFromProps,\n      onFocus: originalOnFocus,\n      onBlur: originalOnBlur,\n      value,\n      defaultValue,\n      multiline = false,\n      //maxCharCount is different from maxLength(props inherited of TextInput), maxLength truncates the text in the limitation asked,\n      //maxCharCount doesn't have limitation but displays a counter of characters\n      maxCharCount,\n      help,\n      ...props\n    }: LakeTextInputProps,\n    forwardRef,\n  ) => {\n    const inputRef = useRef<TextInput | null>(null);\n    const [isHovered, setIsHovered] = useState(false);\n    const [isFocused, setIsFocused] = useState(false);\n\n    useNativeProp(inputRef, \"pattern\", pattern);\n\n    useHover(inputRef, {\n      onHoverStart: () => setIsHovered(true),\n      onHoverEnd: () => setIsHovered(false),\n    });\n\n    const onFocus = useCallback(\n      (event: NativeSyntheticEvent<TextInputFocusEventData>) => {\n        setIsFocused(true);\n        originalOnFocus?.(event);\n      },\n      [originalOnFocus],\n    );\n\n    const onBlur = useCallback(\n      (event: NativeSyntheticEvent<TextInputFocusEventData>) => {\n        setIsFocused(false);\n        originalOnBlur?.(event);\n      },\n      [originalOnBlur],\n    );\n\n    const mergedRef = useMergeRefs(inputRef, forwardRef);\n    const isInteractive = !disabled && !readOnly;\n    const hasError = isNotNullishOrEmpty(error);\n    const charCount = isNullish(value) ? 0 : value.length;\n\n    return (\n      <View style={commonStyles.fill}>\n        <View style={styles.root} aria-errormessage={error}>\n          <View style={styles.container}>\n            <View style={styles.contents}>\n              <TextInput\n                aria-expanded={ariaExpanded}\n                aria-controls={ariaControls}\n                inputMode={inputMode}\n                ref={mergedRef}\n                {...props}\n                defaultValue={defaultValue}\n                value={isNullish(defaultValue) ? value ?? \"\" : value}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                readOnly={!isInteractive}\n                onChange={onChange as TextInputProps[\"onChange\"]}\n                multiline={multiline}\n                style={[\n                  styles.input,\n                  multiline && styles.multilineInput,\n                  hasError && styles.error,\n                  valid && styles.valid,\n                  isNotNullish(icon) && styles.withIcon,\n                  readOnly && hasError && styles.readOnlyError,\n                  disabled && styles.disabled,\n                  readOnly && styles.readOnly,\n                  isHovered && isInteractive && styles.hovered,\n                  isNotNullish(unit) && styles.inputWithUnit,\n                  isFocused && styles.focused,\n                  isFocused && { borderColor: colors[color][500] },\n                  stylesFromProps,\n                ]}\n              />\n\n              {validating && (\n                <ActivityIndicator\n                  size=\"small\"\n                  style={styles.endIcon}\n                  color={colors.current[500]}\n                />\n              )}\n\n              {!validating && hasError && (\n                <Icon\n                  name=\"warning-regular\"\n                  size={20}\n                  color={colors.negative[400]}\n                  style={[styles.endIcon, readOnly && styles.readOnlyEndIcon]}\n                />\n              )}\n\n              {!validating && !hasError && valid && (\n                <Icon\n                  name=\"checkmark-filled\"\n                  size={20}\n                  color={colors.positive[400]}\n                  style={[styles.endIcon, readOnly && styles.readOnlyEndIcon]}\n                />\n              )}\n\n              {isNotNullish(icon) && (\n                <Icon name={icon} size={20} color={colors.current.primary} style={styles.icon} />\n              )}\n            </View>\n\n            {isNotNullish(unit) && (\n              <LakeText\n                color={colors.gray[900]}\n                style={[styles.unit, (disabled || readOnly) && styles.unitDisabled]}\n              >\n                {unit}\n              </LakeText>\n            )}\n          </View>\n\n          {children}\n        </View>\n\n        {!hideErrors && (\n          <Box direction=\"row\" style={styles.errorContainer}>\n            {isNotNullish(help) ? (\n              <LakeText\n                variant=\"smallRegular\"\n                color={isNotNullish(error) ? colors.negative[500] : colors.gray[500]}\n              >\n                {help}\n              </LakeText>\n            ) : (\n              <LakeText variant=\"smallRegular\" color={colors.negative[500]}>\n                {error ?? \" \"}\n              </LakeText>\n            )}\n\n            {isNotNullish(maxCharCount) && (\n              <>\n                <Fill minWidth={4} />\n\n                <LakeText\n                  variant=\"smallRegular\"\n                  color={charCount > maxCharCount ? colors.negative[500] : colors.gray[400]}\n                  style={styles.descriptionLimitation}\n                >\n                  {charCount} / {maxCharCount}\n                </LakeText>\n              </>\n            )}\n          </Box>\n        )}\n      </View>\n    );\n  },\n);\n"],"names":["useNativeProp","ref","name","value","useLayoutEffect","isNotNullish","TRANSPARENT","styles","StyleSheet","texts","spacings","colors","radii","backgroundColor","shadows","LakeTextInput","forwardRef","ariaExpanded","ariaControls","error","disabled","validating","valid","readOnly","icon","children","unit","color","inputMode","hideErrors","onChange","pattern","stylesFromProps","originalOnFocus","originalOnBlur","defaultValue","multiline","maxCharCount","help","props","forwardRef2","inputRef","useRef","isHovered","setIsHovered","useState","isFocused","setIsFocused","useHover","onFocus","useCallback","event","onBlur","mergedRef","useMergeRefs","isInteractive","hasError","isNotNullishOrEmpty","charCount","isNullish","jsxs","View","commonStyles","jsx","TextInput","ActivityIndicator","Icon","LakeText","Box","Fragment","Fill"],"mappings":"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"}