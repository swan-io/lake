{"version":3,"file":"DatePicker.stories-a3502404.js","sources":["../../../packages/lake/src/components/DatePicker.tsx"],"sourcesContent":["import { Option } from \"@swan-io/boxed\";\nimport dayjs from \"dayjs\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Rifm } from \"rifm\";\nimport { P, match } from \"ts-pattern\";\nimport { colors, invariantColors, radii, spacings } from \"../constants/design\";\nimport { noop } from \"../utils/function\";\nimport { isNotNullish, isNotNullishOrEmpty, isNullishOrEmpty } from \"../utils/nullish\";\nimport { getRifmProps } from \"../utils/rifm\";\nimport { Box } from \"./Box\";\nimport { Fill } from \"./Fill\";\nimport { Icon } from \"./Icon\";\nimport { LakeButton } from \"./LakeButton\";\nimport { Item, LakeSelect } from \"./LakeSelect\";\nimport { LakeText } from \"./LakeText\";\nimport { LakeTextInput } from \"./LakeTextInput\";\nimport { Pressable } from \"./Pressable\";\nimport { Separator } from \"./Separator\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  popoverContainer: {\n    width: 430,\n    padding: spacings[24],\n    backgroundColor: invariantColors.white,\n    borderRadius: radii[8],\n  },\n  rangePopoverContainer: {\n    alignSelf: \"flex-start\", // to remove when popover is setup\n    padding: spacings[24],\n    backgroundColor: invariantColors.white,\n    borderRadius: radii[8],\n  },\n  rangePopoverPart: {\n    width: 330,\n  },\n  button: {\n    flex: 1,\n  },\n  monthSelect: {\n    width: 130,\n  },\n  yearSelect: {\n    width: 100,\n  },\n  weekRow: {\n    paddingVertical: spacings[4],\n  },\n  dayName: {\n    flex: 1,\n    height: 32,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  dayContainer: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n  dayRangeIndicator: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    backgroundColor: colors.current[100],\n  },\n  dayStartRangeIndicator: {\n    left: \"50%\",\n  },\n  dayEndRangeIndicator: {\n    right: \"50%\",\n  },\n  dayNumber: {\n    width: 32,\n    height: 32,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 16,\n  },\n  dayNumberFocused: {},\n  dayNumberHover: {\n    backgroundColor: colors.current[100],\n  },\n  dayNumberPressed: {},\n  dayNumberSelected: {\n    backgroundColor: colors.current[500],\n  },\n  todayIndicator: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    bottom: 0,\n    width: 4,\n    height: 4,\n    marginHorizontal: \"auto\",\n    borderRadius: 2,\n    backgroundColor: colors.current[500],\n  },\n});\n\nconst NB_DAYS_IN_WEEK = 7;\n\ntype MonthNames = readonly [\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n];\ntype WeekDayNames = readonly [string, string, string, string, string, string, string];\n\ntype YearMonth = {\n  year: number;\n  month: number;\n};\n\nconst weekDayIndex = {\n  sunday: 0,\n  monday: 1,\n  tuesday: 2,\n  wednesday: 3,\n  thursday: 4,\n  friday: 5,\n  saturday: 6,\n};\n\nexport type DatePickerDate = {\n  day: number;\n  month: number;\n  year: number;\n};\n\nexport type DatePickerRange = {\n  start: Option<DatePickerDate>;\n  end: Option<DatePickerDate>;\n};\n\ntype DateFormat = \"DD/MM/YYYY\" | \"MM/DD/YYYY\";\n\nconst rifmDateProps = getRifmProps({\n  accept: \"numeric\",\n  charMap: { 2: \"/\", 4: \"/\" },\n  maxLength: 8,\n});\n\nconst parseDate = (value: string, format: DateFormat): Option<DatePickerDate> => {\n  const date = dayjs.utc(value, format);\n  return date.isValid()\n    ? Option.Some({ day: date.date(), month: date.month(), year: date.year() })\n    : Option.None();\n};\n\nconst parseRange = (value: { start: string; end: string }, format: DateFormat): DatePickerRange => {\n  return {\n    start: parseDate(value.start, format),\n    end: parseDate(value.end, format),\n  };\n};\n\nconst stringifyDate = (value: DatePickerDate, format: DateFormat): string => {\n  const date = dayjs.utc().year(value.year).month(value.month).date(value.day);\n  return date.format(format);\n};\n\nconst range = (start: number, end: number): number[] => {\n  const result = [];\n  for (let i = start; i <= end; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst groupEvery = <T,>(input: T[], groupSize: number): T[][] => {\n  const result = [];\n  const nbGroups = Math.ceil(input.length / groupSize);\n  for (let i = 0; i < nbGroups; i++) {\n    result.push(input.slice(i * groupSize, (i + 1) * groupSize));\n  }\n\n  return result;\n};\n\nconst padEnd = <T,>(input: T[], length: number, value: T): T[] => {\n  const itemsToAppend = new Array(length - input.length).fill(value) as T[];\n  return [...input, ...itemsToAppend];\n};\n\nexport const isTodayOrFutureDate = (date: DatePickerDate): boolean => {\n  const today = new Date();\n\n  return (\n    date.year >= today.getFullYear() &&\n    date.month >= today.getMonth() &&\n    date.day >= today.getDate()\n  );\n};\n\nexport const isDateInRange =\n  (minDate: Date, maxDate: Date) =>\n  (date: DatePickerDate): boolean => {\n    const minDay = minDate.getDate();\n    const minMonth = minDate.getMonth();\n    const minYear = minDate.getFullYear();\n\n    const maxDay = maxDate.getDate();\n    const maxMonth = maxDate.getMonth();\n    const maxYear = maxDate.getFullYear();\n\n    return (\n      date.day >= minDay &&\n      date.month >= minMonth &&\n      date.year >= minYear &&\n      date.day <= maxDay &&\n      date.month <= maxMonth &&\n      date.year <= maxYear\n    );\n  };\n\nconst isDateToday = (date: DatePickerDate): boolean => {\n  const today = new Date();\n  return (\n    date.day === today.getDate() &&\n    date.month === today.getMonth() &&\n    date.year === today.getFullYear()\n  );\n};\n\nconst getMonthDates = (month: number, year: number): DatePickerDate[] => {\n  const aggregate = (acc: DatePickerDate[], date: Date): DatePickerDate[] => {\n    const dateDay = date.getDate();\n    const dateMonth = date.getMonth();\n    const dateYear = date.getFullYear();\n\n    if (date.getMonth() !== month) {\n      return acc;\n    }\n\n    return aggregate(\n      [...acc, { day: dateDay, month: dateMonth, year: dateYear }],\n      new Date(year, month, dateDay + 1),\n    );\n  };\n\n  return aggregate([], new Date(year, month, 1));\n};\n\nconst getMonthWeeks = (\n  month: number,\n  year: number,\n  firstWeekDay: keyof typeof weekDayIndex,\n): Option<DatePickerDate>[][] => {\n  const firstWeekDayIndex = weekDayIndex[firstWeekDay];\n  const monthFirstWeekDay = new Date(year, month, 1).getDay();\n  const monthDates = getMonthDates(month, year).map(date => Option.Some(date));\n\n  const nbDaysToPrepend =\n    monthFirstWeekDay >= firstWeekDayIndex\n      ? monthFirstWeekDay - firstWeekDayIndex\n      : NB_DAYS_IN_WEEK - firstWeekDayIndex + monthFirstWeekDay;\n\n  for (let i = 0; i < nbDaysToPrepend; i++) {\n    monthDates.unshift(Option.None());\n  }\n  const weeks = groupEvery(monthDates, NB_DAYS_IN_WEEK);\n  const lastWeek = weeks[weeks.length - 1];\n\n  if (!lastWeek) {\n    return weeks;\n  }\n  weeks[weeks.length - 1] = padEnd(lastWeek, NB_DAYS_IN_WEEK, Option.None());\n\n  return weeks;\n};\n\nconst getWeekDayNames = (\n  dayNames: WeekDayNames,\n  firstWeekDay: keyof typeof weekDayIndex = \"sunday\",\n): WeekDayNames => {\n  const firstWeekDayIndex = weekDayIndex[firstWeekDay];\n  const firstWeekDayNames = dayNames.slice(firstWeekDayIndex);\n  const lastWeekDayNames = dayNames.slice(0, firstWeekDayIndex);\n\n  // @ts-expect-error\n  return [...firstWeekDayNames, ...lastWeekDayNames];\n};\n\nconst isDateEquals = (date1: DatePickerDate, date2: DatePickerDate): boolean => {\n  return date1.day === date2.day && date1.month === date2.month && date1.year === date2.year;\n};\n\nconst isDateBefore = (date1: DatePickerDate, date2: DatePickerDate): boolean => {\n  return (\n    date1.year < date2.year ||\n    (date1.year === date2.year && date1.month < date2.month) ||\n    (date1.year === date2.year && date1.month === date2.month && date1.day < date2.day)\n  );\n};\n\nconst isDateAfter = (date1: DatePickerDate, date2: DatePickerDate): boolean => {\n  return (\n    date1.year > date2.year ||\n    (date1.year === date2.year && date1.month > date2.month) ||\n    (date1.year === date2.year && date1.month === date2.month && date1.day > date2.day)\n  );\n};\n\nconst isDateRange = (value: Option<DatePickerDate> | DatePickerRange): value is DatePickerRange => {\n  return match(value)\n    .with({ start: P._, end: P._ }, () => true)\n    .otherwise(() => false);\n};\n\nconst isSelectedDate = (date: DatePickerDate, value: Option<DatePickerDate> | DatePickerRange) => {\n  return match(value)\n    .with(Option.pattern.Some(P.select()), value => isDateEquals(value, date))\n    .with(Option.pattern.None, () => false)\n    .with(\n      P.when(isDateRange),\n      ({ start, end }) =>\n        start.match({\n          Some: start => isDateEquals(start, date),\n          None: () => false,\n        }) ||\n        end.match({\n          Some: end => isDateEquals(end, date),\n          None: () => false,\n        }),\n    )\n    .exhaustive();\n};\n\nconst getRangeIndicatorType = (\n  date: DatePickerDate,\n  value: Option<DatePickerDate> | DatePickerRange,\n): \"none\" | \"start\" | \"end\" | \"between\" => {\n  if (!isDateRange(value)) {\n    return \"none\";\n  }\n\n  const { start, end } = value;\n  if (start.isNone() || end.isNone()) {\n    return \"none\";\n  }\n\n  const startDate = start.value;\n  const endDate = end.value;\n\n  if (isDateEquals(startDate, endDate)) {\n    return \"none\";\n  }\n  if (isDateEquals(date, startDate)) {\n    return \"start\";\n  }\n  if (isDateEquals(date, endDate)) {\n    return \"end\";\n  }\n  if (isDateAfter(date, startDate) && isDateBefore(date, endDate)) {\n    return \"between\";\n  }\n  return \"none\";\n};\n\nconst computeDateDistanceInDays = (date1: DatePickerDate, date2: DatePickerDate): number => {\n  const date1Date = new Date(date1.year, date1.month, date1.day);\n  const date2Date = new Date(date2.year, date2.month, date2.day);\n\n  const diffInMs = Math.abs(date2Date.getTime() - date1Date.getTime());\n  return Math.round(diffInMs / (1000 * 3600 * 24));\n};\n\nconst getNewDateRange = (\n  currentRange: DatePickerRange,\n  selectedDate: DatePickerDate,\n): DatePickerRange => {\n  const { start, end } = currentRange;\n\n  // Handle initial selection\n  if (start.isNone()) {\n    return { start: Option.Some(selectedDate), end: Option.None() };\n  }\n  if (end.isNone()) {\n    if (isDateAfter(selectedDate, start.value)) {\n      return { start, end: Option.Some(selectedDate) };\n    }\n\n    return { start: Option.Some(selectedDate), end: currentRange.start };\n  }\n\n  // Handle selection outside of the current range\n  if (isDateBefore(selectedDate, start.value)) {\n    return { start: Option.Some(selectedDate), end: currentRange.end };\n  }\n  if (isDateAfter(selectedDate, end.value)) {\n    return { start: currentRange.start, end: Option.Some(selectedDate) };\n  }\n\n  // We change the closest date to the new date\n  const startDistance = computeDateDistanceInDays(start.value, selectedDate);\n  const endDistance = computeDateDistanceInDays(end.value, selectedDate);\n\n  if (startDistance < endDistance) {\n    return { start: Option.Some(selectedDate), end: currentRange.end };\n  }\n  return { start: currentRange.start, end: Option.Some(selectedDate) };\n};\n\nconst getTodayYearMonth = (): YearMonth => ({\n  month: new Date().getMonth(),\n  year: new Date().getFullYear(),\n});\n\nconst getYearMonth = (value: string | undefined, format: DateFormat): Option<YearMonth> => {\n  if (isNullishOrEmpty(value)) {\n    return Option.None();\n  }\n  return parseDate(value, format);\n};\n\nconst isYearMonthBefore = (date1: YearMonth, date2: YearMonth): boolean => {\n  return date1.year < date2.year || (date1.year === date2.year && date1.month < date2.month);\n};\n\nconst isYearMonthEquals = (date1: YearMonth, date2: YearMonth): boolean => {\n  return date1.year === date2.year && date1.month === date2.month;\n};\n\nconst minYearMonth = (date1: YearMonth, date2: YearMonth): YearMonth => {\n  return isYearMonthBefore(date1, date2) ? date1 : date2;\n};\n\nconst maxYearMonth = (date1: YearMonth, date2: YearMonth): YearMonth => {\n  return isYearMonthBefore(date1, date2) ? date2 : date1;\n};\n\nconst incrementYearMonth = ({ month, year }: YearMonth): YearMonth => {\n  if (month === 11) {\n    return { month: 0, year: year + 1 };\n  }\n  return { month: month + 1, year };\n};\n\nconst decrementYearMonth = ({ month, year }: YearMonth): YearMonth => {\n  if (month === 0) {\n    return { month: 11, year: year - 1 };\n  }\n  return { month: month - 1, year };\n};\n\ntype YearMonthSelectProps = {\n  monthNames: MonthNames;\n  value: YearMonth;\n  arrowsPosition?: \"around\" | \"right\";\n  minValue?: YearMonth;\n  maxValue?: YearMonth;\n  onChange: (value: YearMonth) => void;\n};\n\nconst YearMonthSelect = ({\n  monthNames,\n  value,\n  minValue,\n  maxValue,\n  arrowsPosition = \"right\",\n  onChange,\n}: YearMonthSelectProps) => {\n  const monthItems = useMemo<Item<number>[]>(\n    () => monthNames.map((name, index) => ({ name, value: index })),\n    [monthNames],\n  );\n\n  const yearItems = useMemo<Item<number>[]>(\n    () =>\n      range(value.year - 5, value.year + 5).map(year => ({\n        name: year.toString(),\n        value: year,\n      })),\n    [value.year],\n  );\n\n  const selectMonth = (month: number) => {\n    onChange({ year: value.year, month });\n  };\n\n  const selectYear = (year: number) => {\n    onChange({ year, month: value.month });\n  };\n\n  const setPreviousMonth = () => {\n    onChange(decrementYearMonth(value));\n  };\n\n  const setNextMonth = () => {\n    onChange(incrementYearMonth(value));\n  };\n\n  const isPreviousDisabled = !minValue\n    ? false\n    : value.year <= minValue.year && value.month <= minValue.month;\n  const isNextDisabled = !maxValue\n    ? false\n    : value.year >= maxValue.year && value.month >= maxValue.month;\n\n  return (\n    <Box direction=\"row\" alignItems=\"center\">\n      {arrowsPosition === \"around\" && (\n        <>\n          <LakeButton\n            size=\"small\"\n            mode=\"tertiary\"\n            icon=\"arrow-left-filled\"\n            disabled={isPreviousDisabled}\n            onPress={setPreviousMonth}\n          />\n\n          <Fill minWidth={12} />\n        </>\n      )}\n\n      <LakeSelect\n        items={monthItems}\n        value={value.month}\n        onValueChange={selectMonth}\n        mode=\"borderless\"\n        size=\"small\"\n        hideErrors={true}\n        style={styles.monthSelect}\n      />\n\n      <LakeSelect\n        items={yearItems}\n        value={value.year}\n        onValueChange={selectYear}\n        mode=\"borderless\"\n        size=\"small\"\n        hideErrors={true}\n        style={styles.yearSelect}\n      />\n\n      <Fill minWidth={12} />\n\n      {arrowsPosition === \"right\" && (\n        <>\n          <LakeButton\n            size=\"small\"\n            mode=\"tertiary\"\n            icon=\"arrow-left-filled\"\n            disabled={isPreviousDisabled}\n            onPress={setPreviousMonth}\n          />\n\n          <Space width={12} />\n        </>\n      )}\n\n      <LakeButton\n        size=\"small\"\n        mode=\"tertiary\"\n        icon=\"arrow-right-filled\"\n        disabled={isNextDisabled}\n        onPress={setNextMonth}\n      />\n    </Box>\n  );\n};\n\ntype MonthCalendarProps = {\n  month: number;\n  year: number;\n  value: Option<DatePickerDate> | DatePickerRange;\n  firstWeekDay: keyof typeof weekDayIndex;\n  weekDayNames: WeekDayNames;\n  isSelectable?: (date: DatePickerDate) => boolean;\n  onChange: (date: DatePickerDate) => void;\n};\n\nconst MonthCalendar = ({\n  month,\n  year,\n  value,\n  firstWeekDay,\n  weekDayNames,\n  isSelectable,\n  onChange,\n}: MonthCalendarProps) => {\n  const dayNames = useMemo(\n    () => getWeekDayNames(weekDayNames, firstWeekDay),\n    [weekDayNames, firstWeekDay],\n  );\n  const weeks = useMemo(\n    () => getMonthWeeks(month, year, firstWeekDay),\n    [month, year, firstWeekDay],\n  );\n\n  return (\n    <View>\n      <Box direction=\"row\" alignItems=\"center\" style={styles.weekRow}>\n        {dayNames.map(dayName => (\n          <View key={dayName} style={styles.dayName}>\n            <LakeText variant=\"medium\" color={colors.gray[600]}>\n              {dayName.substring(0, 1)}\n            </LakeText>\n          </View>\n        ))}\n      </Box>\n\n      {weeks.map((week, weekIndex) => (\n        <Box key={weekIndex} direction=\"row\" alignItems=\"center\" style={styles.weekRow}>\n          {week.map((date, dateIndex) => {\n            const isDisabled = date.match({\n              Some: date => isNotNullish(isSelectable) && !isSelectable(date),\n              None: () => true,\n            });\n            const isSelected = date.match({\n              Some: date => isSelectedDate(date, value),\n              None: () => false,\n            });\n            const isToday = date.match({\n              Some: date => isDateToday(date),\n              None: () => false,\n            });\n            const rangeIndicator = date.match({\n              Some: date => getRangeIndicatorType(date, value),\n              None: () => \"none\" as const,\n            });\n\n            return (\n              <View key={dateIndex} style={styles.dayContainer}>\n                {rangeIndicator !== \"none\" && (\n                  <View\n                    style={[\n                      styles.dayRangeIndicator,\n                      rangeIndicator === \"start\" && styles.dayStartRangeIndicator,\n                      rangeIndicator === \"end\" && styles.dayEndRangeIndicator,\n                    ]}\n                  />\n                )}\n\n                <Pressable\n                  disabled={isDisabled}\n                  onPress={() => date.match({ Some: onChange, None: noop })}\n                  style={({ focused, hovered, pressed }) => [\n                    styles.dayNumber,\n                    focused && styles.dayNumberFocused,\n                    hovered && styles.dayNumberHover,\n                    pressed && styles.dayNumberPressed,\n                    isSelected && styles.dayNumberSelected,\n                  ]}\n                >\n                  <LakeText\n                    variant=\"smallRegular\"\n                    color={\n                      isSelected\n                        ? colors.current.contrast\n                        : isDisabled\n                        ? colors.gray[300]\n                        : isToday\n                        ? colors.current[500]\n                        : colors.gray[900]\n                    }\n                  >\n                    {date.match({ Some: ({ day }) => day.toString(), None: () => \" \" })}\n                  </LakeText>\n\n                  {isToday && <View style={styles.todayIndicator} />}\n                </Pressable>\n              </View>\n            );\n          })}\n        </Box>\n      ))}\n    </View>\n  );\n};\n\nexport type DatePickerProps = {\n  value?: string;\n  error?: string;\n  format: DateFormat;\n  firstWeekDay: keyof typeof weekDayIndex;\n  monthNames: MonthNames;\n  weekDayNames: WeekDayNames;\n  isSelectable?: (date: DatePickerDate) => boolean;\n  onChange: (date: string) => void;\n};\n\nconst DatePickerPopover = ({\n  value,\n  format,\n  firstWeekDay,\n  monthNames,\n  weekDayNames,\n  isSelectable,\n  onChange,\n}: DatePickerProps) => {\n  const [monthYear, setMonthYear] = useState(() =>\n    getYearMonth(value, format).getWithDefault(getTodayYearMonth()),\n  );\n\n  // Automatically change displayed year and month when user change the value with text input\n  useEffect(() => {\n    const yearMonth = getYearMonth(value, format);\n    if (yearMonth.isSome()) {\n      setMonthYear(yearMonth.value);\n    }\n  }, [value, format]);\n\n  const handleChange = useCallback(\n    (date: DatePickerDate) => {\n      const formatted = stringifyDate(date, format);\n      onChange(formatted);\n    },\n    [format, onChange],\n  );\n\n  return (\n    <View style={styles.popoverContainer}>\n      <YearMonthSelect monthNames={monthNames} value={monthYear} onChange={setMonthYear} />\n      <Space height={24} />\n\n      <MonthCalendar\n        month={monthYear.month}\n        year={monthYear.year}\n        value={isNotNullishOrEmpty(value) ? parseDate(value, format) : Option.None()}\n        firstWeekDay={firstWeekDay}\n        weekDayNames={weekDayNames}\n        isSelectable={isSelectable}\n        onChange={handleChange}\n      />\n    </View>\n  );\n};\n\nexport const DatePicker = ({\n  value,\n  error,\n  format,\n  firstWeekDay,\n  monthNames,\n  weekDayNames,\n  isSelectable,\n  onChange,\n}: DatePickerProps) => {\n  return (\n    <>\n      <Rifm value={value ?? \"\"} onChange={onChange} {...rifmDateProps}>\n        {({ value, onChange }) => (\n          <LakeTextInput placeholder={format} value={value} error={error} onChange={onChange} />\n        )}\n      </Rifm>\n\n      <DatePickerPopover\n        value={value}\n        format={format}\n        firstWeekDay={firstWeekDay}\n        monthNames={monthNames}\n        weekDayNames={weekDayNames}\n        isSelectable={isSelectable}\n        onChange={onChange}\n      />\n    </>\n  );\n};\n\nexport type DateRangePickerProps = {\n  value: { start: string; end: string };\n  error?: string;\n  format: DateFormat;\n  firstWeekDay: keyof typeof weekDayIndex;\n  monthNames: MonthNames;\n  weekDayNames: WeekDayNames;\n  isSelectable?: (date: DatePickerDate) => boolean;\n  minDurationinDays?: number;\n  maxDurationinDays?: number;\n  onChange: (date: { start: string; end: string }) => void;\n  cancelLabel: string;\n  confirmLabel: string;\n};\n\nconst DateRangePickerPopover = ({\n  value,\n  format,\n  firstWeekDay,\n  monthNames,\n  weekDayNames,\n  isSelectable,\n  // minDurationinDays,\n  // maxDurationinDays,\n  onChange,\n  cancelLabel,\n  confirmLabel,\n}: DateRangePickerProps) => {\n  const [periods, setPeriods] = useState(() => {\n    const startYearMonth = getYearMonth(value.start, format).getWithDefault(getTodayYearMonth());\n    const endYearMonth = getYearMonth(value.end, format).getWithDefault(\n      incrementYearMonth(startYearMonth),\n    );\n    return { start: startYearMonth, end: endYearMonth };\n  });\n\n  // Automatically change displayed year and month when start date changes\n  useEffect(() => {\n    const startYearMonth = getYearMonth(value.start, format);\n\n    if (startYearMonth.isSome()) {\n      setPeriods(periods => {\n        // change end period if it becomes before start period\n        const endPeriod = maxYearMonth(periods.end, incrementYearMonth(startYearMonth.value));\n\n        return {\n          start: startYearMonth.value,\n          end: endPeriod,\n        };\n      });\n    }\n  }, [value.start, format]);\n\n  // Automatically change displayed year and month when end date changes\n  useEffect(() => {\n    const endYearMonth = getYearMonth(value.end, format);\n\n    if (endYearMonth.isSome()) {\n      setPeriods(periods => {\n        const isStartAndEndSameMonth = isYearMonthEquals(periods.start, endYearMonth.value);\n        if (isStartAndEndSameMonth) {\n          return {\n            start: periods.start,\n            end: incrementYearMonth(periods.start),\n          };\n        }\n\n        // change start period if it becomes after end period\n        const startPeriod = minYearMonth(periods.start, decrementYearMonth(endYearMonth.value));\n\n        return {\n          start: startPeriod,\n          end: endYearMonth.value,\n        };\n      });\n    }\n  }, [value.end, format]);\n\n  const setStartPeriod = useCallback((yearMonth: YearMonth) => {\n    setPeriods(periods => ({\n      start: yearMonth,\n      end: maxYearMonth(periods.end, incrementYearMonth(yearMonth)),\n    }));\n  }, []);\n\n  const setEndPeriod = useCallback((yearMonth: YearMonth) => {\n    setPeriods(periods => ({\n      start: minYearMonth(periods.start, decrementYearMonth(yearMonth)),\n      end: yearMonth,\n    }));\n  }, []);\n\n  const dateRange = useMemo(() => parseRange(value, format), [value, format]);\n\n  const handleSelectDate = (date: DatePickerDate) => {\n    const newRange = getNewDateRange(dateRange, date);\n    const newValue = {\n      start: newRange.start.match({\n        Some: date => stringifyDate(date, format),\n        None: () => value.start,\n      }),\n      end: newRange.end.match({\n        Some: date => stringifyDate(date, format),\n        None: () => value.end,\n      }),\n    };\n    onChange(newValue);\n  };\n\n  return (\n    <View style={styles.rangePopoverContainer}>\n      <Box direction=\"row\" alignItems=\"start\">\n        <View style={styles.rangePopoverPart}>\n          <YearMonthSelect\n            monthNames={monthNames}\n            value={periods.start}\n            maxValue={decrementYearMonth(periods.end)}\n            arrowsPosition=\"around\"\n            onChange={setStartPeriod}\n          />\n\n          <Space height={24} />\n\n          <MonthCalendar\n            month={periods.start.month}\n            year={periods.start.year}\n            value={dateRange}\n            firstWeekDay={firstWeekDay}\n            weekDayNames={weekDayNames}\n            isSelectable={isSelectable}\n            onChange={handleSelectDate}\n          />\n        </View>\n\n        <Separator space={24} horizontal={true} />\n\n        <View style={styles.rangePopoverPart}>\n          <YearMonthSelect\n            monthNames={monthNames}\n            value={periods.end}\n            minValue={incrementYearMonth(periods.start)}\n            arrowsPosition=\"around\"\n            onChange={setEndPeriod}\n          />\n\n          <Space height={24} />\n\n          <MonthCalendar\n            month={periods.end.month}\n            year={periods.end.year}\n            value={dateRange}\n            firstWeekDay={firstWeekDay}\n            weekDayNames={weekDayNames}\n            isSelectable={isSelectable}\n            onChange={handleSelectDate}\n          />\n        </View>\n      </Box>\n\n      <Space height={24} />\n\n      <Box direction=\"row\" alignItems=\"start\">\n        <LakeButton size=\"small\" mode=\"secondary\" style={styles.button}>\n          {cancelLabel}\n        </LakeButton>\n\n        <Space width={48} />\n\n        <LakeButton size=\"small\" mode=\"primary\" color=\"current\" style={styles.button}>\n          {confirmLabel}\n        </LakeButton>\n      </Box>\n    </View>\n  );\n};\n\nexport const DateRangePicker = ({\n  value,\n  error,\n  format,\n  firstWeekDay,\n  monthNames,\n  weekDayNames,\n  isSelectable,\n  minDurationinDays,\n  maxDurationinDays,\n  onChange,\n  cancelLabel,\n  confirmLabel,\n}: DateRangePickerProps) => {\n  const handleStartChange = useCallback(\n    (start: string) => {\n      onChange({ start, end: value.end });\n    },\n    [value, onChange],\n  );\n\n  const handleEndChange = useCallback(\n    (end: string) => {\n      onChange({ start: value.start, end });\n    },\n    [value, onChange],\n  );\n\n  return (\n    <>\n      <Box direction=\"row\" alignItems=\"center\">\n        <Rifm value={value.start} onChange={handleStartChange} {...rifmDateProps}>\n          {({ value, onChange }) => (\n            <LakeTextInput\n              placeholder={format}\n              value={value}\n              onChange={onChange}\n              hideErrors={true}\n            />\n          )}\n        </Rifm>\n\n        <Space width={12} />\n        <Icon name=\"arrow-right-filled\" size={20} />\n        <Space width={12} />\n\n        <Rifm value={value.end} onChange={handleEndChange} {...rifmDateProps}>\n          {({ value, onChange }) => (\n            <LakeTextInput\n              placeholder={format}\n              value={value}\n              onChange={onChange}\n              hideErrors={true}\n            />\n          )}\n        </Rifm>\n      </Box>\n\n      <LakeText variant=\"smallRegular\" color={colors.negative[500]}>\n        {error ?? \" \"}\n      </LakeText>\n\n      <DateRangePickerPopover\n        value={value}\n        format={format}\n        firstWeekDay={firstWeekDay}\n        monthNames={monthNames}\n        weekDayNames={weekDayNames}\n        isSelectable={isSelectable}\n        minDurationinDays={minDurationinDays}\n        maxDurationinDays={maxDurationinDays}\n        onChange={onChange}\n        cancelLabel={cancelLabel}\n        confirmLabel={confirmLabel}\n      />\n    </>\n  );\n};\n"],"names":["styles","StyleSheet","spacings","invariantColors","radii","colors","NB_DAYS_IN_WEEK","weekDayIndex","rifmDateProps","getRifmProps","parseDate","value","format","date","dayjs","Option","parseRange","stringifyDate","range","start","end","result","i","groupEvery","input","groupSize","nbGroups","padEnd","length","itemsToAppend","isTodayOrFutureDate","today","isDateToday","getMonthDates","month","year","aggregate","acc","dateDay","dateMonth","dateYear","getMonthWeeks","firstWeekDay","firstWeekDayIndex","monthFirstWeekDay","monthDates","nbDaysToPrepend","weeks","lastWeek","getWeekDayNames","dayNames","firstWeekDayNames","lastWeekDayNames","isDateEquals","date1","date2","isDateBefore","isDateAfter","isDateRange","match","P","isSelectedDate","value2","start2","end2","getRangeIndicatorType","startDate","endDate","computeDateDistanceInDays","date1Date","date2Date","diffInMs","getNewDateRange","currentRange","selectedDate","startDistance","endDistance","getTodayYearMonth","getYearMonth","isNullishOrEmpty","isYearMonthBefore","isYearMonthEquals","minYearMonth","maxYearMonth","incrementYearMonth","decrementYearMonth","YearMonthSelect","monthNames","minValue","maxValue","arrowsPosition","onChange","monthItems","useMemo","name","index","yearItems","selectMonth","selectYear","setPreviousMonth","setNextMonth","isPreviousDisabled","isNextDisabled","jsxs","Box","Fragment","jsx","LakeButton","Fill","LakeSelect","Space","MonthCalendar","weekDayNames","isSelectable","View","dayName","LakeText","week","weekIndex","dateIndex","isDisabled","isNotNullish","isSelected","isToday","rangeIndicator","Pressable","noop","focused","hovered","pressed","day","DatePickerPopover","monthYear","setMonthYear","useState","useEffect","yearMonth","handleChange","useCallback","formatted","isNotNullishOrEmpty","DatePicker","error","Rifm","onChange2","LakeTextInput","DateRangePickerPopover","cancelLabel","confirmLabel","periods","setPeriods","startYearMonth","endYearMonth","periods2","endPeriod","setStartPeriod","setEndPeriod","dateRange","handleSelectDate","newRange","newValue","Separator","DateRangePicker","minDurationinDays","maxDurationinDays","handleStartChange","handleEndChange","Icon"],"mappings":"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"}