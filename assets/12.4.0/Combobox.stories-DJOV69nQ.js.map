{"version":3,"mappings":"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","names":["styles","StyleSheet","AutocompleteSearchInput","inputRef","value","onValueChange","disabled","id","placeholder","error","emptyResultText","ListFooterComponent","shouldDisplaySuggestions","loadSuggestions","onSuggestion","onLoadError","state","setState","useState","AsyncData","lastRequest","useRef","jsx","LakeCombobox","jsxs","Fragment","match","Result","P","suggestions","Separator","item","_a","request","LakeText","colors","debounce","fn","ms","timer","args","resolve","usePlacekit","apiKey","debounceInterval","client","setClient","useEffect","__vitePreload","placekit","useMemo","PlacekitAddressSearchInput","country","types","language","useCallback","countries","Option","Array","countriesWithMultipleCCA3","cca3","getCCA2forCCA3","cca2Countries","Future","results","result","onSuggestionSelected","suggestion","PlacekitCityInput","cca3Codes","array","t","create","footer","paddingHorizontal","Combobox_stories","title","component","loadFakeProducts","search","promise","fetch","then","response","json","products","fromPromise","EditableCombobox","props","selectedProduct","setSelectedProduct","data","setData","NotAsked","setSearch","displayedValue","Loading","onResolve","Done","cancel","product","toString","Variations","city","setCity","StoryBlock","StoryPart","Box","PLACEKIT_API_KEY","place","log","postalCode","completeAddress"],"ignoreList":[],"sources":["../../../packages/lake/src/components/AutocompleteSearchInput.tsx","../../../packages/shared-business/src/hooks/usePlacekit.tsx","../../../packages/shared-business/src/components/PlacekitAddressSearchInput.tsx","../../../packages/shared-business/src/components/PlacekitCityInput.tsx","../../../packages/shared-business/__stories__/Combobox.stories.tsx"],"sourcesContent":["import { AsyncData, Future, Result } from \"@swan-io/boxed\";\nimport { ReactNode, Ref, useRef, useState } from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { P, match } from \"ts-pattern\";\nimport { colors } from \"../constants/design\";\nimport { LakeCombobox } from \"./LakeCombobox\";\nimport { LakeText } from \"./LakeText\";\nimport { Separator } from \"./Separator\";\n\nconst styles = StyleSheet.create({\n  unselectable: {\n    userSelect: \"none\",\n  },\n});\n\ntype Suggestion<T> = {\n  title: string;\n  subtitle: string;\n  value: T;\n};\n\ntype Props<T> = {\n  inputRef?: Ref<unknown>;\n  value?: string;\n  onValueChange: (value: string) => void;\n  disabled?: boolean;\n  id?: string;\n  placeholder?: string;\n  error?: string;\n  emptyResultText: string;\n  ListFooterComponent?: ReactNode;\n  shouldDisplaySuggestions?: boolean;\n  loadSuggestions?: (value: string) => Future<Result<Suggestion<T>[], unknown>>;\n  onSuggestion: (suggestion: Suggestion<T>) => void;\n  onLoadError?: (error: unknown) => void;\n};\n\ntype State<T> = AsyncData<Result<Suggestion<T>[], unknown>>;\n\nexport const AutocompleteSearchInput = <T,>({\n  inputRef,\n  value,\n  onValueChange,\n  disabled,\n  id,\n  placeholder,\n  error,\n  emptyResultText,\n  ListFooterComponent,\n  shouldDisplaySuggestions = true,\n  loadSuggestions,\n  onSuggestion,\n  onLoadError,\n}: Props<T>) => {\n  const [state, setState] = useState<State<T>>(AsyncData.NotAsked());\n  const lastRequest = useRef<Future<Result<Suggestion<T>[], unknown>>>(undefined);\n\n  return (\n    <LakeCombobox<Suggestion<T>>\n      inputRef={inputRef}\n      id={id}\n      placeholder={placeholder}\n      value={value ?? \"\"}\n      items={state}\n      icon={loadSuggestions != null ? \"search-filled\" : undefined}\n      disabled={disabled}\n      error={error}\n      ListFooterComponent={\n        ListFooterComponent != null && (\n          <>\n            {match(state)\n              .with(AsyncData.P.Done(Result.P.Ok(P.select())), suggestions =>\n                suggestions.length > 0 ? <Separator /> : null,\n              )\n              .otherwise(() => null)}\n\n            {ListFooterComponent}\n          </>\n        )\n      }\n      onSelectItem={item => {\n        onSuggestion(item);\n      }}\n      onValueChange={value => {\n        lastRequest.current?.cancel(); // cancel previous request to avoid race condition\n        lastRequest.current = undefined; // avoid to cancel twice the same request\n\n        onValueChange(value);\n\n        if (value.length <= 3 || !shouldDisplaySuggestions) {\n          return setState(AsyncData.NotAsked());\n        }\n\n        if (loadSuggestions != null) {\n          setState(AsyncData.Loading());\n\n          const request = loadSuggestions(value);\n          lastRequest.current = request;\n\n          if (onLoadError != null) {\n            request.tapError(onLoadError);\n          }\n          request.onResolve(value => setState(AsyncData.Done(value)));\n        }\n      }}\n      keyExtractor={item => `${item.title} ${item.subtitle}`}\n      emptyResultText={emptyResultText}\n      renderItem={item => (\n        <>\n          <LakeText numberOfLines={1} style={styles.unselectable} color={colors.gray[900]}>\n            {item.title}\n          </LakeText>\n\n          <LakeText numberOfLines={1} style={styles.unselectable} variant=\"smallRegular\">\n            {item.subtitle}\n          </LakeText>\n        </>\n      )}\n    />\n  );\n};\n","import type { PKClient } from \"@placekit/client-js/lite\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nconst debounce = <A extends unknown[], R>(fn: (...args: A) => Promise<R>, ms: number) => {\n  let timer: NodeJS.Timeout | undefined;\n\n  return (...args: A) => {\n    clearTimeout(timer);\n\n    return new Promise<R>(resolve => {\n      timer = setTimeout(() => resolve(fn(...args)), ms);\n    });\n  };\n};\n\nexport const usePlacekit = ({\n  apiKey,\n  debounceInterval = 1000,\n}: {\n  apiKey?: string;\n  debounceInterval?: number;\n}) => {\n  const [client, setClient] = useState<PKClient>();\n\n  useEffect(() => {\n    if (apiKey != null) {\n      void import(\"@placekit/client-js/lite\").then(({ default: placekit }) => {\n        setClient(placekit(apiKey));\n      });\n    }\n  }, [apiKey]);\n\n  return useMemo<PKClient | undefined>(() => {\n    if (client != null) {\n      return {\n        ...client,\n        search: debounce(client.search, debounceInterval),\n        reverse: debounce(client.reverse, debounceInterval),\n      };\n    }\n  }, [client, debounceInterval]);\n};\n","import { PKOptions, PKResult } from \"@placekit/client-js\";\nimport { Array, Future, Option, Result } from \"@swan-io/boxed\";\nimport { AutocompleteSearchInput } from \"@swan-io/lake/src/components/AutocompleteSearchInput\";\nimport { Ref, useCallback } from \"react\";\nimport { StyleProp, ViewStyle } from \"react-native\";\nimport { CountryCCA3, countriesWithMultipleCCA3, getCCA2forCCA3 } from \"../constants/countries\";\nimport { usePlacekit } from \"../hooks/usePlacekit\";\n\ntype Suggestion = {\n  title: string;\n  subtitle: string;\n  value: PKResult;\n};\n\nexport type AddressDetail = {\n  completeAddress: string;\n  city: string;\n  postalCode?: string;\n  country: string;\n  countryCode: string;\n};\n\ntype Props = {\n  inputRef?: Ref<unknown>;\n  id?: string;\n  types?: PKOptions[\"types\"];\n  country?: CountryCCA3; // cca3 country\n  disabled?: boolean;\n  error?: string;\n  onSuggestion?: (suggestion: AddressDetail) => void;\n  onValueChange: (value: string) => void;\n  style?: StyleProp<ViewStyle>;\n  value?: string;\n  language: \"en\" | \"es\" | \"de\" | \"fi\" | \"fr\" | \"it\" | \"nl\" | \"pt\";\n  placeholder: string;\n  shouldDisplaySuggestions?: boolean;\n  emptyResultText: string;\n  apiKey?: string;\n};\n\nexport const PlacekitAddressSearchInput = ({\n  inputRef,\n  id,\n  country,\n  disabled,\n  error,\n  value,\n  types = [\"street\"],\n  onValueChange,\n  onSuggestion,\n  language,\n  placeholder,\n  shouldDisplaySuggestions = true,\n  emptyResultText,\n  apiKey,\n}: Props) => {\n  const placekit = usePlacekit({ apiKey });\n\n  const loadSuggestions = useCallback(\n    (value: string): Future<Result<Suggestion[], unknown>> => {\n      if (placekit != null) {\n        const countries = Option.fromNullable(country)\n          .map(country =>\n            Array.filterMap(countriesWithMultipleCCA3[country] ?? [country], cca3 =>\n              Option.fromNullable(getCCA2forCCA3(cca3)),\n            ),\n          )\n          .getOr([]);\n        const cca2Countries = countries.length === 0 ? Option.None() : Option.Some(countries);\n\n        return Future.fromPromise(\n          placekit.search(value, {\n            types,\n            language,\n            countries: cca2Countries.toUndefined(),\n          }),\n        ).mapOk(\n          ({ results }) =>\n            results.map(result => ({\n              title: result.name,\n              subtitle: `${result.city} (${result.country})`,\n              value: result,\n            })),\n          true,\n        );\n      }\n\n      return Future.value(Result.Ok([] as Suggestion[]));\n    },\n    [placekit, country, language, types],\n  );\n\n  const onSuggestionSelected = useCallback(\n    (suggestion: Suggestion) => {\n      onSuggestion?.({\n        completeAddress: suggestion.value.name,\n        postalCode: suggestion.value.zipcode[0],\n        city: suggestion.value.city,\n        country: suggestion.value.country,\n        countryCode: suggestion.value.countrycode,\n      });\n    },\n    [onSuggestion],\n  );\n\n  return (\n    <AutocompleteSearchInput\n      inputRef={inputRef}\n      value={value}\n      onValueChange={onValueChange}\n      disabled={disabled}\n      id={id}\n      placeholder={placeholder}\n      error={error}\n      emptyResultText={emptyResultText}\n      shouldDisplaySuggestions={shouldDisplaySuggestions}\n      loadSuggestions={placekit != null ? loadSuggestions : undefined}\n      onSuggestion={onSuggestionSelected}\n    />\n  );\n};\n","import { PKResult } from \"@placekit/client-js/.\";\nimport { Array, Future, Option, Result } from \"@swan-io/boxed\";\nimport { AutocompleteSearchInput } from \"@swan-io/lake/src/components/AutocompleteSearchInput\";\nimport { useCallback } from \"react\";\nimport { CountryCCA3, countriesWithMultipleCCA3, getCCA2forCCA3 } from \"../constants/countries\";\nimport { usePlacekit } from \"../hooks/usePlacekit\";\nimport { t } from \"../utils/i18n\";\n\ntype Suggestion = {\n  title: string;\n  subtitle: string;\n  value: PKResult;\n};\n\nexport type CityDetail = {\n  city: string;\n  postalCode?: string;\n};\n\ntype Props = {\n  value: string;\n  onValueChange: (value: string) => void;\n  country?: CountryCCA3;\n  disabled?: boolean;\n  error?: string;\n  id?: string;\n  placeholder?: string;\n  onSuggestion?: (place: CityDetail) => void;\n  onLoadError: (error: unknown) => void;\n  apiKey?: string;\n};\n\nexport const PlacekitCityInput = ({\n  value,\n  onValueChange,\n  country,\n  disabled,\n  placeholder,\n  id,\n  error,\n  onSuggestion,\n  onLoadError,\n  apiKey,\n}: Props) => {\n  const placekit = usePlacekit({ apiKey });\n\n  const loadSuggestions = useCallback(\n    (value: string): Future<Result<Suggestion[], unknown>> => {\n      if (placekit != null) {\n        const countries = Option.fromNullable(country)\n          .map(country => countriesWithMultipleCCA3[country] ?? [country])\n          .map(cca3Codes =>\n            Array.filterMap(cca3Codes, cca3 => Option.fromNullable(getCCA2forCCA3(cca3))),\n          )\n          .flatMap(array => (array.length === 0 ? Option.None() : Option.Some(array)));\n\n        return Future.fromPromise(\n          placekit.search(value, {\n            types: [\"city\"],\n            countries: countries.toUndefined(),\n          }),\n        ).mapOk(\n          ({ results }) =>\n            results.map(result => ({\n              title: result.name,\n              subtitle: result.city,\n              value: result,\n            })),\n          true,\n        );\n      }\n\n      return Future.value(Result.Ok([] as Suggestion[]));\n    },\n    [placekit, country],\n  );\n\n  const onSuggestionSelected = useCallback(\n    (suggestion: Suggestion) => {\n      onSuggestion?.({\n        city: suggestion.value.city,\n        postalCode: suggestion.value.zipcode[0],\n      });\n    },\n    [onSuggestion],\n  );\n\n  return (\n    <AutocompleteSearchInput\n      value={value}\n      onValueChange={onValueChange}\n      disabled={disabled}\n      id={id}\n      placeholder={placeholder}\n      error={error}\n      emptyResultText={t(\"common.noResult\")}\n      loadSuggestions={placekit != null ? loadSuggestions : undefined}\n      onSuggestion={onSuggestionSelected}\n      onLoadError={onLoadError}\n    />\n  );\n};\n","import { Meta } from \"@storybook/react\";\nimport { AsyncData, Future, Result } from \"@swan-io/boxed\";\nimport { Box } from \"@swan-io/lake/src/components/Box\";\nimport { LakeCombobox, LakeComboboxProps } from \"@swan-io/lake/src/components/LakeCombobox\";\nimport { LakeText } from \"@swan-io/lake/src/components/LakeText\";\nimport { useEffect, useState } from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Except } from \"type-fest\";\nimport { PlacekitAddressSearchInput } from \"../src/components/PlacekitAddressSearchInput\";\nimport { PlacekitCityInput } from \"../src/components/PlacekitCityInput\";\nimport { StoryBlock, StoryPart } from \"./_StoriesComponents\";\n\nconst styles = StyleSheet.create({\n  footer: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default {\n  title: \"Forms/Combobox\",\n  component: LakeCombobox,\n} as Meta<typeof LakeCombobox>;\n\ntype ApiResponse = {\n  products: ApiProduct[];\n  limit: number;\n  skip: number;\n  total: number;\n};\n\ntype ApiProduct = {\n  id: number;\n  title: string;\n  description: string;\n  price: number;\n  brand: string;\n  category: string;\n  thumbnail: string;\n};\n\n// Load products placeholder from dummyjson.com\nconst loadFakeProducts = (search: string): Future<Result<ApiProduct[], unknown>> => {\n  const promise = fetch(`https://dummyjson.com/products/search?limit=10&q=${search}`)\n    .then(response => response.json())\n    .then(response => {\n      const data = response as ApiResponse;\n      return data.products;\n    });\n\n  return Future.fromPromise(promise);\n};\n\ntype EditableComboboxProps = Except<\n  LakeComboboxProps<ApiProduct>,\n  | \"value\"\n  | \"items\"\n  | \"onValueChange\"\n  | \"onSelectItem\"\n  | \"renderItem\"\n  | \"keyExtractor\"\n  | \"emptyResultText\"\n>;\n\nconst EditableCombobox = (props: EditableComboboxProps) => {\n  const [selectedProduct, setSelectedProduct] = useState<ApiProduct | null>(null);\n  const [data, setData] = useState(() => AsyncData.NotAsked<Result<ApiProduct[], unknown>>());\n  const [search, setSearch] = useState(\"\");\n\n  const displayedValue = selectedProduct ? selectedProduct.title : search;\n\n  useEffect(() => {\n    if (!search) {\n      setData(AsyncData.NotAsked());\n      return;\n    }\n    setData(AsyncData.Loading());\n    const products = loadFakeProducts(search);\n    products.onResolve(result => {\n      setData(AsyncData.Done(result));\n    });\n\n    return () => {\n      products.cancel();\n    };\n  }, [search]);\n\n  return (\n    <LakeCombobox\n      value={displayedValue}\n      items={data}\n      onValueChange={value => {\n        setSelectedProduct(null);\n        setSearch(value);\n      }}\n      onSelectItem={product => {\n        setData(AsyncData.NotAsked());\n        setSelectedProduct(product);\n      }}\n      keyExtractor={product => product.id.toString()}\n      renderItem={product => <LakeText>{product.title}</LakeText>}\n      emptyResultText={\"No result\"}\n      {...props}\n    />\n  );\n};\n\nexport const Variations = () => {\n  const [search, setSearch] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n\n  return (\n    <StoryBlock title=\"Combobox\">\n      <StoryPart title=\"By default\">\n        <EditableCombobox />\n      </StoryPart>\n\n      <StoryPart title=\"Is disabled\">\n        <EditableCombobox disabled={true} />\n      </StoryPart>\n\n      <StoryPart title=\"Is readOnly\">\n        <EditableCombobox readOnly={true} />\n      </StoryPart>\n\n      <StoryPart title=\"With icon\">\n        <EditableCombobox icon={\"add-circle-regular\"} />\n      </StoryPart>\n\n      <StoryPart title=\"With placeholder\">\n        <EditableCombobox placeholder={\"Enter a product\"} />\n      </StoryPart>\n\n      <StoryPart title=\"With error\">\n        <EditableCombobox placeholder={\"An error occurred\"} />\n      </StoryPart>\n\n      <StoryPart title=\"With Footer Component\">\n        <EditableCombobox\n          ListFooterComponent={\n            <Box direction=\"row\" justifyContent=\"end\" style={styles.footer}>\n              <LakeText>With footer component</LakeText>\n            </Box>\n          }\n        />\n      </StoryPart>\n\n      <StoryPart title=\"CityInput\">\n        <PlacekitCityInput\n          apiKey={PLACEKIT_API_KEY}\n          country=\"FRA\"\n          value={city}\n          onValueChange={setCity}\n          onSuggestion={place => {\n            console.log(place.city);\n            console.log(place.postalCode);\n          }}\n          onLoadError={() => {}}\n        />\n      </StoryPart>\n\n      <StoryPart title=\"AddressInput\">\n        <PlacekitAddressSearchInput\n          apiKey={PLACEKIT_API_KEY}\n          country=\"FRA\"\n          value={search}\n          onValueChange={setSearch}\n          onSuggestion={place => {\n            console.log(place.completeAddress);\n            console.log(place.city);\n            console.log(place.postalCode);\n          }}\n          language=\"fr\"\n          placeholder=\"\"\n          emptyResultText=\"Nothing\"\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n"],"file":"assets/12.4.0/Combobox.stories-DJOV69nQ.js"}