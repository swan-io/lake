{"version":3,"file":"Filter.stories-CJQ8amDM.js","sources":["../../../packages/lake/src/components/FilterChooser.tsx","../../../packages/lake/src/components/Stack.tsx","../../../packages/lake/src/components/Filters.tsx"],"sourcesContent":["import { useRef } from \"react\";\nimport { FlatList, ListRenderItemInfo, Pressable, StyleSheet, View } from \"react-native\";\nimport { colors } from \"../constants/design\";\nimport { useDisclosure } from \"../hooks/useDisclosure\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { LakeButton } from \"./LakeButton\";\nimport { LakeText } from \"./LakeText\";\nimport { Popover } from \"./Popover\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  selected: {\n    color: colors.gray[500],\n  },\n  list: {\n    paddingVertical: 20,\n    marginVertical: 4,\n    minWidth: 250,\n    overflow: \"hidden\",\n  },\n  item: {\n    display: \"flex\",\n    paddingHorizontal: 24,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    paddingVertical: 8,\n  },\n  itemHovered: {\n    backgroundColor: colors.gray[50],\n  },\n  availableFiltersTitle: {\n    paddingHorizontal: 24,\n  },\n});\n\nexport function FilterChooser<FilterName extends string>({\n  filters,\n  openFilters,\n  label,\n  title,\n  availableFilters,\n  large = true,\n  onAddFilter,\n}: {\n  filters: Partial<Record<FilterName, unknown>>;\n  openFilters: FilterName[];\n  label: string;\n  title: string;\n  availableFilters: { label: string; name: FilterName }[];\n  large?: boolean;\n  onAddFilter: (filterName: FilterName) => void;\n}) {\n  const inputRef = useRef<View>(null);\n  const [visible, { close, toggle }] = useDisclosure(false);\n\n  return (\n    <>\n      <Box direction=\"row\" justifyContent=\"start\" alignItems=\"center\">\n        <LakeButton\n          size=\"small\"\n          mode=\"secondary\"\n          color=\"gray\"\n          onPress={toggle}\n          ref={inputRef}\n          icon={large ? \"chevron-down-filled\" : \"filter-filled\"}\n          iconPosition=\"end\"\n          ariaLabel={label}\n        >\n          {large ? label : null}\n        </LakeButton>\n      </Box>\n\n      <Popover\n        role=\"listbox\"\n        matchReferenceMinWidth={true}\n        onDismiss={close}\n        referenceRef={inputRef}\n        returnFocus={false}\n        visible={visible}\n      >\n        <View style={styles.list}>\n          <LakeText style={styles.availableFiltersTitle}>{title}</LakeText>\n          <Space height={8} />\n\n          <FlatList\n            role=\"list\"\n            data={availableFilters}\n            keyExtractor={(_, index) => `filter-item-${index}`}\n            renderItem={({ item }: ListRenderItemInfo<{ name: FilterName; label: string }>) => {\n              const isSet = Boolean(filters[item.name]) || openFilters.includes(item.name);\n              return (\n                <Pressable\n                  style={({ hovered }) => [styles.item, hovered && styles.itemHovered]}\n                  role=\"button\"\n                  disabled={isSet}\n                  onPress={() => {\n                    onAddFilter(item.name);\n                    close();\n                  }}\n                >\n                  <LakeText variant=\"smallRegular\" style={isSet && styles.selected}>\n                    {item.label}\n                  </LakeText>\n\n                  {isSet && <Icon color={colors.positive[500]} name=\"checkmark-filled\" size={14} />}\n                </Pressable>\n              );\n            }}\n          />\n        </View>\n      </Popover>\n    </>\n  );\n}\n","import { Children, forwardRef, Fragment } from \"react\";\nimport { View } from \"react-native\";\nimport { isNullish } from \"../utils/nullish\";\nimport { Box, BoxProps } from \"./Box\";\nimport { Space, SpacingValue } from \"./Space\";\n\ntype Props = BoxProps & {\n  space?: SpacingValue;\n};\n\nexport const Stack = forwardRef<View, Props>(\n  // Default <View /> styles https://github.com/necolas/react-native-web/blob/0.19.10/packages/react-native-web/src/exports/View/index.js#L146\n  ({ children, space, ...props }, forwardedRef) => {\n    const { direction = \"column\" } = props;\n    const horizontal = direction === \"row\" || direction === \"rowReverse\";\n\n    return (\n      <Box ref={forwardedRef} {...props}>\n        {Children.map(children, (child, index) => {\n          if (isNullish(child)) {\n            return child;\n          }\n\n          return (\n            <Fragment>\n              {index !== 0 && (horizontal ? <Space width={space} /> : <Space height={space} />)}\n              {child}\n            </Fragment>\n          );\n        })}\n      </Box>\n    );\n  },\n);\n","import {\n  DateFormat,\n  DatePickerDate,\n  DatePickerModal,\n} from \"@swan-io/shared-business/src/components/DatePicker\";\nimport { ValidatorResult, useForm } from \"@swan-io/use-form\";\nimport dayjs from \"dayjs\";\nimport { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { FlatList, ListRenderItemInfo, Pressable, StyleSheet, Text, View } from \"react-native\";\nimport { P, match } from \"ts-pattern\";\nimport { Simplify } from \"type-fest\";\nimport { colors, shadows, spacings } from \"../constants/design\";\nimport { useDisclosure } from \"../hooks/useDisclosure\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { usePreviousValue } from \"../hooks/usePreviousValue\";\nimport { isNotNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { LakeButton } from \"./LakeButton\";\nimport { LakeCheckbox } from \"./LakeCheckbox\";\nimport { LakeLabel } from \"./LakeLabel\";\nimport { LakeRadio } from \"./LakeRadio\";\nimport { LakeTextInput } from \"./LakeTextInput\";\nimport { Popover } from \"./Popover\";\nimport { Space } from \"./Space\";\nimport { Stack } from \"./Stack\";\nimport { Tag } from \"./Tag\";\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingRight: 12,\n    paddingBottom: 8,\n  },\n  shadowed: {\n    position: \"absolute\",\n    opacity: 0,\n    width: \"100%\",\n    height: \"100%\",\n    borderRadius: 4,\n    boxShadow: shadows.tile,\n    transitionDuration: \"150ms\",\n    transitionProperty: \"opacity\",\n  },\n  hovered: {\n    opacity: 1,\n  },\n  dropdown: {\n    maxHeight: 400,\n    minWidth: 200,\n  },\n  itemHovered: {\n    backgroundColor: colors.gray[50],\n  },\n  content: {\n    paddingVertical: 12,\n  },\n  inputContent: {\n    padding: 24,\n  },\n  radio: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 32,\n    paddingHorizontal: 24,\n  },\n  itemLabel: {\n    textOverflow: \"ellipsis\",\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n  },\n  input: {\n    minWidth: 200,\n  },\n  value: {\n    maxWidth: 130,\n    whiteSpace: \"nowrap\",\n  },\n  buttonContainer: {\n    paddingHorizontal: spacings[24],\n  },\n});\n\ntype Item<T> = {\n  label: string;\n  value: T;\n};\n\ntype TagProps = {\n  isActive: boolean;\n  label: string;\n  value?: string;\n  onPress: () => void;\n  onPressRemove: () => void;\n};\n\nconst FilterTag = forwardRef<View, TagProps>(\n  ({ onPress, onPressRemove, label, value = \"\", isActive }, forwardRef) => {\n    const ref = useRef<View>(null);\n    const mergedRef = useMergeRefs(ref, forwardRef);\n\n    return (\n      <Pressable ref={mergedRef} onPress={onPress}>\n        {({ hovered }) => (\n          <>\n            <View style={[styles.shadowed, hovered && styles.hovered]} />\n\n            <Tag label={label} color=\"current\" onPressRemove={onPressRemove}>\n              <Box direction=\"row\" alignItems=\"center\">\n                <Text numberOfLines={1} style={styles.value}>\n                  {value}\n                </Text>\n\n                <Space width={4} />\n\n                <Icon\n                  color={colors.current.primary}\n                  name={isActive ? \"chevron-up-filled\" : \"chevron-down-filled\"}\n                  size={16}\n                />\n              </Box>\n            </Tag>\n          </>\n        )}\n      </Pressable>\n    );\n  },\n);\n\ntype FilterRadioProps<T> = {\n  autoOpen?: boolean;\n  items: Item<T>[];\n  width?: number;\n  label: string;\n  value: T | undefined;\n  onPressRemove: () => void;\n  onValueChange: (value: T | undefined) => void;\n};\n\nfunction FilterRadio<T>({\n  label,\n  items,\n  width,\n  value,\n  onValueChange,\n  onPressRemove,\n  autoOpen = false,\n}: FilterRadioProps<T>) {\n  const inputRef = useRef<View>(null);\n  const [visible, { close, toggle }] = useDisclosure(autoOpen);\n  const currentValue = useMemo(() => items.find(i => i.value === value), [items, value]);\n\n  return (\n    <View style={styles.container}>\n      <FilterTag\n        label={label}\n        onPress={toggle}\n        ref={inputRef}\n        onPressRemove={onPressRemove}\n        isActive={visible}\n        value={currentValue?.label}\n      />\n\n      <Popover\n        role=\"listbox\"\n        matchReferenceWidth={false}\n        onDismiss={close}\n        referenceRef={inputRef}\n        returnFocus={false}\n        visible={visible}\n      >\n        <View style={[styles.dropdown, { width }]}>\n          <FlatList\n            role=\"list\"\n            data={items}\n            contentContainerStyle={styles.content}\n            keyExtractor={(_, index) => `filter-item-${index}`}\n            renderItem={({ item }: ListRenderItemInfo<Item<T>>) => {\n              const isSelected = value === item.value;\n\n              return (\n                <Pressable\n                  role=\"radio\"\n                  aria-checked={isSelected}\n                  style={({ hovered }) => [styles.radio, hovered && styles.itemHovered]}\n                  onPress={() => {\n                    onValueChange(item.value);\n                    close();\n                  }}\n                >\n                  <LakeRadio value={isSelected} />\n                  <Space width={12} />\n                  <Text style={styles.itemLabel}>{item.label}</Text>\n                </Pressable>\n              );\n            }}\n          />\n        </View>\n      </Popover>\n    </View>\n  );\n}\n\ntype FilterCheckboxProps<T> = {\n  label: string;\n  items: Item<T>[];\n  width?: number;\n  onValueChange: (value: T[] | undefined) => void;\n  value: T[] | undefined;\n  onPressRemove: () => void;\n  autoOpen?: boolean;\n  applyButtonLabel: string;\n  checkAllLabel?: string;\n};\n\ntype CheckAllItem = {\n  label: string;\n  checked: boolean | \"mixed\";\n};\n\nfunction FilterCheckbox<T>({\n  label,\n  items,\n  width,\n  checkAllLabel,\n  value,\n  onValueChange,\n  applyButtonLabel,\n  onPressRemove,\n  autoOpen = false,\n}: FilterCheckboxProps<T>) {\n  const inputRef = useRef<View>(null);\n  const [visible, { close, toggle }] = useDisclosure(autoOpen);\n  const [localValue, setLocalValue] = useState(value);\n\n  const values = useMemo(() => new Set(localValue), [localValue]);\n  const currentValue = useMemo(() => items.filter(item => values.has(item.value)), [items, values]);\n\n  const allChecked = checkAllLabel != null && values.size === items.length;\n\n  const listItems = useMemo(() => {\n    if (checkAllLabel == null) {\n      return items;\n    }\n    const checked: CheckAllItem[\"checked\"] =\n      values.size === 0 ? false : values.size === items.length ? true : \"mixed\";\n    const checkAllItem: CheckAllItem = {\n      label: checkAllLabel,\n      checked,\n    };\n\n    return [checkAllItem, ...items];\n  }, [items, checkAllLabel, values]);\n\n  const save = useCallback(() => {\n    onValueChange(localValue);\n    close();\n  }, [onValueChange, localValue, close]);\n\n  useEffect(() => {\n    if (!visible) {\n      setLocalValue(value);\n    }\n  }, [visible, value]);\n\n  return (\n    <View style={styles.container}>\n      <FilterTag\n        label={label}\n        onPress={toggle}\n        ref={inputRef}\n        onPressRemove={onPressRemove}\n        isActive={visible}\n        value={allChecked ? checkAllLabel : currentValue.map(item => item.label).join(\", \")}\n      />\n\n      <Popover\n        role=\"listbox\"\n        matchReferenceWidth={false}\n        onDismiss={close}\n        referenceRef={inputRef}\n        returnFocus={false}\n        visible={visible}\n      >\n        <View style={[styles.dropdown, { width }]}>\n          <FlatList\n            role=\"list\"\n            data={listItems}\n            contentContainerStyle={styles.content}\n            keyExtractor={(_, index) => `filter-item-${index}`}\n            renderItem={({ item }) => {\n              const isSelected = match<Item<unknown> | CheckAllItem>(item)\n                .with({ checked: P.any }, ({ checked }) => checked)\n                .with({ value: P.any }, ({ value }) => values.has(value as T))\n                .exhaustive();\n\n              const onPress = match<Item<unknown> | CheckAllItem>(item)\n                // Check all item\n                .with({ checked: P.any }, ({ checked }) => () => {\n                  if (checked === true) {\n                    setLocalValue(undefined);\n                  } else {\n                    setLocalValue(items.map(item => item.value));\n                  }\n                })\n                // Regular item\n                .with({ value: P.any }, ({ value }) => () => {\n                  const nextValues = new Set([...values]);\n                  if (isSelected === true) {\n                    nextValues.delete(value as T);\n                  } else {\n                    nextValues.add(value as T);\n                  }\n                  if (nextValues.size === 0) {\n                    setLocalValue(undefined);\n                  } else {\n                    setLocalValue([...nextValues]);\n                  }\n                })\n                .exhaustive();\n\n              return (\n                <Pressable\n                  role=\"radio\"\n                  aria-checked={isSelected}\n                  style={({ hovered }) => [styles.radio, hovered && styles.itemHovered]}\n                  onPress={onPress}\n                >\n                  <LakeCheckbox value={isSelected} />\n                  <Space width={12} />\n                  <Text style={styles.itemLabel}>{item.label}</Text>\n                </Pressable>\n              );\n            }}\n          />\n\n          <Space height={8} />\n\n          <View style={styles.buttonContainer}>\n            <LakeButton color=\"current\" onPress={save}>\n              {applyButtonLabel}\n            </LakeButton>\n          </View>\n\n          <Space height={24} />\n        </View>\n      </Popover>\n    </View>\n  );\n}\n\ntype FilterDateProps = {\n  label: string;\n  noValueText: string;\n  cancelText: string;\n  submitText: string;\n  dateFormat: DateFormat;\n  isSelectable?: (date: DatePickerDate) => boolean;\n  validate?: (val: string) => ValidatorResult;\n  initialValue?: string;\n  onSave: (val: string) => void;\n  onPressRemove: () => void;\n  autoOpen?: boolean;\n};\n\nfunction FilterDate({\n  label,\n  initialValue,\n  noValueText,\n  cancelText,\n  submitText,\n  dateFormat,\n  isSelectable,\n  validate,\n  onSave,\n  onPressRemove,\n  autoOpen = false,\n}: FilterDateProps) {\n  const inputRef = useRef<View>(null);\n  const [visible, { close, toggle }] = useDisclosure(autoOpen);\n\n  const value = useMemo(\n    () => (isNotNullish(initialValue) ? dayjs(initialValue).format(dateFormat) : \"\"),\n    [initialValue, dateFormat],\n  );\n\n  return (\n    <View style={styles.container}>\n      <FilterTag\n        label={label}\n        onPress={toggle}\n        ref={inputRef}\n        onPressRemove={onPressRemove}\n        isActive={visible}\n        value={isNotNullish(initialValue) ? dayjs(initialValue).format(dateFormat) : noValueText}\n      />\n\n      <DatePickerModal\n        visible={visible}\n        format={dateFormat}\n        firstWeekDay=\"monday\"\n        label={label}\n        cancelLabel={cancelText}\n        confirmLabel={submitText}\n        value={value}\n        isSelectable={isSelectable}\n        validate={validate}\n        onChange={value => {\n          const formattedValue = dayjs(value, dateFormat, true).toJSON();\n          onSave(formattedValue);\n        }}\n        onDismiss={close}\n      />\n    </View>\n  );\n}\n\ntype FilterInputProps = {\n  label: string;\n  noValueText: string;\n  submitText: string;\n  validate?: (val: string) => ValidatorResult;\n  placeholder?: string;\n  initialValue?: string;\n  onSave: (val: string) => void;\n  onPressRemove: () => void;\n  autoOpen?: boolean;\n};\n\nfunction FilterInput({\n  label,\n  initialValue = \"\",\n  noValueText,\n  submitText,\n  autoOpen = false,\n  placeholder,\n  validate,\n  onSave,\n  onPressRemove,\n}: FilterInputProps) {\n  const inputRef = useRef<View>(null);\n  const [visible, { close, toggle }] = useDisclosure(autoOpen);\n  const [value, setValue] = useState(initialValue);\n\n  const { Field, submitForm } = useForm<{ input: string }>({\n    input: {\n      initialValue,\n      validate,\n    },\n  });\n\n  const onSubmit = () => {\n    submitForm({\n      onSuccess: ({ input }) => {\n        if (input.isSome()) {\n          setValue(input.get());\n          onSave(input.get());\n          close();\n        }\n      },\n    });\n  };\n\n  return (\n    <View style={styles.container}>\n      <FilterTag\n        label={label}\n        onPress={toggle}\n        ref={inputRef}\n        onPressRemove={onPressRemove}\n        isActive={visible}\n        value={value === \"\" ? noValueText : value}\n      />\n\n      <Popover\n        role=\"listbox\"\n        matchReferenceWidth={false}\n        onDismiss={close}\n        referenceRef={inputRef}\n        returnFocus={false}\n        visible={visible}\n      >\n        <View style={[styles.dropdown, styles.inputContent]}>\n          <Field name=\"input\">\n            {({ error, value, onChange }) => (\n              <LakeLabel\n                label={label}\n                render={id => (\n                  <LakeTextInput\n                    id={id}\n                    error={error}\n                    style={styles.input}\n                    placeholder={placeholder}\n                    value={value}\n                    onChangeText={onChange}\n                    onSubmitEditing={onSubmit}\n                  />\n                )}\n              />\n            )}\n          </Field>\n\n          <LakeButton size=\"small\" color=\"current\" onPress={onSubmit}>\n            {submitText}\n          </LakeButton>\n        </View>\n      </Popover>\n    </View>\n  );\n}\n\ntype FilterBooleanTagProps = {\n  children: string;\n  onAdd: () => void;\n  onPressRemove: () => void;\n};\n\nfunction FilterBooleanTag({ children, onAdd, onPressRemove }: FilterBooleanTagProps) {\n  useEffect(onAdd, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <Tag color=\"current\" onPressRemove={onPressRemove}>\n      {children}\n    </Tag>\n  );\n}\n\nexport type FilterCheckboxDef<T> = {\n  type: \"checkbox\";\n  label: string;\n  items: Item<T>[];\n  width?: number;\n  submitText: string;\n  checkAllLabel?: string;\n};\n\nexport type FilterRadioDef<T> = {\n  type: \"radio\";\n  label: string;\n  items: Item<T>[];\n  width?: number;\n};\n\nexport type FilterDateDef<Values = unknown> = {\n  type: \"date\";\n  label: string;\n  cancelText: string;\n  submitText: string;\n  noValueText: string;\n  dateFormat: DateFormat;\n  isSelectable?: (date: DatePickerDate, filters: Values) => boolean;\n  validate?: (value: string, filters: Values) => ValidatorResult;\n};\n\nexport type FilterInputDef = {\n  type: \"input\";\n  label: string;\n  submitText: string;\n  noValueText: string;\n  placeholder?: string;\n  validate?: (value: string) => ValidatorResult;\n};\n\nexport type FilterBooleanDef = {\n  type: \"boolean\";\n  label: string;\n};\n\ntype Filter<T> =\n  | FilterCheckboxDef<T>\n  | FilterRadioDef<T>\n  | FilterDateDef\n  | FilterInputDef\n  | FilterBooleanDef;\n\ntype ExtractFilterValue<T extends Filter<unknown>> = T extends { type: \"checkbox\" }\n  ? T[\"items\"][number][\"value\"][] | undefined\n  : T extends { type: \"radio\" }\n    ? T[\"items\"][number][\"value\"] | undefined\n    : T extends { type: \"boolean\" }\n      ? boolean | undefined\n      : string | undefined;\n\nconst getFilterValue = <T extends Filter<unknown>[\"type\"]>(\n  _type: T,\n  filters: FiltersState<FiltersDefinition>,\n  name: string,\n) => filters[name] as ExtractFilterValue<Extract<Filter<unknown>, { type: T }>>;\n\ntype FiltersDefinition = Record<string, Filter<unknown>>;\n\nexport type FiltersState<T extends FiltersDefinition> = Simplify<{\n  [K in keyof T]: Simplify<ExtractFilterValue<T[K]>>;\n}>;\n\ntype FiltersStackProps<\n  Definition extends FiltersDefinition,\n  State extends FiltersState<Definition> = FiltersState<Definition>,\n> = {\n  definition: Definition;\n  filters: State;\n  openedFilters: (keyof Definition)[];\n  onChangeOpened: (value: (keyof Definition)[]) => void;\n  onChangeFilters: (value: State) => void;\n};\n\nexport const FiltersStack = <T extends FiltersDefinition>({\n  filters,\n  openedFilters,\n  definition,\n  onChangeOpened,\n  onChangeFilters,\n}: FiltersStackProps<T>) => {\n  const previousOpened = usePreviousValue(openedFilters);\n  const lastOpenedFilter =\n    openedFilters.length > previousOpened.length\n      ? openedFilters[openedFilters.length - 1]\n      : undefined;\n\n  if (openedFilters.length === 0) {\n    return null;\n  }\n\n  return (\n    <Stack direction=\"row\" wrap=\"wrap\">\n      {openedFilters.map(filterName => {\n        const filterDefinition = definition[filterName];\n\n        if (typeof filterName !== \"string\" || filterDefinition == null) {\n          return null;\n        }\n\n        return (\n          <View key={filterName}>\n            {match<Filter<unknown>>(filterDefinition)\n              .with({ type: \"radio\" }, ({ type, label, items, width }) => (\n                <FilterRadio\n                  label={label}\n                  items={items}\n                  width={width}\n                  autoOpen={lastOpenedFilter === filterName}\n                  onPressRemove={() => {\n                    onChangeFilters({ ...filters, [filterName]: undefined });\n                    onChangeOpened(openedFilters.filter(f => f !== filterName));\n                  }}\n                  value={getFilterValue(type, filters, filterName)}\n                  onValueChange={value => onChangeFilters({ ...filters, [filterName]: value })}\n                />\n              ))\n              .with(\n                { type: \"checkbox\" },\n                ({ type, label, items, width, checkAllLabel, submitText }) => (\n                  <FilterCheckbox\n                    label={label}\n                    items={items}\n                    width={width}\n                    checkAllLabel={checkAllLabel}\n                    autoOpen={lastOpenedFilter === filterName}\n                    applyButtonLabel={submitText}\n                    value={getFilterValue(type, filters, filterName)}\n                    onValueChange={value => onChangeFilters({ ...filters, [filterName]: value })}\n                    onPressRemove={() => {\n                      onChangeFilters({ ...filters, [filterName]: undefined });\n                      onChangeOpened(openedFilters.filter(f => f !== filterName));\n                    }}\n                  />\n                ),\n              )\n              .with(\n                { type: \"date\" },\n                ({\n                  type,\n                  label,\n                  noValueText,\n                  cancelText,\n                  submitText,\n                  dateFormat,\n                  isSelectable,\n                  validate,\n                }) => (\n                  <FilterDate\n                    label={label}\n                    noValueText={noValueText}\n                    cancelText={cancelText}\n                    submitText={submitText}\n                    dateFormat={dateFormat}\n                    autoOpen={lastOpenedFilter === filterName}\n                    isSelectable={isSelectable ? date => isSelectable(date, filters) : undefined}\n                    validate={validate ? value => validate(value, filters) : undefined}\n                    initialValue={getFilterValue(type, filters, filterName)}\n                    onSave={value => onChangeFilters({ ...filters, [filterName]: value })}\n                    onPressRemove={() => {\n                      onChangeFilters({ ...filters, [filterName]: undefined });\n                      onChangeOpened(openedFilters.filter(f => f !== filterName));\n                    }}\n                  />\n                ),\n              )\n              .with(\n                { type: \"input\" },\n                ({ type, label, placeholder, noValueText, submitText, validate }) => (\n                  <FilterInput\n                    label={label}\n                    placeholder={placeholder}\n                    noValueText={noValueText}\n                    submitText={submitText}\n                    autoOpen={lastOpenedFilter === filterName}\n                    validate={validate}\n                    initialValue={getFilterValue(type, filters, filterName)}\n                    onSave={value => onChangeFilters({ ...filters, [filterName]: value })}\n                    onPressRemove={() => {\n                      onChangeFilters({ ...filters, [filterName]: undefined });\n                      onChangeOpened(openedFilters.filter(f => f !== filterName));\n                    }}\n                  />\n                ),\n              )\n              .with({ type: \"boolean\" }, ({ label }) => (\n                <FilterBooleanTag\n                  onAdd={() => {\n                    onChangeFilters({ ...filters, [filterName]: true });\n                  }}\n                  onPressRemove={() => {\n                    onChangeFilters({ ...filters, [filterName]: undefined });\n                    onChangeOpened(openedFilters.filter(f => f !== filterName));\n                  }}\n                >\n                  {label}\n                </FilterBooleanTag>\n              ))\n              .exhaustive()}\n          </View>\n        );\n      })}\n    </Stack>\n  );\n};\n"],"names":["styles","StyleSheet","colors","FilterChooser","filters","openFilters","label","title","availableFilters","large","onAddFilter","inputRef","useRef","visible","close","toggle","useDisclosure","jsxs","Fragment","jsx","Box","LakeButton","Popover","View","LakeText","Space","FlatList","_","index","item","isSet","Pressable","hovered","Icon","Stack","forwardRef","children","space","props","forwardedRef","direction","horizontal","Children","child","isNullish","shadows","spacings","FilterTag","onPress","onPressRemove","value","isActive","ref","mergedRef","useMergeRefs","Tag","Text","FilterRadio","items","width","onValueChange","autoOpen","currentValue","useMemo","isSelected","LakeRadio","FilterCheckbox","checkAllLabel","applyButtonLabel","localValue","setLocalValue","useState","values","allChecked","listItems","checked","save","useCallback","useEffect","match","P","nextValues","LakeCheckbox","FilterDate","initialValue","noValueText","cancelText","submitText","dateFormat","isSelectable","validate","onSave","isNotNullish","dayjs","DatePickerModal","formattedValue","FilterInput","placeholder","setValue","Field","submitForm","useForm","onSubmit","input","error","onChange","LakeLabel","id","LakeTextInput","FilterBooleanTag","onAdd","getFilterValue","_type","name","FiltersStack","openedFilters","definition","onChangeOpened","onChangeFilters","previousOpened","usePreviousValue","lastOpenedFilter","filterName","filterDefinition","type","f","date"],"mappings":"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"}