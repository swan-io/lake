{"version":3,"file":"LakeCombobox-TRdBpk-D.js","sources":["../../../packages/lake/src/components/LakeCombobox.tsx"],"sourcesContent":["import { AsyncData, Result } from \"@swan-io/boxed\";\nimport {\n  ForwardedRef,\n  ReactNode,\n  ReactText,\n  Ref,\n  RefObject,\n  forwardRef,\n  useCallback,\n  useId,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  FlatList,\n  NativeSyntheticEvent,\n  Pressable,\n  StyleSheet,\n  Text,\n  TextInput,\n  TextInputKeyPressEventData,\n  View,\n} from \"react-native\";\n\nimport { backgroundColor, colors, spacings } from \"../constants/design\";\nimport { typography } from \"../constants/typography\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { getFocusableElements } from \"../utils/a11y\";\nimport { isNotEmpty } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeTextInput, LakeTextInputProps } from \"./LakeTextInput\";\nimport { LoadingView } from \"./LoadingView\";\nimport { Popover } from \"./Popover\";\nimport { Separator } from \"./Separator\";\nimport { Space } from \"./Space\";\n\nconst DEFAULT_ELEMENT_HEIGHT = 64;\nconst DEFAULT_NB_SUGGESTION_DISPLAYED = 3.5;\n\nconst styles = StyleSheet.create({\n  list: {\n    marginVertical: spacings[8],\n  },\n  flatList: { scrollBehavior: \"smooth\" },\n  item: {\n    flexShrink: 1,\n    flexGrow: 1,\n    justifyContent: \"center\",\n    paddingHorizontal: spacings[24],\n    paddingVertical: 0,\n    transitionProperty: \"background-color\",\n    transitionDuration: \"200ms\",\n    outlineStyle: \"none\",\n    justifyContents: \"center\",\n  },\n  hoveredItem: {\n    backgroundColor: colors.gray[0],\n  },\n  focusedItem: {\n    backgroundColor: colors.gray[0],\n  },\n  pressedItem: {\n    backgroundColor: colors.gray[100],\n  },\n  itemText: {\n    ...typography.bodyLarge,\n    userSelect: \"none\",\n  },\n  loader: {\n    padding: spacings[24],\n  },\n  listContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  loaderAdditional: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  loaderAdditionalUnderlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: backgroundColor.accented,\n    opacity: 0.8,\n  },\n  emptyList: {\n    height: 136,\n  },\n  emptyListText: {\n    color: colors.gray.primary,\n  },\n  input: {\n    width: 1,\n    flexGrow: 1,\n  },\n});\n\nconst isReactText = (node: ReactNode): node is ReactText =>\n  [\"string\", \"number\"].includes(typeof node);\n\nconst getItemLayout: <I>(\n  data: ArrayLike<I> | null | undefined,\n  index: number,\n) => {\n  length: number;\n  offset: number;\n  index: number;\n} = (_data, index) => ({\n  length: DEFAULT_ELEMENT_HEIGHT,\n  offset: DEFAULT_ELEMENT_HEIGHT * index,\n  index,\n});\n\nexport type LakeComboboxProps<I> = {\n  inputRef?: RefObject<unknown>;\n  value: string;\n  items: AsyncData<Result<I[], unknown>>;\n  itemHeight?: number;\n  nbItemsDisplayed?: number;\n  ListFooterComponent?: ReactNode;\n  onChange?: LakeTextInputProps[\"onChange\"];\n  onValueChange: (value: string) => void;\n  onSelectItem: (value: I) => void | Promise<unknown>;\n  renderItem: (item: I) => ReactNode | null;\n  keyExtractor: (item: I) => string;\n  icon?: IconName;\n  placeholder?: string;\n  disabled?: boolean;\n  emptyResultText: string;\n  error?: string;\n  hideErrors?: boolean;\n  id?: string;\n  readOnly?: boolean;\n};\n\nexport type LakeComboboxRef = { close: () => void; open: () => void };\n\nconst LakeComboboxWithRef = <I,>(\n  {\n    inputRef,\n    value,\n    items,\n    itemHeight = DEFAULT_ELEMENT_HEIGHT,\n    nbItemsDisplayed = DEFAULT_NB_SUGGESTION_DISPLAYED,\n    ListFooterComponent,\n    onChange,\n    onValueChange,\n    onSelectItem,\n    renderItem,\n    keyExtractor,\n    icon,\n    placeholder,\n    disabled = false,\n    emptyResultText,\n    readOnly,\n    id,\n    error,\n    hideErrors,\n  }: LakeComboboxProps<I>,\n  forwardedRef: ForwardedRef<LakeComboboxRef>,\n) => {\n  const ref = useRef<TextInput>(null);\n\n  const inputTextRef = useMergeRefs(ref, inputRef as RefObject<unknown>);\n\n  const listRef = useRef<FlatList>(null);\n  const listContainerRef = useRef<View>(null);\n  const blurTimeoutId = useRef<number | undefined>(undefined);\n  const [isFetchingAdditionalInfo, setIsFetchingAdditionalInfo] = useState(false);\n\n  // The Combobox has two distinct closed states: \"closed\" and \"dismissed\"\n  // When it's \"closed\", it will open on input focus or text change\n  // When it's \"dismissed\", it will NOT open on input focus, but will on text change\n  const [state, setState] = useState<\"opened\" | \"closed\" | \"dismissed\">(\"closed\");\n  const open = useCallback(() => setState(\"opened\"), []);\n  const close = useCallback(() => setState(\"closed\"), []);\n  const dismiss = useCallback(() => setState(\"dismissed\"), []);\n\n  useImperativeHandle(forwardedRef, () => {\n    return {\n      open,\n      close,\n    };\n  });\n\n  const suggestionsId = useId();\n\n  const handleKeyPress = useCallback((event: NativeSyntheticEvent<TextInputKeyPressEventData>) => {\n    if (event.nativeEvent.key === \"ArrowDown\") {\n      const listElement = listContainerRef.current;\n\n      if (listElement != null) {\n        const element = listElement as unknown as Element;\n        const focusableElements = getFocusableElements(element, false);\n        focusableElements[0]?.focus();\n        event.preventDefault();\n      }\n    }\n  }, []);\n\n  const handleListItemKeyPress = useCallback(\n    (event: NativeSyntheticEvent<TextInputKeyPressEventData>) => {\n      if (event.nativeEvent.key === \"ArrowDown\" || event.nativeEvent.key === \"ArrowUp\") {\n        const listElement = listContainerRef.current;\n\n        if (listElement != null) {\n          const element = listElement as unknown as Element;\n          const target = event.currentTarget as unknown as HTMLElement;\n          const focusableElements = getFocusableElements(element, false);\n          const index = focusableElements.indexOf(target);\n          const direction = event.nativeEvent.key === \"ArrowDown\" ? 1 : -1;\n\n          if (index === -1) {\n            return;\n          }\n\n          const nextIndex = index + direction;\n          event.preventDefault();\n\n          if (nextIndex === -1) {\n            ref.current?.focus();\n          } else {\n            focusableElements[nextIndex === focusableElements.length ? 0 : nextIndex]?.focus();\n          }\n        }\n      }\n    },\n    [],\n  );\n\n  const handleChangeText = useCallback(\n    (value: string) => {\n      onValueChange(value);\n      setState(isNotEmpty(value) ? \"opened\" : \"closed\");\n    },\n    [onValueChange],\n  );\n\n  const handleFocus = useCallback(() => {\n    if (isNotEmpty(value)) {\n      window.clearTimeout(blurTimeoutId.current);\n\n      blurTimeoutId.current = window.setTimeout(() => {\n        setState(prevState => (prevState === \"closed\" ? \"opened\" : prevState));\n      }, 100);\n    }\n  }, [value]);\n\n  const handleBlur = useCallback(() => {\n    window.clearTimeout(blurTimeoutId.current);\n\n    blurTimeoutId.current = window.setTimeout(() => {\n      setState(\"dismissed\");\n    }, 100);\n  }, []);\n\n  return (\n    <View>\n      <LakeTextInput\n        containerRef={inputTextRef as Ref<View>}\n        style={styles.input}\n        ariaExpanded={state === \"opened\"}\n        ariaControls={state === \"opened\" ? suggestionsId : \"\"}\n        enterKeyHint=\"search\"\n        icon={icon}\n        role=\"combobox\"\n        placeholder={placeholder}\n        value={value}\n        disabled={disabled}\n        error={error}\n        hideErrors={hideErrors}\n        onChangeText={handleChangeText}\n        onChange={onChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onKeyPress={handleKeyPress}\n        id={id}\n        readOnly={readOnly}\n      />\n\n      <Popover\n        id={suggestionsId}\n        role=\"listbox\"\n        matchReferenceWidth={true}\n        onEscapeKey={dismiss}\n        referenceRef={ref}\n        autoFocus={false}\n        returnFocus={true}\n        visible={state === \"opened\" && !items.isNotAsked()}\n        underlay={false}\n        forcedMode=\"Dropdown\"\n        field={true}\n      >\n        <View style={[styles.list, { maxHeight: itemHeight * nbItemsDisplayed }]}>\n          {items.match({\n            NotAsked: () => null,\n            Loading: () => <LoadingView style={styles.loader} />,\n            Done: items =>\n              items.match({\n                Error: _ => (\n                  <Icon name=\"error-circle-regular\" size={22} color={colors.negative[500]} />\n                ),\n                Ok: items => (\n                  <View ref={listContainerRef} style={styles.listContainer}>\n                    {items.length === 0 ? (\n                      <Box justifyContent=\"center\" alignItems=\"center\" style={styles.emptyList}>\n                        <Icon\n                          name=\"clipboard-search-regular\"\n                          size={24}\n                          color={colors.gray.primary}\n                        />\n\n                        <Space height={8} />\n                        <Text style={styles.emptyListText}>{emptyResultText}</Text>\n                      </Box>\n                    ) : (\n                      <FlatList\n                        ref={listRef}\n                        keyExtractor={keyExtractor}\n                        getItemLayout={getItemLayout}\n                        role=\"list\"\n                        data={items}\n                        style={styles.flatList}\n                        ItemSeparatorComponent={Separator}\n                        renderItem={({ item }) => {\n                          const rendered = renderItem(item);\n\n                          return (\n                            <Pressable\n                              onFocus={handleFocus}\n                              onBlur={handleBlur}\n                              role=\"listitem\"\n                              onKeyDown={handleListItemKeyPress}\n                              style={({ hovered, pressed, focused }) => [\n                                styles.item,\n                                hovered && styles.hoveredItem,\n                                focused && styles.focusedItem,\n                                pressed && styles.pressedItem,\n                                { height: itemHeight },\n                              ]}\n                              onPress={() => {\n                                window.clearTimeout(blurTimeoutId.current);\n                                setIsFetchingAdditionalInfo(true);\n\n                                void Promise.resolve(onSelectItem(item)).finally(() => {\n                                  setIsFetchingAdditionalInfo(false);\n                                  dismiss();\n                                });\n                              }}\n                            >\n                              {isReactText(rendered) ? (\n                                <Text numberOfLines={1} style={styles.itemText}>\n                                  {rendered}\n                                </Text>\n                              ) : (\n                                rendered\n                              )}\n                            </Pressable>\n                          );\n                        }}\n                      />\n                    )}\n\n                    {ListFooterComponent}\n\n                    {isFetchingAdditionalInfo ? (\n                      <View style={styles.loaderAdditional}>\n                        <View style={styles.loaderAdditionalUnderlay} />\n                        <LoadingView />\n                      </View>\n                    ) : null}\n                  </View>\n                ),\n              }),\n          })}\n        </View>\n      </Popover>\n    </View>\n  );\n};\n\nexport const LakeCombobox = forwardRef(LakeComboboxWithRef) as <I>(\n  props: LakeComboboxProps<I> & { ref?: RefObject<LakeComboboxRef> },\n) => ReturnType<typeof LakeComboboxWithRef>;\n"],"names":["DEFAULT_ELEMENT_HEIGHT","DEFAULT_NB_SUGGESTION_DISPLAYED","styles","StyleSheet","spacings","colors","typography","backgroundColor","isReactText","node","getItemLayout","_data","index","LakeComboboxWithRef","inputRef","value","items","itemHeight","nbItemsDisplayed","ListFooterComponent","onChange","onValueChange","onSelectItem","renderItem","keyExtractor","icon","placeholder","disabled","emptyResultText","readOnly","id","error","hideErrors","forwardedRef","ref","useRef","inputTextRef","useMergeRefs","listRef","listContainerRef","blurTimeoutId","isFetchingAdditionalInfo","setIsFetchingAdditionalInfo","useState","state","setState","open","useCallback","close","dismiss","useImperativeHandle","suggestionsId","useId","handleKeyPress","event","listElement","_a","getFocusableElements","handleListItemKeyPress","element","target","focusableElements","direction","nextIndex","_b","handleChangeText","value2","isNotEmpty","handleFocus","prevState","handleBlur","jsxs","View","jsx","LakeTextInput","Popover","LoadingView","items2","_","Icon","items3","Box","Space","Text","FlatList","Separator","item","rendered","Pressable","hovered","pressed","focused","LakeCombobox","forwardRef"],"mappings":"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"}