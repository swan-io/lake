{"version":3,"file":"rifm-y14GX5lS.js","sources":["../../../packages/lake/src/utils/rifm.ts"],"sourcesContent":["import { ComponentProps } from \"react\";\nimport { Rifm } from \"rifm\";\nimport { isNotNullish, isNullish } from \"./nullish\";\n\nexport type RifmProps = Required<\n  Pick<ComponentProps<typeof Rifm>, \"accept\" | \"append\" | \"format\" | \"mask\">\n>;\n\nconst accepted = {\n  alpha: /[a-z]/gi,\n  numeric: /\\d+/g,\n  alphanumeric: /[a-z\\d]+/gi,\n};\n\nexport const getRifmProps = ({\n  accept,\n  charMap,\n  maxLength,\n}: {\n  accept: keyof typeof accepted;\n  maxLength: number;\n  charMap: Record<number, string>;\n}): RifmProps => {\n  const charIndexes = Object.keys(charMap).map(Number);\n\n  if (process.env.NODE_ENV === \"development\") {\n    const maxCharIndex = maxLength - 1;\n\n    charIndexes.forEach(charMapIndex => {\n      const char = charMap[charMapIndex];\n\n      if (isNullish(char)) {\n        throw new Error(`Invalid mask character value`);\n      }\n      if (char.length !== 1) {\n        throw new Error(`Invalid mask character value: \"${char}\"`);\n      }\n      if (charMapIndex > maxCharIndex) {\n        throw new Error(`Invalid mask character index: \"${charMapIndex}\"`);\n      }\n    });\n  }\n\n  const maxFormattedLength = maxLength + charIndexes.length;\n  const regExp = accepted[accept];\n\n  const shiftedCharMap = charIndexes.reduce<Record<number, string>>((acc, charIndex, index) => {\n    const char = charMap[charIndex] ?? \"\";\n    return { ...acc, [charIndex + index]: char };\n  }, {});\n\n  const shiftedCharIndexes = Object.keys(shiftedCharMap).map(Number);\n\n  return {\n    accept: regExp,\n    mask: false,\n\n    append: (str: string) => {\n      const right = shiftedCharIndexes.includes(str.length) ? shiftedCharMap[str.length] : \"\";\n      return str + (right ?? \"\");\n    },\n\n    format: (str: string) => {\n      const chars = (str.match(regExp) ?? []).join(\"\").split(\"\");\n\n      const res = chars\n        .reduce((acc, char, index) => {\n          const center = charIndexes.includes(index) ? charMap[index] : \"\";\n          return acc + (center ?? \"\") + char;\n        }, \"\")\n        .substr(0, maxFormattedLength);\n\n      const char = shiftedCharMap[res.length];\n      return (\n        res +\n        (isNotNullish(char) && str.endsWith(char) && shiftedCharIndexes.includes(res.length)\n          ? char\n          : \"\")\n      );\n    },\n  };\n};\n"],"names":["accepted","getRifmProps","accept","charMap","maxLength","charIndexes","maxFormattedLength","regExp","shiftedCharMap","acc","charIndex","index","char","shiftedCharIndexes","str","right","res","center","isNotNullish"],"mappings":"wCAQA,MAAMA,EAAW,CACf,MAAO,UACP,QAAS,OACT,aAAc,YAChB,EAEaC,EAAe,CAAC,CAC3B,OAAAC,EACA,QAAAC,EACA,UAAAC,CACF,IAIiB,CACf,MAAMC,EAAc,OAAO,KAAKF,CAAO,EAAE,IAAI,MAAM,EAoB7CG,EAAqBF,EAAYC,EAAY,OAC7CE,EAASP,EAASE,CAAM,EAExBM,EAAiBH,EAAY,OAA+B,CAACI,EAAKC,EAAWC,IAAU,CACrF,MAAAC,EAAOT,EAAQO,CAAS,GAAK,GACnC,MAAO,CAAE,GAAGD,EAAK,CAACC,EAAYC,CAAK,EAAGC,CAAK,CAC7C,EAAG,CAAE,CAAA,EAECC,EAAqB,OAAO,KAAKL,CAAc,EAAE,IAAI,MAAM,EAE1D,MAAA,CACL,OAAQD,EACR,KAAM,GAEN,OAASO,GAAgB,CACjB,MAAAC,EAAQF,EAAmB,SAASC,EAAI,MAAM,EAAIN,EAAeM,EAAI,MAAM,EAAI,GACrF,OAAOA,GAAOC,GAAS,GACzB,EAEA,OAASD,GAAgB,CAGvB,MAAME,GAFSF,EAAI,MAAMP,CAAM,GAAK,IAAI,KAAK,EAAE,EAAE,MAAM,EAAE,EAGtD,OAAO,CAACE,EAAKG,EAAMD,IAAU,CAC5B,MAAMM,EAASZ,EAAY,SAASM,CAAK,EAAIR,EAAQQ,CAAK,EAAI,GACvD,OAAAF,GAAOQ,GAAU,IAAML,CAC7B,EAAA,EAAE,EACJ,OAAO,EAAGN,CAAkB,EAEzBM,EAAOJ,EAAeQ,EAAI,MAAM,EACtC,OACEA,GACCE,EAAaN,CAAI,GAAKE,EAAI,SAASF,CAAI,GAAKC,EAAmB,SAASG,EAAI,MAAM,EAC/EJ,EACA,GAER,CAAA,CAEJ"}