{"version":3,"file":"TabView-mxzGTwK_.js","sources":["../../../packages/lake/src/components/TabView.tsx"],"sourcesContent":["import { useLocation } from \"@swan-io/chicane\";\nimport {\n  Fragment,\n  ReactNode,\n  Ref,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n  PressableStateCallbackType,\n  StyleSheet,\n  Text,\n  TextProps,\n  View,\n  WebRole,\n} from \"react-native\";\nimport { P, match } from \"ts-pattern\";\nimport {\n  animations,\n  backgroundColor,\n  colors,\n  negativeSpacings,\n  radii,\n  shadows,\n  spacings,\n  texts,\n} from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { noop } from \"../utils/function\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { FocusTrap } from \"./FocusTrap\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeText } from \"./LakeText\";\nimport { Link } from \"./Link\";\nimport { PressableText, PressableTextProps } from \"./Pressable\";\nimport { Space, SpacingValue } from \"./Space\";\nimport { TransitionView } from \"./TransitionView\";\n\nconst TABS_HEIGHT = 40;\nexport const tabsViewHeight = TABS_HEIGHT + 1;\n\ntype Tab = ({ id: string } | { url: string }) & {\n  count?: number;\n  icon?: IconName;\n  label: string;\n  withSeparator?: boolean;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderBottomWidth: 1,\n    borderBottomColor: colors.gray[100],\n    zIndex: 10,\n  },\n  link: {\n    ...texts.medium,\n    position: \"relative\",\n    color: colors.gray[700],\n    height: TABS_HEIGHT,\n    whiteSpace: \"nowrap\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  activeLink: {\n    color: colors.current[500],\n    boxShadow: `inset 0 -2px ${colors.gray[700]}`,\n  },\n  hoveredLink: {\n    boxShadow: `inset 0 -2px ${colors.gray[700]}`,\n  },\n  underline: {\n    position: \"absolute\",\n    bottom: 0,\n    height: 2,\n    width: 1,\n    backgroundColor: colors.current[500],\n  },\n  animatedUnderline: {\n    transformOrigin: \"0 0\",\n    transition: \"200ms ease-in-out transform\",\n  },\n  placeholder: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    visibility: \"hidden\",\n    flexDirection: \"row\",\n    alignItems: \"flex-end\",\n    overflow: \"hidden\",\n    pointerEvents: \"none\",\n  },\n  count: {\n    ...texts.smallRegular,\n    color: colors.current[500],\n    backgroundColor: colors.current[50],\n    borderColor: colors.current[100],\n    borderWidth: 1,\n    borderRadius: radii[4],\n    paddingHorizontal: spacings[4],\n    minWidth: spacings[24],\n    display: \"inline-block\",\n    textAlign: \"center\",\n  },\n  dropdownHandleContainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    alignSelf: \"stretch\",\n  },\n  dropdownPlacement: {\n    position: \"absolute\",\n    right: 0,\n    top: \"100%\",\n  },\n  dropdown: {\n    position: \"absolute\",\n    right: 0,\n    top: \"100%\",\n    backgroundColor: backgroundColor.accented,\n    borderRadius: radii[8],\n    boxShadow: shadows.modal,\n    paddingVertical: spacings[8],\n  },\n  dropdownLink: {\n    ...texts.regular,\n    paddingHorizontal: spacings[16],\n    paddingVertical: spacings[8],\n    whiteSpace: \"nowrap\",\n  },\n  dropdownLinkTextHovered: {\n    backgroundColor: colors.gray[50],\n  },\n  dropdownLinkTextActive: {\n    boxShadow: `inset 3px 0 ${colors.current.primary}`,\n    color: colors.current.primary,\n  },\n  separator: {\n    position: \"absolute\",\n    top: 0,\n    left: negativeSpacings[16],\n    bottom: 0,\n    width: 1,\n    backgroundColor: colors.gray[100],\n  },\n  sticky: {\n    backgroundColor: backgroundColor.default,\n    position: \"sticky\",\n    top: -1,\n  },\n});\n\ntype TabViewLinkProps = {\n  onChange: ((id: string) => void) | undefined;\n  tab: Tab;\n  children: ReactNode;\n  style: (state: PressableStateCallbackType & { active: boolean }) => TextProps[\"style\"];\n  role?: WebRole;\n  activeTabId: string | undefined;\n  onFocus?: PressableTextProps[\"onFocus\"];\n  onBlur?: PressableTextProps[\"onBlur\"];\n  onPress?: () => void;\n  ariaCurrentValue?: \"page\" | \"location\";\n};\n\nconst TabViewLink = forwardRef<Text, TabViewLinkProps>(\n  ({ children, style, tab, onChange, activeTabId, onBlur, onFocus, onPress }, ref) => {\n    return match(tab)\n      .with({ url: P.string }, ({ url }) => (\n        <Link ref={ref} to={url} style={style} onFocus={onFocus} onBlur={onBlur} onPress={onPress}>\n          {children}\n        </Link>\n      ))\n      .with({ id: P.string }, ({ id }) => {\n        const isActive = id === activeTabId;\n\n        return (\n          <PressableText\n            ref={ref}\n            style={state => style({ ...state, active: isActive })}\n            onPress={() => {\n              onChange?.(id);\n              onPress?.();\n            }}\n            onFocus={onFocus}\n            onBlur={onBlur}\n          >\n            {children}\n          </PressableText>\n        );\n      })\n      .exhaustive();\n  },\n);\n\nconst Dropdown = ({\n  tabs,\n  onHoverStart,\n  onHoverEnd,\n  onLinkFocus,\n  onLinkBlur,\n  onLinkPress,\n  activeTabId,\n  onChange,\n}: {\n  tabs: Tab[];\n  onHoverStart: () => void;\n  onHoverEnd: () => void;\n  onLinkFocus: () => void;\n  onLinkBlur: () => void;\n  onLinkPress: () => void;\n  activeTabId: string | undefined;\n  onChange: ((id: string) => void) | undefined;\n}) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart,\n    onHoverEnd,\n  });\n\n  return (\n    <View role=\"menu\" style={styles.dropdown} ref={containerRef}>\n      {tabs.map(tab => {\n        const tabId = getTabId(tab);\n\n        return (\n          <TabViewLink\n            onChange={onChange}\n            key={tabId}\n            activeTabId={activeTabId}\n            tab={tab}\n            onFocus={onLinkFocus}\n            onBlur={onLinkBlur}\n            onPress={onLinkPress}\n            role=\"menuitem\"\n            ariaCurrentValue=\"location\"\n            style={({ active, hovered }) => [\n              styles.dropdownLink,\n              active && styles.dropdownLinkTextActive,\n              hovered && styles.dropdownLinkTextHovered,\n            ]}\n          >\n            {tab.label}\n          </TabViewLink>\n        );\n      })}\n    </View>\n  );\n};\n\ntype DropdownOpeningState = \"Open\" | \"OpenFromFocus\" | \"ForcedOpen\" | \"Closed\" | \"ForcedClosed\";\n\ntype DropdownAction = \"Open\" | \"FocusHandle\" | \"Close\" | \"ForceClose\" | \"ForceToggle\";\n\nconst SHOULD_AUTOFOCUS = new Set<DropdownOpeningState>([\"ForcedOpen\", \"OpenFromFocus\"]);\nconst SHOULD_OPEN = new Set<DropdownOpeningState>([\"Open\", \"ForcedOpen\", \"OpenFromFocus\"]);\nconst SHOULD_LOCK_FOCUS = new Set<DropdownOpeningState>([\"ForcedOpen\"]);\n\nconst DropdownItems = forwardRef<\n  View,\n  {\n    tabs: Tab[];\n    currentUrl: string;\n    otherLabel: string;\n    activeTabId: string | undefined;\n    onChange: ((id: string) => void) | undefined;\n  }\n>(({ tabs, otherLabel, currentUrl, activeTabId, onChange }, ref) => {\n  const [openingStatus, dispatch] = useReducer(\n    (state: DropdownOpeningState, action: DropdownAction): DropdownOpeningState => {\n      return match([action, state])\n        .returnType<DropdownOpeningState>()\n        .with(\n          [\"ForceToggle\", \"Closed\"],\n          [\"ForceToggle\", \"Open\"],\n          [\"ForceToggle\", \"ForcedClosed\"],\n          () => \"ForcedOpen\",\n        )\n        .with([\"ForceToggle\", \"OpenFromFocus\"], [\"ForceToggle\", \"ForcedOpen\"], () => \"ForcedClosed\")\n        .with([\"ForceClose\", P.any], () => \"ForcedClosed\")\n        .with([\"FocusHandle\", \"ForcedClosed\"], () => \"Closed\")\n        .with(\n          [\"Open\", \"ForcedOpen\"],\n          [\"FocusHandle\", \"ForcedOpen\"],\n          [\"Close\", \"ForcedOpen\"],\n          () => \"ForcedOpen\",\n        )\n        .with([\"Open\", P.any], () => \"Open\")\n        .with([\"FocusHandle\", P.any], () => \"OpenFromFocus\")\n        .with([\"Close\", P.any], () => \"Closed\")\n        .exhaustive();\n    },\n    \"Closed\",\n  );\n\n  const timeoutRef = useRef<number | undefined>(undefined);\n  const handleRef = useRef<View>(null);\n  const containerRef = useRef<View>(null);\n\n  const lastFocusTimeout = useRef<number | null>(null);\n  const {\n    onHandleFocus,\n    onLinkFocus,\n    onAnyBlur,\n    onHoverStart,\n    onHoverEnd,\n    onPress,\n    onPressOutside,\n    onEscapeKey,\n  } = useMemo(\n    () => ({\n      onHandleFocus: (event: NativeSyntheticEvent<React.FocusEvent>) => {\n        if (isNullish(containerRef.current)) {\n          return;\n        }\n        lastFocusTimeout.current = Date.now();\n        const container = containerRef.current as unknown as Element;\n        const focusEvent = event as unknown as FocusEvent;\n        // Don't reopen if leaving\n        if (!container.contains(focusEvent.relatedTarget as Node | null)) {\n          if (isNotNullish(timeoutRef.current)) {\n            clearTimeout(timeoutRef.current);\n          }\n          dispatch(\"FocusHandle\");\n        }\n      },\n      onLinkFocus: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"Open\");\n      },\n      onAnyBlur: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n      onHoverStart: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"Open\");\n      },\n\n      onHoverEnd: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n\n      onPress: () => {\n        if (lastFocusTimeout.current != null && Date.now() - lastFocusTimeout.current < 32) {\n          return;\n        }\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"ForceToggle\");\n      },\n\n      onPressOutside: (event: MouseEvent | TouchEvent) => {\n        if (isNotNullish(handleRef.current)) {\n          const handle = handleRef.current as unknown as Element;\n          if (handle.contains(event.target as Node | null)) {\n            return;\n          }\n        }\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        // Only force closing in case the focus comes directly to the handle\n        // Then put it back to a regular closed state\n        dispatch(\"ForceClose\");\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n\n      onEscapeKey: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"ForceClose\");\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    return () => {\n      if (isNotNullish(timeoutRef.current)) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  const shouldOpen = SHOULD_OPEN.has(openingStatus);\n  const shouldAutoFocus = SHOULD_AUTOFOCUS.has(openingStatus);\n  const shouldLockFocus = SHOULD_LOCK_FOCUS.has(openingStatus);\n\n  useHover(handleRef, {\n    onHoverStart,\n    onHoverEnd,\n  });\n\n  const mergedRef = useMergeRefs(containerRef, ref);\n\n  const activeTab = useMemo(\n    () => tabs.find(tab => isTabActive({ activeTabId, currentLocationURL: currentUrl, tab })),\n    [activeTabId, currentUrl, tabs],\n  );\n\n  return (\n    <View style={styles.dropdownHandleContainer} ref={mergedRef}>\n      <PressableText\n        ref={handleRef}\n        role=\"button\"\n        aria-expanded={shouldOpen}\n        aria-haspopup=\"true\"\n        onFocus={onHandleFocus}\n        onBlur={onAnyBlur}\n        onPress={onPress}\n        style={({ hovered }) => [\n          styles.link,\n          isNotNullish(activeTab) ? styles.activeLink : hovered ? styles.hoveredLink : null,\n        ]}\n      >\n        <Text>{otherLabel}</Text>\n        <Space width={8} />\n        <Text style={styles.count}>{tabs.length}</Text>\n        <Space width={4} />\n        <Icon name=\"chevron-down-filled\" size={12} />\n      </PressableText>\n\n      <TransitionView {...animations.fadeAndSlideInFromBottom} style={styles.dropdownPlacement}>\n        {shouldOpen ? (\n          <FocusTrap\n            autoFocus={shouldAutoFocus}\n            focusLock={shouldLockFocus}\n            returnFocus={shouldLockFocus}\n            onClickOutside={onPressOutside}\n            onEscapeKey={shouldLockFocus ? onEscapeKey : undefined}\n          >\n            <Dropdown\n              onChange={onChange}\n              activeTabId={activeTabId}\n              tabs={tabs}\n              onHoverStart={onHoverStart}\n              onHoverEnd={onHoverEnd}\n              onLinkFocus={onLinkFocus}\n              onLinkBlur={onAnyBlur}\n              onLinkPress={onEscapeKey}\n            />\n          </FocusTrap>\n        ) : null}\n      </TransitionView>\n    </View>\n  );\n});\n\ntype Props = {\n  activeTabId?: string;\n  onChange?: (id: string) => void;\n  tabs: Tab[];\n  otherLabel: string;\n  hideIfSingleItem?: boolean;\n  padding?: SpacingValue;\n  sticky?: boolean;\n};\n\ntype IsTabActiveParams = {\n  tab: Tab;\n  activeTabId: string | undefined;\n  currentLocationURL: string;\n};\nconst isTabActive = ({ tab, activeTabId, currentLocationURL }: IsTabActiveParams) =>\n  match(tab)\n    .with({ url: P.string }, ({ url }) => currentLocationURL.startsWith(url))\n    .with({ id: P.string }, ({ id }) => isNotNullish(activeTabId) && id === activeTabId)\n    .exhaustive();\n\nconst getTabId = (tab: Tab) =>\n  match(tab)\n    .with({ url: P.string }, ({ url }) => url)\n    .with({ id: P.string }, ({ id }) => id)\n    .exhaustive();\n\nexport const TabView = ({\n  tabs,\n  otherLabel,\n  hideIfSingleItem = true,\n  sticky = false,\n  padding,\n  activeTabId,\n  onChange,\n}: Props) => {\n  const containerRef = useRef<View | null>(null);\n  const placeholderRef = useRef<View | null>(null);\n  const otherPlaceholderRef = useRef<View | null>(null);\n\n  const linksRefs: Ref<Record<string, Text | null>> = useRef({});\n  const placeholderLinkRef: Ref<Record<string, Text | null>> = useRef({});\n  const [{ left, width }, setUnderlinePosition] = useState({ left: 0, width: 0 });\n  const [hasRendered, setHasRendered] = useState(false);\n  const [[kept, collapsed], setKeptCollapsed] = useState<[Tab[], Tab[]]>([[], []]);\n\n  const location = useLocation();\n  const { path } = location;\n  const currentLocationURL = location.toString();\n\n  useEffect(() => {\n    if (isNotNullish(linksRefs.current)) {\n      const values = Object.entries(linksRefs.current);\n      const container = containerRef.current;\n\n      for (const [tabId, node] of values) {\n        if (\n          (tabId === activeTabId || \"/\" + path.join(\"/\") === tabId) &&\n          isNotNullish(node) &&\n          isNotNullish(container)\n        ) {\n          node.measureLayout(\n            container as unknown as number,\n            (left, _, width) => {\n              const leftOffset = padding ?? 0;\n              setUnderlinePosition({ left: left - leftOffset, width });\n            },\n            noop,\n          );\n          return;\n        }\n      }\n    }\n\n    setUnderlinePosition({ left: 0, width: 0 });\n  }, [path, kept, collapsed, padding, activeTabId]);\n\n  useEffect(() => {\n    setHasRendered(width > 0);\n  }, [width]);\n\n  const reajustLayout = useCallback(\n    ({ width }: { container: Element; width: number }) => {\n      const items = tabs.map(tab => {\n        if (placeholderLinkRef.current) {\n          const tabId = getTabId(tab);\n          const ref = placeholderLinkRef.current[tabId];\n\n          if (isNotNullish(ref)) {\n            const element = ref as unknown as Element;\n            const width = element.getBoundingClientRect().width;\n\n            return { tab, width: width + 32 };\n          } else {\n            return { tab, width: 0 };\n          }\n        } else {\n          return { tab, width: 0 };\n        }\n      });\n\n      const kept: (Tab & { width: number })[] = [];\n      const collapsed: (Tab & { width: number })[] = [];\n\n      let cummulatedWidth = 0;\n\n      items.forEach(item => {\n        cummulatedWidth += item.width;\n\n        if (cummulatedWidth < width) {\n          kept.push({ ...item.tab, width: item.width });\n        } else {\n          if (isTabActive({ activeTabId, currentLocationURL, tab: item.tab })) {\n            while (\n              kept.length !== 0 &&\n              kept.reduce((acc, item) => acc + item.width, 0) + (item.width + 16) >= width\n            ) {\n              const last = kept.pop();\n\n              if (isNotNullish(last)) {\n                collapsed.unshift(last);\n                cummulatedWidth -= last.width;\n              }\n            }\n\n            kept.push({ ...item.tab, width: item.width });\n          } else {\n            collapsed.push({ ...item.tab, width: item.width });\n          }\n        }\n      });\n      const otherLabelRef = otherPlaceholderRef.current;\n      let otherLabelWidth = 100;\n      if (isNotNullish(otherLabelRef)) {\n        const otherLabel = otherLabelRef as unknown as Element;\n        otherLabelWidth = otherLabel.getBoundingClientRect().width;\n      }\n\n      const activeInKeptIndex = kept.findIndex(item =>\n        isTabActive({ activeTabId, currentLocationURL, tab: item }),\n      );\n\n      if (activeInKeptIndex !== -1) {\n        const activeInKept = kept[activeInKeptIndex];\n        const activeInKeptWidth = activeInKept?.width ?? 0;\n        const restInKept = [\n          ...kept.slice(0, activeInKeptIndex),\n          ...kept.slice(activeInKeptIndex + 1),\n        ];\n        while (\n          restInKept.length !== 0 &&\n          restInKept.reduce((acc, item) => acc + item.width, 0) +\n            activeInKeptWidth +\n            (collapsed.length >= 1 ? otherLabelWidth : 0) >=\n            width\n        ) {\n          const last = restInKept.pop();\n          if (isNotNullish(last)) {\n            collapsed.unshift(last);\n          }\n        }\n\n        const finalKept = [\n          ...restInKept.slice(0, activeInKeptIndex),\n          ...(activeInKept != null ? [activeInKept] : []),\n          ...restInKept.slice(activeInKeptIndex),\n        ];\n\n        setKeptCollapsed([finalKept, collapsed]);\n      } else {\n        setKeptCollapsed([kept, collapsed]);\n      }\n    },\n    [tabs, activeTabId, currentLocationURL],\n  );\n\n  const onLayout = useCallback(\n    ({\n      target,\n      nativeEvent: {\n        layout: { width },\n      },\n    }: LayoutChangeEvent) => {\n      reajustLayout({ container: target as unknown as Element, width });\n    },\n    [reajustLayout],\n  );\n\n  useLayoutEffect(() => {\n    const ref = placeholderRef.current;\n    if (ref) {\n      const element = ref as unknown as Element;\n      const width = element.getBoundingClientRect().width;\n      reajustLayout({ container: element, width });\n    }\n  }, [reajustLayout]);\n\n  if (tabs.length <= 1 && hideIfSingleItem) {\n    return null;\n  }\n\n  return (\n    <Box\n      alignItems=\"center\"\n      direction=\"row\"\n      role=\"tablist\"\n      ref={containerRef}\n      style={[styles.container, sticky && styles.sticky, { paddingHorizontal: padding }]}\n    >\n      <View style={styles.placeholder} aria-hidden={true} ref={placeholderRef} onLayout={onLayout}>\n        {tabs.map(tab => {\n          const { label, icon, count } = tab;\n          const tabId = getTabId(tab);\n\n          return (\n            <Fragment key={tabId}>\n              <TabViewLink\n                ref={ref => {\n                  if (placeholderLinkRef.current) {\n                    placeholderLinkRef.current[tabId] = ref;\n                  }\n                }}\n                activeTabId={activeTabId}\n                tab={tab}\n                onChange={onChange}\n                style={({ active, hovered }) => [\n                  styles.link,\n                  active ? styles.activeLink : hovered ? styles.hoveredLink : null,\n                ]}\n              >\n                {isNotNullish(icon) && (\n                  <>\n                    <Icon name={icon} size={16} color=\"currentColor\" />\n                    <Space width={8} />\n                  </>\n                )}\n\n                <Text>{label}</Text>\n\n                {count != null ? (\n                  <>\n                    <Space width={8} />\n                    <Text style={styles.count}>{count}</Text>\n                  </>\n                ) : null}\n              </TabViewLink>\n\n              <Space width={32} />\n            </Fragment>\n          );\n        })}\n\n        <LakeText ref={otherPlaceholderRef} style={styles.link}>\n          <Text>{otherLabel}</Text>\n          <Space width={8} />\n          <Text style={styles.count}>{tabs.length}</Text>\n          <Space width={4} />\n          <Icon name=\"chevron-down-filled\" size={12} />\n        </LakeText>\n      </View>\n\n      {kept.map(tab => {\n        const { label, icon, withSeparator, count } = tab;\n        const tabId = getTabId(tab);\n\n        return (\n          <Fragment key={tabId}>\n            <TabViewLink\n              ref={ref => {\n                if (linksRefs.current) {\n                  linksRefs.current[tabId] = ref;\n                }\n              }}\n              onChange={onChange}\n              activeTabId={activeTabId}\n              tab={tab}\n              role=\"tab\"\n              style={({ active, hovered }) => [\n                styles.link,\n                active ? styles.activeLink : hovered ? styles.hoveredLink : null,\n              ]}\n            >\n              {withSeparator === true && <View style={styles.separator} role=\"none\" />}\n\n              {isNotNullish(icon) && (\n                <>\n                  <Icon name={icon} size={16} color=\"currentColor\" />\n                  <Space width={8} />\n                </>\n              )}\n\n              <Text>{label}</Text>\n\n              {count != null ? (\n                <>\n                  <Space width={8} />\n                  <Text style={styles.count}>{count}</Text>\n                </>\n              ) : null}\n            </TabViewLink>\n\n            <Space width={32} />\n          </Fragment>\n        );\n      })}\n\n      {collapsed.length > 0 ? (\n        <DropdownItems\n          ref={ref => {\n            collapsed.forEach(item => {\n              if (linksRefs.current) {\n                const tabId = getTabId(item);\n                linksRefs.current[tabId] = ref;\n              }\n            });\n          }}\n          onChange={onChange}\n          tabs={collapsed}\n          currentUrl={currentLocationURL}\n          otherLabel={otherLabel}\n          activeTabId={activeTabId}\n        />\n      ) : null}\n\n      {hasRendered && (\n        <View\n          style={[\n            styles.underline,\n            styles.animatedUnderline,\n            { transform: `translateX(${left}px) scaleX(${width})` },\n          ]}\n        />\n      )}\n    </Box>\n  );\n};\n"],"names":["TABS_HEIGHT","styles","StyleSheet","colors","texts","radii","spacings","backgroundColor","shadows","negativeSpacings","TabViewLink","forwardRef","children","style","tab","onChange","activeTabId","onBlur","onFocus","onPress","ref","match","P","url","jsx","Link","id","isActive","PressableText","state","Dropdown","tabs","onHoverStart","onHoverEnd","onLinkFocus","onLinkBlur","onLinkPress","containerRef","useRef","useHover","View","tabId","getTabId","active","hovered","SHOULD_AUTOFOCUS","SHOULD_OPEN","SHOULD_LOCK_FOCUS","DropdownItems","otherLabel","currentUrl","openingStatus","dispatch","useReducer","action","timeoutRef","handleRef","lastFocusTimeout","onHandleFocus","onAnyBlur","onPressOutside","onEscapeKey","useMemo","event","isNullish","container","focusEvent","isNotNullish","useEffect","shouldOpen","shouldAutoFocus","shouldLockFocus","mergedRef","useMergeRefs","activeTab","isTabActive","jsxs","Text","Space","Icon","TransitionView","animations","FocusTrap","currentLocationURL","TabView","hideIfSingleItem","sticky","padding","placeholderRef","otherPlaceholderRef","linksRefs","placeholderLinkRef","left","width","setUnderlinePosition","useState","hasRendered","setHasRendered","kept","collapsed","setKeptCollapsed","location","useLocation","path","values","node","left2","_","width2","noop","reajustLayout","useCallback","items","width3","kept2","collapsed2","cummulatedWidth","item","acc","item2","last","otherLabelRef","otherLabelWidth","activeInKeptIndex","activeInKept","activeInKeptWidth","restInKept","finalKept","onLayout","target","useLayoutEffect","element","Box","label","icon","count","Fragment2","Fragment","LakeText","withSeparator"],"mappings":"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"}