{"version":3,"file":"TransitionView-fIiojl5e.js","sources":["../../../packages/lake/src/hooks/usePreviousValue.ts","../../../packages/lake/src/components/TransitionView.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport const usePreviousValue = <T>(value: T): T => {\n  const previousRef = useRef(value);\n\n  useEffect(() => {\n    previousRef.current = value;\n  }, [value]);\n\n  return previousRef.current;\n};\n","import { ReactNode, useLayoutEffect, useReducer, useRef } from \"react\";\nimport { AnimationStyles, StyleProp, StyleSheet, View, ViewStyle } from \"react-native\";\nimport { usePreviousValue } from \"../hooks/usePreviousValue\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\n\ntype Props = {\n  enter?: AnimationStyles;\n  leave?: AnimationStyles;\n  style?: StyleProp<ViewStyle>;\n  children: ReactNode | null;\n  onLeave?: () => void;\n};\n\nconst styles = StyleSheet.create({\n  base: {\n    animationFillMode: \"forwards\",\n  },\n});\n\nexport const TransitionView = ({ enter, leave, style, children, onLeave }: Props) => {\n  const viewRef = useRef<View>(null);\n  const childrenForLeaveAnimationRef = useRef<ReactNode>(null);\n  const [, forceUpdate] = useReducer(() => [], []);\n\n  const previousChildren = usePreviousValue(children);\n\n  if (isNullish(children) && isNotNullish(previousChildren) && isNotNullish(leave)) {\n    childrenForLeaveAnimationRef.current = previousChildren;\n  }\n\n  // Cleanup in case children reappear before the animation has performed\n  if (isNotNullish(children) && isNullish(previousChildren)) {\n    childrenForLeaveAnimationRef.current = null;\n  }\n\n  useLayoutEffect(() => {\n    if (isNullish(children) && isNotNullish(leave) && isNotNullish(viewRef.current)) {\n      const element = viewRef.current as unknown as Element;\n\n      const onAnimationEnd = () => {\n        childrenForLeaveAnimationRef.current = null;\n        forceUpdate();\n        onLeave?.();\n        element.removeEventListener(\"animationend\", onAnimationEnd);\n      };\n      element.addEventListener(\"animationend\", onAnimationEnd);\n\n      return () => element.removeEventListener(\"animationend\", onAnimationEnd);\n    }\n  }, [children, leave, onLeave]);\n\n  const hasChildrenToDisplay =\n    isNotNullish(children) || isNotNullish(childrenForLeaveAnimationRef.current);\n\n  return hasChildrenToDisplay ? (\n    <View\n      ref={viewRef}\n      style={[\n        styles.base,\n        style,\n        enter,\n        isNotNullish(childrenForLeaveAnimationRef.current) && leave,\n      ]}\n    >\n      {children ?? childrenForLeaveAnimationRef.current}\n    </View>\n  ) : null;\n};\n"],"names":["usePreviousValue","value","previousRef","useRef","useEffect","styles","StyleSheet","TransitionView","enter","leave","style","children","onLeave","viewRef","childrenForLeaveAnimationRef","forceUpdate","useReducer","previousChildren","isNullish","isNotNullish","useLayoutEffect","element","onAnimationEnd","jsx","View"],"mappings":"kHAEa,MAAAA,EAAuBC,GAAgB,CAC5C,MAAAC,EAAcC,SAAOF,CAAK,EAEhCG,OAAAA,EAAAA,UAAU,IAAM,CACdF,EAAY,QAAUD,CAAA,EACrB,CAACA,CAAK,CAAC,EAEHC,EAAY,OACrB,ECGMG,EAASC,EAAW,OAAO,CAC/B,KAAM,CACJ,kBAAmB,UAAA,CAEvB,CAAC,EAEYC,EAAiB,CAAC,CAAE,MAAAC,EAAO,MAAAC,EAAO,MAAAC,EAAO,SAAAC,EAAU,QAAAC,KAAqB,CAC7E,MAAAC,EAAUV,SAAa,IAAI,EAC3BW,EAA+BX,SAAkB,IAAI,EACrD,CAAG,CAAAY,CAAW,EAAIC,aAAW,IAAM,CAAA,EAAI,CAAA,CAAE,EAEzCC,EAAmBjB,EAAiBW,CAAQ,EAE9C,OAAAO,EAAUP,CAAQ,GAAKQ,EAAaF,CAAgB,GAAKE,EAAaV,CAAK,IAC7EK,EAA6B,QAAUG,GAIrCE,EAAaR,CAAQ,GAAKO,EAAUD,CAAgB,IACtDH,EAA6B,QAAU,MAGzCM,EAAAA,gBAAgB,IAAM,CAChB,GAAAF,EAAUP,CAAQ,GAAKQ,EAAaV,CAAK,GAAKU,EAAaN,EAAQ,OAAO,EAAG,CAC/E,MAAMQ,EAAUR,EAAQ,QAElBS,EAAiB,IAAM,CAC3BR,EAA6B,QAAU,KAC3BC,EAAA,EACFH,GAAA,MAAAA,IACFS,EAAA,oBAAoB,eAAgBC,CAAc,CAC5D,EACQ,OAAAD,EAAA,iBAAiB,eAAgBC,CAAc,EAEhD,IAAMD,EAAQ,oBAAoB,eAAgBC,CAAc,CAAA,CAExE,EAAA,CAACX,EAAUF,EAAOG,CAAO,CAAC,EAG3BO,EAAaR,CAAQ,GAAKQ,EAAaL,EAA6B,OAAO,EAG3ES,EAAA,IAACC,EAAA,CACC,IAAKX,EACL,MAAO,CACLR,EAAO,KACPK,EACAF,EACAW,EAAaL,EAA6B,OAAO,GAAKL,CACxD,EAEC,YAAYK,EAA6B,OAAA,CAAA,EAE1C,IACN"}