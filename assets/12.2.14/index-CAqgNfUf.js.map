{"version":3,"file":"index-CAqgNfUf.js","sources":["../../../node_modules/react-native-web/dist/modules/TextInputState/index.js","../../../node_modules/react-native-web/dist/exports/TextInput/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport UIManager from '../../exports/UIManager';\n\n/**\n * This class is responsible for coordinating the \"focused\"\n * state for TextInputs. All calls relating to the keyboard\n * should be funneled through here\n */\nvar TextInputState = {\n  /**\n   * Internal state\n   */\n  _currentlyFocusedNode: null,\n  /**\n   * Returns the ID of the currently focused text field, if one exists\n   * If no text field is focused it returns null\n   */\n  currentlyFocusedField() {\n    if (document.activeElement !== this._currentlyFocusedNode) {\n      this._currentlyFocusedNode = null;\n    }\n    return this._currentlyFocusedNode;\n  },\n  /**\n   * @param {Object} TextInputID id of the text field to focus\n   * Focuses the specified text field\n   * noop if the text field was already focused\n   */\n  focusTextInput(textFieldNode) {\n    if (textFieldNode !== null) {\n      this._currentlyFocusedNode = textFieldNode;\n      if (document.activeElement !== textFieldNode) {\n        UIManager.focus(textFieldNode);\n      }\n    }\n  },\n  /**\n   * @param {Object} textFieldNode id of the text field to focus\n   * Unfocuses the specified text field\n   * noop if it wasn't focused\n   */\n  blurTextInput(textFieldNode) {\n    if (textFieldNode !== null) {\n      this._currentlyFocusedNode = null;\n      if (document.activeElement === textFieldNode) {\n        UIManager.blur(textFieldNode);\n      }\n    }\n  }\n};\nexport default TextInputState;","/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use client';\n\nimport * as React from 'react';\nimport createElement from '../createElement';\nimport * as forwardedProps from '../../modules/forwardedProps';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../modules/useElementLayout';\nimport useLayoutEffect from '../../modules/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../modules/usePlatformMethods';\nimport useResponderEvents from '../../modules/useResponderEvents';\nimport { getLocaleDirection, useLocaleContext } from '../../modules/useLocale';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\n//import { warnOnce } from '../../modules/warnOnce';\n\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\nvar isSelectionStale = (node, selection) => {\n  var selectionEnd = node.selectionEnd,\n    selectionStart = node.selectionStart;\n  var start = selection.start,\n    end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\nvar setSelection = (node, selection) => {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n      end = selection.end;\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\nvar pickProps = props => pick(props, forwardPropsList);\n\n// If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\nvar focusTimeout = null;\nvar TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  var _props$autoCapitalize = props.autoCapitalize,\n    autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n    autoComplete = props.autoComplete,\n    autoCompleteType = props.autoCompleteType,\n    _props$autoCorrect = props.autoCorrect,\n    autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n    blurOnSubmit = props.blurOnSubmit,\n    caretHidden = props.caretHidden,\n    clearTextOnFocus = props.clearTextOnFocus,\n    dir = props.dir,\n    editable = props.editable,\n    enterKeyHint = props.enterKeyHint,\n    inputMode = props.inputMode,\n    keyboardType = props.keyboardType,\n    _props$multiline = props.multiline,\n    multiline = _props$multiline === void 0 ? false : _props$multiline,\n    numberOfLines = props.numberOfLines,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onChangeText = props.onChangeText,\n    onContentSizeChange = props.onContentSizeChange,\n    onFocus = props.onFocus,\n    onKeyPress = props.onKeyPress,\n    onLayout = props.onLayout,\n    onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n    onResponderEnd = props.onResponderEnd,\n    onResponderGrant = props.onResponderGrant,\n    onResponderMove = props.onResponderMove,\n    onResponderReject = props.onResponderReject,\n    onResponderRelease = props.onResponderRelease,\n    onResponderStart = props.onResponderStart,\n    onResponderTerminate = props.onResponderTerminate,\n    onResponderTerminationRequest = props.onResponderTerminationRequest,\n    onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n    onSelectionChange = props.onSelectionChange,\n    onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder = props.onStartShouldSetResponder,\n    onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n    onSubmitEditing = props.onSubmitEditing,\n    placeholderTextColor = props.placeholderTextColor,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n    returnKeyType = props.returnKeyType,\n    rows = props.rows,\n    _props$secureTextEntr = props.secureTextEntry,\n    secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n    selection = props.selection,\n    selectTextOnFocus = props.selectTextOnFocus,\n    showSoftInputOnFocus = props.showSoftInputOnFocus,\n    spellCheck = props.spellCheck;\n  var type;\n  var _inputMode;\n  if (inputMode != null) {\n    _inputMode = inputMode;\n    if (inputMode === 'email') {\n      type = 'email';\n    } else if (inputMode === 'tel') {\n      type = 'tel';\n    } else if (inputMode === 'search') {\n      type = 'search';\n    } else if (inputMode === 'url') {\n      type = 'url';\n    } else {\n      type = 'text';\n    }\n  } else if (keyboardType != null) {\n    // warnOnce('keyboardType', 'keyboardType is deprecated. Use inputMode.');\n    switch (keyboardType) {\n      case 'email-address':\n        type = 'email';\n        break;\n      case 'number-pad':\n      case 'numeric':\n        _inputMode = 'numeric';\n        break;\n      case 'decimal-pad':\n        _inputMode = 'decimal';\n        break;\n      case 'phone-pad':\n        type = 'tel';\n        break;\n      case 'search':\n      case 'web-search':\n        type = 'search';\n        break;\n      case 'url':\n        type = 'url';\n        break;\n      default:\n        type = 'text';\n    }\n  }\n  if (secureTextEntry) {\n    type = 'password';\n  }\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var prevSelection = React.useRef(null);\n  var prevSecureTextEntry = React.useRef(false);\n  React.useEffect(() => {\n    if (hostRef.current && prevSelection.current) {\n      setSelection(hostRef.current, prevSelection.current);\n    }\n    prevSecureTextEntry.current = secureTextEntry;\n  }, [secureTextEntry]);\n  var handleContentSizeChange = React.useCallback(hostNode => {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(() => hostNode => {\n    // TextInput needs to add more methods to the hostNode in addition to those\n    // added by `usePlatformMethods`. This is temporarily until an API like\n    // `TextInput.clear(hostRef)` is added to React Native.\n    if (hostNode != null) {\n      hostNode.clear = function () {\n        if (hostNode != null) {\n          hostNode.value = '';\n        }\n      };\n      hostNode.isFocused = function () {\n        return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n      };\n      handleContentSizeChange(hostNode);\n    }\n  }, [handleContentSizeChange]);\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n    if (onChange) {\n      onChange(e);\n    }\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n  function handleFocus(e) {\n    var hostNode = e.target;\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n      if (selectTextOnFocus) {\n        // Safari requires selection to occur in a setTimeout\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n        focusTimeout = setTimeout(() => {\n          // Check if the input is still focused after the timeout\n          // (see #2704)\n          if (hostNode != null && document.activeElement === hostNode) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n  function handleKeyDown(e) {\n    var hostNode = e.target;\n    // Prevent key events bubbling (see #612)\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n    if (e.key === 'Enter' && !e.shiftKey &&\n    // Do not call submit if composition is occuring.\n    !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n      if (shouldBlurOnSubmit && hostNode != null) {\n        setTimeout(() => hostNode.blur(), 0);\n      }\n    }\n  }\n  function handleSelectionChange(e) {\n    try {\n      var _e$target = e.target,\n        selectionStart = _e$target.selectionStart,\n        selectionEnd = _e$target.selectionEnd;\n      var _selection = {\n        start: selectionStart,\n        end: selectionEnd\n      };\n      if (onSelectionChange) {\n        e.nativeEvent.selection = _selection;\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      }\n      if (prevSecureTextEntry.current === secureTextEntry) {\n        prevSelection.current = _selection;\n      }\n    } catch (e) {}\n  }\n  useLayoutEffect(() => {\n    var node = hostRef.current;\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture,\n    onResponderEnd,\n    onResponderGrant,\n    onResponderMove,\n    onResponderReject,\n    onResponderRelease,\n    onResponderStart,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder,\n    onStartShouldSetResponderCapture\n  });\n  var _useLocaleContext = useLocaleContext(),\n    contextDirection = _useLocaleContext.direction;\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  // 'auto' by default allows browsers to infer writing direction\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  /*\n  if (returnKeyType != null) {\n    warnOnce('returnKeyType', 'returnKeyType is deprecated. Use enterKeyHint.');\n  }\n  */\n  supportedProps.enterKeyHint = enterKeyHint || returnKeyType;\n  supportedProps.inputMode = _inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  /*\n  if (editable != null) {\n    warnOnce('editable', 'editable is deprecated. Use readOnly.');\n  }\n  */\n  supportedProps.readOnly = readOnly === true || editable === false;\n  /*\n  if (numberOfLines != null) {\n    warnOnce(\n      'numberOfLines',\n      'TextInput numberOfLines is deprecated. Use rows.'\n    );\n  }\n  */\n  supportedProps.rows = multiline ? rows != null ? rows : numberOfLines : 1;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    '--placeholderTextColor': placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style, caretHidden && styles.caretHidden];\n  supportedProps.type = multiline ? undefined : type;\n  supportedProps.virtualkeyboardpolicy = showSoftInputOnFocus === false ? 'manual' : 'auto';\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = createElement(component, supportedProps, {\n    writingDirection\n  });\n  return element;\n});\nTextInput.displayName = 'TextInput';\n// $FlowFixMe\nTextInput.State = TextInputState;\nvar styles = StyleSheet.create({\n  textinput$raw: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  },\n  placeholder: {\n    placeholderTextColor: 'var(--placeholderTextColor)'\n  },\n  caretHidden: {\n    caretColor: 'transparent'\n  }\n});\nexport default TextInput;"],"names":["TextInputState","textFieldNode","UIManager","isSelectionStale","node","selection","selectionEnd","selectionStart","start","end","setSelection","forwardPropsList","forwardedProps.defaultProps","forwardedProps.accessibilityProps","forwardedProps.clickProps","forwardedProps.focusProps","forwardedProps.keyboardProps","forwardedProps.mouseProps","forwardedProps.touchProps","forwardedProps.styleProps","pickProps","props","pick","isEventComposing","nativeEvent","focusTimeout","TextInput","React.forwardRef","forwardedRef","_props$autoCapitalize","autoCapitalize","autoComplete","autoCompleteType","_props$autoCorrect","autoCorrect","blurOnSubmit","caretHidden","clearTextOnFocus","dir","editable","enterKeyHint","inputMode","keyboardType","_props$multiline","multiline","numberOfLines","onBlur","onChange","onChangeText","onContentSizeChange","onFocus","onKeyPress","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderEnd","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderStart","onResponderTerminate","onResponderTerminationRequest","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","_props$readOnly","readOnly","returnKeyType","rows","_props$secureTextEntr","secureTextEntry","selectTextOnFocus","showSoftInputOnFocus","spellCheck","type","_inputMode","dimensions","React.useRef","hostRef","prevSelection","prevSecureTextEntry","React.useEffect","handleContentSizeChange","React.useCallback","hostNode","newHeight","newWidth","imperativeRef","React.useMemo","handleBlur","e","handleChange","text","handleFocus","handleKeyDown","blurOnSubmitDefault","shouldBlurOnSubmit","isComposing","handleSelectionChange","_e$target","_selection","useLayoutEffect","component","useElementLayout","useResponderEvents","_useLocaleContext","useLocaleContext","contextDirection","supportedProps","styles","platformMethodsRef","usePlatformMethods","setRef","useMergeRefs","langDirection","getLocaleDirection","componentDirection","writingDirection","element","createElement","StyleSheet"],"mappings":"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","x_google_ignoreList":[0,1]}