{"version":3,"file":"FixedListView-9c4ee290.js","sources":["../../../packages/lake/src/components/FixedListViewCells.tsx","../../../packages/lake/src/components/FixedListView.tsx"],"sourcesContent":["import { ReactNode, useCallback, useState } from \"react\";\nimport { Clipboard, GestureResponderEvent, StyleSheet, View } from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { visuallyHiddenStyle } from \"../constants/commonStyles\";\nimport { ColorVariants, colors, spacings } from \"../constants/design\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { LakeText, TextVariant } from \"./LakeText\";\nimport { LakeTooltip } from \"./LakeTooltip\";\nimport { Pressable } from \"./Pressable\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  cellContainer: {\n    display: \"flex\",\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  balanceCellContainer: {\n    width: \"100%\",\n  },\n  cell: {\n    display: \"flex\",\n    paddingHorizontal: spacings[16],\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  icon: {\n    alignSelf: \"stretch\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingHorizontal: spacings[4],\n  },\n  iconContainer: {\n    flexDirection: \"row\",\n    alignSelf: \"stretch\",\n    alignItems: \"stretch\",\n    justifyContent: \"center\",\n  },\n  centeredCell: {\n    justifyContent: \"center\",\n  },\n  endAlignedCell: {\n    justifyContent: \"flex-end\",\n  },\n  regularText: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    width: 1,\n    flexGrow: 1,\n    whiteSpace: \"nowrap\",\n  },\n  mediumText: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    width: 1,\n    flexGrow: 1,\n    whiteSpace: \"nowrap\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  colorPatch: {\n    flexGrow: 1,\n  },\n  alternativeText: visuallyHiddenStyle,\n  sortIcon: {\n    transitionProperty: \"transform\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  sortIconReversed: {\n    transform: \"rotate(-180deg)\",\n  },\n  cellAction: {\n    paddingVertical: spacings[16],\n    paddingHorizontal: spacings[8],\n  },\n  underline: {\n    boxShadow: \"inset 0 -2px currentColor\",\n  },\n  sortHorizontalBar: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 2,\n    bottom: -10,\n    backgroundColor: colors.current[500],\n    borderBottomColor: colors.current[500],\n  },\n});\n\ntype Justify = \"flex-start\" | \"center\" | \"flex-end\";\ntype SortDirection = \"Desc\" | \"Asc\";\n\nexport const SimpleHeaderCell = ({\n  text,\n  sort,\n  justifyContent = \"flex-start\",\n  onPress,\n}: {\n  text: string;\n  justifyContent?: Justify;\n  sort?: SortDirection;\n  onPress?: (direction: SortDirection) => void;\n}) => {\n  const sortActive = isNotNullish(sort) && isNotNullish(onPress);\n\n  return (\n    <Pressable\n      onPress={() => {\n        onPress?.(\n          match(sort)\n            .returnType<SortDirection>()\n            .with(\"Desc\", () => \"Asc\")\n            .with(\"Asc\", () => \"Desc\")\n            .otherwise(() => \"Desc\"),\n        );\n      }}\n      disabled={isNullish(onPress)}\n      style={styles.cellContainer}\n    >\n      {({ hovered }) => (\n        <View style={[styles.cell, { justifyContent }]}>\n          <View>\n            <Box direction=\"row\" alignItems=\"center\">\n              <LakeText\n                numberOfLines={1}\n                variant=\"medium\"\n                color={sortActive ? colors.current[500] : colors.gray[900]}\n                style={{\n                  textAlign: match(justifyContent)\n                    .with(\"flex-start\", () => \"left\" as const)\n                    .with(\"center\", () => \"center\" as const)\n                    .with(\"flex-end\", () => \"right\" as const)\n                    .exhaustive(),\n                }}\n              >\n                {text}\n              </LakeText>\n\n              {isNotNullish(onPress) ? (\n                <>\n                  <Space width={8} />\n\n                  <Box style={[styles.sortIcon, sort === \"Asc\" && styles.sortIconReversed]}>\n                    <Icon\n                      size={15}\n                      color={sortActive ? colors.current[500] : colors.gray[500]}\n                      name={sortActive ? \"arrow-down-filled\" : \"chevron-up-down-regular\"}\n                    />\n                  </Box>\n                </>\n              ) : null}\n            </Box>\n\n            {sortActive ? (\n              <View style={styles.sortHorizontalBar} />\n            ) : hovered ? (\n              <View style={[styles.sortHorizontalBar, { backgroundColor: colors.gray[900] }]} />\n            ) : null}\n          </View>\n        </View>\n      )}\n    </Pressable>\n  );\n};\n\nexport const ColorPatchCell = ({\n  isHovered,\n  alternativeText,\n  color,\n}: {\n  isHovered: boolean;\n  alternativeText?: string;\n  color: ColorVariants;\n}) => {\n  return isHovered ? (\n    <View style={[styles.colorPatch, { backgroundColor: colors[color].primary }]}>\n      {isNotNullish(alternativeText) ? (\n        <LakeText style={styles.alternativeText}>{alternativeText}</LakeText>\n      ) : null}\n    </View>\n  ) : null;\n};\n\nexport const SimpleTitleCell = ({\n  isHighlighted = false,\n  text,\n}: {\n  isHighlighted?: boolean;\n  text: string;\n}) => (\n  <View style={styles.cell}>\n    <LakeText\n      numberOfLines={1}\n      color={isHighlighted ? colors.current.primary : colors.gray[900]}\n      style={styles.regularText}\n      variant=\"medium\"\n    >\n      {text}\n    </LakeText>\n  </View>\n);\n\nexport const SimpleRegularTextCell = ({\n  variant = \"regular\",\n  text,\n  textAlign = \"left\",\n  color = colors.gray[900],\n}: {\n  variant?: TextVariant;\n  text: string;\n  textAlign?: \"left\" | \"center\" | \"right\";\n  color?: string;\n}) => {\n  return (\n    <View style={styles.cell}>\n      <LakeText align={textAlign} color={color} style={styles.regularText} variant={variant}>\n        {text}\n      </LakeText>\n    </View>\n  );\n};\n\nexport const CopyableRegularTextCell = ({\n  variant = \"regular\",\n  text,\n  copyWording,\n  copiedWording,\n}: {\n  variant?: TextVariant;\n  text: string;\n  copyWording: string;\n  copiedWording: string;\n}) => {\n  const [visibleState, setVisibleState] = useState<\"copy\" | \"copied\">(\"copy\");\n\n  const onPress = useCallback(\n    (event: GestureResponderEvent) => {\n      event.preventDefault();\n      Clipboard.setString(text);\n      setVisibleState(\"copied\");\n    },\n    [text],\n  );\n\n  return (\n    <View style={styles.cell}>\n      <LakeTooltip\n        placement=\"top\"\n        onHide={() => setVisibleState(\"copy\")}\n        togglableOnFocus={true}\n        content={visibleState === \"copy\" ? copyWording : copiedWording}\n        containerStyle={styles.iconContainer}\n      >\n        <Pressable\n          role=\"button\"\n          aria-label={copyWording}\n          onPress={onPress}\n          style={({ hovered }) => [styles.icon, hovered && styles.underline]}\n        >\n          {({ hovered }) => (\n            <Icon name={hovered ? \"copy-filled\" : \"copy-regular\"} color=\"currentColor\" size={14} />\n          )}\n        </Pressable>\n      </LakeTooltip>\n\n      <Space width={4} />\n\n      <LakeText color={colors.gray[900]} style={styles.regularText} variant={variant}>\n        {text}\n      </LakeText>\n    </View>\n  );\n};\n\n// TODO: handle `+` sign properly\nexport const BalanceCell = ({\n  value,\n  currency,\n  originalValue,\n  formatCurrency,\n  textAlign = \"right\",\n}: {\n  value: number;\n  currency: string;\n  originalValue?: { value: number; currency: string };\n  formatCurrency: (value: number, currency: string) => string;\n  textAlign?: \"left\" | \"center\" | \"right\";\n}) => {\n  return (\n    <View style={styles.balanceCellContainer}>\n      <View style={styles.cell}>\n        <LakeText\n          align={textAlign}\n          color={colors.gray[900]}\n          variant=\"medium\"\n          style={[\n            styles.mediumText,\n            {\n              justifyContent: match(textAlign)\n                .with(\"left\", () => \"flex-start\" as const)\n                .with(\"center\", () => \"center\" as const)\n                .with(\"right\", () => \"flex-end\" as const)\n                .exhaustive(),\n            },\n            value > 0 && { color: colors.positive.primary },\n            value < 0 && { color: colors.negative.primary },\n          ]}\n        >\n          {value > 0 && \"+\"}\n          {formatCurrency(value, currency)}\n        </LakeText>\n      </View>\n\n      {isNotNullish(originalValue) && originalValue.currency !== currency && (\n        <View style={styles.cell}>\n          <LakeText\n            style={styles.mediumText}\n            align={textAlign}\n            color={colors.gray[500]}\n            variant=\"smallRegular\"\n          >\n            {originalValue.value > 0 && \"+\"}\n            {formatCurrency(originalValue.value, originalValue.currency)}\n          </LakeText>\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport const LinkCell = ({\n  children,\n  external = false,\n  onPress,\n}: {\n  children: ReactNode;\n  onPress: () => void;\n  external?: boolean;\n}) => {\n  return (\n    <View style={styles.cell}>\n      <Pressable\n        style={({ hovered }) => [styles.icon, hovered && styles.underline]}\n        onPress={event => {\n          event.preventDefault();\n          onPress();\n        }}\n      >\n        <Icon size={14} name={external ? \"open-regular\" : \"arrow-right-filled\"} />\n      </Pressable>\n\n      <Space width={8} />\n\n      <LakeText color={colors.gray[900]} variant=\"medium\" style={styles.mediumText}>\n        {children}\n      </LakeText>\n    </View>\n  );\n};\n\nexport const StartAlignedCell = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.cell}>{children}</View>;\n};\n\nexport const CenteredCell = ({ children }: { children: ReactNode }) => {\n  return <View style={[styles.cell, styles.centeredCell]}>{children}</View>;\n};\n\nexport const EndAlignedCell = ({ children }: { children: ReactNode }) => {\n  return <View style={[styles.cell, styles.endAlignedCell]}>{children}</View>;\n};\n\nexport const CellAction = ({ children }: { children: ReactNode }) => {\n  return <View style={styles.cellAction}>{children}</View>;\n};\n","/**\n * ## FixedListView\n *\n * The FixedListView is a component designed to render big amounts of tabular data.\n *\n * For usability, the data can be display in three types of columns:\n *\n * - Sticked to start columns (usually the main identifier, always visible)\n * - Center columns (scrollable columns, with additional information)\n * - Sticked to end columns (so that some actions are always accesible at the end of each line)\n *\n * ┌────────────────────────────────────────────────────────────────────────────────────────┐\n * │ ┌────────────────┐ ┌────────────────────────────────────────┐ ┌────────────────┐       │\n * │ │ ╔════════════╗ │ │ ╔════════════════════════════════════╗ │ │ ╔════════════╗ │       │\n * │ │ ║   Header   ║ │ │ ║               Header               ║ │ │ ║   Header   ║ │ ▲     │\n * │ │ ║            ║ │ │ ║◀──────────────────────────────────▶║ │ │ ║            ║ │ │     │\n * │ │ ╚════════════╝ │ │ ╚════════════════════════════════════╝ │ │ ╚════════════╝ │ │     │\n * │ │                │ │                                        │ │                │ │     │\n * │ │ ┌───────────┐  │ │ ┌────────────────────────────────────┐ │ │ ┌────────────┐ │ │     │\n * │ │ │  Cell A1  │──┼─┼▷│              Cell B1               ├─┼─┼─▷  Cell C1   │ │ │     │\n * │ │ └───────────┘  │ │ └────────────────────────────────────┘ │ │ └────────────┘ │ │     │\n * │ │ ┌───────────┐  │ │ ┌────────────────────────────────────┐ │ │ ┌────────────┐ │ │     │\n * │ │ │  Cell A2  │──┼─┼▷│              Cell B2               │─┼─┼─▷  Cell C2   │ │ │     │\n * │ │ └───────────┘  │ │ └────────────────────────────────────┘ │ │ └────────────┘ │ │     │\n * │ │                │ │                                        │ │                │ │     │\n * │ │                │ │ ◀────────────────────────────────────▶ │ │                │ ▼     │\n * └─┴────────────────┴─┴────────────────────────────────────────┴─┴────────────────┴───────┘\n *\n * ╔════╗\n * ║    ║   Sticky\n * ╚════╝\n * ◀────▶   Scrollable\n * ─────▷   Emulated tab order\n *\n */\nimport {\n  cloneElement,\n  Fragment,\n  memo,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  LayoutChangeEvent,\n  NativeScrollEvent,\n  NativeSyntheticEvent,\n  ScrollView,\n  StyleSheet,\n  View,\n  ViewProps,\n} from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { v4 as uuid } from \"uuid\";\nimport {\n  backgroundColor,\n  colors,\n  invariantColors,\n  radii,\n  shadows,\n  spacings,\n} from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { getFocusableElements } from \"../utils/a11y\";\nimport { first, last, sortedIndexOf } from \"../utils/array\";\nimport { noop } from \"../utils/function\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { BorderedIcon } from \"./BorderedIcon\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeHeading } from \"./LakeHeading\";\nimport { LakeText } from \"./LakeText\";\nimport { Space } from \"./Space\";\n\nexport type ColumnTitleConfig<ExtraInfo> = {\n  title: string;\n  extraInfo: ExtraInfo;\n  id: string;\n};\n\nexport type ColumnCellConfig<T, ExtraInfo> = {\n  columnId: string;\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n  isHovered: boolean;\n};\n\nexport type LinkConfig<T, ExtraInfo> = {\n  item: T;\n  index: number;\n  extraInfo: ExtraInfo;\n};\n\nexport type ColumnConfig<T, ExtraInfo> = {\n  id: string;\n  width: number;\n  title: string;\n  renderTitle: (props: ColumnTitleConfig<ExtraInfo>) => ReactNode;\n  renderCell: (props: ColumnCellConfig<T, ExtraInfo>) => ReactNode;\n};\n\ntype Mode = \"tile\" | \"plain\";\n\nexport type FixedListViewProps<T, ExtraInfo> = {\n  mode?: Mode;\n  data: T[];\n  keyExtractor: (item: T, index: number) => string;\n  highlightedRowId?: string;\n  headerHeight: number;\n  rowHeight: number;\n  rowVerticalSpacing: number;\n  extraInfo: ExtraInfo;\n  stickedToStartColumns?: ColumnConfig<T, ExtraInfo>[];\n  columns: ColumnConfig<T, ExtraInfo>[];\n  stickedToEndColumns?: ColumnConfig<T, ExtraInfo>[];\n  renderThreshold?: number;\n  onEndReached?: () => void;\n  onEndReachedThresholdPx?: number;\n  getRowLink?: (config: LinkConfig<T, ExtraInfo>) => ReactElement | undefined;\n  renderEmptyList?: () => ReactNode;\n  loading?: {\n    isLoading: boolean;\n    count: number;\n  };\n};\n\nconst HORIZONTAL_SAFE_AREA = 10;\nconst SCROLLBAR_RESERVED_SPACE = 20;\n\nconst styles = StyleSheet.create({\n  root: {\n    height: 1,\n    alignSelf: \"stretch\",\n    flexGrow: 1,\n  },\n  container: {\n    height: 1,\n    alignSelf: \"stretch\",\n    flexGrow: 1,\n  },\n  containerTile: {\n    marginHorizontal: -HORIZONTAL_SAFE_AREA,\n  },\n  contentContainer: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    flexGrow: 1,\n  },\n  scrollContentContainer: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  centerColumnsContainer: {\n    width: 1,\n    flexGrow: 1,\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n  },\n  centerColumns: {\n    flexGrow: 1,\n  },\n  centerColumnsContentContainer: {\n    flexDirection: \"column\",\n    flexGrow: 1,\n  },\n  stickyColumn: {\n    flexGrow: 0,\n    zIndex: 1,\n  },\n  stickyColumnStartOverflow: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    right: \"100%\",\n    width: HORIZONTAL_SAFE_AREA,\n    backgroundColor: backgroundColor.default,\n  },\n  stickyColumnEndOverflow: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    left: \"100%\",\n    width: HORIZONTAL_SAFE_AREA,\n    backgroundColor: backgroundColor.default,\n  },\n  rowSegment: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    display: \"flex\",\n    flexGrow: 1,\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n    overflow: \"hidden\",\n  },\n  headingSegment: {\n    position: \"sticky\",\n    top: 0,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    zIndex: 2,\n    backgroundColor: backgroundColor.default,\n  },\n  segment: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    overflow: \"hidden\",\n  },\n  segmentOverflow: {\n    overflow: \"hidden\",\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  visibleGradient: {\n    opacity: 1,\n  },\n  leftToRightGradient: {\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    height: \"100%\",\n    width: 10,\n    backgroundImage: \"linear-gradient(to right, rgba(0, 0, 0, 0.06), rgba(0, 0, 0, 0))\",\n    opacity: 0,\n    transition: \"150ms ease-in-out opacity\",\n    pointerEvents: \"none\",\n  },\n  rightToLeftGradient: {\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n    height: \"100%\",\n    width: 10,\n    backgroundImage: \"linear-gradient(to left, rgba(0, 0, 0, 0.06), rgba(0, 0, 0, 0))\",\n    opacity: 0,\n    transition: \"150ms ease-in-out opacity\",\n    pointerEvents: \"none\",\n  },\n  horizontalScrollbar: {\n    position: \"sticky\",\n    bottom: 0,\n    borderBottomWidth: 5,\n    borderBottomColor: invariantColors.transparent,\n    flexGrow: 0,\n    height: SCROLLBAR_RESERVED_SPACE,\n  },\n  cell: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  stickyRow: {\n    // overflow: \"hidden\",\n  },\n  evenRow: {\n    backgroundColor: backgroundColor.accented,\n  },\n  oddRow: {\n    backgroundColor: backgroundColor.default,\n  },\n  rowShadow: {\n    boxShadow: shadows.tile,\n  },\n  hoveredRowShadow: {\n    boxShadow: shadows.tileHover,\n  },\n  highlightedRow: {\n    borderColor: colors.current.primary,\n    borderWidth: 1,\n  },\n  segmentHeaderCell: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexGrow: 1,\n    alignItems: \"center\",\n  },\n  rowBackground: {\n    borderRadius: radii[4],\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rowPlainBackground: {\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rowBackgroundContainer: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    justifyContent: \"center\",\n    transitionProperty: \"top\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n  },\n  rowBackgroundContainerPlain: {\n    backgroundColor: backgroundColor.default,\n    left: -10,\n    right: -10,\n    boxShadow: `inset 0 -1px ${colors.gray[100]}`,\n  },\n  backgroundRows: {\n    position: \"absolute\",\n    left: HORIZONTAL_SAFE_AREA,\n    right: HORIZONTAL_SAFE_AREA,\n    top: 0,\n    bottom: 0,\n  },\n  placeholderRowContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    top: 0,\n    left: 20,\n    right: 20,\n    animationKeyframes: {\n      \"50%\": {\n        opacity: 0.6,\n      },\n    },\n    animationDuration: \"2000ms\",\n    animationTimingFunction: \"linear\",\n    animationIterationCount: \"infinite\",\n  },\n  placeholderRowContainerPlain: {\n    left: 10,\n  },\n  placeholderRow: {\n    height: 14,\n    width: \"30%\",\n    backgroundColor: colors.gray[200],\n    borderRadius: radii[6],\n  },\n  placeholderRowEnd: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  smallPlaceholderRow: {\n    width: \"10%\",\n  },\n  centerSegmentContainer: {\n    flexGrow: 1,\n  },\n  rowLeftRadii: {\n    borderTopLeftRadius: radii[4],\n    borderBottomLeftRadius: radii[4],\n  },\n  rowRightRadii: {\n    borderTopRightRadius: radii[4],\n    borderBottomRightRadius: radii[4],\n  },\n  emptyListContainer: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: spacings[48],\n    backgroundColor: backgroundColor.default,\n  },\n  emptyList: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  loadingPlaceholder: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n  },\n  topGradient: {\n    height: 30,\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: \"100%\",\n    backgroundImage: `linear-gradient(to bottom, ${backgroundColor.default}, ${backgroundColor.defaultTransparent})`,\n    opacity: 0,\n    transition: \"200ms ease-in-out opacity\",\n    pointerEvents: \"none\",\n  },\n  visibleTopGradient: {\n    opacity: 1,\n  },\n});\n\ntype RowBackgroundProps = {\n  absoluteIndex: number;\n  id: string;\n  isHovered: boolean;\n  isHighlighted: boolean;\n  top: number;\n  rowVerticalSpacing: number;\n  rowHeight: number;\n  onMouseEnter: (id: string) => void;\n  onMouseLeave: () => void;\n  mode: Mode;\n};\n\nconst RowBackground = ({\n  absoluteIndex,\n  id,\n  isHovered,\n  isHighlighted,\n  top,\n  rowHeight,\n  rowVerticalSpacing,\n  onMouseEnter,\n  onMouseLeave,\n  mode,\n}: RowBackgroundProps) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart: () => onMouseEnter(id),\n    onHoverEnd: () => onMouseLeave(),\n  });\n\n  return (\n    <View\n      style={[\n        styles.rowBackgroundContainer,\n        mode === \"plain\" && styles.rowBackgroundContainerPlain,\n        { top, paddingVertical: rowVerticalSpacing / 2 },\n      ]}\n      ref={containerRef}\n    >\n      {mode === \"tile\" ? (\n        <View\n          style={[\n            styles.rowBackground,\n            isHovered ? styles.hoveredRowShadow : styles.rowShadow,\n            isHighlighted && styles.highlightedRow,\n            absoluteIndex % 2 === 0 ? styles.evenRow : styles.oddRow,\n            { height: rowHeight },\n          ]}\n        />\n      ) : (\n        <View style={[styles.rowPlainBackground, { height: rowHeight }]} />\n      )}\n    </View>\n  );\n};\n\nconst MemoizedRowBackground = memo<RowBackgroundProps>(RowBackground);\n\ntype RowSegmentProps<T, ExtraInfo> = {\n  mode?: Mode;\n  columns: ColumnConfig<T, ExtraInfo>[];\n  item: T;\n  style: ViewProps[\"style\"];\n  absoluteIndex: number;\n  viewId: string;\n  segmentColumn: \"start\" | \"center\" | \"end\";\n  width: number;\n  rowVerticalSpacing: number;\n  onMouseEnter: (id: string) => void;\n  onMouseLeave: () => void;\n  id: string;\n  isHovered: boolean;\n  onEndReached?: () => void;\n  extraInfo: ExtraInfo;\n  createRowWrapper: (props: {\n    item: T;\n    absoluteIndex: number;\n    extraInfo: ExtraInfo;\n  }) => ReactElement;\n  focusId: string;\n  top: number;\n  totalRowHeight: number;\n  minWidth?: number;\n};\n\nconst SEGMENTS_MAP = {\n  start: \"0\",\n  center: \"1\",\n  end: \"2\",\n};\n\nconst RowSegment = <T, ExtraInfo>({\n  columns,\n  item,\n  style,\n  absoluteIndex,\n  viewId,\n  segmentColumn,\n  rowVerticalSpacing,\n  width,\n  id,\n  isHovered,\n  extraInfo,\n  onMouseEnter,\n  onMouseLeave,\n  createRowWrapper,\n  focusId,\n  top,\n  totalRowHeight,\n  minWidth,\n}: RowSegmentProps<T, ExtraInfo>) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart: () => onMouseEnter(id),\n    onHoverEnd: () => onMouseLeave(),\n  });\n\n  const wrapper = createRowWrapper({ item, absoluteIndex, extraInfo });\n\n  return cloneElement(\n    wrapper,\n    {\n      id: focusId,\n      tabIndex: 0,\n      style: [\n        styles.rowSegment,\n        {\n          top,\n          height: totalRowHeight,\n          width: isNullish(minWidth) ? width : undefined,\n          minWidth,\n        },\n      ],\n    },\n    <View\n      style={[\n        styles.segment,\n        { width, paddingVertical: rowVerticalSpacing / 2 },\n        segmentColumn === \"center\" && styles.centerSegmentContainer,\n        segmentColumn === \"start\" && {\n          borderTopLeftRadius: radii[4],\n          borderBottomLeftRadius: radii[4],\n        },\n        segmentColumn === \"end\" && {\n          borderTopRightRadius: radii[4],\n          borderBottomRightRadius: radii[4],\n        },\n      ]}\n      ref={containerRef}\n      aria-hidden={false}\n    >\n      <View style={[styles.segmentOverflow, style]}>\n        {columns.map(({ id, width, renderCell }, index) => {\n          const columnId = `${viewId}_${id}`;\n          const paddedIndex = String(absoluteIndex).padStart(10, \"0\");\n          const paddedCellIndex = String(index).padStart(10, \"0\");\n\n          // The reason we use this shape is so that the IDs alphabetical order matches the semantical one:\n          // 1. Row index\n          // 2. Column index\n          // 3. Cell index\n          // -> See the `onKeyDown` handler\n          const focusId = `${viewId}__Row_${paddedIndex}_Segment_${SEGMENTS_MAP[segmentColumn]}_Cell_${paddedCellIndex}`;\n\n          return (\n            <View\n              style={[styles.cell, { width }]}\n              key={columnId}\n              aria-describedby={columnId}\n              id={focusId}\n            >\n              {renderCell({ columnId, item, index: absoluteIndex, extraInfo, isHovered })}\n            </View>\n          );\n        })}\n      </View>\n    </View>,\n  );\n};\n\nconst MemoizedRowSegment = memo(RowSegment) as typeof RowSegment;\n\ntype HeaderSegmentProps<T, ExtraInfo> = {\n  columns: ColumnConfig<T, ExtraInfo>[];\n  viewId: string;\n  extraInfo: ExtraInfo;\n  width: number;\n};\n\nconst HeaderSegment = <T, ExtraInfo>({\n  columns,\n  viewId,\n  extraInfo,\n  width,\n}: HeaderSegmentProps<T, ExtraInfo>) => {\n  return (\n    <View style={[styles.segment, { width }]}>\n      {columns.map(({ id, width, title, renderTitle }) => {\n        const columnId = `${viewId}_${id}`;\n\n        return (\n          <View style={[styles.segmentHeaderCell, { width }]} id={columnId} key={columnId}>\n            {renderTitle({ title, extraInfo, id })}\n          </View>\n        );\n      })}\n    </View>\n  );\n};\n\nconst findNextFocusableElement = (\n  sortedCellIds: string[],\n  currentCellIndex: number,\n  direction: -1 | 1,\n) => {\n  let index = currentCellIndex + direction;\n\n  while (index >= 0 && index < sortedCellIds.length) {\n    const nextCellId = sortedCellIds[index];\n\n    if (isNotNullish(nextCellId)) {\n      const previousCell = document.getElementById(nextCellId);\n\n      if (isNotNullish(previousCell)) {\n        const focusableElements = getFocusableElements(previousCell, false);\n        const nextFocusableElement =\n          direction === -1 ? last(focusableElements) : first(focusableElements);\n\n        if (isNotNullish(nextFocusableElement)) {\n          return nextFocusableElement;\n        }\n      }\n    }\n    index = index + direction;\n  }\n};\n\nconst EMPTY_COLUMNS: ColumnConfig<unknown, unknown>[] = [];\nconst ZERO = 0;\n\nexport const FixedListView = <T, ExtraInfo>({\n  data: originalData,\n  mode = \"tile\",\n  keyExtractor,\n  highlightedRowId,\n  rowHeight,\n  rowVerticalSpacing,\n  headerHeight,\n  renderThreshold = 1000,\n  stickedToStartColumns: initialStickedToStartColumns = EMPTY_COLUMNS,\n  columns: initialColumns,\n  stickedToEndColumns: initialStickedToEndColumns = EMPTY_COLUMNS,\n  extraInfo,\n  onEndReached,\n  onEndReachedThresholdPx = 200,\n  getRowLink,\n  renderEmptyList,\n  loading,\n}: FixedListViewProps<T, ExtraInfo>) => {\n  const [viewId] = useState(() => uuid());\n  // Those three refs are used to synchronize the horizontal scroll in the center columns\n  const centerHeadersRef = useRef<ScrollView | null>(null);\n  const centerColumnsRef = useRef<ScrollView | null>(null);\n  const horizontalScrollbarRef = useRef<ScrollView | null>(null);\n  const totalRowHeight = rowHeight + rowVerticalSpacing;\n  const totalHeight = originalData.length * totalRowHeight + headerHeight;\n  // It might seem off to use the range in state instead of storing scroll/layout and deriving it,\n  // but it saves a lot of render phases by allowing to bail out from rendering when the range doesn't change\n  const [\n    {\n      data,\n      range: [renderedRangeStartIndex, renderedRangeEndIndex],\n    },\n    setDataAndRenderRange,\n  ] = useState({ data: originalData, range: [0, 20] });\n\n  const startFocusAnchorRef = useRef<View | null>(null);\n  const endFocusAnchorRef = useRef<View | null>(null);\n\n  const [hasHorizontalScroll, setHasHorizontalScroll] = useState(false);\n  const [shouldAvoidStickyColumns, setShouldAvoidStickyColumns] = useState(false);\n  const [shouldShowStartGradient, setShouldShowStartGradient] = useState(false);\n  const [shouldShowEndGradient, setShouldShowEndGradient] = useState(true);\n  const [hoveredRow, setHoveredRow] = useState<string | undefined>(undefined);\n  const currentScrollY = useRef(0);\n  const lastKnownHeight = useRef(0);\n\n  const { stickedToStartColumns, columns, stickedToEndColumns } = useMemo(() => {\n    if (shouldAvoidStickyColumns) {\n      return {\n        stickedToStartColumns: [],\n        columns: [\n          ...initialStickedToStartColumns,\n          ...initialColumns,\n          ...initialStickedToEndColumns,\n        ],\n        stickedToEndColumns: [],\n      };\n    } else {\n      return {\n        stickedToStartColumns: initialStickedToStartColumns,\n        columns: initialColumns,\n        stickedToEndColumns: initialStickedToEndColumns,\n      };\n    }\n  }, [\n    initialStickedToStartColumns,\n    initialColumns,\n    initialStickedToEndColumns,\n    shouldAvoidStickyColumns,\n  ]);\n\n  const [isScrolled, setIsScrolled] = useState(false);\n\n  const removeHoveredRow = useCallback(() => {\n    setHoveredRow(undefined);\n  }, []);\n\n  const initialStickedToStartColumnsWidth = useMemo(\n    () => initialStickedToStartColumns.reduce((total, { width }) => total + width, 0),\n    [initialStickedToStartColumns],\n  );\n\n  const initialStickedToEndColumnsWidth = useMemo(\n    () => initialStickedToEndColumns.reduce((total, { width }) => total + width, 0),\n    [initialStickedToEndColumns],\n  );\n\n  const stickedToStartColumnsWidth = useMemo(\n    () => stickedToStartColumns.reduce((total, { width }) => total + width, 0),\n    [stickedToStartColumns],\n  );\n\n  const stickedToEndColumnsWidth = useMemo(\n    () => stickedToEndColumns.reduce((total, { width }) => total + width, 0),\n    [stickedToEndColumns],\n  );\n\n  const centerColumnsWidth = useMemo(\n    () => columns.reduce((total, { width }) => total + width, 0),\n    [columns],\n  );\n\n  const centerSegmentStyle = useMemo(\n    () => [\n      stickedToStartColumns.length === 0 && styles.rowLeftRadii,\n      stickedToEndColumns.length === 0 && styles.rowRightRadii,\n    ],\n    [stickedToStartColumns, stickedToEndColumns],\n  );\n\n  const createRowWrapper = useCallback(\n    ({\n      item,\n      absoluteIndex,\n      extraInfo,\n    }: {\n      item: T;\n      absoluteIndex: number;\n      extraInfo: ExtraInfo;\n    }) => {\n      const customLinkElement = getRowLink?.({ item, index: absoluteIndex, extraInfo });\n      return isNullish(customLinkElement) ? <View /> : customLinkElement;\n    },\n    [getRowLink],\n  );\n\n  const [backgroundRows, startRows, centerRows, endRows] = useMemo(() => {\n    const length = Math.max(0, renderedRangeEndIndex - renderedRangeStartIndex);\n\n    const backgroundRows = Array(length) as ReactNode[];\n    const startRows = Array(length) as ReactNode[];\n    const centerRows = Array(length) as ReactNode[];\n    const endRows = Array(length) as ReactNode[];\n\n    let index = -1;\n\n    while (++index < length) {\n      const absoluteIndex = renderedRangeStartIndex + index;\n      const item = data[absoluteIndex];\n\n      if (isNullish(item)) {\n        continue;\n      }\n\n      const key = keyExtractor(item, absoluteIndex);\n      const top = absoluteIndex * totalRowHeight;\n      const isHoveredRow = hoveredRow === key;\n      const isHighlightedRow = highlightedRowId === key;\n\n      const paddedIndex = String(absoluteIndex).padStart(10, \"0\");\n      const focusId = `${viewId}__Row_${paddedIndex}`;\n\n      backgroundRows[index] = (\n        <MemoizedRowBackground\n          key={key}\n          mode={mode}\n          isHovered={isHoveredRow}\n          isHighlighted={isHighlightedRow}\n          absoluteIndex={absoluteIndex}\n          top={top}\n          id={key}\n          rowHeight={rowHeight}\n          rowVerticalSpacing={rowVerticalSpacing}\n          onMouseEnter={setHoveredRow}\n          onMouseLeave={removeHoveredRow}\n        />\n      );\n\n      if (stickedToStartColumns.length > 0) {\n        startRows[index] = (\n          <MemoizedRowSegment<T, ExtraInfo>\n            key={key}\n            createRowWrapper={createRowWrapper}\n            focusId={focusId}\n            top={top}\n            totalRowHeight={totalRowHeight}\n            id={key}\n            style={styles.rowLeftRadii}\n            onMouseEnter={setHoveredRow}\n            onMouseLeave={removeHoveredRow}\n            segmentColumn=\"start\"\n            columns={stickedToStartColumns}\n            width={stickedToStartColumnsWidth}\n            item={item}\n            absoluteIndex={absoluteIndex}\n            rowVerticalSpacing={rowVerticalSpacing}\n            viewId={viewId}\n            isHovered={isHoveredRow}\n            extraInfo={extraInfo}\n          />\n        );\n      }\n\n      centerRows[index] = (\n        <MemoizedRowSegment<T, ExtraInfo>\n          key={key}\n          mode={mode}\n          createRowWrapper={createRowWrapper}\n          focusId={focusId}\n          top={top}\n          totalRowHeight={totalRowHeight}\n          minWidth={centerColumnsWidth}\n          id={key}\n          style={centerSegmentStyle}\n          onMouseEnter={setHoveredRow}\n          onMouseLeave={removeHoveredRow}\n          segmentColumn=\"center\"\n          columns={columns}\n          width={centerColumnsWidth}\n          item={item}\n          absoluteIndex={absoluteIndex}\n          rowVerticalSpacing={rowVerticalSpacing}\n          viewId={viewId}\n          isHovered={isHoveredRow}\n          extraInfo={extraInfo}\n        />\n      );\n\n      if (stickedToEndColumns.length > 0) {\n        endRows[index] = (\n          <MemoizedRowSegment<T, ExtraInfo>\n            key={key}\n            createRowWrapper={createRowWrapper}\n            focusId={focusId}\n            top={top}\n            totalRowHeight={totalRowHeight}\n            id={key}\n            style={styles.rowLeftRadii}\n            onMouseEnter={setHoveredRow}\n            onMouseLeave={removeHoveredRow}\n            segmentColumn=\"end\"\n            columns={stickedToEndColumns}\n            width={stickedToEndColumnsWidth}\n            item={item}\n            absoluteIndex={absoluteIndex}\n            rowVerticalSpacing={rowVerticalSpacing}\n            viewId={viewId}\n            isHovered={isHoveredRow}\n            extraInfo={extraInfo}\n          />\n        );\n      }\n    }\n\n    return [backgroundRows, startRows, centerRows, endRows];\n  }, [\n    data,\n    renderedRangeStartIndex,\n    renderedRangeEndIndex,\n    keyExtractor,\n    highlightedRowId,\n    rowHeight,\n    totalRowHeight,\n    columns,\n    stickedToEndColumns,\n    stickedToStartColumns,\n    viewId,\n    stickedToStartColumnsWidth,\n    centerColumnsWidth,\n    stickedToEndColumnsWidth,\n    hoveredRow,\n    rowVerticalSpacing,\n    extraInfo,\n    removeHoveredRow,\n    centerSegmentStyle,\n    createRowWrapper,\n    mode,\n  ]);\n\n  // Used to fix some scrollbar behavior. See `main.css`.\n  useLayoutEffect(() => {\n    if (centerHeadersRef.current instanceof Element) {\n      centerHeadersRef.current.setAttribute(\"data-hide-scrollbar\", String(true));\n    }\n    if (centerColumnsRef.current instanceof Element) {\n      centerColumnsRef.current.setAttribute(\"data-hide-scrollbar\", String(true));\n    }\n    if (horizontalScrollbarRef.current instanceof Element) {\n      horizontalScrollbarRef.current.setAttribute(\"data-force-scrollbar\", String(true));\n    }\n  }, []);\n\n  // To synchronize scrolls, we keep track of the initiator in order to ignore the scroll events\n  // we provoke ourselves with the sync.\n  const lastHorizontalScroll = useRef<{\n    initiator: \"headers\" | \"columns\" | \"scrollbar\";\n    date: number;\n  }>({\n    initiator: \"columns\",\n    date: 0,\n  });\n\n  useEffect(() => {\n    if (\n      isNotNullish(centerHeadersRef.current) &&\n      isNotNullish(centerColumnsRef.current) &&\n      isNotNullish(horizontalScrollbarRef.current)\n    ) {\n      const SCROLL_THRESHOLD_MS = 500;\n      const centerColumns = centerColumnsRef.current as unknown as HTMLElement;\n      const centerHeaders = centerHeadersRef.current as unknown as HTMLElement;\n      const horizontalScrollbar = horizontalScrollbarRef.current as unknown as HTMLElement;\n      const onColumnsScroll = () => {\n        const now = Date.now();\n        if (\n          lastHorizontalScroll.current.initiator === \"columns\" ||\n          now - lastHorizontalScroll.current.date > SCROLL_THRESHOLD_MS\n        ) {\n          const scrollLeft = centerColumns.scrollLeft;\n          setShouldShowStartGradient(scrollLeft > 0);\n          setShouldShowEndGradient(\n            centerColumns.scrollWidth - HORIZONTAL_SAFE_AREA * 2 >=\n              scrollLeft + centerColumns.clientWidth,\n          );\n          centerHeaders.scrollLeft = scrollLeft;\n          horizontalScrollbar.scrollLeft = scrollLeft;\n          lastHorizontalScroll.current = { initiator: \"columns\", date: now };\n        }\n      };\n      const onHeadersScroll = () => {\n        const now = Date.now();\n        if (\n          lastHorizontalScroll.current.initiator === \"headers\" ||\n          now - lastHorizontalScroll.current.date > SCROLL_THRESHOLD_MS\n        ) {\n          const scrollLeft = centerHeaders.scrollLeft;\n          setShouldShowStartGradient(scrollLeft > 0);\n          setShouldShowEndGradient(\n            centerHeaders.scrollWidth - HORIZONTAL_SAFE_AREA * 2 >=\n              scrollLeft + centerHeaders.clientWidth,\n          );\n          centerColumns.scrollLeft = scrollLeft;\n          horizontalScrollbar.scrollLeft = scrollLeft;\n          lastHorizontalScroll.current = { initiator: \"headers\", date: now };\n        }\n      };\n      const onScrollbarScroll = () => {\n        const now = Date.now();\n        if (\n          lastHorizontalScroll.current.initiator === \"scrollbar\" ||\n          now - lastHorizontalScroll.current.date > SCROLL_THRESHOLD_MS\n        ) {\n          const scrollLeft = horizontalScrollbar.scrollLeft;\n          setShouldShowStartGradient(scrollLeft > 0);\n          setShouldShowEndGradient(\n            horizontalScrollbar.scrollWidth - HORIZONTAL_SAFE_AREA * 2 >=\n              scrollLeft + horizontalScrollbar.clientWidth,\n          );\n          centerHeaders.scrollLeft = scrollLeft;\n          centerColumns.scrollLeft = scrollLeft;\n          lastHorizontalScroll.current = { initiator: \"scrollbar\", date: now };\n        }\n      };\n      centerColumns.addEventListener(\"scroll\", onColumnsScroll, { passive: true });\n      centerHeaders.addEventListener(\"scroll\", onHeadersScroll, { passive: true });\n      horizontalScrollbar.addEventListener(\"scroll\", onScrollbarScroll, { passive: true });\n      return () => {\n        centerColumns.removeEventListener(\"scroll\", onColumnsScroll);\n        centerHeaders.removeEventListener(\"scroll\", onHeadersScroll);\n        horizontalScrollbar.removeEventListener(\"scroll\", onScrollbarScroll);\n      };\n    }\n  }, []);\n\n  const onKeyDown = useCallback(\n    (event: NativeSyntheticEvent<React.KeyboardEvent>) => {\n      const target = event.nativeEvent.target as Element;\n      const currentTarget = event.nativeEvent.currentTarget;\n      const currentCell = target.closest(`[id^=\"${viewId}__Row\"]`);\n      const currentCellId = currentCell?.id;\n      if (event.nativeEvent.key === \"Tab\" && isNotNullish(currentCell)) {\n        const focusableElements = getFocusableElements(currentCell, false);\n        const firstFocusableElement = first(focusableElements);\n        const lastFocusableElement = last(focusableElements);\n        const sortedCellIds = Array.from(\n          currentTarget.querySelectorAll(`[id^=\"${viewId}__Row\"]`),\n          item => item.id,\n        ).sort();\n        const currentCellIndex = sortedIndexOf(sortedCellIds, currentCellId);\n        const isTargetFirst = isNullish(firstFocusableElement) || firstFocusableElement === target;\n        const isTargetLast = isNullish(lastFocusableElement) || lastFocusableElement === target;\n        if (isTargetFirst && event.nativeEvent.shiftKey && first(sortedCellIds) !== currentCellId) {\n          const lastFocusableElement = findNextFocusableElement(\n            sortedCellIds,\n            currentCellIndex,\n            -1,\n          );\n          if (isNotNullish(lastFocusableElement)) {\n            event.preventDefault();\n            lastFocusableElement.focus();\n          } else {\n            event.preventDefault();\n            startFocusAnchorRef.current?.focus();\n          }\n        }\n        if (isTargetLast && !event.nativeEvent.shiftKey && last(sortedCellIds) !== currentCellId) {\n          const firstFocusableElement = findNextFocusableElement(\n            sortedCellIds,\n            currentCellIndex,\n            1,\n          );\n          if (isNotNullish(firstFocusableElement)) {\n            event.preventDefault();\n            firstFocusableElement.focus();\n          } else {\n            event.preventDefault();\n            endFocusAnchorRef.current?.focus();\n          }\n        }\n      }\n    },\n    [viewId],\n  );\n\n  useEffect(() => {\n    const renderedRangeStartIndex = Math.max(\n      0,\n      Math.floor((currentScrollY.current - renderThreshold) / totalRowHeight),\n    );\n\n    const renderedRangeEndIndex = Math.min(\n      originalData.length,\n      renderedRangeStartIndex +\n        Math.ceil((lastKnownHeight.current + renderThreshold * 2) / totalRowHeight),\n    );\n    setDataAndRenderRange(prevRenderRange => {\n      const {\n        data,\n        range: [prevRenderedRangeStartIndex, prevRenderedRangeEndIndex],\n      } = prevRenderRange;\n      if (\n        prevRenderedRangeStartIndex === renderedRangeStartIndex &&\n        prevRenderedRangeEndIndex === renderedRangeEndIndex &&\n        data === originalData\n      ) {\n        return prevRenderRange;\n      }\n      return { data: originalData, range: [renderedRangeStartIndex, renderedRangeEndIndex] };\n    });\n  }, [originalData, renderThreshold, totalRowHeight]);\n\n  const onLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { height, width },\n      },\n    }: LayoutChangeEvent) => {\n      lastKnownHeight.current = height;\n      const renderedRangeStartIndex = Math.max(\n        0,\n        Math.floor((currentScrollY.current - renderThreshold) / totalRowHeight),\n      );\n      const renderedRangeEndIndex = Math.min(\n        originalData.length,\n        renderedRangeStartIndex + Math.ceil((height + renderThreshold * 2) / totalRowHeight),\n      );\n      setDataAndRenderRange(prevRenderRange => {\n        const {\n          data,\n          range: [prevRenderedRangeStartIndex, prevRenderedRangeEndIndex],\n        } = prevRenderRange;\n        if (\n          prevRenderedRangeStartIndex === renderedRangeStartIndex &&\n          prevRenderedRangeEndIndex === renderedRangeEndIndex &&\n          data === originalData\n        ) {\n          return prevRenderRange;\n        }\n        return { data: originalData, range: [renderedRangeStartIndex, renderedRangeEndIndex] };\n      });\n\n      if (\n        isNotNullish(onEndReached) &&\n        !hasEndReachedBeenCalled.current &&\n        height >= totalHeight - onEndReachedThresholdPx\n      ) {\n        hasEndReachedBeenCalled.current = true;\n        onEndReached();\n      }\n      setShouldAvoidStickyColumns(\n        width - (initialStickedToStartColumnsWidth + initialStickedToEndColumnsWidth) < 300,\n      );\n    },\n    [\n      originalData,\n      renderThreshold,\n      totalRowHeight,\n      onEndReached,\n      onEndReachedThresholdPx,\n      totalHeight,\n      initialStickedToStartColumnsWidth,\n      initialStickedToEndColumnsWidth,\n    ],\n  );\n\n  const scrollTimeoutRef = useRef<number | undefined>(undefined);\n  const scrollContentsRef = useRef<View | null>(null);\n\n  const hasEndReachedBeenCalled = useRef(false);\n\n  useEffect(() => {\n    if (\n      isNotNullish(onEndReached) &&\n      !hasEndReachedBeenCalled.current &&\n      lastKnownHeight.current >= totalHeight - onEndReachedThresholdPx\n    ) {\n      hasEndReachedBeenCalled.current = true;\n      onEndReached();\n      return;\n    }\n\n    hasEndReachedBeenCalled.current = false;\n  }, [data, onEndReached, onEndReachedThresholdPx, totalHeight]);\n\n  const onScroll = useCallback(\n    ({\n      nativeEvent: {\n        contentOffset: { y },\n        layoutMeasurement: { height },\n        contentSize: { height: contentHeight },\n      },\n    }: NativeSyntheticEvent<NativeScrollEvent>) => {\n      setIsScrolled(y > 0);\n\n      lastKnownHeight.current = height;\n      currentScrollY.current = y;\n      if (isNotNullish(scrollTimeoutRef.current)) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n      if (scrollContentsRef.current instanceof HTMLElement) {\n        scrollContentsRef.current.style.pointerEvents = \"none\";\n      }\n      scrollTimeoutRef.current = window.setTimeout(() => {\n        if (scrollContentsRef.current instanceof HTMLElement) {\n          scrollContentsRef.current.style.pointerEvents = \"auto\";\n        }\n      }, 100);\n\n      const renderedRangeStartIndex = Math.max(\n        0,\n        Math.floor((currentScrollY.current - renderThreshold) / totalRowHeight),\n      );\n\n      const renderedRangeEndIndex = Math.min(\n        data.length,\n        renderedRangeStartIndex + Math.ceil((height + renderThreshold * 2) / totalRowHeight),\n      );\n\n      setDataAndRenderRange(prevRenderRange => {\n        const {\n          data,\n          range: [prevRenderedRangeStartIndex, prevRenderedRangeEndIndex],\n        } = prevRenderRange;\n\n        return prevRenderedRangeStartIndex === renderedRangeStartIndex &&\n          prevRenderedRangeEndIndex === renderedRangeEndIndex &&\n          data === data\n          ? prevRenderRange\n          : { data, range: [renderedRangeStartIndex, renderedRangeEndIndex] };\n      });\n\n      if (\n        isNotNullish(onEndReached) &&\n        !hasEndReachedBeenCalled.current &&\n        y + height >= contentHeight - onEndReachedThresholdPx\n      ) {\n        hasEndReachedBeenCalled.current = true;\n        onEndReached();\n      }\n    },\n    [data.length, renderThreshold, totalRowHeight, onEndReached, onEndReachedThresholdPx],\n  );\n\n  const onCenterTrackLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { width },\n      },\n    }: LayoutChangeEvent) => {\n      setHasHorizontalScroll(centerColumnsWidth > width);\n    },\n    [centerColumnsWidth],\n  );\n\n  const isLoading = isNotNullish(loading) && loading.isLoading;\n\n  return (\n    <View style={styles.root}>\n      <View ref={startFocusAnchorRef} tabIndex={0} />\n\n      <ScrollView\n        onKeyDown={onKeyDown}\n        onLayout={onLayout}\n        onScroll={onScroll}\n        scrollEventThrottle={32}\n        style={[styles.container, mode === \"tile\" && styles.containerTile]}\n        contentContainerStyle={[\n          styles.contentContainer,\n          {\n            height:\n              totalHeight +\n              SCROLLBAR_RESERVED_SPACE +\n              (isLoading ? loading.count * (rowHeight + rowVerticalSpacing) : 0),\n          },\n        ]}\n      >\n        <View\n          aria-busy={isLoading}\n          style={[\n            styles.loadingPlaceholder,\n            {\n              top: totalHeight,\n              marginLeft: HORIZONTAL_SAFE_AREA * 2,\n              marginRight: HORIZONTAL_SAFE_AREA * 2,\n            },\n          ]}\n        >\n          {isLoading\n            ? match(mode)\n                .with(\"tile\", () => (\n                  <FixedListViewPlaceholder\n                    count={loading.count}\n                    rowHeight={rowHeight}\n                    rowVerticalSpacing={rowVerticalSpacing}\n                    paddingHorizontal={0}\n                  />\n                ))\n                .with(\"plain\", () => (\n                  <PlainListViewPlaceholder\n                    count={loading.count}\n                    rowHeight={rowHeight}\n                    rowVerticalSpacing={rowVerticalSpacing}\n                    paddingHorizontal={0}\n                  />\n                ))\n                .exhaustive()\n            : null}\n        </View>\n\n        <View style={[styles.backgroundRows, { top: headerHeight }]}>{backgroundRows}</View>\n\n        <View style={styles.scrollContentContainer} ref={scrollContentsRef}>\n          {stickedToStartColumns.length > 0 ? (\n            <View\n              style={[\n                styles.stickyColumn,\n                {\n                  width: stickedToStartColumnsWidth + HORIZONTAL_SAFE_AREA,\n                  paddingLeft: HORIZONTAL_SAFE_AREA,\n                },\n              ]}\n            >\n              <View style={[styles.headingSegment, { height: headerHeight }]}>\n                <HeaderSegment\n                  columns={stickedToStartColumns}\n                  extraInfo={extraInfo}\n                  viewId={viewId}\n                  width={stickedToStartColumnsWidth}\n                />\n\n                <View style={styles.stickyColumnStartOverflow} />\n                <View style={[styles.topGradient, isScrolled && styles.visibleTopGradient]} />\n              </View>\n\n              <View style={[styles.stickyRow, { height: totalHeight }]}>{startRows}</View>\n            </View>\n          ) : null}\n\n          <View\n            style={[\n              styles.centerColumnsContainer,\n              {\n                paddingLeft: stickedToStartColumns.length === 0 ? HORIZONTAL_SAFE_AREA : ZERO,\n                paddingRight: stickedToEndColumns.length === 0 ? HORIZONTAL_SAFE_AREA : ZERO,\n              },\n            ]}\n          >\n            <View style={[styles.headingSegment, { height: headerHeight }]}>\n              <ScrollView\n                ref={centerHeadersRef}\n                horizontal={true}\n                onLayout={onCenterTrackLayout}\n                style={styles.centerColumns}\n                contentContainerStyle={{\n                  minWidth:\n                    centerColumnsWidth +\n                    (stickedToStartColumns.length === 0 ? HORIZONTAL_SAFE_AREA : 0) +\n                    (stickedToEndColumns.length === 0 ? HORIZONTAL_SAFE_AREA : 0),\n                }}\n              >\n                <HeaderSegment\n                  columns={columns}\n                  extraInfo={extraInfo}\n                  viewId={viewId}\n                  width={centerColumnsWidth}\n                />\n              </ScrollView>\n\n              <View style={[styles.topGradient, isScrolled && styles.visibleTopGradient]} />\n            </View>\n\n            <ScrollView\n              horizontal={true}\n              ref={centerColumnsRef}\n              style={styles.centerColumns}\n              contentContainerStyle={[\n                styles.centerColumnsContentContainer,\n                {\n                  minWidth:\n                    centerColumnsWidth +\n                    (stickedToStartColumns.length === 0 ? HORIZONTAL_SAFE_AREA : 0) +\n                    (stickedToEndColumns.length === 0 ? HORIZONTAL_SAFE_AREA : 0),\n                },\n              ]}\n            >\n              {centerRows}\n            </ScrollView>\n\n            <ScrollView\n              ref={horizontalScrollbarRef}\n              horizontal={true}\n              style={styles.horizontalScrollbar}\n              contentContainerStyle={{\n                minWidth:\n                  centerColumnsWidth +\n                  (stickedToStartColumns.length === 0 ? HORIZONTAL_SAFE_AREA : 0) +\n                  (stickedToEndColumns.length === 0 ? HORIZONTAL_SAFE_AREA : 0),\n              }}\n            />\n\n            {stickedToStartColumns.length > 0 && hasHorizontalScroll ? (\n              <View\n                style={[\n                  styles.leftToRightGradient,\n                  {\n                    maxHeight: data.length * totalRowHeight,\n                    top: headerHeight,\n                    bottom: SCROLLBAR_RESERVED_SPACE + rowVerticalSpacing / 2,\n                  },\n                  shouldShowStartGradient && styles.visibleGradient,\n                ]}\n              ></View>\n            ) : null}\n\n            {stickedToEndColumns.length > 0 && hasHorizontalScroll ? (\n              <View\n                style={[\n                  styles.rightToLeftGradient,\n                  {\n                    maxHeight: data.length * totalRowHeight,\n                    top: headerHeight,\n                    bottom: SCROLLBAR_RESERVED_SPACE + rowVerticalSpacing / 2,\n                  },\n                  shouldShowEndGradient && styles.visibleGradient,\n                ]}\n              ></View>\n            ) : null}\n          </View>\n\n          {stickedToEndColumns.length > 0 ? (\n            <View\n              style={[\n                styles.stickyColumn,\n                {\n                  width: stickedToEndColumnsWidth + HORIZONTAL_SAFE_AREA,\n                  paddingRight: HORIZONTAL_SAFE_AREA,\n                },\n              ]}\n            >\n              <View style={[styles.headingSegment, { height: headerHeight }]}>\n                <View style={styles.stickyColumnEndOverflow} />\n\n                <HeaderSegment\n                  columns={stickedToEndColumns}\n                  extraInfo={extraInfo}\n                  viewId={viewId}\n                  width={stickedToEndColumnsWidth}\n                />\n\n                <View style={[styles.topGradient, isScrolled && styles.visibleTopGradient]} />\n              </View>\n\n              <View style={[styles.stickyRow, { height: totalHeight }]}>{endRows}</View>\n            </View>\n          ) : null}\n        </View>\n      </ScrollView>\n\n      {data.length === 0 && isNotNullish(renderEmptyList) && !isLoading ? (\n        <View style={styles.emptyListContainer}>{renderEmptyList()}</View>\n      ) : null}\n\n      <View ref={endFocusAnchorRef} tabIndex={0} />\n    </View>\n  );\n};\n\ntype PlaceholderProps = {\n  count: number;\n  rowHeight: number;\n  rowVerticalSpacing: number;\n  groupHeaderHeight?: number;\n  headerHeight?: number;\n  paddingHorizontal?: number;\n};\n\nexport const FixedListViewPlaceholder = ({\n  count,\n  rowHeight,\n  rowVerticalSpacing,\n  groupHeaderHeight,\n  headerHeight,\n  paddingHorizontal = HORIZONTAL_SAFE_AREA,\n}: PlaceholderProps) => {\n  const totalRowHeight = rowHeight + rowVerticalSpacing;\n\n  return (\n    <View style={[styles.container, styles.containerTile, { paddingHorizontal }]}>\n      {isNotNullish(headerHeight) ? <View style={{ height: headerHeight }} /> : null}\n      {isNotNullish(groupHeaderHeight) ? <View style={{ height: headerHeight }} /> : null}\n\n      <View>\n        {Array.from({ length: count }, (_, index) => {\n          const top = index * totalRowHeight + rowVerticalSpacing / 2;\n\n          return (\n            <Fragment key={String(index)}>\n              <MemoizedRowBackground\n                isHovered={false}\n                isHighlighted={false}\n                absoluteIndex={index}\n                top={top}\n                rowVerticalSpacing={rowVerticalSpacing}\n                id={String(index)}\n                rowHeight={rowHeight}\n                onMouseEnter={noop}\n                onMouseLeave={noop}\n                mode=\"tile\"\n              />\n\n              <View\n                style={[styles.placeholderRowContainer, { top, height: totalRowHeight }]}\n                key={String(index)}\n              >\n                <View style={styles.placeholderRow} />\n                <Space width={32} />\n                <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                <Space width={32} />\n\n                <View style={styles.placeholderRowEnd}>\n                  <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                </View>\n              </View>\n            </Fragment>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\nexport const PlainListViewPlaceholder = ({\n  count,\n  rowHeight,\n  rowVerticalSpacing,\n  groupHeaderHeight,\n  headerHeight,\n  paddingHorizontal = HORIZONTAL_SAFE_AREA,\n}: PlaceholderProps) => {\n  const totalRowHeight = rowHeight + rowVerticalSpacing;\n\n  return (\n    <View style={[styles.container, { paddingHorizontal }]}>\n      {isNotNullish(headerHeight) ? <View style={{ height: headerHeight }} /> : null}\n      {isNotNullish(groupHeaderHeight) ? <View style={{ height: headerHeight }} /> : null}\n\n      <View>\n        {Array.from({ length: count }, (_, index) => {\n          const top = index * totalRowHeight + rowVerticalSpacing / 2;\n\n          return (\n            <Fragment key={String(index)}>\n              <MemoizedRowBackground\n                isHovered={false}\n                isHighlighted={false}\n                absoluteIndex={index}\n                top={top}\n                rowVerticalSpacing={rowVerticalSpacing}\n                id={String(index)}\n                rowHeight={rowHeight}\n                onMouseEnter={noop}\n                onMouseLeave={noop}\n                mode=\"plain\"\n              />\n\n              <View\n                style={[\n                  styles.placeholderRowContainer,\n                  styles.placeholderRowContainerPlain,\n                  { top, height: totalRowHeight },\n                ]}\n                key={String(index)}\n              >\n                <View style={styles.placeholderRow} />\n                <Space width={32} />\n                <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                <Space width={32} />\n\n                <View style={styles.placeholderRowEnd}>\n                  <View style={[styles.placeholderRow, styles.smallPlaceholderRow]} />\n                </View>\n              </View>\n            </Fragment>\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\ntype EmptyProps = {\n  icon: IconName;\n  borderedIcon?: boolean;\n  title?: string;\n  subtitle?: ReactNode;\n  children?: ReactNode;\n};\n\nexport const FixedListViewEmpty = ({\n  icon,\n  borderedIcon = false,\n  title,\n  subtitle,\n  children,\n}: EmptyProps) => (\n  <View style={styles.emptyList}>\n    {borderedIcon ? (\n      <BorderedIcon name={icon} />\n    ) : (\n      <Icon name={icon} size={96} color={colors.current.primary} />\n    )}\n\n    <Space height={32} />\n\n    {isNotNullish(title) && (\n      <LakeHeading level={3} variant=\"h3\" color={colors.gray[700]} align=\"center\">\n        {title}\n      </LakeHeading>\n    )}\n\n    <Space height={8} />\n\n    {isNotNullish(subtitle) && <LakeText align=\"center\">{subtitle}</LakeText>}\n\n    <Space height={8} />\n\n    {children}\n  </View>\n);\n"],"names":["styles","StyleSheet","spacings","visuallyHiddenStyle","colors","SimpleHeaderCell","text","sort","justifyContent","onPress","sortActive","isNotNullish","jsx","Pressable","match","isNullish","hovered","View","jsxs","Box","LakeText","Fragment","Space","Icon","ColorPatchCell","isHovered","alternativeText","color","SimpleTitleCell","isHighlighted","SimpleRegularTextCell","variant","textAlign","CopyableRegularTextCell","copyWording","copiedWording","visibleState","setVisibleState","useState","useCallback","event","Clipboard","LakeTooltip","BalanceCell","value","currency","originalValue","formatCurrency","LinkCell","children","external","StartAlignedCell","CenteredCell","EndAlignedCell","CellAction","HORIZONTAL_SAFE_AREA","SCROLLBAR_RESERVED_SPACE","backgroundColor","invariantColors","shadows","radii","RowBackground","absoluteIndex","id","top","rowHeight","rowVerticalSpacing","onMouseEnter","onMouseLeave","mode","containerRef","useRef","useHover","MemoizedRowBackground","memo","SEGMENTS_MAP","RowSegment","columns","item","style","viewId","segmentColumn","width","extraInfo","createRowWrapper","focusId","totalRowHeight","minWidth","wrapper","cloneElement","id2","width2","renderCell","index","columnId","paddedIndex","paddedCellIndex","focusId2","MemoizedRowSegment","HeaderSegment","title","renderTitle","findNextFocusableElement","sortedCellIds","currentCellIndex","direction","nextCellId","previousCell","focusableElements","getFocusableElements","nextFocusableElement","last","first","EMPTY_COLUMNS","ZERO","FixedListView","originalData","keyExtractor","highlightedRowId","headerHeight","renderThreshold","initialStickedToStartColumns","initialColumns","initialStickedToEndColumns","onEndReached","onEndReachedThresholdPx","getRowLink","renderEmptyList","loading","uuid","centerHeadersRef","centerColumnsRef","horizontalScrollbarRef","totalHeight","data","renderedRangeStartIndex","renderedRangeEndIndex","setDataAndRenderRange","startFocusAnchorRef","endFocusAnchorRef","hasHorizontalScroll","setHasHorizontalScroll","shouldAvoidStickyColumns","setShouldAvoidStickyColumns","shouldShowStartGradient","setShouldShowStartGradient","shouldShowEndGradient","setShouldShowEndGradient","hoveredRow","setHoveredRow","currentScrollY","lastKnownHeight","stickedToStartColumns","stickedToEndColumns","useMemo","isScrolled","setIsScrolled","removeHoveredRow","initialStickedToStartColumnsWidth","total","initialStickedToEndColumnsWidth","stickedToStartColumnsWidth","stickedToEndColumnsWidth","centerColumnsWidth","centerSegmentStyle","extraInfo2","customLinkElement","backgroundRows","startRows","centerRows","endRows","length","backgroundRows2","startRows2","centerRows2","endRows2","key","isHoveredRow","isHighlightedRow","useLayoutEffect","lastHorizontalScroll","useEffect","centerColumns","centerHeaders","horizontalScrollbar","onColumnsScroll","now","scrollLeft","onHeadersScroll","onScrollbarScroll","onKeyDown","target","currentTarget","currentCell","currentCellId","firstFocusableElement","lastFocusableElement","sortedIndexOf","isTargetFirst","isTargetLast","lastFocusableElement2","_a","firstFocusableElement2","_b","renderedRangeStartIndex2","renderedRangeEndIndex2","prevRenderRange","data2","prevRenderedRangeStartIndex","prevRenderedRangeEndIndex","onLayout","height","hasEndReachedBeenCalled","scrollTimeoutRef","scrollContentsRef","onScroll","y","contentHeight","onCenterTrackLayout","isLoading","ScrollView","FixedListViewPlaceholder","PlainListViewPlaceholder","count","groupHeaderHeight","paddingHorizontal","_","noop","FixedListViewEmpty","icon","borderedIcon","subtitle","BorderedIcon","LakeHeading"],"mappings":"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"}