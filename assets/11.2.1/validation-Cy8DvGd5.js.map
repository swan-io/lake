{"version":3,"file":"validation-Cy8DvGd5.js","sources":["../../../packages/shared-business/src/utils/date.ts","../../../packages/shared-business/src/utils/validation.ts"],"sourcesContent":["import dayjs from \"dayjs\";\n\nexport const decodeBirthDate = (value: string) => {\n  const date = dayjs.utc(value, \"YYYY-MM-DD\", true);\n  return date.isValid() ? date.format(\"DD/MM/YYYY\") : \"\";\n};\n\nexport const encodeBirthDate = (value: string) => {\n  const date = dayjs.utc(value, \"DD/MM/YYYY\", true);\n  return date.isValid() ? date.format(\"YYYY-MM-DD\") : \"\";\n};\n\nexport type ExtractedDate = {\n  day: string;\n  month: string;\n  year: string;\n};\n\nexport const extractDate = (value: string): ExtractedDate | undefined => {\n  const date = dayjs.utc(value, \"YYYY-MM-DD\", true);\n\n  if (date.isValid()) {\n    return {\n      day: date.format(\"DD\"),\n      month: date.format(\"MM\"),\n      year: date.format(\"YYYY\"),\n    };\n  }\n};\n\nexport const formatExtractedDate = (date: ExtractedDate): string => {\n  const day = date.day.trim().padStart(2, \"0\");\n  const month = date.month.trim().padStart(2, \"0\");\n  const year = date.year.trim().padStart(4, \"0\");\n\n  return `${year}-${month}-${day}`;\n};\n","import { noop } from \"@swan-io/lake/src/utils/function\";\nimport { isNullish } from \"@swan-io/lake/src/utils/nullish\";\nimport { Validator } from \"@swan-io/use-form\";\nimport dayjs from \"dayjs\";\nimport { isValid as isValidIban } from \"iban\";\nimport { match } from \"ts-pattern\";\nimport { ExtractedDate, formatExtractedDate } from \"./date\";\nimport { t } from \"./i18n\";\nimport { AccountCountry } from \"./templateTranslations\";\n\nconst EMAIL_REGEX = /^[A-Z0-9_+.-]*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9-]*\\.)+[A-Z]{2,}$/i;\nconst VAT_NUMBER_REGEX =\n  /^((AT)?U[0-9]{8}|(BE)?0[0-9]{9}|(BG)?[0-9]{9,10}|(CY)?[0-9]{8}L|(CZ)?[0-9]{8,10}|(DE)?[0-9]{9}|(DK)?[0-9]{8}|(EE)?[0-9]{9}|(EL|GR)?[0-9]{9}|(ES)?[0-9A-Z][0-9]{7}[0-9A-Z]|(FI)?[0-9]{8}|(FR)?[0-9A-Z]{2}[0-9]{9}|(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})|(HU)?[0-9]{8}|(IE)?[0-9]S[0-9]{5}L|(IT)?[0-9]{11}|(LT)?([0-9]{9}|[0-9]{12})|(LU)?[0-9]{8}|(LV)?[0-9]{11}|(MT)?[0-9]{8}|(NL)?[0-9]{9}B[0-9]{2}|(PL)?[0-9]{10}|(PT)?[0-9]{9}|(RO)?[0-9]{2,10}|(SE)?[0-9]{12}|(SI)?[0-9]{8}|(SK)?[0-9]{10})$/;\n\n// (AT)?U[0-9]{8} |                              # Austria\n// (BE)?0[0-9]{9} |                              # Belgium\n// (BG)?[0-9]{9,10} |                            # Bulgaria\n// (CY)?[0-9]{8}L |                              # Cyprus\n// (CZ)?[0-9]{8,10} |                            # Czech Republic\n// (DE)?[0-9]{9} |                               # Germany\n// (DK)?[0-9]{8} |                               # Denmark\n// (EE)?[0-9]{9} |                               # Estonia\n// (EL|GR)?[0-9]{9} |                            # Greece\n// (ES)?[0-9A-Z][0-9]{7}[0-9A-Z] |               # Spain\n// (FI)?[0-9]{8} |                               # Finland\n// (FR)?[0-9A-Z]{2}[0-9]{9} |                    # France\n// (GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3}) | # United Kingdom\n// (HU)?[0-9]{8} |                               # Hungary\n// (IE)?[0-9]S[0-9]{5}L |                        # Ireland\n// (IT)?[0-9]{11} |                              # Italy\n// (LT)?([0-9]{9}|[0-9]{12}) |                   # Lithuania\n// (LU)?[0-9]{8} |                               # Luxembourg\n// (LV)?[0-9]{11} |                              # Latvia\n// (MT)?[0-9]{8} |                               # Malta\n// (NL)?[0-9]{9}B[0-9]{2} |                      # Netherlands\n// (PL)?[0-9]{10} |                              # Poland\n// (PT)?[0-9]{9} |                               # Portugal\n// (RO)?[0-9]{2,10} |                            # Romania\n// (SE)?[0-9]{12} |                              # Sweden\n// (SI)?[0-9]{8} |                               # Slovenia\n// (SK)?[0-9]{10}                                # Slovakia\n\nexport const isValidVatNumber = (maybeVat: string) => {\n  return VAT_NUMBER_REGEX.test(maybeVat);\n};\n\nexport const isValidEmail = (maybeEmail: string) => {\n  return EMAIL_REGEX.test(maybeEmail);\n};\n\nexport const validateNullableRequired: Validator<string | undefined> = value => {\n  if (value == null || !value) {\n    return t(\"error.requiredField\");\n  }\n};\n\nexport const validateRequired: Validator<string> = value => {\n  if (!value) {\n    return t(\"error.requiredField\");\n  }\n};\n\nexport const validateBooleanRequired: Validator<boolean | undefined> = value => {\n  if (value == null || !value) {\n    return t(\"error.requiredField\");\n  }\n};\n\nexport const validateIndividualTaxNumber =\n  (accountCountry: AccountCountry): Validator<string | undefined> =>\n  value => {\n    if (value == null || !value) {\n      return;\n    }\n\n    return match(accountCountry)\n      .with(\"DEU\", () => {\n        // accept 11 digits\n        if (!/^\\d{11}$/.test(value)) {\n          return t(\"common.form.invalidTaxIdentificationNumber\");\n        }\n      })\n      .with(\"ESP\", () => {\n        // accept 9 characters\n        if (!/^[a-zA-Z0-9]{9}$/.test(value)) {\n          return t(\"common.form.invalidTaxIdentificationNumber\");\n        }\n      })\n      .with(\"ITA\", () => {\n        // accept 16 characters\n        if (!/^[a-zA-Z0-9]{16}$/.test(value)) {\n          return t(\"common.form.invalidTaxIdentificationNumber\");\n        }\n      })\n      .otherwise(noop);\n  };\n\nexport const validateCompanyTaxNumber =\n  (accountCountry: AccountCountry): Validator<string | undefined> =>\n  value => {\n    if (value == null || !value) {\n      return;\n    }\n\n    return match(accountCountry)\n      .with(\"DEU\", () => {\n        // accept 10 or 11 digits\n        if (!/^\\d{10,11}$/.test(value)) {\n          return t(\"common.form.invalidTaxIdentificationNumber\");\n        }\n      })\n      .with(\"ESP\", () => {\n        // accept 9 characters\n        if (!/^[a-zA-Z0-9]{9}$/.test(value)) {\n          return t(\"common.form.invalidTaxIdentificationNumber\");\n        }\n      })\n      .with(\"ITA\", () => {\n        // accept 16 characters\n        if (!/^[a-zA-Z0-9]{16}$/.test(value)) {\n          return t(\"common.form.invalidTaxIdentificationNumber\");\n        }\n      })\n      .otherwise(noop);\n  };\n\nexport { printFormat as printIbanFormat } from \"iban\";\n\nexport const validateIban = (iban: string) => {\n  if (!isValidIban(iban)) {\n    return t(\"error.iban.invalid\");\n  }\n};\n\nexport const validateBirthdate = (value: ExtractedDate | undefined) => {\n  if (isNullish(value)) {\n    return t(\"validation.invalidBirthDate\");\n  }\n  const date = dayjs.utc(formatExtractedDate(value), \"YYYY-MM-DD\", true);\n\n  const isBirthdateOver150years = date.isBefore(dayjs.utc().subtract(100, \"years\"));\n  const isBirthdateWithin4years = date.isAfter(dayjs.utc().subtract(4, \"years\"));\n\n  if (!date.isValid() || isBirthdateOver150years || isBirthdateWithin4years) {\n    return t(\"validation.invalidBirthDate\");\n  }\n\n  if (date.isAfter(dayjs.utc().add(1, \"day\"))) {\n    return t(\"validation.birthdateCannotBeFuture\");\n  }\n};\n"],"names":["extractDate","value","date","dayjs","formatExtractedDate","day","month","EMAIL_REGEX","isValidEmail","maybeEmail","validateBirthdate","isNullish","t","isBirthdateOver150years","isBirthdateWithin4years"],"mappings":"qJAkBa,MAAAA,EAAeC,GAA6C,CACvE,MAAMC,EAAOC,EAAM,IAAIF,EAAO,aAAc,EAAI,EAE5C,GAAAC,EAAK,UACA,MAAA,CACL,IAAKA,EAAK,OAAO,IAAI,EACrB,MAAOA,EAAK,OAAO,IAAI,EACvB,KAAMA,EAAK,OAAO,MAAM,CAAA,CAG9B,EAEaE,EAAuBF,GAAgC,CAClE,MAAMG,EAAMH,EAAK,IAAI,KAAO,EAAA,SAAS,EAAG,GAAG,EACrCI,EAAQJ,EAAK,MAAM,KAAO,EAAA,SAAS,EAAG,GAAG,EAG/C,MAAO,GAFMA,EAAK,KAAK,KAAO,EAAA,SAAS,EAAG,GAAG,CAE/B,IAAII,CAAK,IAAID,CAAG,EAChC,EC1BME,EAAc,+DAoCPC,EAAgBC,GACpBF,EAAY,KAAKE,CAAU,EAuFvBC,EAAqBT,GAAqC,CACjE,GAAAU,EAAUV,CAAK,EACjB,OAAOW,EAAE,6BAA6B,EAExC,MAAMV,EAAOC,EAAM,IAAIC,EAAoBH,CAAK,EAAG,aAAc,EAAI,EAE/DY,EAA0BX,EAAK,SAASC,EAAM,IAAM,EAAA,SAAS,IAAK,OAAO,CAAC,EAC1EW,EAA0BZ,EAAK,QAAQC,EAAM,IAAM,EAAA,SAAS,EAAG,OAAO,CAAC,EAE7E,GAAI,CAACD,EAAK,WAAaW,GAA2BC,EAChD,OAAOF,EAAE,6BAA6B,EAGpC,GAAAV,EAAK,QAAQC,EAAM,MAAM,IAAI,EAAG,KAAK,CAAC,EACxC,OAAOS,EAAE,oCAAoC,CAEjD"}