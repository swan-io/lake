{"version":3,"file":"LakeTextInput-CHi8_tLm.js","sources":["../../../packages/lake/src/hooks/useNativeProp.ts","../../../packages/lake/src/components/LakeTextInput.tsx"],"sourcesContent":["import { MutableRefObject, useLayoutEffect } from \"react\";\nimport { isNotNullish } from \"../utils/nullish\";\n\nexport const useNativeProp = <T>(\n  ref: MutableRefObject<T | null>,\n  name: string,\n  value: number | string | undefined,\n) => {\n  useLayoutEffect(() => {\n    if (isNotNullish(value) && ref.current instanceof Element) {\n      ref.current.setAttribute(name, String(value));\n    }\n  }, [ref, name, value]);\n};\n","import {\n  ChangeEventHandler,\n  forwardRef,\n  ReactNode,\n  Ref,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  ActivityIndicator,\n  NativeSyntheticEvent,\n  StyleSheet,\n  TextInput,\n  TextInputFocusEventData,\n  TextInputProps,\n  View,\n  ViewProps,\n} from \"react-native\";\nimport { Except } from \"type-fest\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport {\n  backgroundColor,\n  colors,\n  ColorVariants,\n  radii,\n  shadows,\n  spacings,\n  texts,\n} from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { useNativeProp } from \"../hooks/useNativeProp\";\nimport { isNotNullish, isNotNullishOrEmpty, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { Fill } from \"./Fill\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeSelect } from \"./LakeSelect\";\nimport { LakeText } from \"./LakeText\";\n\nconst TRANSPARENT = \"transparent\";\n\nconst styles = StyleSheet.create({\n  root: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n  },\n  container: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  contents: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: \"row\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: radii[6],\n    backgroundColor: backgroundColor.accented,\n    borderColor: colors.gray[100],\n    borderWidth: 1,\n    paddingHorizontal: spacings[8],\n  },\n  input: {\n    ...texts.regular,\n    flexGrow: 1,\n    outlineStyle: \"none\",\n    placeholderTextColor: colors.gray[400],\n    color: colors.gray[900],\n    paddingHorizontal: spacings[8],\n    height: 38,\n    minWidth: 0,\n  },\n  multilineInput: {\n    height: \"100%\",\n    padding: spacings[8],\n  },\n  inputWithUnit: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n  hovered: {\n    boxShadow: shadows.tile,\n  },\n  disabled: {\n    backgroundColor: colors.gray[50],\n    borderColor: colors.gray[50],\n    color: colors.gray[900],\n    cursor: \"not-allowed\",\n  },\n  readOnly: {\n    backgroundColor: colors.gray[50],\n    borderColor: colors.gray[50],\n    color: colors.gray[900],\n  },\n  error: {\n    borderColor: colors.negative[400],\n  },\n  valid: {\n    borderColor: colors.positive[500],\n  },\n  readOnlyError: {\n    borderColor: TRANSPARENT,\n    paddingRight: spacings[32],\n  },\n  endIcon: {\n    marginHorizontal: spacings[8],\n  },\n  endComponents: {\n    flexDirection: \"row\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginLeft: spacings[8],\n  },\n  icon: {\n    marginLeft: spacings[8],\n    margiRight: spacings[4],\n  },\n  readOnlyEndIcon: {\n    right: 0,\n  },\n  unit: {\n    backgroundColor: colors.gray[50],\n    paddingHorizontal: spacings[16],\n    paddingVertical: spacings[8],\n    maxHeight: 40,\n    borderTopRightRadius: radii[6],\n    borderBottomRightRadius: radii[6],\n    borderColor: colors.gray[100],\n    borderWidth: 1,\n    borderLeftWidth: 0,\n    flexShrink: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n  unitDisabled: {\n    borderColor: colors.gray[50],\n  },\n  focused: {\n    borderColor: colors.gray[500],\n    boxShadow: shadows.tile,\n  },\n  descriptionLimitation: {\n    flexShrink: 0,\n  },\n  errorContainer: {\n    paddingTop: spacings[4],\n  },\n});\n\n// The `onChange` type change is for compatibity with Rifm\nexport type LakeTextInputProps = Except<\n  TextInputProps,\n  \"editable\" | \"keyboardType\" | \"onChange\"\n> & {\n  ariaExpanded?: boolean;\n  ariaControls?: string;\n  error?: string;\n  readOnly?: boolean;\n  validating?: boolean;\n  valid?: boolean;\n  disabled?: boolean;\n  color?: ColorVariants;\n  multiline?: boolean;\n  icon?: IconName;\n  unit?: string;\n  units?: string[];\n  inputMode?: TextInputProps[\"inputMode\"];\n  pattern?: string;\n  children?: ReactNode;\n  hideErrors?: boolean;\n  style?: TextInputProps[\"style\"];\n  containerStyle?: ViewProps[\"style\"];\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n  onUnitChange?: (value: string) => void;\n  maxCharCount?: number;\n  help?: string;\n  warning?: boolean;\n  renderEnd?: () => ReactNode;\n  containerRef?: Ref<View>;\n};\n\nexport const LakeTextInput = forwardRef<TextInput | null, LakeTextInputProps>(\n  (\n    {\n      ariaExpanded,\n      ariaControls,\n      error,\n      disabled = false,\n      validating = false,\n      valid = false,\n      readOnly = false,\n      icon,\n      children,\n      unit,\n      units,\n      color = \"gray\",\n      inputMode = \"text\",\n      hideErrors = false,\n      onChange,\n      onUnitChange,\n      pattern,\n      style: stylesFromProps,\n      containerStyle: containerStylesFromProps,\n      onFocus: originalOnFocus,\n      onBlur: originalOnBlur,\n      value,\n      defaultValue,\n      multiline = false,\n      containerRef,\n      //maxCharCount is different from maxLength(props inherited of TextInput)\n      //maxLength truncates the text in the limitation asked,\n      //maxCharCount doesn't have limitation but displays a counter of characters\n      maxCharCount,\n      help,\n      warning = false,\n      renderEnd,\n      ...props\n    }: LakeTextInputProps,\n    forwardRef,\n  ) => {\n    const inputRef = useRef<TextInput | null>(null);\n    const [isHovered, setIsHovered] = useState(false);\n    const [isFocused, setIsFocused] = useState(false);\n\n    useNativeProp(inputRef, \"pattern\", pattern);\n\n    useHover(inputRef, {\n      onHoverStart: () => setIsHovered(true),\n      onHoverEnd: () => setIsHovered(false),\n    });\n\n    const onFocus = useCallback(\n      (event: NativeSyntheticEvent<TextInputFocusEventData>) => {\n        setIsFocused(true);\n        originalOnFocus?.(event);\n      },\n      [originalOnFocus],\n    );\n\n    const onBlur = useCallback(\n      (event: NativeSyntheticEvent<TextInputFocusEventData>) => {\n        setIsFocused(false);\n        originalOnBlur?.(event);\n      },\n      [originalOnBlur],\n    );\n\n    const mergedRef = useMergeRefs(inputRef, forwardRef);\n    const isInteractive = !disabled && !readOnly;\n    const hasError = isNotNullishOrEmpty(error);\n    const charCount = isNullish(value) ? 0 : value.length;\n\n    return (\n      <View style={commonStyles.fill}>\n        <View style={styles.root} aria-errormessage={error}>\n          <View style={[styles.container, containerStylesFromProps]}>\n            <View\n              style={[\n                styles.contents,\n                isHovered && isInteractive && styles.hovered,\n                isFocused && { borderColor: colors[color][500] },\n                readOnly && hasError && styles.readOnlyError,\n                disabled && styles.disabled,\n                readOnly && styles.readOnly,\n                isFocused && styles.focused,\n                isNotNullish(unit ?? units) && styles.inputWithUnit,\n                warning && { borderColor: colors.warning[500] },\n                hasError && styles.error,\n                valid && styles.valid,\n                stylesFromProps,\n              ]}\n              ref={containerRef}\n            >\n              {isNotNullish(icon) && (\n                <Icon name={icon} size={20} color={colors.current.primary} style={styles.icon} />\n              )}\n\n              <TextInput\n                aria-expanded={ariaExpanded}\n                aria-controls={ariaControls}\n                inputMode={inputMode}\n                {...props}\n                defaultValue={defaultValue}\n                value={isNullish(defaultValue) ? (value ?? \"\") : value}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                readOnly={!isInteractive}\n                onChange={onChange as TextInputProps[\"onChange\"]}\n                multiline={multiline}\n                ref={mergedRef}\n                style={[\n                  styles.input,\n                  multiline && styles.multilineInput,\n                  readOnly && hasError && styles.readOnlyError,\n                  disabled && styles.disabled,\n                  readOnly && styles.readOnly,\n                ]}\n              />\n\n              {isNotNullish(renderEnd) && <View style={styles.endComponents}>{renderEnd()}</View>}\n\n              {validating && (\n                <ActivityIndicator\n                  size=\"small\"\n                  style={styles.endIcon}\n                  color={colors.current[500]}\n                />\n              )}\n\n              {!validating && hasError && (\n                <Icon\n                  name=\"warning-regular\"\n                  size={20}\n                  color={colors.negative[400]}\n                  style={[styles.endIcon, readOnly && styles.readOnlyEndIcon]}\n                />\n              )}\n\n              {!validating && warning && !hasError && (\n                <Icon\n                  name=\"warning-regular\"\n                  size={20}\n                  color={colors.warning[500]}\n                  style={[styles.endIcon, readOnly && styles.readOnlyEndIcon]}\n                />\n              )}\n\n              {!validating && !hasError && valid && (\n                <Icon\n                  name=\"checkmark-filled\"\n                  size={20}\n                  color={colors.positive[400]}\n                  style={[styles.endIcon, readOnly && styles.readOnlyEndIcon]}\n                />\n              )}\n            </View>\n\n            {isNotNullish(units) && isNotNullish(onUnitChange) ? (\n              <Box>\n                <LakeSelect\n                  value={unit}\n                  onValueChange={onUnitChange}\n                  items={units.map(value => ({ name: value, value }))}\n                  disabled={disabled}\n                  style={[styles.unit, (disabled || readOnly) && styles.unitDisabled]}\n                  mode=\"borderless\"\n                  hideErrors={true}\n                />\n              </Box>\n            ) : isNotNullish(unit) ? (\n              <LakeText\n                color={colors.gray[900]}\n                style={[styles.unit, (disabled || readOnly) && styles.unitDisabled]}\n              >\n                {unit}\n              </LakeText>\n            ) : null}\n          </View>\n\n          {children}\n        </View>\n\n        {!hideErrors && (\n          <Box direction=\"row\" style={styles.errorContainer}>\n            {isNotNullish(error) ? (\n              <LakeText variant=\"smallRegular\" color={colors.negative[500]}>\n                {error}\n              </LakeText>\n            ) : (\n              <LakeText variant=\"smallRegular\" color={colors.gray[500]}>\n                {help ?? \" \"}\n              </LakeText>\n            )}\n\n            {isNotNullish(maxCharCount) && (\n              <>\n                <Fill minWidth={4} />\n\n                <LakeText\n                  variant=\"smallRegular\"\n                  color={charCount > maxCharCount ? colors.negative[500] : colors.gray[400]}\n                  style={styles.descriptionLimitation}\n                >\n                  {charCount} / {maxCharCount}\n                </LakeText>\n              </>\n            )}\n          </Box>\n        )}\n      </View>\n    );\n  },\n);\n"],"names":["useNativeProp","ref","name","value","useLayoutEffect","isNotNullish","TRANSPARENT","styles","StyleSheet","radii","backgroundColor","colors","spacings","texts","shadows","LakeTextInput","forwardRef","ariaExpanded","ariaControls","error","disabled","validating","valid","readOnly","icon","children","unit","units","color","inputMode","hideErrors","onChange","onUnitChange","pattern","stylesFromProps","containerStylesFromProps","originalOnFocus","originalOnBlur","defaultValue","multiline","containerRef","maxCharCount","help","warning","renderEnd","props","inputRef","useRef","isHovered","setIsHovered","useState","isFocused","setIsFocused","useHover","onFocus","useCallback","event","onBlur","mergedRef","useMergeRefs","isInteractive","hasError","isNotNullishOrEmpty","charCount","isNullish","jsxs","View","commonStyles","jsx","Icon","TextInput","ActivityIndicator","Box","LakeSelect","LakeText","Fragment","Fill"],"mappings":"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"}