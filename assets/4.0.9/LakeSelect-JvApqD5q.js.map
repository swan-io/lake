{"version":3,"file":"LakeSelect-JvApqD5q.js","sources":["../../../packages/lake/src/components/LakeSelect.tsx"],"sourcesContent":["import {\n  ForwardedRef,\n  KeyboardEvent,\n  ReactElement,\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useRef,\n} from \"react\";\nimport {\n  FlatList,\n  ListRenderItemInfo,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from \"react-native\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport {\n  ColorVariants,\n  colors,\n  invariantColors,\n  radii,\n  shadows,\n  spacings,\n  texts,\n} from \"../constants/design\";\nimport { useDisclosure } from \"../hooks/useDisclosure\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { getFocusableElements } from \"../utils/a11y\";\nimport { isNotNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { Fill } from \"./Fill\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeText } from \"./LakeText\";\nimport { Popover } from \"./Popover\";\nimport { Pressable } from \"./Pressable\";\nimport { Separator } from \"./Separator\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  normal: {\n    backgroundColor: colors.gray.contrast,\n    borderColor: colors.gray[100],\n    borderRadius: radii[6],\n    borderWidth: 1,\n    justifyContent: \"center\",\n    minWidth: 100,\n    paddingHorizontal: spacings[16],\n    height: 40,\n  },\n  borderless: {\n    justifyContent: \"center\",\n    height: 40,\n    paddingHorizontal: spacings[16],\n    borderRadius: radii[6],\n    transitionProperty: \"background-color\",\n    transitionDuration: \"150ms\",\n  },\n  small: {\n    paddingVertical: 5,\n  },\n  shadowed: {\n    position: \"absolute\",\n    opacity: 0,\n    left: 0,\n    top: 0,\n    width: \"100%\",\n    height: \"100%\",\n    borderRadius: radii[6],\n    boxShadow: shadows.tile,\n    transitionDuration: \"150ms\",\n    transitionProperty: \"opacity\",\n  },\n  hovered: {\n    opacity: 1,\n  },\n  selectPlaceholder: texts.placeholder,\n  selectSmallPlaceholder: texts.smallPlaceholder,\n  selected: {\n    color: colors.gray[800],\n  },\n  inputDisabled: {\n    backgroundColor: colors.gray[50],\n    borderColor: colors.gray[50],\n    cursor: \"not-allowed\",\n  },\n  listContent: {\n    paddingVertical: 12,\n  },\n  item: {\n    display: \"flex\",\n    paddingHorizontal: spacings[24],\n    paddingVertical: spacings[8],\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  itemHighlighted: {\n    backgroundColor: colors.gray[50],\n  },\n  itemFocused: {\n    boxShadow: `inset 0 0 0 1px ${colors.gray[500]}`,\n    borderRadius: radii[4],\n    outlineStyle: \"none\",\n  },\n  selectListTitle: {\n    paddingHorizontal: spacings[24],\n    paddingVertical: spacings[12],\n  },\n  inputBorderlessDisabled: {\n    backgroundColor: invariantColors.transparent,\n  },\n  itemText: {\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n    textOverflow: \"ellipsis\",\n  },\n  errorText: {\n    paddingTop: spacings[4],\n  },\n  focusedInput: {\n    borderColor: colors.gray[500],\n    boxShadow: shadows.tile,\n    outlineStyle: \"none\",\n  },\n  focusedWithoutShadow: {\n    boxShadow: \"none\",\n  },\n  errorContainer: {\n    borderColor: colors.negative[500],\n  },\n});\n\nexport type Item<V> = {\n  name: string;\n  value: V;\n  icon?: ReactNode;\n};\n\nexport type SelectProps<V> = {\n  placeholder?: string;\n  items: Item<V>[];\n  matchReferenceWidth?: boolean;\n  mode?: \"normal\" | \"borderless\";\n  title?: string;\n  valueStyle?: StyleProp<TextStyle>;\n  PopoverFooter?: ReactElement;\n  size?: \"small\" | \"large\";\n  icon?: IconName;\n  color?: ColorVariants;\n  disabled?: boolean;\n  value?: V;\n  onValueChange: (value: V) => void;\n  hideErrors?: boolean;\n  id?: string;\n  error?: string;\n  readOnly?: boolean;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst LakeSelectWithRef = <V,>(\n  {\n    title,\n    items,\n    valueStyle,\n    size,\n    color = \"current\",\n    disabled = false,\n    mode = \"normal\",\n    placeholder,\n    readOnly = false,\n    id,\n    matchReferenceWidth = true,\n    value,\n    error,\n    hideErrors = false,\n    icon,\n    onValueChange,\n    PopoverFooter,\n    style,\n  }: SelectProps<V>,\n  forwardedRef: ForwardedRef<View>,\n) => {\n  const inputRef = useRef<View>(null);\n  const listRef = useRef<FlatList>(null);\n  const typingTimeoutRef = useRef<number | undefined>(undefined);\n  const currentlyTypedRef = useRef<string | undefined>(undefined);\n  const listItemRefs = useRef<HTMLElement[]>(Array(items.length) as HTMLElement[]);\n\n  const mergedRef = useMergeRefs(inputRef, forwardedRef);\n\n  const [visible, { close, open }] = useDisclosure(false);\n\n  const hasValue = isNotNullish(value);\n  const isSmall = size === \"small\";\n  const itemValue = items.find(i => i.value === value);\n\n  const onKeyDown = useCallback(\n    (event: NativeSyntheticEvent<React.KeyboardEvent>) => {\n      // this made a search not visible for user as the native select component\n      if (event.nativeEvent.key.length === 1) {\n        event.nativeEvent.stopPropagation();\n\n        const currentlyTyped = `${\n          currentlyTypedRef.current ?? \"\"\n        }${event.nativeEvent.key.toLowerCase()}`;\n\n        currentlyTypedRef.current = currentlyTyped;\n\n        const selectedIndex = items.findIndex(item =>\n          item.name.toLowerCase().startsWith(currentlyTyped),\n        );\n\n        const selected = items[selectedIndex];\n\n        if (selected != null) {\n          if (visible) {\n            const listElement = listRef.current;\n\n            if (listElement != null) {\n              listItemRefs.current[selectedIndex]?.focus();\n            }\n          } else {\n            onValueChange(selected.value);\n          }\n        }\n      }\n\n      if (typingTimeoutRef.current != null) {\n        window.clearTimeout(typingTimeoutRef.current);\n      }\n\n      typingTimeoutRef.current = window.setTimeout(() => {\n        currentlyTypedRef.current = undefined;\n      }, 300);\n    },\n    [items, onValueChange, visible],\n  );\n\n  const name = itemValue?.name ?? (value as unknown as string);\n\n  return (\n    <View style={commonStyles.fill}>\n      <Pressable\n        id={id}\n        ref={mergedRef}\n        aria-haspopup=\"listbox\"\n        role=\"button\"\n        aria-expanded={visible}\n        disabled={readOnly || disabled}\n        style={({ focused, hovered, pressed }) => [\n          mode === \"normal\" ? styles.normal : styles.borderless,\n          size === \"small\" && styles.small,\n          (disabled || readOnly) && styles.inputDisabled,\n          (visible || focused) && styles.focusedInput,\n          mode === \"borderless\" && [\n            {\n              backgroundColor: pressed\n                ? colors.gray[200]\n                : hovered\n                  ? colors.gray[100]\n                  : invariantColors.transparent,\n            },\n            styles.focusedWithoutShadow,\n          ],\n          mode !== \"borderless\" && error != null && styles.errorContainer,\n          (disabled || readOnly) && mode === \"borderless\" && styles.inputBorderlessDisabled,\n          style,\n        ]}\n        onPress={open}\n        onKeyDown={onKeyDown}\n        aria-errormessage={error}\n      >\n        {({ hovered }) => (\n          <>\n            {mode === \"normal\" && <View style={[styles.shadowed, hovered && styles.hovered]} />}\n\n            <Box direction=\"row\" justifyContent=\"spaceBetween\" alignItems=\"center\">\n              <Box direction=\"row\" alignItems=\"center\" style={commonStyles.fill}>\n                {icon && (\n                  <>\n                    <Icon color={colors[color].primary} name={icon} size={isSmall ? 16 : 18} />\n                    <Space width={8} />\n                  </>\n                )}\n\n                {hasValue ? (\n                  <Box direction=\"row\" alignItems=\"center\" style={commonStyles.fill}>\n                    {isNotNullish(itemValue?.icon) && (\n                      <>\n                        {itemValue?.icon}\n\n                        <Space width={12} />\n                      </>\n                    )}\n\n                    <LakeText\n                      color={colors.gray[900]}\n                      variant={isSmall ? \"smallRegular\" : \"regular\"}\n                      style={[styles.itemText, valueStyle]}\n                    >\n                      {name}\n                    </LakeText>\n                  </Box>\n                ) : (\n                  <LakeText\n                    style={[\n                      styles.itemText,\n                      styles.selectPlaceholder,\n                      isSmall && styles.selectSmallPlaceholder,\n                    ]}\n                  >\n                    {placeholder ?? \" \"}\n                  </LakeText>\n                )}\n              </Box>\n\n              <Fill minWidth={8} />\n\n              {!disabled && (\n                <Icon\n                  color={colors.gray[900]}\n                  name={visible ? \"chevron-up-filled\" : \"chevron-down-filled\"}\n                  size={16}\n                />\n              )}\n            </Box>\n          </>\n        )}\n      </Pressable>\n\n      {!hideErrors && (\n        <LakeText variant=\"smallRegular\" color={colors.negative[500]} style={styles.errorText}>\n          {error ?? \" \"}\n        </LakeText>\n      )}\n\n      <Popover\n        role=\"listbox\"\n        matchReferenceMinWidth={matchReferenceWidth}\n        onDismiss={close}\n        referenceRef={inputRef}\n        returnFocus={true}\n        visible={visible}\n      >\n        {isNotNullish(title) && (\n          <>\n            <LakeText variant=\"semibold\" color={colors.gray[900]} style={styles.selectListTitle}>\n              {title}\n            </LakeText>\n\n            <Separator />\n          </>\n        )}\n\n        <FlatList\n          role=\"list\"\n          data={items}\n          ref={listRef}\n          contentContainerStyle={styles.listContent}\n          onKeyDown={(event: NativeSyntheticEvent<KeyboardEvent<HTMLDivElement>>) => {\n            const { key } = event.nativeEvent;\n\n            if (key === \"ArrowDown\" || key === \"ArrowUp\") {\n              event.preventDefault();\n\n              if (isNotNullish(event.currentTarget)) {\n                const focusableElements = getFocusableElements(\n                  event.currentTarget as unknown as HTMLDivElement,\n                );\n\n                const current = focusableElements.indexOf(event.target as unknown as HTMLElement);\n                const nextIndex = key === \"ArrowDown\" ? current + 1 : current - 1;\n\n                focusableElements[nextIndex]?.focus();\n              }\n            }\n          }}\n          keyExtractor={(_, index) => `select-item-${index}`}\n          renderItem={({ item, index }: ListRenderItemInfo<Item<V>>) => {\n            const isSelected = value === item.value;\n\n            return (\n              <Pressable\n                ref={element => (listItemRefs.current[index] = element as unknown as HTMLElement)}\n                onKeyDown={onKeyDown}\n                style={({ hovered, focused }) => [\n                  styles.item,\n                  (hovered || isSelected) && styles.itemHighlighted,\n                  focused && styles.itemFocused,\n                ]}\n                role=\"option\"\n                aria-selected={true}\n                onPress={() => {\n                  onValueChange(item.value);\n                  close();\n                }}\n              >\n                {isNotNullish(item.icon) && (\n                  <>\n                    {item.icon}\n\n                    <Space width={12} />\n                  </>\n                )}\n\n                <LakeText\n                  color={colors.gray[900]}\n                  numberOfLines={1}\n                  style={[styles.itemText, isSelected && styles.selected]}\n                >\n                  {item.name}\n                </LakeText>\n\n                <Fill minWidth={12} />\n\n                {isSelected && (\n                  <Icon color={colors.positive[500]} name=\"checkmark-filled\" size={14} />\n                )}\n              </Pressable>\n            );\n          }}\n        />\n\n        {PopoverFooter}\n      </Popover>\n    </View>\n  );\n};\n\nexport const LakeSelect = forwardRef(LakeSelectWithRef) as <I>(\n  props: SelectProps<I> & { ref?: ForwardedRef<View> },\n) => ReturnType<typeof LakeSelectWithRef>;\n"],"names":["styles","StyleSheet","colors","radii","spacings","shadows","texts","invariantColors","LakeSelectWithRef","title","items","valueStyle","size","color","disabled","mode","placeholder","readOnly","id","matchReferenceWidth","value","error","hideErrors","icon","onValueChange","PopoverFooter","style","forwardedRef","inputRef","useRef","listRef","typingTimeoutRef","currentlyTypedRef","listItemRefs","mergedRef","useMergeRefs","visible","close","open","useDisclosure","hasValue","isNotNullish","isSmall","itemValue","i","onKeyDown","useCallback","event","currentlyTyped","selectedIndex","item","selected","_a","name","jsxs","View","commonStyles","jsx","Pressable","focused","hovered","pressed","Fragment","Box","Icon","Space","LakeText","Fill","Popover","Separator","FlatList","key","focusableElements","getFocusableElements","current","nextIndex","_","index","isSelected","element","LakeSelect","forwardRef"],"mappings":"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"}