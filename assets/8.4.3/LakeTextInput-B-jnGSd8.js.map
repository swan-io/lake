{"version":3,"file":"LakeTextInput-B-jnGSd8.js","sources":["../../../packages/lake/src/hooks/useNativeProp.ts","../../../packages/lake/src/components/LakeTextInput.tsx"],"sourcesContent":["import { MutableRefObject, useLayoutEffect } from \"react\";\nimport { isNotNullish } from \"../utils/nullish\";\n\nexport const useNativeProp = <T>(\n  ref: MutableRefObject<T | null>,\n  name: string,\n  value: number | string | undefined,\n) => {\n  useLayoutEffect(() => {\n    if (isNotNullish(value) && ref.current instanceof Element) {\n      ref.current.setAttribute(name, String(value));\n    }\n  }, [ref, name, value]);\n};\n","import {\n  ChangeEventHandler,\n  forwardRef,\n  ReactNode,\n  Ref,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  ActivityIndicator,\n  NativeSyntheticEvent,\n  StyleSheet,\n  TextInput,\n  TextInputFocusEventData,\n  TextInputProps,\n  View,\n  ViewProps,\n} from \"react-native\";\nimport { Except } from \"type-fest\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport {\n  backgroundColor,\n  colors,\n  ColorVariants,\n  radii,\n  shadows,\n  spacings,\n  texts,\n} from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { useNativeProp } from \"../hooks/useNativeProp\";\nimport { isNotNullish, isNotNullishOrEmpty, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { Fill } from \"./Fill\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeSelect } from \"./LakeSelect\";\nimport { LakeText } from \"./LakeText\";\n\nconst TRANSPARENT = \"transparent\";\n\nconst styles = StyleSheet.create({\n  root: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n  },\n  container: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  contents: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: \"row\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: radii[6],\n    backgroundColor: backgroundColor.accented,\n    borderColor: colors.gray[100],\n    borderWidth: 1,\n    paddingHorizontal: spacings[8],\n  },\n  input: {\n    ...texts.regular,\n    flexGrow: 1,\n    outlineStyle: \"none\",\n    placeholderTextColor: colors.gray[400],\n    color: colors.gray[900],\n    paddingHorizontal: spacings[8],\n    height: 38,\n    minWidth: 0,\n  },\n  multilineInput: {\n    height: \"100%\",\n    padding: spacings[8],\n  },\n  inputWithUnit: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n  hovered: {\n    boxShadow: shadows.tile,\n  },\n  disabled: {\n    backgroundColor: colors.gray[50],\n    borderColor: colors.gray[50],\n    color: colors.gray[900],\n    cursor: \"not-allowed\",\n  },\n  readOnly: {\n    backgroundColor: colors.gray[50],\n    borderColor: colors.gray[50],\n    color: colors.gray[900],\n  },\n  error: {\n    borderColor: colors.negative[400],\n  },\n  valid: {\n    borderColor: colors.positive[500],\n  },\n  readOnlyError: {\n    borderColor: TRANSPARENT,\n    paddingRight: spacings[32],\n  },\n  endIcon: {\n    marginHorizontal: spacings[8],\n  },\n  endComponents: {\n    flexDirection: \"row\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginLeft: spacings[8],\n  },\n  icon: {\n    marginLeft: spacings[8],\n    margiRight: spacings[4],\n  },\n  readOnlyEndIcon: {\n    right: 0,\n  },\n  unit: {\n    backgroundColor: colors.gray[50],\n    paddingHorizontal: spacings[16],\n    paddingVertical: spacings[8],\n    maxHeight: 40,\n    borderTopRightRadius: radii[6],\n    borderBottomRightRadius: radii[6],\n    borderColor: colors.gray[100],\n    borderWidth: 1,\n    borderLeftWidth: 0,\n    flexShrink: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n  unitDisabled: {\n    borderColor: colors.gray[50],\n  },\n  focused: {\n    borderColor: colors.gray[500],\n    boxShadow: shadows.tile,\n  },\n  descriptionLimitation: {\n    flexShrink: 0,\n  },\n  errorContainer: {\n    paddingTop: spacings[4],\n  },\n});\n\n// The `onChange` type change is for compatibity with Rifm\nexport type LakeTextInputProps = Except<\n  TextInputProps,\n  \"editable\" | \"keyboardType\" | \"onChange\"\n> & {\n  ariaExpanded?: boolean;\n  ariaControls?: string;\n  error?: string;\n  readOnly?: boolean;\n  validating?: boolean;\n  valid?: boolean;\n  disabled?: boolean;\n  color?: ColorVariants;\n  multiline?: boolean;\n  icon?: IconName;\n  unit?: string;\n  units?: string[];\n  inputMode?: TextInputProps[\"inputMode\"];\n  pattern?: string;\n  children?: ReactNode;\n  hideErrors?: boolean;\n  style?: TextInputProps[\"style\"];\n  containerStyle?: ViewProps[\"style\"];\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n  onUnitChange?: (value: string) => void;\n  maxCharCount?: number;\n  help?: string;\n  warning?: boolean;\n  renderEnd?: () => ReactNode;\n  containerRef?: Ref<View>;\n};\n\nexport const LakeTextInput = forwardRef<TextInput | null, LakeTextInputProps>(\n  (\n    {\n      ariaExpanded,\n      ariaControls,\n      error,\n      disabled = false,\n      validating = false,\n      valid = false,\n      readOnly = false,\n      icon,\n      children,\n      unit,\n      units,\n      color = \"gray\",\n      inputMode = \"text\",\n      hideErrors = false,\n      onChange,\n      onUnitChange,\n      pattern,\n      style: stylesFromProps,\n      containerStyle: containerStylesFromProps,\n      onFocus: originalOnFocus,\n      onBlur: originalOnBlur,\n      value,\n      defaultValue,\n      multiline = false,\n      containerRef,\n      //maxCharCount is different from maxLength(props inherited of TextInput)\n      //maxLength truncates the text in the limitation asked,\n      //maxCharCount doesn't have limitation but displays a counter of characters\n      maxCharCount,\n      help,\n      warning = false,\n      renderEnd,\n      ...props\n    }: LakeTextInputProps,\n    forwardRef,\n  ) => {\n    const inputRef = useRef<TextInput | null>(null);\n    const [isHovered, setIsHovered] = useState(false);\n    const [isFocused, setIsFocused] = useState(false);\n\n    useNativeProp(inputRef, \"pattern\", pattern);\n\n    useHover(inputRef, {\n      onHoverStart: () => setIsHovered(true),\n      onHoverEnd: () => setIsHovered(false),\n    });\n\n    const onFocus = useCallback(\n      (event: NativeSyntheticEvent<TextInputFocusEventData>) => {\n        setIsFocused(true);\n        originalOnFocus?.(event);\n      },\n      [originalOnFocus],\n    );\n\n    const onBlur = useCallback(\n      (event: NativeSyntheticEvent<TextInputFocusEventData>) => {\n        setIsFocused(false);\n        originalOnBlur?.(event);\n      },\n      [originalOnBlur],\n    );\n\n    const mergedRef = useMergeRefs(inputRef, forwardRef);\n    const isInteractive = !disabled && !readOnly;\n    const hasError = isNotNullishOrEmpty(error);\n    const charCount = isNullish(value) ? 0 : value.length;\n\n    return (\n      <View style={commonStyles.fill}>\n        <View style={styles.root} aria-errormessage={error}>\n          <View style={[styles.container, containerStylesFromProps]}>\n            <View\n              style={[\n                styles.contents,\n                isHovered && isInteractive && styles.hovered,\n                isFocused && { borderColor: colors[color][500] },\n                readOnly && hasError && styles.readOnlyError,\n                disabled && styles.disabled,\n                readOnly && styles.readOnly,\n                isFocused && styles.focused,\n                isNotNullish(unit ?? units) && styles.inputWithUnit,\n                warning && { borderColor: colors.warning[500] },\n                hasError && styles.error,\n                valid && styles.valid,\n                stylesFromProps,\n              ]}\n              ref={containerRef}\n            >\n              {isNotNullish(icon) && (\n                <Icon name={icon} size={20} color={colors.current.primary} style={styles.icon} />\n              )}\n\n              <TextInput\n                aria-expanded={ariaExpanded}\n                aria-controls={ariaControls}\n                inputMode={inputMode}\n                {...props}\n                defaultValue={defaultValue}\n                value={isNullish(defaultValue) ? value ?? \"\" : value}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                readOnly={!isInteractive}\n                onChange={onChange as TextInputProps[\"onChange\"]}\n                multiline={multiline}\n                ref={mergedRef}\n                style={[\n                  styles.input,\n                  multiline && styles.multilineInput,\n                  readOnly && hasError && styles.readOnlyError,\n                  disabled && styles.disabled,\n                  readOnly && styles.readOnly,\n                ]}\n              />\n\n              {isNotNullish(renderEnd) && <View style={styles.endComponents}>{renderEnd()}</View>}\n\n              {validating && (\n                <ActivityIndicator\n                  size=\"small\"\n                  style={styles.endIcon}\n                  color={colors.current[500]}\n                />\n              )}\n\n              {!validating && hasError && (\n                <Icon\n                  name=\"warning-regular\"\n                  size={20}\n                  color={colors.negative[400]}\n                  style={[styles.endIcon, readOnly && styles.readOnlyEndIcon]}\n                />\n              )}\n\n              {!validating && warning && !hasError && (\n                <Icon\n                  name=\"warning-regular\"\n                  size={20}\n                  color={colors.warning[500]}\n                  style={[styles.endIcon, readOnly && styles.readOnlyEndIcon]}\n                />\n              )}\n\n              {!validating && !hasError && valid && (\n                <Icon\n                  name=\"checkmark-filled\"\n                  size={20}\n                  color={colors.positive[400]}\n                  style={[styles.endIcon, readOnly && styles.readOnlyEndIcon]}\n                />\n              )}\n            </View>\n\n            {isNotNullish(units) && isNotNullish(onUnitChange) ? (\n              <Box>\n                <LakeSelect\n                  value={unit}\n                  onValueChange={onUnitChange}\n                  items={units.map(value => ({ name: value, value }))}\n                  disabled={disabled}\n                  style={[styles.unit, (disabled || readOnly) && styles.unitDisabled]}\n                  mode=\"borderless\"\n                  hideErrors={true}\n                />\n              </Box>\n            ) : isNotNullish(unit) ? (\n              <LakeText\n                color={colors.gray[900]}\n                style={[styles.unit, (disabled || readOnly) && styles.unitDisabled]}\n              >\n                {unit}\n              </LakeText>\n            ) : null}\n          </View>\n\n          {children}\n        </View>\n\n        {!hideErrors && (\n          <Box direction=\"row\" style={styles.errorContainer}>\n            {isNotNullish(error) ? (\n              <LakeText variant=\"smallRegular\" color={colors.negative[500]}>\n                {error}\n              </LakeText>\n            ) : (\n              <LakeText variant=\"smallRegular\" color={colors.gray[500]}>\n                {help ?? \" \"}\n              </LakeText>\n            )}\n\n            {isNotNullish(maxCharCount) && (\n              <>\n                <Fill minWidth={4} />\n\n                <LakeText\n                  variant=\"smallRegular\"\n                  color={charCount > maxCharCount ? colors.negative[500] : colors.gray[400]}\n                  style={styles.descriptionLimitation}\n                >\n                  {charCount} / {maxCharCount}\n                </LakeText>\n              </>\n            )}\n          </Box>\n        )}\n      </View>\n    );\n  },\n);\n"],"names":["useNativeProp","ref","name","value","useLayoutEffect","isNotNullish","TRANSPARENT","styles","StyleSheet","radii","backgroundColor","colors","spacings","texts","shadows","LakeTextInput","forwardRef","ariaExpanded","ariaControls","error","disabled","validating","valid","readOnly","icon","children","unit","units","color","inputMode","hideErrors","onChange","onUnitChange","pattern","stylesFromProps","containerStylesFromProps","originalOnFocus","originalOnBlur","defaultValue","multiline","containerRef","maxCharCount","help","warning","renderEnd","props","inputRef","useRef","isHovered","setIsHovered","useState","isFocused","setIsFocused","useHover","onFocus","useCallback","event","onBlur","mergedRef","useMergeRefs","isInteractive","hasError","isNotNullishOrEmpty","charCount","isNullish","jsxs","View","commonStyles","jsx","Icon","TextInput","ActivityIndicator","Box","LakeSelect","LakeText","Fragment","Fill"],"mappings":"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"}