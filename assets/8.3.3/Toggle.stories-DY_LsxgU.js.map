{"version":3,"file":"Toggle.stories-DY_LsxgU.js","sources":["../../../packages/lake/src/components/Toggle.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { StyleSheet, Text, View, ViewStyle } from \"react-native\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport { colors } from \"../constants/design\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { LakeText } from \"./LakeText\";\nimport { Pressable } from \"./Pressable\";\n\nconst HEIGHT = 26;\nconst BORDER_WIDTH = 1;\n\nconst styles = StyleSheet.create({\n  switch: {\n    userSelect: \"none\",\n    flexDirection: \"row\",\n    borderRadius: HEIGHT / 2,\n    transform: \"translateZ(0px)\",\n    width: \"min-content\",\n    borderColor: colors.gray[100],\n    borderWidth: BORDER_WIDTH,\n  },\n  handle: {\n    position: \"absolute\",\n    width: HEIGHT,\n    height: HEIGHT,\n    top: -BORDER_WIDTH,\n    borderRadius: HEIGHT / 2,\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n    borderWidth: BORDER_WIDTH,\n  },\n  switchItem: {\n    paddingHorizontal: 8,\n    height: HEIGHT - BORDER_WIDTH * 2,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\ntype Props = {\n  value: boolean;\n  disabled?: boolean;\n  onToggle: (next: boolean) => void;\n  mode?: \"desktop\" | \"mobile\";\n  onLabel: string;\n  offLabel: string;\n};\n\nexport const Toggle = ({\n  onToggle,\n  value,\n  disabled = false,\n  mode = \"desktop\",\n  onLabel,\n  offLabel,\n}: Props) => {\n  const containerRef = useRef<View | null>(null);\n  const onItemRef = useRef<Text | null>(null);\n  const offItemRef = useRef<Text | null>(null);\n  const [handleStyle, setHandleStyle] = useState<ViewStyle>();\n  const isMobileMode = mode === \"mobile\";\n  const onColor = value ? colors.positive[500] : colors.gray[500];\n  const offColor = !value ? colors.negative[500] : colors.gray[500];\n\n  const reajustLayout = useCallback(() => {\n    (value ? onItemRef : offItemRef).current?.measureLayout(\n      containerRef.current as unknown as number,\n      (left, _, width) => {\n        setHandleStyle(prev => ({\n          transitionProperty: prev ? \"width, transform\" : \"none\",\n          width: width + 2 * BORDER_WIDTH,\n          transform: `translateX(${value ? -BORDER_WIDTH : left - 2 * BORDER_WIDTH}px)`,\n        }));\n      },\n      () => {},\n    );\n  }, [value]);\n\n  useEffect(reajustLayout, [reajustLayout, value, isMobileMode, onLabel, offLabel]);\n\n  return (\n    <Pressable\n      style={[styles.switch, disabled && commonStyles.disabled]}\n      onPress={() => onToggle(!value)}\n      aria-disabled={disabled}\n      aria-checked={value}\n      disabled={disabled}\n      ref={containerRef}\n      role=\"switch\"\n      onLayout={reajustLayout}\n    >\n      <View\n        style={[\n          styles.handle,\n          handleStyle,\n          {\n            borderColor: value ? colors.positive[500] : colors.negative[500],\n            backgroundColor: value ? colors.positive[50] : colors.negative[50],\n          },\n        ]}\n      />\n\n      <Box style={styles.switchItem} ref={onItemRef}>\n        {isMobileMode ? (\n          <Icon size={16} name=\"checkmark-circle-regular\" color={onColor} />\n        ) : (\n          <LakeText variant=\"smallMedium\" color={onColor}>\n            {onLabel}\n          </LakeText>\n        )}\n      </Box>\n\n      <Box style={styles.switchItem} ref={offItemRef}>\n        {isMobileMode ? (\n          <Icon size={16} name=\"subtract-circle-regular\" color={offColor} />\n        ) : (\n          <LakeText variant=\"smallMedium\" color={offColor}>\n            {offLabel}\n          </LakeText>\n        )}\n      </Box>\n    </Pressable>\n  );\n};\n"],"names":["HEIGHT","BORDER_WIDTH","styles","StyleSheet","colors","Toggle","onToggle","value","disabled","mode","onLabel","offLabel","containerRef","useRef","onItemRef","offItemRef","handleStyle","setHandleStyle","useState","isMobileMode","onColor","offColor","reajustLayout","useCallback","_a","left","_","width","prev","useEffect","jsxs","Pressable","commonStyles","jsx","View","Box","Icon","LakeText"],"mappings":"wWASA,MAAAA,EAAA,GACAC,EAAA,EAEAC,EAAAC,EAAA,OAAA,CACA,OAAA,CACA,WAAA,OACA,cAAA,MACA,aAAAH,EAAA,EACA,UAAA,kBACA,MAAA,cACA,YAAAI,EAAA,KAAA,GAAA,EACA,YAAAH,CACA,EACA,OAAA,CACA,SAAA,WACA,MAAAD,EACA,OAAAA,EACA,IAAA,CAAAC,EACA,aAAAD,EAAA,EACA,mBAAA,QACA,yBAAA,cACA,YAAAC,CACA,EACA,WAAA,CACA,kBAAA,EACA,OAAAD,EAAAC,EAAA,EACA,QAAA,OACA,WAAA,SACA,eAAA,QACA,CACA,CAAA,EAWAI,EAAA,CAAA,CACA,SAAAC,EACA,MAAAC,EACA,SAAAC,EAAA,GACA,KAAAC,EAAA,UACA,QAAAC,EACA,SAAAC,CACA,IAAA,CACA,MAAAC,EAAAC,SAAA,IAAA,EACAC,EAAAD,SAAA,IAAA,EACAE,EAAAF,SAAA,IAAA,EACA,CAAAG,EAAAC,CAAA,EAAAC,EAAA,SAAA,EACAC,EAAAV,IAAA,SACAW,EAAAb,EAAAH,EAAA,SAAA,GAAA,EAAAA,EAAA,KAAA,GAAA,EACAiB,EAAAd,EAAAH,EAAA,KAAA,GAAA,EAAAA,EAAA,SAAA,GAAA,EAEAkB,EAAAC,EAAAA,YAAA,IAAA,QACAC,GAAAjB,EAAAO,EAAAC,GAAA,UAAA,MAAAS,EAAA,cACAZ,EAAA,QACA,CAAAa,EAAAC,EAAAC,IAAA,CACAV,EAAAW,IAAA,CACA,mBAAAA,EAAA,mBAAA,OACA,MAAAD,EAAA,EAAA1B,EACA,UAAA,cAAAM,EAAA,CAAAN,EAAAwB,EAAA,EAAAxB,CAAA,KACA,EAAA,CACA,EACA,IAAA,CAAA,EACA,EACA,CAAAM,CAAA,CAAA,EAEAsB,OAAAA,YAAAP,EAAA,CAAAA,EAAAf,EAAAY,EAAAT,EAAAC,CAAA,CAAA,EAGAmB,EAAA,KAAAC,EAAA,CACA,MAAA,CAAA7B,EAAA,OAAAM,GAAAwB,EAAA,QAAA,EACA,QAAA,IAAA1B,EAAA,CAAAC,CAAA,EACA,gBAAAC,EACA,eAAAD,EACA,SAAAC,EACA,IAAAI,EACA,KAAA,SACA,SAAAU,EAEA,SAAA,CAAAW,EAAA,IAAAC,EAAA,CACA,MAAA,CACAhC,EAAA,OACAc,EACA,CACA,YAAAT,EAAAH,EAAA,SAAA,GAAA,EAAAA,EAAA,SAAA,GAAA,EACA,gBAAAG,EAAAH,EAAA,SAAA,EAAA,EAAAA,EAAA,SAAA,EAAA,CACA,CACA,CAAA,CACA,EAEA6B,EAAAA,IAAAE,EAAA,CAAA,MAAAjC,EAAA,WAAA,IAAAY,EACA,SAAAK,EACAc,EAAAA,IAAAG,EAAA,CAAA,KAAA,GAAA,KAAA,2BAAA,MAAAhB,CAAA,CAAA,EAEAa,EAAAA,IAAAI,EAAA,CAAA,QAAA,cAAA,MAAAjB,EACA,SAAAV,CAAA,CACA,CAEA,CAAA,EAEAuB,EAAAA,IAAAE,EAAA,CAAA,MAAAjC,EAAA,WAAA,IAAAa,EACA,SAAAI,EACAc,EAAAA,IAAAG,EAAA,CAAA,KAAA,GAAA,KAAA,0BAAA,MAAAf,CAAA,CAAA,EAEAY,EAAAA,IAAAI,EAAA,CAAA,QAAA,cAAA,MAAAhB,EACA,SAAAV,CAAA,CACA,CAEA,CAAA,CAAA,CAAA,CAAA,CAGA;;;;;;;;;;;;;;;;;;;"}