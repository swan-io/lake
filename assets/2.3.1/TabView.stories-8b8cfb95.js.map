{"version":3,"file":"TabView.stories-8b8cfb95.js","sources":["../../../packages/lake/src/components/TabView.tsx"],"sourcesContent":["import { useLocation } from \"@swan-io/chicane\";\nimport {\n  Fragment,\n  Ref,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport { LayoutChangeEvent, NativeSyntheticEvent, StyleSheet, Text, View } from \"react-native\";\nimport { P, match } from \"ts-pattern\";\nimport {\n  animations,\n  backgroundColor,\n  colors,\n  negativeSpacings,\n  radii,\n  shadows,\n  spacings,\n  texts,\n} from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { noop } from \"../utils/function\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { FocusTrap } from \"./FocusTrap\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeText } from \"./LakeText\";\nimport { Link } from \"./Link\";\nimport { PressableText } from \"./Pressable\";\nimport { Space, SpacingValue } from \"./Space\";\nimport { TransitionView } from \"./TransitionView\";\n\nconst TABS_HEIGHT = 40;\nexport const tabsViewHeight = TABS_HEIGHT + 1;\n\ntype Tab = {\n  label: string;\n  url: string;\n  icon?: IconName;\n  withSeparator?: boolean;\n  count?: number;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderBottomWidth: 1,\n    borderBottomColor: colors.gray[100],\n    zIndex: 10,\n  },\n  link: {\n    ...texts.medium,\n    position: \"relative\",\n    color: colors.gray[700],\n    height: TABS_HEIGHT,\n    whiteSpace: \"nowrap\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  activeLink: {\n    color: colors.current[500],\n    boxShadow: `inset 0 -2px ${colors.gray[700]}`,\n  },\n  hoveredLink: {\n    boxShadow: `inset 0 -2px ${colors.gray[700]}`,\n  },\n  underline: {\n    position: \"absolute\",\n    bottom: 0,\n    height: 2,\n    width: 1,\n    backgroundColor: colors.current[500],\n  },\n  animatedUnderline: {\n    transformOrigin: \"0 0\",\n    transition: \"200ms ease-in-out transform\",\n  },\n  placeholder: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    visibility: \"hidden\",\n    flexDirection: \"row\",\n    alignItems: \"flex-end\",\n    overflow: \"hidden\",\n    pointerEvents: \"none\",\n  },\n  count: {\n    ...texts.smallRegular,\n    color: colors.current[500],\n    backgroundColor: colors.current[50],\n    borderColor: colors.current[100],\n    borderWidth: 1,\n    borderRadius: radii[4],\n    paddingHorizontal: spacings[4],\n    minWidth: spacings[24],\n    display: \"inline-block\",\n    textAlign: \"center\",\n  },\n  dropdownHandleContainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    alignSelf: \"stretch\",\n  },\n  dropdownPlacement: {\n    position: \"absolute\",\n    right: 0,\n    top: \"100%\",\n  },\n  dropdown: {\n    position: \"absolute\",\n    right: 0,\n    top: \"100%\",\n    backgroundColor: backgroundColor.accented,\n    borderRadius: radii[8],\n    boxShadow: shadows.modal,\n    paddingVertical: spacings[8],\n  },\n  dropdownLink: {\n    ...texts.regular,\n    paddingHorizontal: spacings[16],\n    paddingVertical: spacings[8],\n    whiteSpace: \"nowrap\",\n  },\n  dropdownLinkTextHovered: {\n    backgroundColor: colors.gray[50],\n  },\n  dropdownLinkTextActive: {\n    boxShadow: `inset 3px 0 ${colors.current.primary}`,\n    color: colors.current.primary,\n  },\n  separator: {\n    position: \"absolute\",\n    top: 0,\n    left: negativeSpacings[16],\n    bottom: 0,\n    width: 1,\n    backgroundColor: colors.gray[100],\n  },\n  sticky: {\n    backgroundColor: backgroundColor.default,\n    position: \"sticky\",\n    top: -1,\n  },\n});\n\nconst Dropdown = ({\n  tabs,\n  onHoverStart,\n  onHoverEnd,\n  onLinkFocus,\n  onLinkBlur,\n  onLinkPress,\n}: {\n  tabs: Tab[];\n  onHoverStart: () => void;\n  onHoverEnd: () => void;\n  onLinkFocus: () => void;\n  onLinkBlur: () => void;\n  onLinkPress: () => void;\n}) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart,\n    onHoverEnd,\n  });\n\n  return (\n    <View role=\"menu\" style={styles.dropdown} ref={containerRef}>\n      {tabs.map(({ url, label }) => {\n        return (\n          <Link\n            to={url}\n            key={url}\n            onFocus={onLinkFocus}\n            onBlur={onLinkBlur}\n            onPress={onLinkPress}\n            role=\"menuitem\"\n            ariaCurrentValue=\"location\"\n            style={({ active, hovered }) => [\n              styles.dropdownLink,\n              active && styles.dropdownLinkTextActive,\n              hovered && styles.dropdownLinkTextHovered,\n            ]}\n          >\n            {label}\n          </Link>\n        );\n      })}\n    </View>\n  );\n};\n\ntype DropdownOpeningState = \"Open\" | \"OpenFromFocus\" | \"ForcedOpen\" | \"Closed\" | \"ForcedClosed\";\n\ntype DropdownAction = \"Open\" | \"FocusHandle\" | \"Close\" | \"ForceClose\" | \"ForceToggle\";\n\nconst SHOULD_AUTOFOCUS = new Set<DropdownOpeningState>([\"ForcedOpen\", \"OpenFromFocus\"]);\nconst SHOULD_OPEN = new Set<DropdownOpeningState>([\"Open\", \"ForcedOpen\", \"OpenFromFocus\"]);\nconst SHOULD_LOCK_FOCUS = new Set<DropdownOpeningState>([\"ForcedOpen\"]);\n\nconst DropdownItems = forwardRef<\n  View,\n  {\n    tabs: Tab[];\n    currentUrl: string;\n    otherLabel: string;\n  }\n>(({ tabs, otherLabel, currentUrl }, ref) => {\n  const [openingStatus, dispatch] = useReducer(\n    (state: DropdownOpeningState, action: DropdownAction): DropdownOpeningState => {\n      return match([action, state])\n        .returnType<DropdownOpeningState>()\n        .with(\n          [\"ForceToggle\", \"Closed\"],\n          [\"ForceToggle\", \"Open\"],\n          [\"ForceToggle\", \"ForcedClosed\"],\n          () => \"ForcedOpen\",\n        )\n        .with([\"ForceToggle\", \"OpenFromFocus\"], [\"ForceToggle\", \"ForcedOpen\"], () => \"ForcedClosed\")\n        .with([\"ForceClose\", P.any], () => \"ForcedClosed\")\n        .with([\"FocusHandle\", \"ForcedClosed\"], () => \"Closed\")\n        .with(\n          [\"Open\", \"ForcedOpen\"],\n          [\"FocusHandle\", \"ForcedOpen\"],\n          [\"Close\", \"ForcedOpen\"],\n          () => \"ForcedOpen\",\n        )\n        .with([\"Open\", P.any], () => \"Open\")\n        .with([\"FocusHandle\", P.any], () => \"OpenFromFocus\")\n        .with([\"Close\", P.any], () => \"Closed\")\n        .exhaustive();\n    },\n    \"Closed\",\n  );\n\n  const timeoutRef = useRef<number | undefined>(undefined);\n  const handleRef = useRef<View>(null);\n  const containerRef = useRef<View>(null);\n\n  const lastFocusTimeout = useRef<number | null>(null);\n  const {\n    onHandleFocus,\n    onLinkFocus,\n    onAnyBlur,\n    onHoverStart,\n    onHoverEnd,\n    onPress,\n    onPressOutside,\n    onEscapeKey,\n  } = useMemo(\n    () => ({\n      onHandleFocus: (event: NativeSyntheticEvent<React.FocusEvent>) => {\n        if (isNullish(containerRef.current)) {\n          return;\n        }\n        lastFocusTimeout.current = Date.now();\n        const container = containerRef.current as unknown as Element;\n        const focusEvent = event as unknown as FocusEvent;\n        // Don't reopen if leaving\n        if (!container.contains(focusEvent.relatedTarget as Node | null)) {\n          if (isNotNullish(timeoutRef.current)) {\n            clearTimeout(timeoutRef.current);\n          }\n          dispatch(\"FocusHandle\");\n        }\n      },\n      onLinkFocus: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"Open\");\n      },\n      onAnyBlur: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n      onHoverStart: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"Open\");\n      },\n\n      onHoverEnd: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n\n      onPress: () => {\n        if (lastFocusTimeout.current != null && Date.now() - lastFocusTimeout.current < 32) {\n          return;\n        }\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"ForceToggle\");\n      },\n\n      onPressOutside: (event: MouseEvent | TouchEvent) => {\n        if (isNotNullish(handleRef.current)) {\n          const handle = handleRef.current as unknown as Element;\n          if (handle.contains(event.target as Node | null)) {\n            return;\n          }\n        }\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        // Only force closing in case the focus comes directly to the handle\n        // Then put it back to a regular closed state\n        dispatch(\"ForceClose\");\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n\n      onEscapeKey: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"ForceClose\");\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    return () => {\n      if (isNotNullish(timeoutRef.current)) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  const shouldOpen = SHOULD_OPEN.has(openingStatus);\n  const shouldAutoFocus = SHOULD_AUTOFOCUS.has(openingStatus);\n  const shouldLockFocus = SHOULD_LOCK_FOCUS.has(openingStatus);\n\n  useHover(handleRef, {\n    onHoverStart,\n    onHoverEnd,\n  });\n\n  const mergedRef = useMergeRefs(containerRef, ref);\n\n  const activeTab = tabs.find(({ url }) => url === currentUrl);\n\n  return (\n    <View style={styles.dropdownHandleContainer} ref={mergedRef}>\n      <PressableText\n        ref={handleRef}\n        role=\"button\"\n        aria-expanded={shouldOpen}\n        aria-haspopup=\"true\"\n        onFocus={onHandleFocus}\n        onBlur={onAnyBlur}\n        onPress={onPress}\n        style={({ hovered }) => [\n          styles.link,\n          isNotNullish(activeTab) ? styles.activeLink : hovered ? styles.hoveredLink : null,\n        ]}\n      >\n        <Text>{otherLabel}</Text>\n        <Space width={8} />\n        <Text style={styles.count}>{tabs.length}</Text>\n        <Space width={4} />\n        <Icon name=\"chevron-down-filled\" size={12} />\n      </PressableText>\n\n      <TransitionView {...animations.fadeAndSlideInFromBottom} style={styles.dropdownPlacement}>\n        {shouldOpen ? (\n          <FocusTrap\n            autoFocus={shouldAutoFocus}\n            focusLock={shouldLockFocus}\n            returnFocus={shouldLockFocus}\n            onClickOutside={onPressOutside}\n            onEscapeKey={shouldLockFocus ? onEscapeKey : undefined}\n          >\n            <Dropdown\n              tabs={tabs}\n              onHoverStart={onHoverStart}\n              onHoverEnd={onHoverEnd}\n              onLinkFocus={onLinkFocus}\n              onLinkBlur={onAnyBlur}\n              onLinkPress={onEscapeKey}\n            />\n          </FocusTrap>\n        ) : null}\n      </TransitionView>\n    </View>\n  );\n});\n\ntype Props = {\n  tabs: Tab[];\n  otherLabel: string;\n  hideIfSingleItem?: boolean;\n  padding?: SpacingValue;\n  sticky?: boolean;\n};\n\nexport const TabView = ({\n  tabs,\n  otherLabel,\n  hideIfSingleItem = true,\n  sticky = false,\n  padding,\n}: Props) => {\n  const containerRef = useRef<View | null>(null);\n  const placeholderRef = useRef<View | null>(null);\n  const otherPlaceholderRef = useRef<View | null>(null);\n\n  const linksRefs: Ref<Record<string, Text | null>> = useRef({});\n  const placeholderLinkRef: Ref<Record<string, Text | null>> = useRef({});\n  const [{ left, width }, setUnderlinePosition] = useState({ left: 0, width: 0 });\n  const [hasRendered, setHasRendered] = useState(false);\n  const [[kept, collapsed], setKeptCollapsed] = useState<[Tab[], Tab[]]>([[], []]);\n\n  const location = useLocation();\n  const { path } = location;\n  const currentLocationURL = location.toString();\n\n  useEffect(() => {\n    if (isNotNullish(linksRefs.current)) {\n      const values = Object.entries(linksRefs.current);\n      const container = containerRef.current;\n\n      for (const [link, node] of values) {\n        if (\"/\" + path.join(\"/\") === link && isNotNullish(node) && isNotNullish(container)) {\n          node.measureLayout(\n            container as unknown as number,\n            (left, _, width) => {\n              const leftOffset = padding ?? 0;\n              setUnderlinePosition({ left: left - leftOffset, width });\n            },\n            noop,\n          );\n          return;\n        }\n      }\n    }\n\n    setUnderlinePosition({ left: 0, width: 0 });\n  }, [path, kept, collapsed, padding]);\n\n  useEffect(() => {\n    setHasRendered(width > 0);\n  }, [width]);\n\n  const reajustLayout = useCallback(\n    ({ width }: { container: Element; width: number }) => {\n      const items = tabs.map(tab => {\n        if (placeholderLinkRef.current) {\n          const ref = placeholderLinkRef.current[tab.url];\n\n          if (isNotNullish(ref)) {\n            const element = ref as unknown as Element;\n            const width = element.getBoundingClientRect().width;\n\n            return { tab, width: width + 32 };\n          } else {\n            return { tab, width: 0 };\n          }\n        } else {\n          return { tab, width: 0 };\n        }\n      });\n\n      const kept: (Tab & { width: number })[] = [];\n      const collapsed: (Tab & { width: number })[] = [];\n\n      let cummulatedWidth = 0;\n\n      items.forEach(item => {\n        cummulatedWidth += item.width;\n\n        if (cummulatedWidth < width) {\n          kept.push({ ...item.tab, width: item.width });\n        } else {\n          if (currentLocationURL.startsWith(item.tab.url)) {\n            while (\n              kept.length !== 0 &&\n              kept.reduce((acc, item) => acc + item.width, 0) + (item.width + 16) >= width\n            ) {\n              const last = kept.pop();\n\n              if (isNotNullish(last)) {\n                collapsed.unshift(last);\n                cummulatedWidth -= last.width;\n              }\n            }\n\n            kept.push({ ...item.tab, width: item.width });\n          } else {\n            collapsed.push({ ...item.tab, width: item.width });\n          }\n        }\n      });\n      const otherLabelRef = otherPlaceholderRef.current;\n      let otherLabelWidth = 100;\n      if (isNotNullish(otherLabelRef)) {\n        const otherLabel = otherLabelRef as unknown as Element;\n        otherLabelWidth = otherLabel.getBoundingClientRect().width;\n      }\n\n      const activeInKeptIndex = kept.findIndex(item => currentLocationURL.startsWith(item.url));\n\n      if (activeInKeptIndex !== -1) {\n        const activeInKept = kept[activeInKeptIndex];\n        const activeInKeptWidth = activeInKept?.width ?? 0;\n        const restInKept = [\n          ...kept.slice(0, activeInKeptIndex),\n          ...kept.slice(activeInKeptIndex + 1),\n        ];\n        while (\n          restInKept.length !== 0 &&\n          restInKept.reduce((acc, item) => acc + item.width, 0) +\n            activeInKeptWidth +\n            (collapsed.length >= 1 ? otherLabelWidth : 0) >=\n            width\n        ) {\n          const last = restInKept.pop();\n          if (isNotNullish(last)) {\n            collapsed.unshift(last);\n          }\n        }\n\n        const finalKept = [\n          ...restInKept.slice(0, activeInKeptIndex),\n          ...(activeInKept != null ? [activeInKept] : []),\n          ...restInKept.slice(activeInKeptIndex),\n        ];\n\n        setKeptCollapsed([finalKept, collapsed]);\n      } else {\n        setKeptCollapsed([kept, collapsed]);\n      }\n    },\n    [tabs, currentLocationURL],\n  );\n\n  const onLayout = useCallback(\n    ({\n      target,\n      nativeEvent: {\n        layout: { width },\n      },\n    }: LayoutChangeEvent) => {\n      reajustLayout({ container: target as unknown as Element, width });\n    },\n    [reajustLayout],\n  );\n\n  useLayoutEffect(() => {\n    const ref = placeholderRef.current;\n    if (ref) {\n      const element = ref as unknown as Element;\n      const width = element.getBoundingClientRect().width;\n      reajustLayout({ container: element, width });\n    }\n  }, [reajustLayout]);\n\n  if (tabs.length <= 1 && hideIfSingleItem) {\n    return null;\n  }\n\n  return (\n    <Box\n      alignItems=\"center\"\n      direction=\"row\"\n      role=\"tablist\"\n      ref={containerRef}\n      style={[styles.container, sticky && styles.sticky, { paddingHorizontal: padding }]}\n    >\n      <View style={styles.placeholder} aria-hidden={true} ref={placeholderRef} onLayout={onLayout}>\n        {tabs.map(({ label, url, icon, count }) => (\n          <Fragment key={url}>\n            <Link\n              ref={ref => {\n                if (placeholderLinkRef.current) {\n                  placeholderLinkRef.current[url] = ref;\n                }\n              }}\n              to={url}\n              style={({ active, hovered }) => [\n                styles.link,\n                active ? styles.activeLink : hovered ? styles.hoveredLink : null,\n              ]}\n            >\n              {isNotNullish(icon) && (\n                <>\n                  <Icon name={icon} size={16} color=\"currentColor\" />\n                  <Space width={8} />\n                </>\n              )}\n\n              <Text>{label}</Text>\n\n              {count != null ? (\n                <>\n                  <Space width={8} />\n                  <Text style={styles.count}>{count}</Text>\n                </>\n              ) : null}\n            </Link>\n\n            <Space width={32} />\n          </Fragment>\n        ))}\n\n        <LakeText ref={otherPlaceholderRef} style={styles.link}>\n          <Text>{otherLabel}</Text>\n          <Space width={8} />\n          <Text style={styles.count}>{tabs.length}</Text>\n          <Space width={4} />\n          <Icon name=\"chevron-down-filled\" size={12} />\n        </LakeText>\n      </View>\n\n      {kept.map(({ label, url, icon, withSeparator, count }) => (\n        <Fragment key={url}>\n          <Link\n            role=\"tab\"\n            ref={ref => {\n              if (linksRefs.current) {\n                linksRefs.current[url] = ref;\n              }\n            }}\n            to={url}\n            style={({ active, hovered }) => [\n              styles.link,\n              active ? styles.activeLink : hovered ? styles.hoveredLink : null,\n            ]}\n          >\n            {withSeparator === true && <View style={styles.separator} role=\"none\" />}\n\n            {isNotNullish(icon) && (\n              <>\n                <Icon name={icon} size={16} color=\"currentColor\" />\n                <Space width={8} />\n              </>\n            )}\n\n            <Text>{label}</Text>\n\n            {count != null ? (\n              <>\n                <Space width={8} />\n                <Text style={styles.count}>{count}</Text>\n              </>\n            ) : null}\n          </Link>\n\n          <Space width={32} />\n        </Fragment>\n      ))}\n\n      {collapsed.length > 0 ? (\n        <DropdownItems\n          ref={ref => {\n            collapsed.forEach(item => {\n              if (linksRefs.current) {\n                linksRefs.current[item.url] = ref;\n              }\n            });\n          }}\n          tabs={collapsed}\n          currentUrl={currentLocationURL}\n          otherLabel={otherLabel}\n        />\n      ) : null}\n\n      {hasRendered && (\n        <View\n          style={[\n            styles.underline,\n            styles.animatedUnderline,\n            { transform: `translateX(${left}px) scaleX(${width})` },\n          ]}\n        />\n      )}\n    </Box>\n  );\n};\n"],"names":["TABS_HEIGHT","styles","StyleSheet","colors","texts","radii","spacings","backgroundColor","shadows","negativeSpacings","Dropdown","tabs","onHoverStart","onHoverEnd","onLinkFocus","onLinkBlur","onLinkPress","containerRef","useRef","useHover","jsx","View","url","label","Link","active","hovered","SHOULD_AUTOFOCUS","SHOULD_OPEN","SHOULD_LOCK_FOCUS","DropdownItems","forwardRef","otherLabel","currentUrl","ref","openingStatus","dispatch","useReducer","state","action","match","P","timeoutRef","handleRef","lastFocusTimeout","onHandleFocus","onAnyBlur","onPress","onPressOutside","onEscapeKey","useMemo","event","isNullish","container","focusEvent","isNotNullish","useEffect","shouldOpen","shouldAutoFocus","shouldLockFocus","mergedRef","useMergeRefs","activeTab","jsxs","PressableText","Text","Space","Icon","TransitionView","animations","FocusTrap","TabView","hideIfSingleItem","sticky","padding","placeholderRef","otherPlaceholderRef","linksRefs","placeholderLinkRef","left","width","setUnderlinePosition","useState","hasRendered","setHasRendered","kept","collapsed","setKeptCollapsed","location","useLocation","path","currentLocationURL","values","link","node","left2","_","width2","noop","reajustLayout","useCallback","items","tab","width3","kept2","collapsed2","cummulatedWidth","item","acc","item2","last","otherLabelRef","otherLabelWidth","activeInKeptIndex","activeInKept","activeInKeptWidth","restInKept","finalKept","onLayout","target","useLayoutEffect","element","Box","icon","count","Fragment2","Fragment","LakeText","withSeparator"],"mappings":"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"}