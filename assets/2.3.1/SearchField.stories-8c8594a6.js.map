{"version":3,"file":"SearchField.stories-8c8594a6.js","sources":["../../../packages/lake/src/hooks/useDebounce.ts","../../../packages/lake/src/components/LakeSearchField.tsx"],"sourcesContent":["import { useCallback, useRef } from \"react\";\nimport { isNotNullish } from \"../utils/nullish\";\n\nexport const useDebounce = <T>(func: (arg: T) => void, duration: number) => {\n  const timeoutRef = useRef<number | undefined>(undefined);\n\n  return useCallback(\n    (arg: T) => {\n      if (isNotNullish(timeoutRef.current)) {\n        clearTimeout(timeoutRef.current);\n      }\n      timeoutRef.current = window.setTimeout(func, duration, arg);\n      return () => clearTimeout(timeoutRef.current);\n    },\n    [func, duration],\n  );\n};\n","import { Ref, useCallback, useRef, useState } from \"react\";\nimport { Pressable, StyleSheet, TextInput, View } from \"react-native\";\nimport { animations, backgroundColor, colors, radii } from \"../constants/design\";\nimport { useBoolean } from \"../hooks/useBoolean\";\nimport { useDebounce } from \"../hooks/useDebounce\";\nimport { LakeButton } from \"./LakeButton\";\nimport { LakeTextInput } from \"./LakeTextInput\";\nimport { ResponsiveContainer } from \"./ResponsiveContainer\";\nimport { Line, Svg } from \"./Svg\";\nimport { TransitionView } from \"./TransitionView\";\n\nconst styles = StyleSheet.create({\n  root: {\n    flexGrow: 1,\n    flexShrink: 1,\n    // ResponsiveContainer uses a 200 breaking,\n    // we give the opportunity to the component to grow 2px more\n    // to trigger the change\n    maxWidth: 202,\n    minWidth: 38,\n  },\n  container: {\n    width: \"100%\",\n    flexGrow: 1,\n    flexShrink: 0,\n    alignSelf: \"flex-end\",\n  },\n  input: {\n    paddingRight: 50,\n    minWidth: 200,\n    // fixes a responsiveness bug where the default input width is too large\n    width: 1,\n    flexGrow: 1,\n    transition: \"300ms ease-in-out border-color\",\n  },\n  focus: {\n    outlineStyle: \"none\",\n    borderColor: colors.current.primary,\n  },\n  clearButton: {\n    position: \"absolute\",\n    right: 0,\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n    padding: 16,\n  },\n  clear: {\n    width: 8,\n    height: 8,\n    display: \"flex\",\n  },\n  smallButtonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n  },\n  openSearchFieldContainer: {\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n    bottom: 0,\n  },\n  openSearchField: {\n    position: \"absolute\",\n    right: 0,\n    top: 0,\n    bottom: 0,\n    boxShadow: `0 0 20px 20px ${backgroundColor.default}`,\n    borderRadius: radii[6],\n  },\n});\n\ntype Props = {\n  initialValue: string;\n  placeholder: string;\n  onChangeText: (text: string) => void;\n  debounceDuration?: number;\n  maxWidth?: number;\n};\n\ntype InternalProps = {\n  inputRef: Ref<TextInput>;\n  placeholder: string;\n  initialValue: string;\n  onChange: (value: string) => void;\n  setFocused: { on: () => void; off: () => void };\n  hasFocus: boolean;\n  clear: () => void;\n  currentValue: string;\n};\n\nconst CollapsibleSeachField = ({\n  inputRef,\n  placeholder,\n  initialValue,\n  onChange,\n  setFocused,\n  hasFocus,\n  clear,\n  currentValue,\n}: InternalProps) => {\n  return (\n    <View>\n      <LakeButton\n        mode=\"secondary\"\n        size=\"small\"\n        ariaLabel={placeholder}\n        icon=\"search-filled\"\n        onPress={() => {\n          setFocused.on();\n        }}\n        pill={currentValue !== \"\"}\n      />\n\n      <TransitionView\n        style={styles.openSearchFieldContainer}\n        {...animations.fadeAndSlideInFromRight}\n      >\n        {hasFocus ? (\n          <View style={styles.openSearchField}>\n            <ExpandedSearchField\n              inputRef={inputRef}\n              placeholder={placeholder}\n              initialValue={initialValue}\n              onChange={onChange}\n              setFocused={setFocused}\n              hasFocus={hasFocus}\n              clear={clear}\n              currentValue={currentValue}\n            />\n          </View>\n        ) : null}\n      </TransitionView>\n    </View>\n  );\n};\n\nconst ExpandedSearchField = ({\n  inputRef,\n  placeholder,\n  initialValue,\n  onChange,\n  setFocused,\n  hasFocus,\n  clear,\n}: InternalProps) => {\n  const timeoutRef = useRef<number | null>(null);\n  return (\n    <View style={styles.container}>\n      <LakeTextInput\n        ref={inputRef}\n        autoFocus={hasFocus}\n        icon=\"search-filled\"\n        placeholder={placeholder}\n        defaultValue={initialValue}\n        inputMode=\"search\"\n        onChangeText={onChange}\n        hideErrors={true}\n        onFocus={() => {\n          if (timeoutRef.current != null) {\n            clearTimeout(timeoutRef.current);\n          }\n          setFocused.on();\n        }}\n        onBlur={() => {\n          timeoutRef.current = window.setTimeout(() => {\n            setFocused.off();\n          }, 300);\n        }}\n        style={[styles.input, hasFocus ? styles.focus : null]}\n      />\n\n      <Pressable\n        onPress={() => {\n          if (timeoutRef.current != null) {\n            clearTimeout(timeoutRef.current);\n          }\n          clear();\n        }}\n        style={styles.clearButton}\n      >\n        <Svg viewBox=\"0 0 16 16\" style={styles.clear}>\n          <>\n            <Line\n              x1=\"0\"\n              x2=\"16\"\n              y1=\"0\"\n              y2=\"16\"\n              strokeLinecap=\"round\"\n              stroke={colors.gray[500]}\n              strokeWidth={2}\n            />\n\n            <Line\n              x1=\"0\"\n              x2=\"16\"\n              y1=\"16\"\n              y2=\"0\"\n              strokeLinecap=\"round\"\n              stroke={colors.gray[500]}\n              strokeWidth={2}\n            />\n          </>\n        </Svg>\n      </Pressable>\n    </View>\n  );\n};\n\nexport const LakeSearchField = ({\n  initialValue,\n  placeholder,\n  onChangeText,\n  debounceDuration = 500,\n  maxWidth,\n}: Props) => {\n  const [hasFocus, setFocused] = useBoolean(false);\n  const inputRef = useRef<TextInput>(null);\n\n  const [currentValue, setCurrentValue] = useState(initialValue);\n\n  const onChange = useDebounce((value: string) => {\n    onChangeText(value);\n    setCurrentValue(value.trim());\n  }, debounceDuration);\n\n  const clear = useCallback(() => {\n    if (inputRef.current instanceof HTMLInputElement) {\n      inputRef.current.clear();\n      inputRef.current.focus();\n      onChangeText(\"\");\n      setCurrentValue(\"\");\n    }\n  }, [onChangeText]);\n\n  return (\n    <ResponsiveContainer breakpoint={200} style={[styles.root, maxWidth != null && { maxWidth }]}>\n      {({ large }) =>\n        large ? (\n          <ExpandedSearchField\n            inputRef={inputRef}\n            placeholder={placeholder}\n            initialValue={initialValue}\n            onChange={onChange}\n            setFocused={setFocused}\n            hasFocus={hasFocus}\n            clear={clear}\n            currentValue={currentValue}\n          />\n        ) : (\n          <View style={styles.smallButtonContainer}>\n            <CollapsibleSeachField\n              inputRef={inputRef}\n              placeholder={placeholder}\n              initialValue={initialValue}\n              onChange={onChange}\n              setFocused={setFocused}\n              hasFocus={hasFocus}\n              clear={clear}\n              currentValue={currentValue}\n            />\n          </View>\n        )\n      }\n    </ResponsiveContainer>\n  );\n};\n"],"names":["useDebounce","func","duration","timeoutRef","useRef","useCallback","arg","isNotNullish","styles","StyleSheet","colors","backgroundColor","radii","CollapsibleSeachField","inputRef","placeholder","initialValue","onChange","setFocused","hasFocus","clear","currentValue","jsxs","View","jsx","LakeButton","TransitionView","animations","ExpandedSearchField","LakeTextInput","Pressable","Svg","Fragment","Line","LakeSearchField","onChangeText","debounceDuration","maxWidth","useBoolean","setCurrentValue","useState","value","ResponsiveContainer","large"],"mappings":"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"}