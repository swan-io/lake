{"version":3,"file":"LakeCheckbox-D7oJzfbr.js","sources":["../../../packages/lake/src/components/LakeCheckbox.tsx"],"sourcesContent":["import { ReactNode, useEffect, useRef, useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { ColorVariants, colors, radii } from \"../constants/design\";\nimport { LakeText } from \"./LakeText\";\nimport { Pressable } from \"./Pressable\";\nimport { Space } from \"./Space\";\nimport { Animate, Path, Svg } from \"./Svg\";\n\nconst SIZE = 16;\nconst RADIUS = 4;\n\nconst styles = StyleSheet.create({\n  container: {\n    width: SIZE,\n    height: SIZE,\n    borderRadius: RADIUS,\n    borderWidth: 1,\n    borderColor: colors.gray[500],\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  mixed: {\n    width: SIZE - 8,\n    height: 2,\n  },\n  labelled: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n  errorPill: {\n    width: 5,\n    height: 5,\n    backgroundColor: colors.negative[500],\n    borderRadius: radii[6],\n  },\n});\n\nexport type CheckboxProps = {\n  value: boolean | \"mixed\";\n  color?: ColorVariants;\n  disabled?: boolean;\n  isError?: boolean;\n};\n\nexport const LakeCheckbox = ({\n  value,\n  color = \"current\",\n  disabled = false,\n  isError = false,\n}: CheckboxProps) => {\n  const isFirstRender = useRef(true);\n  const [shouldAnimate, setShouldAnimate] = useState(false);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies(value):\n  useEffect(() => {\n    if (!isFirstRender.current) {\n      setShouldAnimate(true);\n    }\n    isFirstRender.current = false;\n  }, [value]);\n\n  return (\n    <View\n      role=\"none\"\n      style={[\n        styles.container,\n        disabled && styles.disabled,\n        value !== false && {\n          backgroundColor: colors[color].primary,\n          borderColor: colors[color].primary,\n        },\n        isError && { borderColor: colors.negative[500] },\n      ]}\n    >\n      {value === true && (\n        <Svg viewBox=\"0 0 16 16\">\n          <Path\n            d=\"m3.5 7.5 2.8 3.4 5.6-6.7\"\n            stroke={colors[color].contrast}\n            strokeWidth={1.5}\n            fill=\"none\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeDasharray=\"20\"\n            strokeDashoffset={shouldAnimate ? \"20\" : \"0\"}\n          >\n            {shouldAnimate && (\n              <Animate\n                attributeName=\"stroke-dashoffset\"\n                values=\"20;0\"\n                dur=\"150ms\"\n                begin=\"150ms\"\n                fill=\"freeze\"\n              />\n            )}\n          </Path>\n        </Svg>\n      )}\n\n      {value === \"mixed\" && (\n        <View style={[styles.mixed, { backgroundColor: colors[color].contrast }]} />\n      )}\n    </View>\n  );\n};\n\nexport type LabelledCheckboxProps = CheckboxProps & {\n  onValueChange: (value: boolean) => void;\n  label: ReactNode;\n  disabled?: boolean;\n  isError?: boolean;\n};\n\nexport const LakeLabelledCheckbox = ({\n  value,\n  color,\n  label,\n  onValueChange,\n  disabled = false,\n  isError = false,\n}: LabelledCheckboxProps) => {\n  return (\n    <Pressable\n      role=\"checkbox\"\n      aria-checked={value}\n      style={styles.labelled}\n      onPress={() => onValueChange(value !== true)}\n      disabled={disabled}\n    >\n      <LakeCheckbox value={value} color={color} disabled={disabled} isError={isError} />\n      <Space width={8} />\n\n      <LakeText color={colors.gray[900]} userSelect=\"none\">\n        {label}\n      </LakeText>\n\n      {isError ? (\n        <>\n          <Space width={8} />\n          <View style={styles.errorPill} />\n        </>\n      ) : null}\n    </Pressable>\n  );\n};\n"],"names":["SIZE","RADIUS","styles","StyleSheet","colors","radii","LakeCheckbox","value","color","disabled","isError","isFirstRender","useRef","shouldAnimate","setShouldAnimate","useState","useEffect","jsxs","View","jsx","Svg","Path","Animate","LakeLabelledCheckbox","label","onValueChange","Pressable","Space","LakeText","Fragment"],"mappings":"kMAQA,MAAMA,EAAO,GACPC,EAAS,EAETC,EAASC,EAAW,OAAO,CAC/B,UAAW,CACT,MAAOH,EACP,OAAQA,EACR,aAAcC,EACd,YAAa,EACb,YAAaG,EAAO,KAAK,GAAG,EAC5B,WAAY,SACZ,eAAgB,QAAA,EAElB,MAAO,CACL,MAAOJ,EAAO,EACd,OAAQ,CAAA,EAEV,SAAU,CACR,cAAe,MACf,WAAY,QAAA,EAEd,SAAU,CACR,QAAS,EAAA,EAEX,UAAW,CACT,MAAO,EACP,OAAQ,EACR,gBAAiBI,EAAO,SAAS,GAAG,EACpC,aAAcC,EAAM,CAAC,CAAA,CAEzB,CAAC,EASYC,EAAe,CAAC,CAC3B,MAAAC,EACA,MAAAC,EAAQ,UACR,SAAAC,EAAW,GACX,QAAAC,EAAU,EACZ,IAAqB,CACnB,MAAMC,EAAgBC,EAAAA,OAAO,EAAI,EAC3B,CAACC,EAAeC,CAAgB,EAAIC,EAAAA,SAAS,EAAK,EAGxDC,OAAAA,EAAAA,UAAU,IAAM,CACTL,EAAc,SACjBG,EAAiB,EAAI,EAEvBH,EAAc,QAAU,EAC1B,EAAG,CAACJ,CAAK,CAAC,EAGRU,EAAAA,KAACC,EAAA,CACC,KAAK,OACL,MAAO,CACLhB,EAAO,UACPO,GAAYP,EAAO,SACnBK,IAAU,IAAS,CACjB,gBAAiBH,EAAOI,CAAK,EAAE,QAC/B,YAAaJ,EAAOI,CAAK,EAAE,OAAA,EAE7BE,GAAW,CAAE,YAAaN,EAAO,SAAS,GAAG,CAAA,CAAE,EAGhD,SAAA,CAAAG,IAAU,IACTY,MAACC,EAAA,CAAI,QAAQ,YACX,SAAAD,EAAAA,IAACE,EAAA,CACC,EAAE,2BACF,OAAQjB,EAAOI,CAAK,EAAE,SACtB,YAAa,IACb,KAAK,OACL,cAAc,QACd,eAAe,QACf,gBAAgB,KAChB,iBAAkBK,EAAgB,KAAO,IAExC,SAAAA,GACCM,EAAAA,IAACG,EAAA,CACC,cAAc,oBACd,OAAO,OACP,IAAI,QACJ,MAAM,QACN,KAAK,QAAA,CAAA,CACP,CAAA,EAGN,EAGDf,IAAU,SACTY,EAAAA,IAACD,EAAA,CAAK,MAAO,CAAChB,EAAO,MAAO,CAAE,gBAAiBE,EAAOI,CAAK,EAAE,QAAA,CAAU,CAAA,CAAG,CAAA,CAAA,CAAA,CAIlF,EASae,EAAuB,CAAC,CACnC,MAAAhB,EACA,MAAAC,EACA,MAAAgB,EACA,cAAAC,EACA,SAAAhB,EAAW,GACX,QAAAC,EAAU,EACZ,IAEIO,EAAAA,KAACS,EAAA,CACC,KAAK,WACL,eAAcnB,EACd,MAAOL,EAAO,SACd,QAAS,IAAMuB,EAAclB,IAAU,EAAI,EAC3C,SAAAE,EAEA,SAAA,CAAAU,EAAAA,IAACb,EAAA,CAAa,MAAAC,EAAc,MAAAC,EAAc,SAAAC,EAAoB,QAAAC,EAAkB,EAChFS,EAAAA,IAACQ,EAAA,CAAM,MAAO,CAAA,CAAG,EAEjBR,EAAAA,IAACS,GAAS,MAAOxB,EAAO,KAAK,GAAG,EAAG,WAAW,OAC3C,SAAAoB,CAAA,CACH,EAECd,EACCO,EAAAA,KAAAY,WAAA,CACE,SAAA,CAAAV,EAAAA,IAACQ,EAAA,CAAM,MAAO,CAAA,CAAG,EACjBR,EAAAA,IAACD,EAAA,CAAK,MAAOhB,EAAO,SAAA,CAAW,CAAA,CAAA,CACjC,EACE,IAAA,CAAA,CAAA"}