{"version":3,"file":"SupportingDocumentCollection.stories-D5FqoGBD.js","sources":["../../../packages/lake/src/components/Form.tsx","../../../packages/shared-business/src/components/SupportingDocumentCollection.tsx","../../../packages/shared-business/__stories__/SupportingDocumentCollection.stories.tsx"],"sourcesContent":["import { forwardRef, memo, ReactNode } from \"react\";\nimport { unstable_createElement as createElement, View, ViewProps } from \"react-native\";\nimport { Except } from \"type-fest\";\nimport { commonStyles } from \"../constants/commonStyles\";\n\ntype Props = Except<ViewProps, \"role\"> & {\n  children?: ReactNode;\n  onReset?: (event: React.FormEvent<HTMLElement>) => void;\n  onSubmit?: (event: React.FormEvent<HTMLElement>) => void;\n};\n\nexport const Form = memo(\n  forwardRef<View, Props>(({ style, onReset, onSubmit, ...props }, forwardedRef) =>\n    createElement(\"form\", {\n      ...props,\n      ref: forwardedRef,\n      onReset: (event: React.FormEvent<HTMLElement>) => {\n        event.preventDefault();\n        onReset?.(event);\n      },\n      onSubmit: (event: React.FormEvent<HTMLElement>) => {\n        event.preventDefault();\n        onSubmit?.(event);\n      },\n      style: [commonStyles.view, style],\n    }),\n  ),\n);\n\nForm.displayName = \"Form\";\n","import { Array, Future, Option, Result } from \"@swan-io/boxed\";\nimport { Form } from \"@swan-io/lake/src/components/Form\";\nimport { IconName } from \"@swan-io/lake/src/components/Icon\";\nimport { LakeButton, LakeButtonGroup } from \"@swan-io/lake/src/components/LakeButton\";\nimport { LakeCopyButton } from \"@swan-io/lake/src/components/LakeCopyButton\";\nimport { LakeLabel } from \"@swan-io/lake/src/components/LakeLabel\";\nimport { LakeText } from \"@swan-io/lake/src/components/LakeText\";\nimport { LakeTooltip } from \"@swan-io/lake/src/components/LakeTooltip\";\nimport { ReadOnlyFieldList } from \"@swan-io/lake/src/components/ReadOnlyFieldList\";\nimport { Space } from \"@swan-io/lake/src/components/Space\";\nimport { colors } from \"@swan-io/lake/src/constants/design\";\nimport { isNotNullish } from \"@swan-io/lake/src/utils/nullish\";\nimport { NetworkError, Request, Response, TimeoutError, badStatusToError } from \"@swan-io/request\";\nimport {\n  ForwardedRef,\n  Fragment,\n  Ref,\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { UploadFileInput, UploadOutputWithId } from \"../hooks/useFilesUploader\";\nimport { SwanFile } from \"../utils/SwanFile\";\nimport { isTranslationKey, locale, t } from \"../utils/i18n\";\nimport { FilesUploader, FilesUploaderRef } from \"./FilesUploader\";\nimport { LakeModal } from \"./LakeModal\";\n\nconst ACCEPTED_FORMATS = [\"application/pdf\", \"image/png\", \"image/jpeg\", \"image/heic\"];\n\nexport type Document<Purpose extends string> = {\n  purpose: Purpose;\n  file: SwanFile;\n};\n\ntype UploadInput<Purpose extends string> = { fileName: string; purpose: Purpose };\nexport type UploadOutput = { url: string; fields: { key: string; value: string }[] };\n\ntype SupportingDocumentCollectionStatus =\n  | \"WaitingForDocument\"\n  | \"PendingReview\"\n  | \"Approved\"\n  | \"Canceled\"\n  | \"Rejected\";\n\ntype PurposeMetadata = {\n  title: string;\n  values: {\n    type?: \"text\" | \"copy\";\n    title: string;\n    value: string;\n  }[];\n};\n\ntype Props<Purpose extends string> = {\n  status: SupportingDocumentCollectionStatus;\n  generateUpload: (\n    input: UploadInput<Purpose>,\n  ) => Future<Result<UploadOutputWithId<UploadOutput>, unknown>>;\n  documents: Document<Purpose>[];\n  requiredDocumentPurposes: Purpose[];\n  uploadFile?: (\n    config: UploadFileInput<UploadOutput>,\n  ) => Future<Result<Response<string>, NetworkError | TimeoutError>>;\n  onChange?: (documents: Document<Purpose>[]) => void;\n  onRemoveFile?: (file: SwanFile) => Future<Result<unknown, unknown>>;\n  templateLanguage?: string;\n  showIds?: boolean;\n  readOnly?: boolean;\n  getPurposeMetadata?: (purose: Purpose) => PurposeMetadata | undefined;\n  readonlyDocumentPurposes?: Purpose[];\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    opacity: 1,\n  },\n  buttonWithDefaultCursor: {\n    opacity: 1,\n    cursor: \"default\",\n  },\n});\n\ntype HelpProps =\n  | {\n      type: \"tooltip\";\n      text: string;\n      icon?: IconName;\n      width?: number;\n    }\n  | {\n      type: \"button\";\n      label: string;\n      icon?: IconName;\n      onPress: () => void;\n    };\n\nconst Help = (props: HelpProps) => {\n  return match(props)\n    .with({ type: \"tooltip\" }, ({ text, width }) => (\n      <LakeTooltip\n        content={text}\n        width={width}\n        togglableOnFocus={true}\n        placement=\"right\"\n        maxWidth={400}\n      >\n        <LakeButton\n          mode=\"tertiary\"\n          size=\"small\"\n          color=\"gray\"\n          icon={props.icon ?? \"question-circle-regular\"}\n          disabled={true}\n          style={[styles.button, styles.buttonWithDefaultCursor]}\n          ariaLabel={t(\"supportingDocuments.help.whatIsThis\")}\n        />\n      </LakeTooltip>\n    ))\n    .with({ type: \"button\" }, ({ label, onPress }) => (\n      <LakeButton\n        mode=\"tertiary\"\n        size=\"small\"\n        color=\"gray\"\n        icon={props.icon ?? \"question-circle-regular\"}\n        onPress={onPress}\n        style={styles.button}\n        ariaLabel={t(\"supportingDocuments.help.whatIsThis\")}\n      >\n        {label}\n      </LakeButton>\n    ))\n    .exhaustive();\n};\n\nexport const getSupportingDocumentPurposeLabel = (purpose: string) => {\n  const key = `supportingDocuments.purpose.${purpose}`;\n  return isTranslationKey(key) ? t(key) : purpose;\n};\n\nexport const getSupportingDocumentPurposeDescriptionLabel = (purpose: string) => {\n  const key = `supportingDocuments.purpose.${purpose}.description`;\n  return isTranslationKey(key) ? t(key) : \"\";\n};\n\nexport type SupportingDocumentCollectionRef<Purpose extends string> = {\n  areAllRequiredDocumentsFilled: () => boolean;\n  addDocument: (document: Document<Purpose>) => void;\n};\n\nexport const SupportingDocumentCollectionWithRef = <Purpose extends string>(\n  {\n    documents,\n    generateUpload,\n    uploadFile,\n    requiredDocumentPurposes,\n    templateLanguage = locale.language,\n    status,\n    onRemoveFile,\n    showIds = false,\n    readOnly = false,\n    getPurposeMetadata,\n    readonlyDocumentPurposes = [],\n  }: Props<Purpose>,\n  ref: Ref<SupportingDocumentCollectionRef<Purpose>>,\n) => {\n  const [showPowerOfAttorneyModal, setShowPowerOfAttorneyModal] = useState(false);\n  const [showSwornStatementModal, setShowSwornStatementModal] = useState(false);\n  const [currentMetadata, setCurrentMetadata] = useState<PurposeMetadata | undefined>(undefined);\n\n  const [addedDocuments, setAddedDocuments] = useState<Document<Purpose>[]>([]);\n\n  const orderedDocumentPurposes = useMemo(() => {\n    // Get all purposes to display: the required ones and the ones that have at least a document\n    const allPurposes = new Set(requiredDocumentPurposes);\n    const allDocuments = [...addedDocuments, ...documents];\n    allDocuments.forEach(document => allPurposes.add(document.purpose));\n\n    const documentsByPurpose = new Map(\n      [...allPurposes].map(purpose => {\n        const purposeDocuments = allDocuments.filter(document => document.purpose === purpose);\n        return [purpose, purposeDocuments];\n      }),\n    );\n\n    // Map purposes to their priorities (lower priority comes first)\n    // We precompute it to avoid running on each `sort` callback call\n    const allRequiredPurposes = new Set(requiredDocumentPurposes);\n    // Indices:\n    // -> 0: documents aren't empty and all validated\n    // -> 1: purpose is required\n    // -> 2: purpose isn't required\n    const priorityByPurpose = new Map(\n      [...allPurposes].map(purpose => {\n        const purposeDocuments = documentsByPurpose.get(purpose) ?? [];\n        const areAllPurposeDocumentsValidated =\n          purposeDocuments.length > 0 &&\n          purposeDocuments.every(document => document.file.statusInfo.status === \"Validated\");\n\n        const priority = areAllPurposeDocumentsValidated\n          ? 0\n          : allRequiredPurposes.has(purpose)\n            ? 1\n            : 2;\n\n        return [purpose, priority];\n      }),\n    );\n\n    return [...allPurposes]\n      .sort((purposeA, purposeB) => {\n        const purposeAPriority = priorityByPurpose.get(purposeA) ?? 2;\n        const purposeBPriority = priorityByPurpose.get(purposeB) ?? 2;\n\n        return purposeBPriority > purposeAPriority ? -1 : 1;\n      })\n      .map(purpose => {\n        const documents = documentsByPurpose.get(purpose) ?? [];\n        return {\n          purpose,\n          files: documents.map(item => item.file),\n          isRequired: allRequiredPurposes.has(purpose),\n          areAllDocumentsValidated: priorityByPurpose.get(purpose) === 0,\n        };\n      });\n  }, [requiredDocumentPurposes, documents, addedDocuments]);\n\n  const filesByRequiredPurpose = useRef(\n    new Map(\n      Array.filterMap(orderedDocumentPurposes, ({ isRequired, purpose, files }) =>\n        isRequired ? Option.Some([purpose, files]) : Option.None(),\n      ),\n    ),\n  );\n\n  const filesUploaderRefByPurpose = useRef<Partial<Record<Purpose, FilesUploaderRef | null>>>({});\n\n  useImperativeHandle(ref, () => ({\n    areAllRequiredDocumentsFilled: () => {\n      const filesByPurposes = [...filesByRequiredPurpose.current.values()];\n      return filesByPurposes.every(files => files.length > 0);\n    },\n    addDocument: document => {\n      setAddedDocuments(documents => [...documents, document]);\n    },\n  }));\n\n  useEffect(() => {\n    const lastAddedDocument = addedDocuments[addedDocuments.length - 1];\n    if (lastAddedDocument != null) {\n      const ref = filesUploaderRefByPurpose.current[lastAddedDocument?.purpose];\n      if (ref != null) {\n        ref.add(lastAddedDocument.file);\n      }\n    }\n  }, [addedDocuments]);\n\n  const showableDocumentPurposes = orderedDocumentPurposes.filter(({ files }) => {\n    // Completely hide the purpose section if empty and no action is available\n    if (readOnly && files.length === 0) {\n      return false;\n    }\n    return true;\n  });\n\n  return (\n    <Form>\n      {showableDocumentPurposes.map(({ purpose, files, areAllDocumentsValidated, isRequired }) => {\n        const metadata = getPurposeMetadata?.(purpose);\n\n        const label = getSupportingDocumentPurposeDescriptionLabel(purpose);\n\n        return (\n          <Fragment key={purpose}>\n            <LakeLabel\n              label={getSupportingDocumentPurposeLabel(purpose)}\n              description={label}\n              help={\n                isNotNullish(metadata) ? (\n                  <Help\n                    type=\"button\"\n                    label={metadata.title}\n                    onPress={() => setCurrentMetadata(metadata)}\n                  />\n                ) : (\n                  match(purpose as string)\n                    .with(\"PowerOfAttorney\", () => (\n                      <Help\n                        type=\"button\"\n                        icon=\"arrow-down-filled\"\n                        label={t(\"supportingDocuments.help.downloadTemplate\")}\n                        onPress={() => setShowPowerOfAttorneyModal(true)}\n                      />\n                    ))\n                    .with(\"SwornStatement\", () => (\n                      <Help\n                        type=\"button\"\n                        icon=\"arrow-down-filled\"\n                        label={t(\"supportingDocuments.help.downloadTemplate\")}\n                        onPress={() => setShowSwornStatementModal(true)}\n                      />\n                    ))\n                    .otherwise(() => null)\n                )\n              }\n              render={() => (\n                <FilesUploader\n                  ref={ref => {\n                    filesUploaderRefByPurpose.current[purpose] = ref;\n                  }}\n                  // Only allow uploading is the Supporting Document Collection awaits for docs\n                  // and that the specific purpose isn't already fully validated\n                  canUpload={\n                    !readonlyDocumentPurposes.includes(purpose) &&\n                    !readOnly &&\n                    status === \"WaitingForDocument\" &&\n                    !areAllDocumentsValidated\n                  }\n                  accept={ACCEPTED_FORMATS}\n                  maxSize={20_000_000}\n                  icon=\"document-regular\"\n                  initialFiles={files}\n                  generateUpload={generateUpload}\n                  getUploadConfig={file => ({ fileName: file.name, purpose })}\n                  uploadFile={\n                    isNotNullish(uploadFile)\n                      ? uploadFile\n                      : ({ upload, file, onProgress }) => {\n                          const body = new FormData();\n                          upload.fields.forEach(({ key, value }) => body.append(key, value));\n                          body.append(\"file\", file);\n                          setTimeout(() => onProgress(0.8), 100);\n                          return Request.make({\n                            url: upload.url,\n                            method: \"POST\",\n                            body,\n                            type: \"text\",\n                          }).mapOkToResult(badStatusToError);\n                        }\n                  }\n                  formatAndSizeDescription={t(\"supportingDocuments.documentTypes\", {\n                    maxSizeMB: 20_000_000 / 1_000_000,\n                  })}\n                  onRemoveFile={readOnly ? undefined : onRemoveFile}\n                  onChange={files => {\n                    if (isRequired) {\n                      filesByRequiredPurpose.current.set(purpose, files);\n                    }\n                  }}\n                  showIds={showIds}\n                />\n              )}\n            />\n\n            <Space height={24} />\n          </Fragment>\n        );\n      })}\n\n      {showableDocumentPurposes.length === 0 ? (\n        <>\n          <Space height={24} />\n          <LakeText align=\"center\">{t(\"supportingDocuments.noDocuments\")}</LakeText>\n          <Space height={24} />\n        </>\n      ) : null}\n\n      <LakeModal\n        visible={showPowerOfAttorneyModal}\n        title={t(\"supportingDocuments.powerOfAttorneyModal.title\")}\n        icon=\"document-regular\"\n        onPressClose={() => setShowPowerOfAttorneyModal(false)}\n      >\n        <LakeText>{t(\"supportingDocuments.powerOfAttorneyModal.description\")}</LakeText>\n        <Space height={16} />\n\n        <LakeButtonGroup paddingBottom={0}>\n          <LakeButton\n            grow={true}\n            color=\"current\"\n            onPress={() =>\n              window.open(\n                `/power-of-attorney-template/${match(templateLanguage)\n                  .with(\"fr\", () => \"fr\")\n                  .with(\"de\", () => \"de\")\n                  .with(\"es\", () => \"es\")\n                  .otherwise(() => \"en\")}.pdf`,\n              )\n            }\n          >\n            {t(\"supportingDocuments.downloadTemplate\")}\n          </LakeButton>\n        </LakeButtonGroup>\n      </LakeModal>\n\n      <LakeModal\n        visible={showSwornStatementModal}\n        title={t(\"supportingDocuments.purpose.SwornStatement\")}\n        icon=\"document-regular\"\n        onPressClose={() => setShowSwornStatementModal(false)}\n      >\n        <LakeText>{t(\"supportingDocuments.purpose.SwornStatement.description\")}</LakeText>\n        <Space height={16} />\n\n        <LakeButtonGroup paddingBottom={0}>\n          <LakeButton\n            grow={true}\n            color=\"current\"\n            onPress={() => window.open(\"/sworn-statement-template/es.pdf\")}\n          >\n            {t(\"supportingDocuments.downloadTemplate\")}\n          </LakeButton>\n        </LakeButtonGroup>\n      </LakeModal>\n\n      <LakeModal\n        visible={isNotNullish(currentMetadata)}\n        title={t(\"supportingDocuments.informations\")}\n        icon=\"document-regular\"\n        onPressClose={() => setCurrentMetadata(undefined)}\n      >\n        <ReadOnlyFieldList>\n          {currentMetadata?.values.map(({ title, value, type }, index) => (\n            <LakeLabel\n              key={`metadata-${index}`}\n              type=\"viewSmall\"\n              label={title}\n              actions={\n                type === \"copy\" && (\n                  <LakeCopyButton\n                    valueToCopy={value}\n                    copiedText={t(\"copyButton.copiedTooltip\")}\n                    copyText={t(\"copyButton.copyTooltip\")}\n                  />\n                )\n              }\n              render={() => (\n                <LakeText variant=\"regular\" color={colors.gray[900]}>\n                  {value}\n                </LakeText>\n              )}\n            />\n          ))}\n        </ReadOnlyFieldList>\n      </LakeModal>\n    </Form>\n  );\n};\n\nexport const SupportingDocumentCollection = forwardRef(SupportingDocumentCollectionWithRef) as <\n  I extends string,\n>(\n  props: Props<I> & { ref?: ForwardedRef<SupportingDocumentCollectionRef<I>> },\n) => ReturnType<typeof SupportingDocumentCollectionWithRef>;\n","import { Meta } from \"@storybook/react\";\nimport { Future, Result } from \"@swan-io/boxed\";\nimport { LakeButton } from \"@swan-io/lake/src/components/LakeButton\";\nimport { useRef, useState } from \"react\";\nimport {\n  Document,\n  SupportingDocumentCollection,\n  SupportingDocumentCollectionRef,\n  UploadOutput,\n} from \"../src/components/SupportingDocumentCollection\";\nimport { UploadOutputWithId } from \"../src/hooks/useFilesUploader\";\nimport { StoryBlock, StoryPart } from \"./_StoriesComponents\";\n\nexport default {\n  title: \"Onboarding/SupportingDocumentCollection\",\n  component: SupportingDocumentCollection,\n} as Meta<typeof SupportingDocumentCollection>;\n\nconst generateUpload = () =>\n  Future.make<Result<UploadOutputWithId<UploadOutput>, unknown>>(resolve => {\n    setTimeout(() => {\n      resolve(\n        Result.Ok({\n          id: crypto.randomUUID(),\n          upload: {\n            url: window.location.href,\n            fields: [],\n          },\n        }),\n      );\n    }, 500);\n  });\n\nexport const WaitingForDocument = () => {\n  const [documents, setDocuments] = useState<Document<string>[]>([]);\n  const ref = useRef<SupportingDocumentCollectionRef<string>>(null);\n\n  return (\n    <StoryBlock title=\"SupportingDocument\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          ref={ref}\n          status=\"WaitingForDocument\"\n          generateUpload={generateUpload}\n          documents={documents}\n          onChange={setDocuments}\n          requiredDocumentPurposes={[\n            \"ProofOfIdentity\",\n            \"SwornStatement\",\n            \"PowerOfAttorney\",\n            \"UnknownDocumentType\",\n          ]}\n          getPurposeMetadata={purpose => ({\n            title: \"Show metadata\",\n            values: [\n              {\n                title: \"Purpose\",\n                value: purpose,\n              },\n              {\n                title: \"ID\",\n                value: \"666\",\n                type: \"copy\",\n              },\n              {\n                title: \"Lorem ipsum\",\n                value: \"dolor sit amet\",\n              },\n            ],\n          })}\n        />\n\n        <LakeButton\n          onPress={() => {\n            if (ref.current != null) {\n              ref.current.addDocument({\n                purpose: \"UltimateBeneficialOwnerProofOfAddress\",\n                file: {\n                  id: crypto.randomUUID(),\n                  name: \"toto.jpg\",\n                  statusInfo: { status: \"Uploaded\" },\n                },\n              });\n            }\n          }}\n        >\n          Add other document from outside\n        </LakeButton>\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const WaitingForDocumentShowIds = () => {\n  const [documents, setDocuments] = useState<Document<string>[]>([]);\n  return (\n    <StoryBlock title=\"WaitingForDocumentShowIds\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"WaitingForDocument\"\n          generateUpload={generateUpload}\n          documents={documents}\n          onChange={setDocuments}\n          requiredDocumentPurposes={[\n            \"ProofOfIdentity\",\n            \"SwornStatement\",\n            \"PowerOfAttorney\",\n            \"UnknownDocumentType\",\n          ]}\n          showIds={true}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const WaitingForDocumentWithApprovedAndRejected = () => {\n  const [documents, setDocuments] = useState<Document<string>[]>([\n    {\n      purpose: \"ProofOfIdentity\",\n      file: {\n        id: \"id\",\n        name: \"IdCard.pdf\",\n        statusInfo: { status: \"Validated\" },\n      },\n    },\n    {\n      purpose: \"SwornStatement\",\n      file: {\n        id: \"sworn\",\n        name: \"SwornStatement.pdf\",\n        statusInfo: { status: \"Uploaded\" },\n      },\n    },\n    {\n      purpose: \"PowerOfAttorney\",\n      file: {\n        id: \"power\",\n        name: \"power.pdf\",\n        url: \"https://swan.io\",\n        statusInfo: { status: \"Refused\", reason: \"Invalid document\" },\n      },\n    },\n  ]);\n  return (\n    <StoryBlock title=\"SupportingDocument\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"WaitingForDocument\"\n          generateUpload={generateUpload}\n          documents={documents}\n          onChange={setDocuments}\n          requiredDocumentPurposes={[\n            \"ProofOfIdentity\",\n            \"SwornStatement\",\n            \"PowerOfAttorney\",\n            \"UnknownDocumentType\",\n          ]}\n          onRemoveFile={() =>\n            Future.make(resolve => {\n              setTimeout(() => {\n                resolve(Result.Ok(undefined));\n              }, 1_000);\n            })\n          }\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const Pending = () => {\n  return (\n    <StoryBlock title=\"SupportingDocument\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"PendingReview\"\n          generateUpload={generateUpload}\n          documents={[\n            {\n              purpose: \"ProofOfIdentity\",\n              file: {\n                id: \"id\",\n                name: \"IdCard.pdf\",\n                url: \"https://swan.io\",\n                statusInfo: { status: \"Pending\" },\n              },\n            },\n          ]}\n          requiredDocumentPurposes={[\"ProofOfIdentity\"]}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const Approved = () => {\n  return (\n    <StoryBlock title=\"SupportingDocument\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"Approved\"\n          generateUpload={generateUpload}\n          documents={[\n            {\n              purpose: \"ProofOfIdentity\",\n              file: {\n                id: \"id\",\n                name: \"IdCard.pdf\",\n                url: \"https://swan.io\",\n                statusInfo: { status: \"Validated\" },\n              },\n            },\n          ]}\n          requiredDocumentPurposes={[\"ProofOfIdentity\"]}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const ApprovedWithoutDownload = () => {\n  return (\n    <StoryBlock title=\"SupportingDocument\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"Approved\"\n          generateUpload={generateUpload}\n          documents={[\n            {\n              purpose: \"ProofOfIdentity\",\n              file: {\n                id: \"id\",\n                name: \"IdCard.pdf\",\n                statusInfo: { status: \"Validated\" },\n              },\n            },\n          ]}\n          requiredDocumentPurposes={[\"ProofOfIdentity\"]}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const Rejected = () => {\n  return (\n    <StoryBlock title=\"SupportingDocument\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"Rejected\"\n          generateUpload={generateUpload}\n          documents={[\n            {\n              purpose: \"ProofOfIdentity\",\n              file: {\n                id: \"id\",\n                name: \"IdCard.pdf\",\n                url: \"https://swan.io\",\n                statusInfo: { status: \"Refused\", reason: \"Invalid document\" },\n              },\n            },\n          ]}\n          requiredDocumentPurposes={[\"ProofOfIdentity\"]}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const ReadOnlyEmpty = () => {\n  const [documents, setDocuments] = useState<Document<string>[]>([]);\n  return (\n    <StoryBlock title=\"WaitingForDocumentShowIds\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"WaitingForDocument\"\n          generateUpload={generateUpload}\n          documents={documents}\n          onChange={setDocuments}\n          requiredDocumentPurposes={[]}\n          showIds={true}\n          readOnly={true}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n\nexport const ReadOnlyWithDocs = () => {\n  return (\n    <StoryBlock title=\"WaitingForDocumentShowIds\" description=\"Supporting document collection\">\n      <StoryPart title=\"Default\">\n        <SupportingDocumentCollection\n          status=\"WaitingForDocument\"\n          generateUpload={generateUpload}\n          documents={[\n            {\n              purpose: \"ProofOfIdentity\",\n              file: {\n                id: \"id\",\n                name: \"IdCard.pdf\",\n                url: \"https://swan.io\",\n                statusInfo: {\n                  status: \"Refused\",\n                  reason: \"Invalid document\",\n                  reasonCode: \"InvalidDocument\",\n                },\n              },\n            },\n          ]}\n          onChange={() => {}}\n          requiredDocumentPurposes={[]}\n          showIds={true}\n          readOnly={true}\n        />\n      </StoryPart>\n    </StoryBlock>\n  );\n};\n"],"names":["Form","memo","forwardRef","style","onReset","onSubmit","props","forwardedRef","createElement","event","commonStyles","ACCEPTED_FORMATS","styles","StyleSheet","Help","match","text","width","jsx","LakeTooltip","LakeButton","t","label","onPress","getSupportingDocumentPurposeLabel","purpose","key","isTranslationKey","getSupportingDocumentPurposeDescriptionLabel","SupportingDocumentCollectionWithRef","documents","generateUpload","uploadFile","requiredDocumentPurposes","templateLanguage","locale","status","onRemoveFile","showIds","readOnly","getPurposeMetadata","readonlyDocumentPurposes","ref","showPowerOfAttorneyModal","setShowPowerOfAttorneyModal","useState","showSwornStatementModal","setShowSwornStatementModal","currentMetadata","setCurrentMetadata","addedDocuments","setAddedDocuments","orderedDocumentPurposes","useMemo","allPurposes","allDocuments","document","documentsByPurpose","purposeDocuments","allRequiredPurposes","priorityByPurpose","priority","purposeA","purposeB","purposeAPriority","item","filesByRequiredPurpose","useRef","Array","isRequired","files","Option","filesUploaderRefByPurpose","useImperativeHandle","useEffect","lastAddedDocument","showableDocumentPurposes","areAllDocumentsValidated","metadata","jsxs","Fragment","LakeLabel","isNotNullish","FilesUploader","file","upload","onProgress","body","value","Request","badStatusToError","Space","LakeText","LakeModal","LakeButtonGroup","ReadOnlyFieldList","title","type","index","LakeCopyButton","colors","SupportingDocumentCollection","SupportingDocumentCollection_stories","component","Future","make","resolve","setTimeout","Result","Ok","id","crypto","randomUUID","url","window","location","href","fields","WaitingForDocument","setDocuments","StoryBlock","StoryPart","values","current","addDocument","name","statusInfo","WaitingForDocumentShowIds","WaitingForDocumentWithApprovedAndRejected","reason","undefined","Pending","Approved","ApprovedWithoutDownload","Rejected","ReadOnlyEmpty","ReadOnlyWithDocs","reasonCode"],"mappings":"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"}