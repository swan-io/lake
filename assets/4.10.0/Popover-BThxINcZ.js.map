{"version":3,"file":"Popover-BThxINcZ.js","sources":["../../../packages/lake/src/components/Popover.tsx"],"sourcesContent":["import { memo, ReactNode, RefObject, useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  AnimationStyles,\n  GestureResponderEvent,\n  Pressable,\n  ScrollView,\n  StyleSheet,\n  View,\n} from \"react-native\";\nimport { match, P } from \"ts-pattern\";\nimport { Animation, animations, backgroundColor, radii, shadows } from \"../constants/design\";\nimport { useResponsive } from \"../hooks/useResponsive\";\nimport { noop } from \"../utils/function\";\nimport { BottomPanel } from \"./BottomPanel\";\nimport { FocusTrap } from \"./FocusTrap\";\nimport { Portal } from \"./Portal\";\nimport { TransitionView } from \"./TransitionView\";\n\ntype Props = {\n  children: ReactNode | ((state: { mode: \"dropdown\" | \"panel\" }) => ReactNode);\n  id?: string;\n  label?: string;\n  role?: \"listbox\" | \"combobox\" | \"dialog\";\n  describedBy?: string;\n  matchReferenceWidth?: boolean;\n  matchReferenceMinWidth?: boolean;\n  onDismiss?: () => void;\n  onEscapeKey?: () => void;\n  referenceRef: RefObject<unknown>;\n  returnFocus?: boolean;\n  autoFocus?: boolean;\n  visible: boolean;\n  underlay?: boolean;\n  safetyMargin?: number;\n  forcedMode?: \"Dropdown\" | \"BottomPanel\";\n  field?: boolean;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    ...StyleSheet.absoluteFillObject,\n    pointerEvents: \"none\",\n  },\n  contents: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  defaultCursor: {\n    cursor: \"default\",\n  },\n  underlay: {\n    pointerEvents: \"auto\",\n    cursor: \"default\",\n    position: \"fixed\",\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  },\n  popover: {\n    pointerEvents: \"auto\",\n    position: \"absolute\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: backgroundColor.accented,\n    borderRadius: radii[8],\n    marginVertical: 4,\n    overflow: \"hidden\",\n    boxShadow: shadows.modal,\n  },\n  popoverContents: {\n    alignItems: \"stretch\",\n  },\n});\n\ntype ViewportInformation = {\n  availableSpaceAbove: number;\n  availableSpaceBelow: number;\n  availableSpaceBefore: number;\n  availableSpaceAfter: number;\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n  availableHeight: number;\n  width: number;\n};\n\nconst DEFAULT_VIEWPORT_INFORMATION = {\n  availableSpaceAbove: 0,\n  availableSpaceBelow: 0,\n  availableSpaceBefore: 0,\n  availableSpaceAfter: 0,\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  availableHeight: 0,\n  width: 0,\n};\n\nconst FLEX_END = \"flex-end\";\nconst FLEX_START = \"flex-start\";\n\nconst animation: Animation = {\n  ...animations.fadeAndSlideInFromBottom,\n  leave: [\n    animations.fadeAndSlideInFromBottom.leave,\n    { animationDuration: \"100ms\" },\n  ] as unknown as AnimationStyles,\n};\n\nexport const VIEWPORT_WIDTH_THRESHOLD = 600;\n\nexport const Popover = memo<Props>(\n  ({\n    children,\n    id,\n    label,\n    role = \"dialog\",\n    describedBy,\n    matchReferenceWidth = false,\n    matchReferenceMinWidth = false,\n    onDismiss = noop,\n    onEscapeKey = onDismiss,\n    referenceRef,\n    returnFocus = true,\n    autoFocus = true,\n    visible,\n    underlay = true,\n    safetyMargin = 8,\n    forcedMode,\n    field = false,\n  }) => {\n    const [rootElement, setRootElement] = useState<Element | null>(null);\n    const underlayRef = useRef<View | null>(null);\n    const { desktop } = useResponsive(VIEWPORT_WIDTH_THRESHOLD);\n\n    const [\n      {\n        availableSpaceAbove,\n        availableSpaceBelow,\n        availableSpaceBefore,\n        availableSpaceAfter,\n        top,\n        bottom,\n        left,\n        right,\n        availableHeight,\n        width,\n      },\n      setViewportInformation,\n    ] = useState<ViewportInformation>(DEFAULT_VIEWPORT_INFORMATION);\n\n    useEffect(() => {\n      const element = referenceRef.current as HTMLElement | null;\n      if (element != null && visible) {\n        const rect = element.getBoundingClientRect();\n        const availableSpaceAbove = rect.top;\n        const availableSpaceBelow = window.innerHeight - rect.bottom;\n        const visualViewportOffsetTop = window.visualViewport?.offsetTop ?? 0;\n        setViewportInformation({\n          availableSpaceAbove,\n          availableSpaceBelow,\n          availableSpaceBefore: rect.left,\n          availableSpaceAfter: window.innerWidth - rect.right,\n          top: visualViewportOffsetTop + Math.max(rect.bottom, safetyMargin),\n          bottom: Math.max(window.innerHeight - rect.top, safetyMargin),\n          left: Math.max(rect.left, safetyMargin),\n          right: Math.max(window.innerWidth - rect.right, safetyMargin),\n          availableHeight:\n            field || availableSpaceAbove <= availableSpaceBelow\n              ? window.innerHeight - rect.top - (rect.bottom - rect.top) - 20\n              : availableSpaceAbove - 20,\n          width: rect.right - rect.left,\n        });\n      }\n    }, [safetyMargin, referenceRef, visible, field]);\n\n    useEffect(() => {\n      const element = underlayRef.current as unknown as HTMLElement | null;\n      if (!visible && element != null) {\n        element.style.pointerEvents = \"none\";\n      }\n    }, [visible]);\n\n    useEffect(() => {\n      const element = document.createElement(\"div\");\n      document.body.append(element);\n      setRootElement(element);\n      return () => {\n        setRootElement(null);\n        element.remove();\n      };\n    }, []);\n\n    const onPressUnderlay = useCallback(\n      (event: GestureResponderEvent) => {\n        event.preventDefault();\n        onDismiss();\n      },\n      [onDismiss],\n    );\n\n    const onClickOutside = useCallback(\n      ({ target }: MouseEvent | TouchEvent) => {\n        const ref = referenceRef.current;\n        if (\n          !(ref instanceof Element) ||\n          !(target instanceof Element) ||\n          (ref !== target && !ref.contains(target))\n        ) {\n          onDismiss();\n        }\n      },\n      [referenceRef, onDismiss],\n    );\n\n    const onPress = useCallback((event: GestureResponderEvent) => {\n      event.preventDefault();\n    }, []);\n\n    if (rootElement == null) {\n      return null;\n    }\n\n    const mode = match(forcedMode)\n      .with(P.nullish, () => (desktop ? \"Dropdown\" : \"BottomPanel\"))\n      .with(\"BottomPanel\", () => \"BottomPanel\" as const)\n      .with(\"Dropdown\", () => \"Dropdown\" as const)\n      .exhaustive();\n\n    if (mode === \"BottomPanel\") {\n      return (\n        <BottomPanel visible={visible} onPressClose={onDismiss} returnFocus={false}>\n          {typeof children == \"function\" ? children({ mode: \"panel\" }) : children}\n        </BottomPanel>\n      );\n    }\n\n    return (\n      <Portal container={rootElement}>\n        <TransitionView style={styles.container} {...animation}>\n          {visible ? (\n            <View style={styles.contents}>\n              {underlay ? (\n                <Pressable\n                  ref={underlayRef}\n                  style={styles.underlay}\n                  onPress={onPressUnderlay}\n                  aria-label=\"Close\"\n                />\n              ) : null}\n\n              {availableHeight > 0 ? (\n                <ScrollView\n                  style={[\n                    styles.popover,\n                    (field || availableSpaceAbove <= availableSpaceBelow) && { top },\n                    !field && availableSpaceAbove > availableSpaceBelow && { bottom },\n                    availableSpaceBefore <= availableSpaceAfter && { left },\n                    availableSpaceBefore > availableSpaceAfter && { right },\n\n                    matchReferenceMinWidth && { minWidth: width },\n                    matchReferenceWidth && { width },\n                    { maxHeight: field ? undefined : availableHeight },\n                  ]}\n                  contentContainerStyle={[\n                    styles.popoverContents,\n                    {\n                      justifyContent:\n                        !field && availableSpaceAbove > availableSpaceBelow ? FLEX_END : FLEX_START,\n                    },\n                  ]}\n                  id={id}\n                  role={role}\n                  aria-describedby={describedBy}\n                  aria-label={label}\n                >\n                  <FocusTrap\n                    focusLock={true}\n                    returnFocus={returnFocus}\n                    autoFocus={autoFocus}\n                    onEscapeKey={onEscapeKey}\n                    onClickOutside={underlay ? undefined : onClickOutside}\n                  >\n                    <Pressable tabIndex={-1} onPress={onPress} style={styles.defaultCursor}>\n                      {typeof children == \"function\" ? children({ mode: \"dropdown\" }) : children}\n                    </Pressable>\n                  </FocusTrap>\n                </ScrollView>\n              ) : null}\n            </View>\n          ) : null}\n        </TransitionView>\n      </Portal>\n    );\n  },\n);\n"],"names":["styles","StyleSheet","backgroundColor","radii","shadows","DEFAULT_VIEWPORT_INFORMATION","FLEX_END","FLEX_START","animation","animations","VIEWPORT_WIDTH_THRESHOLD","Popover","memo","children","id","label","role","describedBy","matchReferenceWidth","matchReferenceMinWidth","onDismiss","noop","onEscapeKey","referenceRef","returnFocus","autoFocus","visible","underlay","safetyMargin","forcedMode","field","rootElement","setRootElement","useState","underlayRef","useRef","desktop","useResponsive","availableSpaceAbove","availableSpaceBelow","availableSpaceBefore","availableSpaceAfter","top","bottom","left","right","availableHeight","width","setViewportInformation","useEffect","element","rect","availableSpaceAbove2","availableSpaceBelow2","visualViewportOffsetTop","_a","onPressUnderlay","useCallback","event","onClickOutside","target","ref","onPress","match","P","jsx","BottomPanel","Portal","TransitionView","jsxs","View","Pressable","ScrollView","FocusTrap"],"mappings":"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"}