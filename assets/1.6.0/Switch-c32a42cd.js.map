{"version":3,"file":"Switch-c32a42cd.js","sources":["../../../packages/lake/src/hooks/useAnimatedValue.ts","../../../packages/lake/src/utils/math.ts","../../../packages/lake/src/components/Switch.tsx"],"sourcesContent":["import { MutableRefObject, useRef } from \"react\";\nimport { Animated } from \"react-native\";\n\nconst UNSET = Symbol(\"unset\");\n\nexport const useAnimatedValue = (value: number): Animated.Value => {\n  const ref = useRef<Animated.Value | typeof UNSET>(UNSET);\n\n  if (ref.current === UNSET) {\n    ref.current = new Animated.Value(value);\n  }\n\n  return (ref as MutableRefObject<Animated.Value>).current;\n};\n","import { isNotNullish, isNullish } from \"./nullish\";\n\ntype InterpolateTuple = [number, number, ...number[]];\ntype FixedLength<L extends number> = number[] & { 0: number; length: L };\n\ntype InterpolateParams<T extends InterpolateTuple> = {\n  inputRange: T;\n  outputRange: FixedLength<T[\"length\"]>;\n  clamp?: boolean;\n};\n\nconst getValue = (array: number[], index: number, name: string): number => {\n  const value = array[index];\n  if (isNullish(value)) {\n    throw new Error(`Interpolation Error: index \"${index}\" doesn't exists in ${name}`);\n  }\n  return value;\n};\n\nconst clampValue =\n  (min: number, max: number) =>\n  (value: number): number =>\n    Math.max(Math.min(value, max), min);\n\n// Here we can disable no-non-null-assertion because this function is called in interpolate which have types checking if there is at least 2 values in range\nconst getRangeIndexes = <T extends InterpolateTuple>(range: T, value: number): [number, number] => {\n  if (value < range[0]) {\n    return [0, 1];\n  }\n\n  const maxIndex = range.length - 1;\n  for (let i = 0; i <= maxIndex; i += 1) {\n    const nextIndex = i + 1;\n    const startRange = getValue(range, i, \"range\");\n    const endRange = range[nextIndex];\n\n    if (isNotNullish(endRange) && value > startRange && value < endRange) {\n      return [i, nextIndex];\n    }\n  }\n\n  // if no values was found, it means value is upper than last range value\n  return [maxIndex - 1, maxIndex];\n};\n\n/**\n * This function is similar to `Animated.interpolate` except this one can be used with numbers\n * Whereas `Animated.interpolate` works only with animated values and return a listener, not a single value\n */\nexport const interpolate = <T extends InterpolateTuple>({\n  inputRange: input,\n  outputRange: output,\n  clamp = true,\n}: InterpolateParams<T>): ((value: number) => number) => {\n  return (value: number): number => {\n    const [startIndex, endIndex] = getRangeIndexes(input, value);\n    const inputStart = getValue(input, startIndex, \"inputRange\");\n    const inputEnd = getValue(input, endIndex, \"inputRange\");\n    const lastInput = getValue(input, input.length - 1, \"inputRange\");\n    const outputStart = getValue(output, startIndex, \"outputRange\");\n    const outputEnd = getValue(output, endIndex, \"outputRange\");\n\n    const inputRange = inputEnd - inputStart;\n    const outputRange = outputEnd - outputStart;\n\n    const valueToConvert = clamp ? clampValue(input[0], lastInput)(value) : value;\n\n    const valueWithoutOffset = valueToConvert - inputStart;\n    const outputWithoutOffset = (outputRange * valueWithoutOffset) / inputRange;\n    const outputValue = outputWithoutOffset + outputStart;\n\n    return outputValue;\n  };\n};\n","import { forwardRef, memo, useEffect, useRef } from \"react\";\nimport { Animated, Pressable, StyleSheet, View } from \"react-native\";\nimport { backgroundColor, colors, shadows } from \"../constants/design\";\nimport { useAnimatedValue } from \"../hooks/useAnimatedValue\";\nimport { interpolate } from \"../utils/math\";\nimport { Icon } from \"./Icon\";\n\nconst WIDTH = 36;\nconst BUTTON_SIZE = 16;\nconst PADDING = 2;\n\nconst styles = StyleSheet.create({\n  base: {\n    backgroundColor: colors.gray[300],\n    borderRadius: 10,\n    height: 20,\n    width: WIDTH,\n    boxSizing: \"content-box\",\n    transitionProperty: \"background-color\",\n    transitionDuration: \"300ms\",\n    boxShadow: \"inset 0 0 0 1px rgba(0, 0, 0, 0.2)\",\n  },\n  active: {\n    backgroundColor: colors.positive[500],\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n  opaque: {\n    opacity: 1,\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: backgroundColor.accented,\n    borderRadius: 8,\n    boxShadow: shadows.tile,\n    height: 16,\n    justifyContent: \"center\",\n    left: 0,\n    position: \"absolute\",\n    top: PADDING,\n    width: BUTTON_SIZE,\n  },\n  icon: {\n    opacity: 0,\n    transitionProperty: \"opacity\",\n    transitionDuration: \"300ms\",\n  },\n  shadow: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    borderRadius: 10,\n    boxShadow: shadows.tile,\n    opacity: 0,\n    transitionProperty: \"opacity\",\n    transitionDuration: \"300ms\",\n  },\n});\n\ntype Props = {\n  value: boolean;\n  onValueChange?: (value: boolean) => void;\n  disabled?: boolean;\n};\n\nexport const Switch = memo(\n  forwardRef<View, Props>(({ value, disabled = false, onValueChange }, ref) => {\n    const animatedValue = value ? 1 : 0;\n    const animation = useAnimatedValue(animatedValue);\n    const buttonRef = useRef<View>(null);\n\n    useEffect(() => {\n      const interpolateValue = interpolate({\n        inputRange: [0, 1],\n        outputRange: [PADDING, WIDTH - BUTTON_SIZE - PADDING],\n      });\n\n      const id = animation.addListener(({ value }) => {\n        if (buttonRef.current instanceof HTMLElement) {\n          buttonRef.current.style.transform = `translateX(${interpolateValue(value)}px)`;\n        }\n      });\n\n      return () => {\n        animation.removeListener(id);\n      };\n    }, [animation]);\n\n    useEffect(() => {\n      Animated.spring(animation, {\n        bounciness: 6,\n        speed: 25,\n        toValue: animatedValue,\n        useNativeDriver: false,\n      }).start();\n    }, [animation, animatedValue]);\n\n    return (\n      <Pressable\n        ref={ref}\n        role=\"switch\"\n        disabled={disabled}\n        onPress={() => onValueChange?.(!value)}\n      >\n        {({ hovered }) => (\n          <>\n            <View style={[styles.shadow, hovered && styles.opaque]} />\n\n            <View style={[styles.base, value && styles.active, disabled && styles.disabled]}>\n              <View ref={buttonRef} style={styles.button}>\n                <Icon\n                  color={colors.positive[400]}\n                  name=\"checkmark-filled\"\n                  size={10}\n                  style={[styles.icon, value && styles.opaque]}\n                />\n              </View>\n            </View>\n          </>\n        )}\n      </Pressable>\n    );\n  }),\n);\n"],"names":["UNSET","useAnimatedValue","value","ref","useRef","Animated","getValue","array","index","name","isNullish","clampValue","min","max","getRangeIndexes","range","maxIndex","i","nextIndex","startRange","endRange","isNotNullish","interpolate","input","output","clamp","startIndex","endIndex","inputStart","inputEnd","lastInput","outputStart","outputEnd","inputRange","outputRange","valueWithoutOffset","WIDTH","BUTTON_SIZE","PADDING","styles","StyleSheet","colors","backgroundColor","shadows","Switch","memo","forwardRef","disabled","onValueChange","animatedValue","animation","buttonRef","useEffect","interpolateValue","id","value2","jsx","Pressable","hovered","jsxs","Fragment","View","Icon"],"mappings":"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"}