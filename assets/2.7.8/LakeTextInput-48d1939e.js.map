{"version":3,"file":"LakeTextInput-48d1939e.js","sources":["../../../packages/lake/src/hooks/useNativeProp.ts","../../../packages/lake/src/components/LakeTextInput.tsx"],"sourcesContent":["import { MutableRefObject, useLayoutEffect } from \"react\";\nimport { isNotNullish } from \"../utils/nullish\";\n\nexport const useNativeProp = <T>(\n  ref: MutableRefObject<T | null>,\n  name: string,\n  value: number | string | undefined,\n) => {\n  useLayoutEffect(() => {\n    if (isNotNullish(value) && ref.current instanceof Element) {\n      ref.current.setAttribute(name, String(value));\n    }\n  }, [ref, name, value]);\n};\n","import {\n  ChangeEventHandler,\n  forwardRef,\n  ReactNode,\n  Ref,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  ActivityIndicator,\n  NativeSyntheticEvent,\n  StyleSheet,\n  TextInput,\n  TextInputFocusEventData,\n  TextInputProps,\n  View,\n} from \"react-native\";\nimport { Except } from \"type-fest\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport {\n  backgroundColor,\n  colors,\n  ColorVariants,\n  radii,\n  shadows,\n  spacings,\n  texts,\n} from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { useNativeProp } from \"../hooks/useNativeProp\";\nimport { isNotNullish, isNotNullishOrEmpty, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { Fill } from \"./Fill\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeText } from \"./LakeText\";\n\nconst TRANSPARENT = \"transparent\";\n\nconst styles = StyleSheet.create({\n  root: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n  },\n  container: {\n    flexGrow: 1,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  contents: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: \"row\",\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: radii[6],\n    backgroundColor: backgroundColor.accented,\n    borderColor: colors.gray[100],\n    borderWidth: 1,\n    paddingHorizontal: spacings[8],\n  },\n  input: {\n    ...texts.regular,\n    flexGrow: 1,\n    outlineStyle: \"none\",\n    placeholderTextColor: colors.gray[400],\n    color: colors.gray[900],\n    paddingHorizontal: spacings[8],\n    height: 38,\n    minWidth: 0,\n  },\n  multilineInput: {\n    height: \"100%\",\n    padding: spacings[8],\n  },\n  inputWithUnit: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n  hovered: {\n    boxShadow: shadows.tile,\n  },\n  disabled: {\n    backgroundColor: colors.gray[50],\n    borderColor: colors.gray[50],\n    color: colors.gray[900],\n    cursor: \"not-allowed\",\n  },\n  readOnly: {\n    backgroundColor: colors.gray[50],\n    borderColor: colors.gray[50],\n    color: colors.gray[900],\n  },\n  error: {\n    borderColor: colors.negative[400],\n  },\n  valid: {\n    borderColor: colors.positive[500],\n  },\n  readOnlyError: {\n    borderColor: TRANSPARENT,\n    paddingRight: spacings[32],\n  },\n  endIcon: {\n    marginHorizontal: spacings[8],\n  },\n  endComponents: {\n    flexDirection: \"row\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginLeft: spacings[8],\n  },\n  icon: {\n    marginLeft: spacings[8],\n    margiRight: spacings[4],\n  },\n  readOnlyEndIcon: {\n    right: 0,\n  },\n  unit: {\n    backgroundColor: colors.gray[50],\n    paddingHorizontal: spacings[16],\n    paddingVertical: spacings[8],\n    maxHeight: 40,\n    borderTopRightRadius: radii[6],\n    borderBottomRightRadius: radii[6],\n    borderColor: colors.gray[100],\n    borderWidth: 1,\n    borderLeftWidth: 0,\n    flexShrink: 0,\n  },\n  unitDisabled: {\n    borderColor: colors.gray[50],\n  },\n  focused: {\n    borderColor: colors.gray[500],\n    boxShadow: shadows.tile,\n  },\n  descriptionLimitation: {\n    flexShrink: 0,\n  },\n  errorContainer: {\n    paddingTop: spacings[4],\n  },\n});\n\n// The `onChange` type change is for compatibity with Rifm\nexport type LakeTextInputProps = Except<\n  TextInputProps,\n  \"editable\" | \"keyboardType\" | \"onChange\"\n> & {\n  ariaExpanded?: boolean;\n  ariaControls?: string;\n  error?: string;\n  readOnly?: boolean;\n  validating?: boolean;\n  valid?: boolean;\n  disabled?: boolean;\n  color?: ColorVariants;\n  multiline?: boolean;\n  icon?: IconName;\n  unit?: string;\n  inputMode?: TextInputProps[\"inputMode\"];\n  pattern?: string;\n  children?: ReactNode;\n  hideErrors?: boolean;\n  style?: TextInputProps[\"style\"];\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n  maxCharCount?: number;\n  help?: string;\n  renderEnd?: () => ReactNode;\n  containerRef?: Ref<View>;\n};\n\nexport const LakeTextInput = forwardRef<TextInput | null, LakeTextInputProps>(\n  (\n    {\n      ariaExpanded,\n      ariaControls,\n      error,\n      disabled = false,\n      validating = false,\n      valid = false,\n      readOnly = false,\n      icon,\n      children,\n      unit,\n      color = \"gray\",\n      inputMode = \"text\",\n      hideErrors = false,\n      onChange,\n      pattern,\n      style: stylesFromProps,\n      onFocus: originalOnFocus,\n      onBlur: originalOnBlur,\n      value,\n      defaultValue,\n      multiline = false,\n      containerRef,\n      //maxCharCount is different from maxLength(props inherited of TextInput)\n      //maxLength truncates the text in the limitation asked,\n      //maxCharCount doesn't have limitation but displays a counter of characters\n      maxCharCount,\n      help,\n      renderEnd,\n      ...props\n    }: LakeTextInputProps,\n    forwardRef,\n  ) => {\n    const inputRef = useRef<TextInput | null>(null);\n    const [isHovered, setIsHovered] = useState(false);\n    const [isFocused, setIsFocused] = useState(false);\n\n    useNativeProp(inputRef, \"pattern\", pattern);\n\n    useHover(inputRef, {\n      onHoverStart: () => setIsHovered(true),\n      onHoverEnd: () => setIsHovered(false),\n    });\n\n    const onFocus = useCallback(\n      (event: NativeSyntheticEvent<TextInputFocusEventData>) => {\n        setIsFocused(true);\n        originalOnFocus?.(event);\n      },\n      [originalOnFocus],\n    );\n\n    const onBlur = useCallback(\n      (event: NativeSyntheticEvent<TextInputFocusEventData>) => {\n        setIsFocused(false);\n        originalOnBlur?.(event);\n      },\n      [originalOnBlur],\n    );\n\n    const mergedRef = useMergeRefs(inputRef, forwardRef);\n    const isInteractive = !disabled && !readOnly;\n    const hasError = isNotNullishOrEmpty(error);\n    const charCount = isNullish(value) ? 0 : value.length;\n\n    return (\n      <View style={commonStyles.fill}>\n        <View style={styles.root} aria-errormessage={error}>\n          <View style={styles.container}>\n            <View\n              style={[\n                styles.contents,\n                isHovered && isInteractive && styles.hovered,\n                isFocused && { borderColor: colors[color][500] },\n                readOnly && hasError && styles.readOnlyError,\n                disabled && styles.disabled,\n                readOnly && styles.readOnly,\n                isFocused && styles.focused,\n                isNotNullish(unit) && styles.inputWithUnit,\n                hasError && styles.error,\n                valid && styles.valid,\n                stylesFromProps,\n              ]}\n              ref={containerRef}\n            >\n              {isNotNullish(icon) && (\n                <Icon name={icon} size={20} color={colors.current.primary} style={styles.icon} />\n              )}\n\n              <TextInput\n                aria-expanded={ariaExpanded}\n                aria-controls={ariaControls}\n                inputMode={inputMode}\n                {...props}\n                defaultValue={defaultValue}\n                value={isNullish(defaultValue) ? value ?? \"\" : value}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                readOnly={!isInteractive}\n                onChange={onChange as TextInputProps[\"onChange\"]}\n                multiline={multiline}\n                ref={mergedRef}\n                style={[\n                  styles.input,\n                  multiline && styles.multilineInput,\n                  readOnly && hasError && styles.readOnlyError,\n                  disabled && styles.disabled,\n                  readOnly && styles.readOnly,\n                ]}\n              />\n\n              {isNotNullish(renderEnd) && <View style={styles.endComponents}>{renderEnd()}</View>}\n\n              {validating && (\n                <ActivityIndicator\n                  size=\"small\"\n                  style={styles.endIcon}\n                  color={colors.current[500]}\n                />\n              )}\n\n              {!validating && hasError && (\n                <Icon\n                  name=\"warning-regular\"\n                  size={20}\n                  color={colors.negative[400]}\n                  style={[styles.endIcon, readOnly && styles.readOnlyEndIcon]}\n                />\n              )}\n\n              {!validating && !hasError && valid && (\n                <Icon\n                  name=\"checkmark-filled\"\n                  size={20}\n                  color={colors.positive[400]}\n                  style={[styles.endIcon, readOnly && styles.readOnlyEndIcon]}\n                />\n              )}\n            </View>\n\n            {isNotNullish(unit) && (\n              <LakeText\n                color={colors.gray[900]}\n                style={[styles.unit, (disabled || readOnly) && styles.unitDisabled]}\n              >\n                {unit}\n              </LakeText>\n            )}\n          </View>\n\n          {children}\n        </View>\n\n        {!hideErrors && (\n          <Box direction=\"row\" style={styles.errorContainer}>\n            {isNotNullish(error) ? (\n              <LakeText variant=\"smallRegular\" color={colors.negative[500]}>\n                {error}\n              </LakeText>\n            ) : (\n              <LakeText variant=\"smallRegular\" color={colors.gray[500]}>\n                {help ?? \" \"}\n              </LakeText>\n            )}\n\n            {isNotNullish(maxCharCount) && (\n              <>\n                <Fill minWidth={4} />\n\n                <LakeText\n                  variant=\"smallRegular\"\n                  color={charCount > maxCharCount ? colors.negative[500] : colors.gray[400]}\n                  style={styles.descriptionLimitation}\n                >\n                  {charCount} / {maxCharCount}\n                </LakeText>\n              </>\n            )}\n          </Box>\n        )}\n      </View>\n    );\n  },\n);\n"],"names":["useNativeProp","ref","name","value","useLayoutEffect","isNotNullish","TRANSPARENT","styles","StyleSheet","radii","backgroundColor","colors","spacings","texts","shadows","LakeTextInput","forwardRef","ariaExpanded","ariaControls","error","disabled","validating","valid","readOnly","icon","children","unit","color","inputMode","hideErrors","onChange","pattern","stylesFromProps","originalOnFocus","originalOnBlur","defaultValue","multiline","containerRef","maxCharCount","help","renderEnd","props","forwardRef2","inputRef","useRef","isHovered","setIsHovered","useState","isFocused","setIsFocused","useHover","onFocus","useCallback","event","onBlur","mergedRef","useMergeRefs","isInteractive","hasError","isNotNullishOrEmpty","charCount","isNullish","jsxs","View","commonStyles","jsx","Icon","TextInput","ActivityIndicator","LakeText","Box","Fragment","Fill"],"mappings":"qaAGO,MAAMA,GAAgB,CAC3BC,EACAC,EACAC,IACG,CACHC,EAAAA,gBAAgB,IAAM,CAChBC,EAAaF,CAAK,GAAKF,EAAI,mBAAmB,SAChDA,EAAI,QAAQ,aAAaC,EAAM,OAAOC,CAAK,CAAC,CAE7C,EAAA,CAACF,EAAKC,EAAMC,CAAK,CAAC,CACvB,ECyBAG,GAAA,cAEAC,EAAAC,EAAA,OAAA,CAAiC,KAAA,CACzB,SAAA,EACM,cAAA,KACK,EACjB,UAAA,CACW,SAAA,EACC,cAAA,MACK,WAAA,SACH,EACd,SAAA,CACU,SAAA,EACE,WAAA,EACE,cAAA,MACG,MAAA,OACR,QAAA,OACE,WAAA,SACG,eAAA,SACI,aAAAC,EAAA,CAAA,EACK,gBAAAC,GAAA,SACY,YAAAC,EAAA,KAAA,GAAA,EACL,YAAA,EACf,kBAAAC,EAAA,CAAA,CACgB,EAC/B,MAAA,CACO,GAAAC,GAAA,QACI,SAAA,EACC,aAAA,OACI,qBAAAF,EAAA,KAAA,GAAA,EACuB,MAAAA,EAAA,KAAA,GAAA,EACf,kBAAAC,EAAA,CAAA,EACO,OAAA,GACrB,SAAA,CACE,EACZ,eAAA,CACgB,OAAA,OACN,QAAAA,EAAA,CAAA,CACW,EACrB,cAAA,CACe,qBAAA,EACS,wBAAA,CACG,EAC3B,QAAA,CACS,UAAAE,EAAA,IACY,EACrB,SAAA,CACU,gBAAAH,EAAA,KAAA,EAAA,EACuB,YAAAA,EAAA,KAAA,EAAA,EACJ,MAAAA,EAAA,KAAA,GAAA,EACL,OAAA,aACd,EACV,SAAA,CACU,gBAAAA,EAAA,KAAA,EAAA,EACuB,YAAAA,EAAA,KAAA,EAAA,EACJ,MAAAA,EAAA,KAAA,GAAA,CACL,EACxB,MAAA,CACO,YAAAA,EAAA,SAAA,GAAA,CAC2B,EAClC,MAAA,CACO,YAAAA,EAAA,SAAA,GAAA,CAC2B,EAClC,cAAA,CACe,YAAAL,GACA,aAAAM,EAAA,EAAA,CACY,EAC3B,QAAA,CACS,iBAAAA,EAAA,CAAA,CACqB,EAC9B,cAAA,CACe,cAAA,MACE,QAAA,OACN,WAAA,SACG,eAAA,SACI,WAAAA,EAAA,CAAA,CACM,EACxB,KAAA,CACM,WAAAA,EAAA,CAAA,EACkB,WAAAA,EAAA,CAAA,CACA,EACxB,gBAAA,CACiB,MAAA,CACR,EACT,KAAA,CACM,gBAAAD,EAAA,KAAA,EAAA,EAC2B,kBAAAC,EAAA,EAAA,EACD,gBAAAA,EAAA,CAAA,EACH,UAAA,GAChB,qBAAAH,EAAA,CAAA,EACkB,wBAAAA,EAAA,CAAA,EACG,YAAAE,EAAA,KAAA,GAAA,EACJ,YAAA,EACf,gBAAA,EACI,WAAA,CACL,EACd,aAAA,CACc,YAAAA,EAAA,KAAA,EAAA,CACe,EAC7B,QAAA,CACS,YAAAA,EAAA,KAAA,GAAA,EACqB,UAAAG,EAAA,IACT,EACrB,sBAAA,CACuB,WAAA,CACT,EACd,eAAA,CACgB,WAAAF,EAAA,CAAA,CACQ,CAE1B,CAAA,EA8BOG,EAAAC,EAAA,WAAsB,CAAA,CAEzB,aAAAC,EACE,aAAAC,EACA,MAAAC,EACA,SAAAC,EAAA,GACW,WAAAC,EAAA,GACE,MAAAC,EAAA,GACL,SAAAC,EAAA,GACG,KAAAC,EACX,SAAAC,EACA,KAAAC,EACA,MAAAC,EAAA,OACQ,UAAAC,EAAA,OACI,WAAAC,EAAA,GACC,SAAAC,EACb,QAAAC,EACA,MAAAC,EACO,QAAAC,EACE,OAAAC,EACD,MAAA/B,EACR,aAAAgC,EACA,UAAAC,EAAA,GACY,aAAAC,EACZ,aAAAC,EAIA,KAAAC,EACA,UAAAC,EACA,GAAAC,CACG,EAAAC,IAAA,CAIL,MAAAC,EAAAC,SAAA,IAAA,EACA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EAEA/C,GAAA2C,EAAA,UAAAZ,CAAA,EAEAmB,GAAAP,EAAA,CAAmB,aAAA,IAAAG,EAAA,EAAA,EACoB,WAAA,IAAAA,EAAA,EAAA,CACD,CAAA,EAGtC,MAAAK,EAAAC,EAAA,YAAgBC,GAAA,CAEZJ,EAAA,EAAA,EACAhB,GAAA,MAAAA,EAAAoB,EAAuB,EACzB,CAAApB,CAAA,CACgB,EAGlBqB,EAAAF,EAAA,YAAeC,GAAA,CAEXJ,EAAA,EAAA,EACAf,GAAA,MAAAA,EAAAmB,EAAsB,EACxB,CAAAnB,CAAA,CACe,EAGjBqB,EAAAC,GAAAb,EAAAD,CAAA,EACAe,EAAA,CAAArC,GAAA,CAAAG,EACAmC,EAAAC,GAAAxC,CAAA,EACAyC,EAAAC,EAAA1D,CAAA,EAAA,EAAAA,EAAA,OAEA,OAAA2D,EAAAC,EAAA,CAAA,MAAAC,GAAA,KAAA,SAAA,CAEIF,EAAAC,EAAA,CAAA,MAAAxD,EAAA,KAAA,oBAAAY,EAAA,SAAA,CACE2C,EAAAC,EAAA,CAAA,MAAAxD,EAAA,UAAA,SAAA,CACEuD,EAAAC,EAAC,CAAA,MAAA,CACQxD,EAAA,SACEsC,GAAAY,GAAAlD,EAAA,QAC8ByC,GAAA,CAAA,YAAArC,EAAAgB,CAAA,EAAA,GAAA,CAAA,EACUJ,GAAAmC,GAAAnD,EAAA,cAChBa,GAAAb,EAAA,SACZgB,GAAAhB,EAAA,SACAyC,GAAAzC,EAAA,QACCF,EAAAqB,CAAA,GAAAnB,EAAA,cACSmD,GAAAnD,EAAA,MACVe,GAAAf,EAAA,MACHyB,CAChB,EACF,IAAAK,EACK,SAAA,CAEJhC,EAAAmB,CAAA,GAAAyC,EAAAC,EAAA,CAAA,KAAA1C,EAAA,KAAA,GAAA,MAAAb,EAAA,QAAA,QAAA,MAAAJ,EAAA,KAAA,EACgF0D,EAGjFE,GAAC,CAAA,gBAAAlD,EACgB,gBAAAC,EACA,UAAAU,EACf,GAAAa,EACI,aAAAN,EACJ,MAAA0B,EAAA1B,CAAA,EAAAhC,GAAA,GAAAA,EAC+C,QAAAgD,EAC/C,OAAAG,EACA,SAAA,CAAAG,EACW,SAAA3B,EACX,UAAAM,EACA,IAAAmB,EACK,MAAA,CACEhD,EAAA,MACE6B,GAAA7B,EAAA,eACagB,GAAAmC,GAAAnD,EAAA,cACWa,GAAAb,EAAA,SACZgB,GAAAhB,EAAA,QACA,CACrB,CAAA,EACFF,EAAAmC,CAAA,GAAAyB,EAAAF,EAAA,CAAA,MAAAxD,EAAA,cAAA,SAAAiC,EAAA,CAAA,CAAA,EAE4EnB,GAAA4C,EAG1EG,GAAC,CAAA,KAAA,QACM,MAAA7D,EAAA,QACS,MAAAI,EAAA,QAAA,GAAA,CACW,CAAA,EAC3B,CAAAU,GAAAqC,GAAAO,EAIAC,EAAC,CAAA,KAAA,kBACM,KAAA,GACC,MAAAvD,EAAA,SAAA,GAAA,EACoB,MAAA,CAAAJ,EAAA,QAAAgB,GAAAhB,EAAA,eAAA,CACgC,CAAA,EAC5D,CAAAc,GAAA,CAAAqC,GAAApC,GAAA2C,EAIAC,EAAC,CAAA,KAAA,mBACM,KAAA,GACC,MAAAvD,EAAA,SAAA,GAAA,EACoB,MAAA,CAAAJ,EAAA,QAAAgB,GAAAhB,EAAA,eAAA,CACgC,CAAA,CAC5D,CAAA,CAAA,EAEJF,EAAAqB,CAAA,GAAAuC,EAGEI,EAAC,CAAA,MAAA1D,EAAA,KAAA,GAAA,EACuB,MAAA,CAAAJ,EAAA,MAAAa,GAAAG,IAAAhB,EAAA,YAAA,EAC4C,SAAAmB,CAEjE,CAAA,CACH,EAAA,EAEJD,CAEC,EAAA,EACH,CAAAI,GAAAiC,EAAAQ,GAAA,CAAA,UAAA,MAAA,MAAA/D,EAAA,eAAA,SAAA,CAIKF,EAAAc,CAAA,EAAA8C,EAAAI,EAAA,CAAA,QAAA,eAAA,MAAA1D,EAAA,SAAA,GAAA,EAAA,SAAAQ,EAAA,EAAA8C,EAAAI,EAAA,CAAA,QAAA,eAAA,MAAA1D,EAAA,KAAA,GAAA,EAAA,SAAA4B,GAAA,GAAA,CAAA,EAOClC,EAAAiC,CAAA,GAAAwB,EAAAS,GAAA,CAAA,SAAA,CAKEN,EAAAO,GAAA,CAAA,SAAA,CAAA,CAAA,EAAmBV,EAEnBO,EAAC,CAAA,QAAA,eACS,MAAAT,EAAAtB,EAAA3B,EAAA,SAAA,GAAA,EAAAA,EAAA,KAAA,GAAA,EACgE,MAAAJ,EAAA,sBAC1D,SAAA,CAEbqD,EAAA,MAAUtB,CAAI,CAAA,CAAA,CACjB,EAAA,CACF,EAAA,CAEJ,CAAA,CAAA,CAEJ,CAGN;;"}