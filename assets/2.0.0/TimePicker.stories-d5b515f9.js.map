{"version":3,"file":"TimePicker.stories-d5b515f9.js","sources":["../../../packages/lake/src/components/TimePicker.tsx"],"sourcesContent":["import { AsyncData, Option, Result } from \"@swan-io/boxed\";\nimport { useMemo } from \"react\";\nimport { Rifm } from \"rifm\";\nimport { identity, noop } from \"../utils/function\";\nimport { isNullish } from \"../utils/nullish\";\nimport { getRifmProps } from \"../utils/rifm\";\nimport { LakeCombobox } from \"./LakeCombobox\";\n\ntype Time = {\n  hour: number;\n  minute: number;\n};\n\nconst DEFAULT_START_TIME: Time = { hour: 0, minute: 0 };\nconst DEFAULT_END_TIME: Time = { hour: 23, minute: 59 };\nconst DEFAULT_INTERVAL_IN_MINUTES = 15;\n\nconst rifmTimeProps = getRifmProps({\n  accept: \"numeric\",\n  charMap: { 2: \":\" },\n  maxLength: 4,\n});\n\nexport const parseTime = (time: string): Option<Time> => {\n  const [hours, minutes] = time.split(\":\").map(Number);\n\n  if (isNullish(hours) || isNaN(hours) || isNullish(minutes) || isNaN(minutes)) {\n    return Option.None();\n  }\n\n  return Option.Some({ hour: hours, minute: minutes });\n};\n\nconst parseTypingHours = (time: string): Option<number> => {\n  const [hours] = time.split(\":\");\n\n  if (isNullish(hours) || hours?.length !== 2) {\n    return Option.None();\n  }\n\n  const parsedHours = Number(hours);\n\n  if (parsedHours < 0 || parsedHours > 23) {\n    return Option.None();\n  }\n\n  if (isNaN(parsedHours)) {\n    return Option.None();\n  }\n\n  return Option.Some(parsedHours);\n};\n\nconst stringifyTime = (time: Time): string => {\n  return `${time.hour.toString().padStart(2, \"0\")}:${time.minute.toString().padStart(2, \"0\")}`;\n};\n\nexport const validateTime = (time: Time): boolean => {\n  return time.hour >= 0 && time.hour <= 23 && time.minute >= 0 && time.minute <= 59;\n};\n\nconst timeToMinutes = (time: Time): number => {\n  return time.hour * 60 + time.minute;\n};\n\nconst minutesToTime = (minutes: number): Time => {\n  return {\n    hour: Math.floor(minutes / 60),\n    minute: minutes % 60,\n  };\n};\n\nconst generateTimeList = (start: Time, end: Time, intervalInMinutes: number): string[] => {\n  const startMinutes = timeToMinutes(start);\n  const endMinutes = timeToMinutes(end);\n\n  const timeList = [];\n  for (let i = startMinutes; i <= endMinutes; i += intervalInMinutes) {\n    const time = minutesToTime(i);\n    timeList.push(stringifyTime(time));\n  }\n\n  return timeList;\n};\n\nexport type TimePickerProps = {\n  value?: string;\n  onChangeText: (value: string) => void;\n  start?: Time;\n  end?: Time;\n  intervalInMinutes?: number;\n  nbMaxItems?: number;\n  readOnly?: boolean;\n  disabled?: boolean;\n  error?: string;\n  noTimeLabel: string;\n};\n\nexport const TimePicker = ({\n  value,\n  onChangeText,\n  start = DEFAULT_START_TIME,\n  end = DEFAULT_END_TIME,\n  intervalInMinutes = DEFAULT_INTERVAL_IN_MINUTES,\n  nbMaxItems,\n  readOnly,\n  disabled,\n  error,\n  noTimeLabel,\n}: TimePickerProps) => {\n  const typingHour = parseTypingHours(value ?? \"\");\n\n  const optionsInterval: [Time, Time] = useMemo(\n    () =>\n      typingHour.match({\n        Some: hour => [\n          { hour, minute: 0 },\n          { hour, minute: 59 },\n        ],\n        None: () => [start, end],\n      }),\n    [typingHour, start, end],\n  );\n\n  const options = useMemo(\n    () =>\n      generateTimeList(optionsInterval[0], optionsInterval[1], intervalInMinutes).slice(\n        0,\n        nbMaxItems,\n      ),\n    [optionsInterval, intervalInMinutes, nbMaxItems],\n  );\n\n  const items = useMemo(() => AsyncData.Done(Result.Ok(options)), [options]);\n\n  return (\n    <Rifm value={value ?? \"\"} onChange={onChangeText} {...rifmTimeProps}>\n      {({ value, onChange }) => (\n        <LakeCombobox\n          keyExtractor={identity}\n          placeholder=\"HH:MM\"\n          value={value}\n          items={items}\n          renderItem={identity}\n          readOnly={readOnly}\n          disabled={disabled}\n          error={error}\n          emptyResultText={noTimeLabel}\n          onChange={onChange}\n          onValueChange={noop}\n          onSelectItem={onChangeText}\n        />\n      )}\n    </Rifm>\n  );\n};\n"],"names":["DEFAULT_START_TIME","DEFAULT_END_TIME","DEFAULT_INTERVAL_IN_MINUTES","rifmTimeProps","getRifmProps","parseTime","time","hours","minutes","isNullish","Option","parseTypingHours","parsedHours","stringifyTime","validateTime","timeToMinutes","minutesToTime","generateTimeList","start","end","intervalInMinutes","startMinutes","endMinutes","timeList","i","TimePicker","value","onChangeText","nbMaxItems","readOnly","disabled","error","noTimeLabel","typingHour","optionsInterval","useMemo","hour","options","items","AsyncData","Result","jsx","Rifm","value2","onChange","LakeCombobox","identity","noop"],"mappings":"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"}