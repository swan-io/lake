{"version":3,"file":"TimePicker.stories-5ff1b350.js","sources":["../../../packages/lake/src/components/TimePicker.tsx"],"sourcesContent":["import { AsyncData, Option, Result } from \"@swan-io/boxed\";\nimport { useMemo } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Rifm } from \"rifm\";\nimport { colors } from \"../constants/design\";\nimport { identity, noop } from \"../utils/function\";\nimport { isNotNullishOrEmpty, isNullish } from \"../utils/nullish\";\nimport { getRifmProps } from \"../utils/rifm\";\nimport { Box } from \"./Box\";\nimport { Fill } from \"./Fill\";\nimport { Icon } from \"./Icon\";\nimport { LakeCombobox } from \"./LakeCombobox\";\nimport { LakeLabel } from \"./LakeLabel\";\nimport { LakeText } from \"./LakeText\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  label: {\n    flex: 1,\n  },\n  arrowContainer: {\n    height: 40, // input height\n  },\n});\n\ntype Time = {\n  hour: number;\n  minute: number;\n};\n\nconst DEFAULT_START_TIME: Time = { hour: 0, minute: 0 };\nconst DEFAULT_END_TIME: Time = { hour: 23, minute: 59 };\nconst DEFAULT_INTERVAL_IN_MINUTES = 15;\n\nconst rifmTimeProps = getRifmProps({\n  accept: \"numeric\",\n  charMap: { 2: \":\" },\n  maxLength: 4,\n});\n\nexport const parseTime = (time: string): Option<Time> => {\n  const [hours, minutes] = time.split(\":\").map(Number);\n\n  if (isNullish(hours) || isNaN(hours) || isNullish(minutes) || isNaN(minutes)) {\n    return Option.None();\n  }\n\n  return Option.Some({ hour: hours, minute: minutes });\n};\n\nexport const parseTimeRange = (value: {\n  start?: string;\n  end?: string;\n}): { start: Option<Time>; end: Option<Time> } => {\n  const start = isNotNullishOrEmpty(value.start) ? parseTime(value.start) : Option.None();\n  const end = isNotNullishOrEmpty(value.end) ? parseTime(value.end) : Option.None();\n\n  return { start, end };\n};\n\nconst parseTypingHours = (time: string): Option<number> => {\n  const [hours] = time.split(\":\");\n\n  if (isNullish(hours) || hours?.length !== 2) {\n    return Option.None();\n  }\n\n  const parsedHours = Number(hours);\n\n  if (parsedHours < 0 || parsedHours > 23) {\n    return Option.None();\n  }\n\n  if (isNaN(parsedHours)) {\n    return Option.None();\n  }\n\n  return Option.Some(parsedHours);\n};\n\nconst stringifyTime = (time: Time): string => {\n  return `${time.hour.toString().padStart(2, \"0\")}:${time.minute.toString().padStart(2, \"0\")}`;\n};\n\nconst timeToMinutes = (time: Time): number => {\n  return time.hour * 60 + time.minute;\n};\n\nconst minutesToTime = (minutes: number): Time => {\n  return {\n    hour: Math.floor(minutes / 60),\n    minute: minutes % 60,\n  };\n};\n\nexport const validateTime = (time: Time): boolean => {\n  return time.hour >= 0 && time.hour <= 23 && time.minute >= 0 && time.minute <= 59;\n};\n\nconst isTimeBefore = (time1: Time, time2: Time): boolean => {\n  return timeToMinutes(time1) < timeToMinutes(time2);\n};\n\nexport const validateTimeRange = (range: { start: Option<Time>; end: Option<Time> }): boolean => {\n  if (range.start.isNone() || range.end.isNone()) {\n    return true;\n  }\n\n  return isTimeBefore(range.start.value, range.end.value);\n};\n\nconst generateTimeList = (start: Time, end: Time, intervalInMinutes: number): string[] => {\n  const startMinutes = timeToMinutes(start);\n  const endMinutes = timeToMinutes(end);\n\n  const timeList = [];\n  for (let i = startMinutes; i <= endMinutes; i += intervalInMinutes) {\n    const time = minutesToTime(i);\n    timeList.push(stringifyTime(time));\n  }\n\n  return timeList;\n};\n\nexport type TimePickerProps = {\n  value?: string;\n  onChangeText: (value: string) => void;\n  suggestionStart?: Time;\n  suggestionEnd?: Time;\n  intervalInMinutes?: number;\n  nbMaxSuggestions?: number;\n  readOnly?: boolean;\n  disabled?: boolean;\n  error?: string;\n  hideErrors?: boolean;\n  noSuggestionLabel: string;\n};\n\nexport const TimePicker = ({\n  value,\n  onChangeText,\n  suggestionStart = DEFAULT_START_TIME,\n  suggestionEnd = DEFAULT_END_TIME,\n  intervalInMinutes = DEFAULT_INTERVAL_IN_MINUTES,\n  nbMaxSuggestions,\n  readOnly,\n  disabled,\n  error,\n  hideErrors,\n  noSuggestionLabel,\n}: TimePickerProps) => {\n  const typingHour = parseTypingHours(value ?? \"\");\n\n  const optionsInterval: [Time, Time] = useMemo(\n    () =>\n      typingHour.match({\n        Some: hour => [\n          { hour, minute: 0 },\n          { hour, minute: 59 },\n        ],\n        None: () => [suggestionStart, suggestionEnd],\n      }),\n    [typingHour, suggestionStart, suggestionEnd],\n  );\n\n  const options = useMemo(\n    () =>\n      generateTimeList(optionsInterval[0], optionsInterval[1], intervalInMinutes).slice(\n        0,\n        nbMaxSuggestions,\n      ),\n    [optionsInterval, intervalInMinutes, nbMaxSuggestions],\n  );\n\n  const items = useMemo(() => AsyncData.Done(Result.Ok(options)), [options]);\n\n  return (\n    <Rifm value={value ?? \"\"} onChange={onChangeText} {...rifmTimeProps}>\n      {({ value, onChange }) => (\n        <LakeCombobox\n          keyExtractor={identity}\n          placeholder=\"HH:MM\"\n          value={value}\n          items={items}\n          itemHeight={40}\n          nbItemsDisplayed={4.5}\n          renderItem={option => {\n            const selected = option === value;\n\n            return (\n              <Box direction=\"row\" alignItems=\"center\">\n                <LakeText\n                  color={selected ? colors.gray[700] : colors.gray[900]}\n                  variant={selected ? \"smallRegular\" : \"medium\"}\n                >\n                  {option}\n                </LakeText>\n\n                <Fill minWidth={8} />\n\n                {selected && (\n                  <Icon name=\"checkmark-filled\" color={colors.positive[500]} size={16} />\n                )}\n              </Box>\n            );\n          }}\n          readOnly={readOnly}\n          disabled={disabled}\n          error={error}\n          hideErrors={hideErrors}\n          emptyResultText={noSuggestionLabel}\n          onChange={onChange}\n          onValueChange={noop}\n          onSelectItem={onChangeText}\n        />\n      )}\n    </Rifm>\n  );\n};\n\nexport type TimeRangePickerProps = {\n  value: { start?: string; end?: string };\n  onChange: (value: { start?: string; end?: string }) => void;\n  intervalInMinutes?: number;\n  nbMaxSuggestions?: number;\n  readOnly?: boolean;\n  disabled?: boolean;\n  error?: string;\n  startLabel: string;\n  endLabel: string;\n  noSuggestionLabel: string;\n};\n\nexport const TimeRangePicker = ({\n  value,\n  onChange,\n  intervalInMinutes = DEFAULT_INTERVAL_IN_MINUTES,\n  nbMaxSuggestions,\n  readOnly,\n  disabled,\n  error,\n  startLabel,\n  endLabel,\n  noSuggestionLabel,\n}: TimeRangePickerProps) => {\n  const handleStartChange = (startValue: string) => {\n    onChange({\n      start: startValue,\n      end: value.end,\n    });\n  };\n\n  const handleEndChange = (endValue: string) => {\n    onChange({\n      start: value.start,\n      end: endValue,\n    });\n  };\n\n  return (\n    <View>\n      <Box direction=\"row\" alignItems=\"end\">\n        <LakeLabel\n          label={startLabel}\n          style={styles.label}\n          render={() => (\n            <TimePicker\n              value={value.start}\n              intervalInMinutes={intervalInMinutes}\n              nbMaxSuggestions={nbMaxSuggestions}\n              error={error}\n              hideErrors={true}\n              disabled={disabled}\n              readOnly={readOnly}\n              noSuggestionLabel={noSuggestionLabel}\n              onChangeText={handleStartChange}\n            />\n          )}\n        />\n\n        <Space width={12} />\n\n        <Box style={styles.arrowContainer} justifyContent=\"center\">\n          <Icon name=\"arrow-right-filled\" size={20} />\n        </Box>\n\n        <Space width={12} />\n\n        <LakeLabel\n          label={endLabel}\n          style={styles.label}\n          render={() => (\n            <TimePicker\n              value={value.end}\n              intervalInMinutes={intervalInMinutes}\n              nbMaxSuggestions={nbMaxSuggestions}\n              error={error}\n              hideErrors={true}\n              disabled={disabled}\n              readOnly={readOnly}\n              noSuggestionLabel={noSuggestionLabel}\n              onChangeText={handleEndChange}\n            />\n          )}\n        />\n      </Box>\n\n      <Space height={4} />\n\n      <LakeText variant=\"smallRegular\" color={colors.negative[500]}>\n        {error ?? \" \"}\n      </LakeText>\n    </View>\n  );\n};\n"],"names":["styles","StyleSheet","DEFAULT_START_TIME","DEFAULT_END_TIME","DEFAULT_INTERVAL_IN_MINUTES","rifmTimeProps","getRifmProps","parseTime","time","hours","minutes","isNullish","Option","parseTimeRange","value","start","isNotNullishOrEmpty","end","parseTypingHours","parsedHours","stringifyTime","timeToMinutes","minutesToTime","validateTime","isTimeBefore","time1","time2","validateTimeRange","range","generateTimeList","intervalInMinutes","startMinutes","endMinutes","timeList","i","TimePicker","onChangeText","suggestionStart","suggestionEnd","nbMaxSuggestions","readOnly","disabled","error","hideErrors","noSuggestionLabel","typingHour","optionsInterval","useMemo","hour","options","items","AsyncData","Result","jsx","Rifm","value2","onChange","LakeCombobox","identity","option","selected","jsxs","Box","LakeText","colors","Fill","Icon","noop","TimeRangePicker","startLabel","endLabel","handleStartChange","startValue","handleEndChange","endValue","View","LakeLabel","Space"],"mappings":"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"}