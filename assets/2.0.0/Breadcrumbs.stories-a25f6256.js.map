{"version":3,"file":"Breadcrumbs.stories-a25f6256.js","sources":["../../../packages/lake/src/components/Breadcrumbs.tsx"],"sourcesContent":["import {\n  Dispatch,\n  MutableRefObject,\n  ReactNode,\n  SetStateAction,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  NativeSyntheticEvent,\n  Pressable,\n  StyleSheet,\n  TargetedEvent,\n  Text,\n  View,\n} from \"react-native\";\nimport { P, match } from \"ts-pattern\";\nimport { SetRequired } from \"type-fest\";\nimport { v4 as uuid } from \"uuid\";\nimport {\n  animations,\n  backgroundColor,\n  colors,\n  gray75,\n  radii,\n  shadows,\n  spacings,\n  texts,\n} from \"../constants/design\";\nimport { useHover } from \"../hooks/useHover\";\nimport { usePreviousValue } from \"../hooks/usePreviousValue\";\nimport { noop } from \"../utils/function\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { Box } from \"./Box\";\nimport { FocusTrap } from \"./FocusTrap\";\nimport { Icon } from \"./Icon\";\nimport { LakeText } from \"./LakeText\";\nimport { Link } from \"./Link\";\nimport { Space } from \"./Space\";\nimport { TransitionView } from \"./TransitionView\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    zIndex: 10,\n    transform: \"translateZ(0px)\",\n  },\n  item: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    borderRadius: radii[6],\n    transitionProperty: \"opacity\",\n    transitionDuration: \"150ms\",\n  },\n  itemPressed: {\n    opacity: 0.2,\n  },\n  itemForcedOpen: {\n    backgroundColor: colors.gray[50],\n  },\n  chevron: {\n    padding: spacings[8],\n  },\n  horizontalLink: {\n    paddingVertical: spacings[8],\n  },\n  horizontalLinkText: {\n    paddingHorizontal: spacings[8],\n    alignItems: \"center\",\n    display: \"inline-flex\",\n  },\n  horizontalLinkTextHovered: {\n    color: colors.gray[900],\n    boxShadow: `0 1px currentColor`,\n  },\n  activeHorizontalLinkText: {\n    color: colors.gray[800],\n    backgroundColor: gray75,\n    borderRadius: radii[4],\n    boxShadow: \"none\",\n  },\n  dropdown: {\n    position: \"absolute\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    top: \"100%\",\n    backgroundColor: backgroundColor.accented,\n    borderRadius: radii[8],\n    boxShadow: shadows.modal,\n    paddingVertical: spacings[8],\n  },\n  siblingsDropdown: {\n    position: \"absolute\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    top: \"100%\",\n    backgroundColor: backgroundColor.accented,\n    borderRadius: radii[8],\n    boxShadow: shadows.modal,\n    paddingVertical: spacings[8],\n    alignItems: \"stretch\",\n  },\n  dropdownLink: {\n    paddingHorizontal: spacings[16],\n    paddingVertical: spacings[8],\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  dropdownLinkText: {\n    ...texts.regular,\n    whiteSpace: \"nowrap\",\n  },\n  dropdownLinkTextHovered: {\n    color: colors.gray[500],\n  },\n  dropdownLinkActive: {\n    backgroundColor: colors.gray[50],\n  },\n  dropdownContainer: {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"100%\",\n  },\n  dropdownLinkContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n  },\n  tick: {\n    position: \"absolute\",\n    top: \"50%\",\n    right: spacings[16],\n    transform: \"translateY(-50%)\",\n  },\n});\n\nexport type Crumb = {\n  label: string;\n  link: string;\n  siblings?: { label: string; url: string; isMatching: boolean }[];\n};\n\ntype CrumbWithId = {\n  id: string;\n  crumb?: Crumb;\n  isRootCrumb: boolean;\n  index?: number;\n};\n\ntype CrumbWithIdAndPosition = {\n  id: string;\n  crumb: Crumb;\n  isFirst: boolean;\n  isLast: boolean;\n  isRootCrumb: boolean;\n};\n\nconst emptyCrumbWithIdArray: readonly CrumbWithId[] = [];\nconst emptyCrumbArray: readonly Crumb[] = [];\n\nconst defaultContext: readonly [\n  readonly CrumbWithId[],\n  readonly CrumbWithId[],\n  Dispatch<SetStateAction<readonly CrumbWithId[]>>,\n  MutableRefObject<number>,\n] = [emptyCrumbWithIdArray, emptyCrumbWithIdArray, noop, { current: -1 }];\n\nconst BreadcrumbsContext = createContext(defaultContext);\n\ntype Props = {\n  rootLevelCrumbs?: readonly Crumb[];\n  children: ReactNode;\n};\n\nexport const BreadcrumbsRoot = ({ rootLevelCrumbs = emptyCrumbArray, children }: Props) => {\n  const [crumbs, setCrumbs] = useState(emptyCrumbWithIdArray);\n  const isFirstRenderRef = useRef(true);\n  const currentIndexRef = useRef(-1);\n\n  const [rootCrumbs, setRootCrumbs] = useState(() =>\n    rootLevelCrumbs.map(crumb => ({ id: uuid(), crumb, isRootCrumb: true })),\n  );\n\n  useEffect(() => {\n    if (isFirstRenderRef.current) {\n      isFirstRenderRef.current = false;\n      return;\n    }\n    setRootCrumbs(rootLevelCrumbs.map(crumb => ({ id: uuid(), crumb, isRootCrumb: true })));\n  }, [rootLevelCrumbs]);\n\n  const orderedCrumbs = useMemo(\n    () => [...crumbs].sort((a, b) => ((b.index ?? -1) > (a.index ?? -1) ? -1 : 1)),\n    [crumbs],\n  );\n\n  const value = useMemo(\n    () => [rootCrumbs, orderedCrumbs, setCrumbs, currentIndexRef] as const,\n    [rootCrumbs, orderedCrumbs, setCrumbs, currentIndexRef],\n  );\n\n  return <BreadcrumbsContext.Provider value={value}>{children}</BreadcrumbsContext.Provider>;\n};\n\nconst useBreadcrumbs = () => {\n  const [initialCrumbs, crumbs] = useContext(BreadcrumbsContext);\n  return useMemo(() => [...initialCrumbs, ...crumbs], [initialCrumbs, crumbs]);\n};\n\nexport const useCrumb = (crumb?: Crumb) => {\n  const [, , setValue, currentIndex] = useContext(BreadcrumbsContext);\n  const [id] = useState(() => uuid());\n  const initialCrumb = useRef(crumb);\n\n  const [index] = useState(() => ++currentIndex.current);\n\n  useEffect(() => {\n    setValue(existingCrumbs => {\n      const nextCrumbs = existingCrumbs.concat([\n        { id, crumb: initialCrumb.current, isRootCrumb: false, index },\n      ]);\n      return nextCrumbs;\n    });\n    return () => {\n      setValue(existingCrumbs => existingCrumbs.filter(existingCrumb => existingCrumb.id !== id));\n    };\n  }, [id, setValue, index]);\n\n  useEffect(() => {\n    setValue(existingCrumbs => {\n      const exisitingCrumb = existingCrumbs.find(existingCrumb => existingCrumb.id === id);\n      if (isNotNullish(exisitingCrumb) && exisitingCrumb.crumb !== crumb) {\n        return existingCrumbs.map(existingCrumb => {\n          return existingCrumb.id === id\n            ? { id, crumb, isRootCrumb: exisitingCrumb.isRootCrumb, index }\n            : existingCrumb;\n        });\n      }\n      return existingCrumbs;\n    });\n  }, [id, crumb, setValue, index]);\n};\n\nconst CHEVRON = (\n  <View style={styles.chevron}>\n    <Icon name=\"chevron-right-filled\" color={colors.gray[500]} size={16} />\n  </View>\n);\n\nconst BreadcrumbsSiblingsDropdown = ({\n  siblings,\n  isLast,\n  onPress,\n}: {\n  siblings: NonNullable<Crumb[\"siblings\"]>;\n  isLast: boolean;\n  onPress: () => void;\n}) => {\n  return (\n    <View style={styles.siblingsDropdown}>\n      {siblings.map(({ url, label, isMatching }) => {\n        return (\n          <Link\n            to={url}\n            key={url}\n            ariaCurrentValue=\"location\"\n            onPress={(event: React.MouseEvent<HTMLAnchorElement>) => {\n              if (isMatching && isLast) {\n                event.preventDefault();\n              }\n              onPress();\n            }}\n            style={styles.dropdownLinkContainer}\n          >\n            {({ hovered }) => (\n              <View style={[styles.dropdownLink, isMatching && styles.dropdownLinkActive]}>\n                <LakeText\n                  style={[styles.dropdownLinkText, hovered && styles.dropdownLinkTextHovered]}\n                >\n                  {label}\n                </LakeText>\n\n                {isMatching && (\n                  <>\n                    <Space width={32} />\n\n                    <Icon\n                      color={colors.positive[500]}\n                      name=\"checkmark-filled\"\n                      size={14}\n                      style={styles.tick}\n                    />\n                  </>\n                )}\n              </View>\n            )}\n          </Link>\n        );\n      })}\n    </View>\n  );\n};\n\nconst BreadcrumbsItem = ({\n  crumb,\n  isFirstItem = false,\n  isLastItem = false,\n  shouldAnimate,\n}: {\n  isFirstItem?: boolean;\n  isLastItem?: boolean;\n  crumb: Crumb;\n  shouldAnimate: boolean;\n}) => {\n  const [isHovered, setIsHovered] = useState(() => false);\n  const hoverRef = useRef(null);\n  const [siblings, setSiblings] = useState<Crumb[\"siblings\"] | null>(null);\n\n  useHover(hoverRef, {\n    onHoverStart: () => setIsHovered(true),\n    onHoverEnd: () => setIsHovered(false),\n  });\n\n  const handlePress = useCallback(\n    (event: React.MouseEvent<HTMLAnchorElement>) => {\n      if (crumb.siblings != null) {\n        event.preventDefault();\n        setSiblings(crumb.siblings);\n      }\n    },\n    [crumb.siblings],\n  );\n\n  return (\n    <View style={[styles.item, shouldAnimate ? animations.fadeAndSlideInFromRight.enter : null]}>\n      {!isFirstItem ? CHEVRON : null}\n\n      <View>\n        <Link to={crumb.link} ariaCurrentValue=\"location\" onPress={handlePress}>\n          <View\n            ref={hoverRef}\n            style={[\n              styles.horizontalLink,\n              shouldAnimate && animations.fadeAndSlideInFromRight.enter,\n            ]}\n          >\n            <LakeText\n              color={colors.gray[800]}\n              style={[styles.horizontalLinkText, isLastItem && styles.activeHorizontalLinkText]}\n            >\n              <Text style={isHovered && !isLastItem ? styles.horizontalLinkTextHovered : undefined}>\n                {crumb.label}\n              </Text>\n\n              {crumb.siblings != null ? (\n                <>\n                  <Space width={4} />\n                  <Icon name=\"chevron-down-filled\" color={colors.gray[500]} size={16} />\n                </>\n              ) : null}\n            </LakeText>\n          </View>\n        </Link>\n\n        <View style={styles.dropdownContainer}>\n          <TransitionView {...animations.fadeAndSlideInFromBottom}>\n            {siblings ? (\n              <FocusTrap\n                autoFocus={true}\n                focusLock={true}\n                returnFocus={true}\n                onClickOutside={() => setSiblings(null)}\n                onEscapeKey={() => setSiblings(null)}\n              >\n                <BreadcrumbsSiblingsDropdown\n                  siblings={siblings}\n                  isLast={isLastItem}\n                  onPress={() => setSiblings(null)}\n                />\n              </FocusTrap>\n            ) : null}\n          </TransitionView>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst BreadcrumbsDropdown = ({\n  crumbs,\n  onHoverStart,\n  onHoverEnd,\n  onLinkFocus,\n  onLinkBlur,\n  onLinkPress,\n}: {\n  crumbs: CrumbWithIdAndPosition[];\n  onHoverStart: () => void;\n  onHoverEnd: () => void;\n  onLinkFocus: () => void;\n  onLinkBlur: () => void;\n  onLinkPress: () => void;\n}) => {\n  const containerRef = useRef(null);\n\n  useHover(containerRef, {\n    onHoverStart,\n    onHoverEnd,\n  });\n\n  return (\n    <View style={styles.dropdown} ref={containerRef}>\n      {crumbs.map(({ id, crumb }) => {\n        return (\n          <Link\n            to={crumb.link}\n            key={id}\n            onFocus={onLinkFocus}\n            onBlur={onLinkBlur}\n            onPress={onLinkPress}\n            ariaCurrentValue=\"location\"\n          >\n            {({ hovered }) => (\n              <View style={styles.dropdownLink}>\n                <LakeText\n                  style={[styles.dropdownLinkText, hovered && styles.dropdownLinkTextHovered]}\n                >\n                  {crumb.label}\n                </LakeText>\n              </View>\n            )}\n          </Link>\n        );\n      })}\n    </View>\n  );\n};\n\ntype DropdownOpeningState = \"Open\" | \"OpenFromFocus\" | \"ForcedOpen\" | \"Closed\" | \"ForcedClosed\";\n\ntype DropdownAction = \"Open\" | \"FocusHandle\" | \"Close\" | \"ForceClose\" | \"ForceToggle\";\n\nconst SHOULD_AUTOFOCUS = new Set<DropdownOpeningState>([\"ForcedOpen\", \"OpenFromFocus\"]);\nconst SHOULD_OPEN = new Set<DropdownOpeningState>([\"Open\", \"ForcedOpen\", \"OpenFromFocus\"]);\nconst SHOULD_LOCK_FOCUS = new Set<DropdownOpeningState>([\"ForcedOpen\"]);\n\nconst BreadcrumbsDropdownItems = ({ crumbs }: { crumbs: CrumbWithIdAndPosition[] }) => {\n  const [openingStatus, dispatch] = useReducer(\n    (state: DropdownOpeningState, action: DropdownAction): DropdownOpeningState => {\n      const input = [action, state] as const;\n      return match<typeof input, DropdownOpeningState>(input)\n        .with(\n          [\"ForceToggle\", \"Closed\"],\n          [\"ForceToggle\", \"Open\"],\n          [\"ForceToggle\", \"ForcedClosed\"],\n          () => \"ForcedOpen\",\n        )\n        .with([\"ForceToggle\", \"OpenFromFocus\"], [\"ForceToggle\", \"ForcedOpen\"], () => \"ForcedClosed\")\n        .with([\"ForceClose\", P._], () => \"ForcedClosed\")\n        .with([\"FocusHandle\", \"ForcedClosed\"], () => \"Closed\")\n        .with(\n          [\"Open\", \"ForcedOpen\"],\n          [\"FocusHandle\", \"ForcedOpen\"],\n          [\"Close\", \"ForcedOpen\"],\n          () => \"ForcedOpen\",\n        )\n        .with([\"Open\", P._], () => \"Open\")\n        .with([\"FocusHandle\", P._], () => \"OpenFromFocus\")\n        .with([\"Close\", P._], () => \"Closed\")\n        .exhaustive();\n    },\n    \"Closed\",\n  );\n\n  const timeoutRef = useRef<number | undefined>(undefined);\n  const handleRef = useRef<View>(null);\n  const containerRef = useRef<View>(null);\n\n  const {\n    onHandleFocus,\n    onLinkFocus,\n    onAnyBlur,\n    onHoverStart,\n    onHoverEnd,\n    onPress,\n    onPressOutside,\n    onEscapeKey,\n  } = useMemo(\n    () => ({\n      onHandleFocus: (event: NativeSyntheticEvent<TargetedEvent>) => {\n        if (isNullish(containerRef.current)) {\n          return;\n        }\n        const container = containerRef.current as unknown as Element;\n        const focusEvent = event as unknown as FocusEvent;\n        // Don't reopen if leaving\n        if (!container.contains(focusEvent.relatedTarget as Node | null)) {\n          if (isNotNullish(timeoutRef.current)) {\n            clearTimeout(timeoutRef.current);\n          }\n          dispatch(\"FocusHandle\");\n        }\n      },\n      onLinkFocus: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"Open\");\n      },\n      onAnyBlur: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n      onHoverStart: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"Open\");\n      },\n\n      onHoverEnd: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n\n      onPress: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"ForceToggle\");\n      },\n\n      onPressOutside: (event: MouseEvent | TouchEvent) => {\n        if (isNotNullish(handleRef.current)) {\n          const handle = handleRef.current as unknown as Element;\n          if (handle.contains(event.target as Node | null)) {\n            return;\n          }\n        }\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        // Only force closing in case the focus comes directly to the handle\n        // Then put it back to a regular closed state\n        dispatch(\"ForceClose\");\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n\n      onEscapeKey: () => {\n        if (isNotNullish(timeoutRef.current)) {\n          clearTimeout(timeoutRef.current);\n        }\n        dispatch(\"ForceClose\");\n        timeoutRef.current = window.setTimeout(() => {\n          dispatch(\"Close\");\n        }, 300);\n      },\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    return () => {\n      if (isNotNullish(timeoutRef.current)) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  const shouldOpen = SHOULD_OPEN.has(openingStatus);\n  const shouldAutoFocus = SHOULD_AUTOFOCUS.has(openingStatus);\n  const shouldLockFocus = SHOULD_LOCK_FOCUS.has(openingStatus);\n\n  useHover(handleRef, {\n    onHoverStart,\n    onHoverEnd,\n  });\n\n  return (\n    <Box direction=\"row\" alignItems=\"center\">\n      {CHEVRON}\n\n      <View ref={containerRef}>\n        <Pressable\n          ref={handleRef}\n          style={({ pressed }) => [\n            styles.item,\n            pressed && styles.itemPressed,\n            openingStatus === \"ForcedOpen\" && styles.itemForcedOpen,\n          ]}\n          tabIndex={0}\n          onFocus={onHandleFocus}\n          onBlur={onAnyBlur}\n          onPress={onPress}\n        >\n          <View style={styles.horizontalLink}>\n            <LakeText style={[styles.horizontalLinkText, styles.activeHorizontalLinkText]}>\n              {\"…\"}\n            </LakeText>\n          </View>\n        </Pressable>\n\n        <TransitionView {...animations.fadeAndSlideInFromBottom}>\n          {shouldOpen ? (\n            <FocusTrap\n              autoFocus={shouldAutoFocus}\n              focusLock={shouldLockFocus}\n              returnFocus={shouldLockFocus}\n              onClickOutside={onPressOutside}\n              onEscapeKey={shouldLockFocus ? onEscapeKey : undefined}\n            >\n              <BreadcrumbsDropdown\n                crumbs={crumbs}\n                onHoverStart={onHoverStart}\n                onHoverEnd={onHoverEnd}\n                onLinkFocus={onLinkFocus}\n                onLinkBlur={onAnyBlur}\n                onLinkPress={onEscapeKey}\n              />\n            </FocusTrap>\n          ) : null}\n        </TransitionView>\n      </View>\n    </Box>\n  );\n};\n\n// In order to preserve the horizontal space, we collapse the breadcrumbs once\n// there's strictly more than three crumbs. In that case, the expected behavior\n// is as follows:\n// - Display the root crumb (the first one) inline\n// - Collapse any crumb between the first and the penultimate item in a dropdown\n// - Display the last two crumbs inline\nconst arrangeArray = <T,>(array: T[]): { start: T[]; collapsed: T[]; end: T[] } => {\n  if (array.length <= 3) {\n    return {\n      start: array,\n      collapsed: [],\n      end: [],\n    };\n  }\n  return {\n    start: array.slice(0, 1),\n    collapsed: array.slice(1, -2),\n    end: array.slice(-2),\n  };\n};\n\nexport const Breadcrumbs = () => {\n  const crumbs = useBreadcrumbs();\n\n  const cleanCrumbs = useMemo(() => {\n    const hasCrumb = (value: CrumbWithId): value is SetRequired<CrumbWithId, \"crumb\"> =>\n      isNotNullish(value.crumb);\n\n    return crumbs.filter(hasCrumb);\n  }, [crumbs]);\n\n  const previousCrumbs = usePreviousValue(\n    useMemo(() => {\n      return new Set(cleanCrumbs.map(crumb => crumb.id));\n    }, [cleanCrumbs]),\n  );\n\n  const { start, collapsed, end } = useMemo(() => {\n    return arrangeArray(\n      cleanCrumbs.map(\n        ({ id, crumb, isRootCrumb }, index): CrumbWithIdAndPosition => ({\n          id,\n          crumb,\n          isFirst: index === 0,\n          isLast: index === cleanCrumbs.length - 1,\n          isRootCrumb,\n        }),\n      ),\n    );\n  }, [cleanCrumbs]);\n\n  return (\n    <View role=\"navigation\" style={styles.container}>\n      {start.map(({ id, crumb, isFirst, isLast, isRootCrumb }) => (\n        <BreadcrumbsItem\n          key={id}\n          crumb={crumb}\n          isFirstItem={isFirst}\n          isLastItem={isLast}\n          shouldAnimate={!previousCrumbs.has(id) && !isRootCrumb}\n        />\n      ))}\n\n      {collapsed.length > 0 ? <BreadcrumbsDropdownItems crumbs={collapsed} /> : null}\n\n      {end.map(({ id, crumb, isLast, isRootCrumb }) => (\n        <BreadcrumbsItem\n          key={id}\n          crumb={crumb}\n          isLastItem={isLast}\n          shouldAnimate={!previousCrumbs.has(id) && !isRootCrumb}\n        />\n      ))}\n    </View>\n  );\n};\n"],"names":["styles","StyleSheet","radii","colors","spacings","gray75","backgroundColor","shadows","texts","emptyCrumbWithIdArray","emptyCrumbArray","defaultContext","noop","BreadcrumbsContext","createContext","BreadcrumbsRoot","rootLevelCrumbs","children","crumbs","setCrumbs","useState","isFirstRenderRef","useRef","currentIndexRef","rootCrumbs","setRootCrumbs","crumb","uuid","useEffect","orderedCrumbs","useMemo","a","b","value","jsx","useBreadcrumbs","initialCrumbs","useContext","useCrumb","setValue","currentIndex","id","initialCrumb","index","existingCrumbs","existingCrumb","exisitingCrumb","isNotNullish","CHEVRON","View","Icon","BreadcrumbsSiblingsDropdown","siblings","isLast","onPress","url","label","isMatching","Link","event","hovered","jsxs","LakeText","Fragment","Space","BreadcrumbsItem","isFirstItem","isLastItem","shouldAnimate","isHovered","setIsHovered","hoverRef","setSiblings","useHover","handlePress","useCallback","animations","Text","TransitionView","FocusTrap","BreadcrumbsDropdown","onHoverStart","onHoverEnd","onLinkFocus","onLinkBlur","onLinkPress","containerRef","SHOULD_AUTOFOCUS","SHOULD_OPEN","SHOULD_LOCK_FOCUS","BreadcrumbsDropdownItems","openingStatus","dispatch","useReducer","state","action","match","P","timeoutRef","handleRef","onHandleFocus","onAnyBlur","onPressOutside","onEscapeKey","isNullish","container","focusEvent","shouldOpen","shouldAutoFocus","shouldLockFocus","Box","Pressable","pressed","arrangeArray","array","Breadcrumbs","cleanCrumbs","hasCrumb","previousCrumbs","usePreviousValue","start","collapsed","end","isRootCrumb","isFirst"],"mappings":"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"}