{"version":3,"file":"Stepper.stories-d6e01e62.js","sources":["../../../packages/lake/src/components/LakeStepper.tsx"],"sourcesContent":["import { Option } from \"@swan-io/boxed\";\nimport { Link } from \"@swan-io/chicane\";\nimport { CSSProperties, ReactNode } from \"react\";\nimport { StyleProp, StyleSheet, View, ViewStyle } from \"react-native\";\nimport { P, match } from \"ts-pattern\";\nimport { colors } from \"../constants/design\";\nimport { Box } from \"./Box\";\nimport { Grid } from \"./Grid\";\nimport { LakeHeading } from \"./LakeHeading\";\nimport { LakeText } from \"./LakeText\";\nimport { Space } from \"./Space\";\n\nconst linkStyle: CSSProperties = {\n  textDecoration: \"none\",\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: \"flex-end\",\n  },\n  bar: {\n    width: \"100%\",\n    height: 4,\n    borderRadius: 2,\n    backgroundColor: colors.gray[100],\n    overflow: \"hidden\",\n    transformOrigin: \"bottom\",\n    transform: \"scaleY(0.5)\",\n    transitionDuration: \"300ms\",\n    transitionProperty: \"transform\",\n  },\n  barActive: {\n    transform: \"scaleY(1)\",\n  },\n  progressBar: {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: colors.current[500],\n    transformOrigin: \"left\",\n    transform: \"scaleX(0)\",\n    transitionDuration: \"300ms\",\n  },\n  progressBarDone: {\n    transform: \"scaleX(1)\",\n  },\n  progressBarError: {\n    backgroundColor: colors.negative[500],\n  },\n\n  mobileContainer: {\n    borderBottomWidth: 1,\n    borderBottomColor: colors.gray[100],\n    paddingBottom: 10,\n  },\n  mobileNumber: {\n    minWidth: 28,\n    height: 24,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: colors.current[100],\n    backgroundColor: colors.current[50],\n  },\n  mobileNumberError: {\n    borderColor: colors.negative[100],\n    backgroundColor: colors.negative[50],\n  },\n});\n\ntype StepLinkProps = {\n  to: string;\n  disabled: boolean;\n  style?: CSSProperties;\n  children: ReactNode;\n};\n\nconst StepLink = ({ to, disabled, style, children }: StepLinkProps) => {\n  return disabled ? (\n    <span style={style}>{children}</span>\n  ) : (\n    <Link to={to} style={style}>\n      {children}\n    </Link>\n  );\n};\n\nexport type Step = {\n  id: string;\n  label: string;\n  url: string;\n  hasErrors?: boolean;\n};\n\nexport type StepWithChildren = { label: string; children: Step[] };\nexport type TopLevelStep = Step | StepWithChildren;\n\ntype Props = {\n  steps: TopLevelStep[];\n  activeStepId: string;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport const LakeStepper = ({ steps, activeStepId, style }: Props) => {\n  const stepIds = steps\n    .map(step =>\n      match(step)\n        .with({ id: P.string }, ({ id }) => [id])\n        .with({ children: P.array(P.any) }, ({ children }) => children.map(({ id }) => id))\n        .exhaustive(),\n    )\n    .flat();\n  const activeStepIndex = stepIds.indexOf(activeStepId);\n\n  return (\n    <Grid numColumns={steps.length} horizontalSpace={12} style={[styles.container, style]}>\n      {steps.map((step, index) => {\n        const stepNumber = index + 1;\n        const currentId = match(step)\n          .with({ id: P.string }, ({ id }) => id)\n          .with({ children: P.array(P.any) }, ({ children }) => children[0]?.id ?? \"\")\n          .exhaustive();\n\n        const isActive = match(step)\n          .with({ id: activeStepId }, () => true)\n          .with({ children: P.array(P.any) }, ({ children }) =>\n            children.some(({ id }) => id === activeStepId),\n          )\n          .otherwise(() => false);\n        const isDone = match(step)\n          .with({ id: P.string }, ({ id }) => stepIds.indexOf(id) < activeStepIndex)\n          .with({ children: P.array(P.any) }, ({ children }) =>\n            children.every(({ id }) => stepIds.indexOf(id) < activeStepIndex),\n          )\n          .exhaustive();\n\n        const hasErrors = match(step)\n          .with({ hasErrors: true }, () => true)\n          .with({ children: P.array(P.any) }, ({ children }) =>\n            children.some(({ hasErrors }) => hasErrors),\n          )\n          .otherwise(() => false);\n\n        const stepUrl = match(step)\n          .with({ id: P.string }, ({ url }) => url)\n          .with({ children: P.array(P.any) }, ({ children }) => children[0]?.url ?? \"\")\n          .exhaustive();\n\n        const subSteps = match(step)\n          .with({ id: P.string }, step => [step])\n          .with({ children: P.array(P.any) }, ({ children }) => children)\n          .exhaustive();\n\n        return (\n          <StepLink key={currentId} to={stepUrl} disabled={!isDone} style={linkStyle}>\n            <LakeText\n              variant={isActive ? \"medium\" : \"regular\"}\n              color={\n                hasErrors && (isDone || isActive)\n                  ? colors.negative[500]\n                  : isActive || isDone\n                  ? colors.current[500]\n                  : colors.gray[300]\n              }\n            >\n              {stepNumber}. {step.label}\n            </LakeText>\n\n            <Space height={12} />\n\n            <Grid numColumns={subSteps.length} horizontalSpace={12}>\n              {subSteps.map(subStep => {\n                const isActive = subStep.id === activeStepId;\n                const isDone = stepIds.indexOf(subStep.id) < activeStepIndex;\n                const hasErrors = subStep.hasErrors === true;\n\n                return (\n                  <View key={subStep.id} style={[styles.bar, isActive && styles.barActive]}>\n                    <View\n                      style={[\n                        styles.progressBar,\n                        (isActive || isDone) && styles.progressBarDone,\n                        hasErrors && styles.progressBarError,\n                      ]}\n                    />\n                  </View>\n                );\n              })}\n            </Grid>\n          </StepLink>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport const MobileStepTitle = ({ steps, activeStepId }: Props) => {\n  const currentStep = Option.fromNullable(\n    steps\n      .map((step, index) =>\n        match(step)\n          .with({ id: P.string }, step => ({ ...step, number: `${index + 1}` }))\n          .with({ children: P.array(P.any) }, ({ children }) =>\n            children.map((child, subIndex) => ({\n              ...child,\n              number: `${index + 1}.${subIndex + 1}`,\n            })),\n          )\n          .exhaustive(),\n      )\n      .flat()\n      .find(({ id }) => id === activeStepId),\n  ).map(({ label, hasErrors, number }) => ({\n    number,\n    label,\n    isErrorState: hasErrors === true,\n  }));\n\n  return currentStep.match({\n    Some: ({ number, label, isErrorState }) => (\n      <Box\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        style={styles.mobileContainer}\n      >\n        <Box\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          style={[styles.mobileNumber, isErrorState && styles.mobileNumberError]}\n        >\n          <LakeText\n            variant=\"smallMedium\"\n            color={isErrorState ? colors.negative[500] : colors.current[500]}\n          >\n            {number}\n          </LakeText>\n        </Box>\n\n        <Space width={8} />\n\n        <LakeHeading\n          level={4}\n          variant=\"h4\"\n          color={isErrorState ? colors.negative[500] : colors.current[500]}\n        >\n          {label}\n        </LakeHeading>\n      </Box>\n    ),\n    None: () => null,\n  });\n};\n"],"names":["linkStyle","styles","StyleSheet","colors","StepLink","to","disabled","style","children","jsx","Link","LakeStepper","steps","activeStepId","stepIds","step","match","P","id","activeStepIndex","Grid","index","stepNumber","currentId","_a","isActive","isDone","hasErrors","hasErrors2","stepUrl","url","subSteps","step2","jsxs","LakeText","Space","subStep","isActive2","isDone2","View","MobileStepTitle","Option","child","subIndex","label","number","isErrorState","Box","LakeHeading"],"mappings":"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"}