{"version":3,"file":"WithCurrentColor-7a5c7f23.js","sources":["../../../packages/lake/src/components/WithCurrentColor.tsx"],"sourcesContent":["import { createContext, MutableRefObject, ReactElement, useLayoutEffect, useRef } from \"react\";\nimport { StyleSheet, View, ViewProps } from \"react-native\";\nimport { colors, ColorVariants } from \"../constants/design\";\nimport { isNotNullish } from \"../utils/nullish\";\n\ntype Props = {\n  variant?: ColorVariants;\n  style?: ViewProps[\"style\"];\n  children: ReactElement;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexGrow: 1,\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    flexBasis: \"0%\",\n  },\n});\n\nexport const CurrentColorContext = createContext<ColorVariants | undefined>(undefined);\n\nexport const useCurrentColor = (\n  containerRef: MutableRefObject<HTMLElement | null>,\n  variant: ColorVariants | undefined,\n) => {\n  useLayoutEffect(() => {\n    if (isNotNullish(containerRef.current) && variant != null) {\n      const element = containerRef.current as unknown as HTMLElement;\n      const colorScale = colors[variant];\n      const style = element.style;\n\n      const original = {\n        \"--color-current-900\": style.getPropertyValue(\"--color-current-900\"),\n        \"--color-current-800\": style.getPropertyValue(\"--color-current-800\"),\n        \"--color-current-700\": style.getPropertyValue(\"--color-current-700\"),\n        \"--color-current-600\": style.getPropertyValue(\"--color-current-600\"),\n        \"--color-current-500\": style.getPropertyValue(\"--color-current-500\"),\n        \"--color-current-400\": style.getPropertyValue(\"--color-current-400\"),\n        \"--color-current-300\": style.getPropertyValue(\"--color-current-300\"),\n        \"--color-current-200\": style.getPropertyValue(\"--color-current-200\"),\n        \"--color-current-100\": style.getPropertyValue(\"--color-current-100\"),\n        \"--color-current-primary\": style.getPropertyValue(\"--color-current-primary\"),\n        \"--color-current-secondary\": style.getPropertyValue(\"--color-current-secondary\"),\n        \"--color-current-contrast\": style.getPropertyValue(\"--color-current-contrast\"),\n      };\n\n      style.setProperty(\"--color-current-900\", colorScale[900], \"\");\n      style.setProperty(\"--color-current-800\", colorScale[800], \"\");\n      style.setProperty(\"--color-current-700\", colorScale[700], \"\");\n      style.setProperty(\"--color-current-600\", colorScale[600], \"\");\n      style.setProperty(\"--color-current-500\", colorScale[500], \"\");\n      style.setProperty(\"--color-current-400\", colorScale[400], \"\");\n      style.setProperty(\"--color-current-300\", colorScale[300], \"\");\n      style.setProperty(\"--color-current-200\", colorScale[200], \"\");\n      style.setProperty(\"--color-current-100\", colorScale[100], \"\");\n      style.setProperty(\"--color-current-50\", colorScale[50], \"\");\n      style.setProperty(\"--color-current-primary\", colorScale.primary, \"\");\n      style.setProperty(\"--color-current-secondary\", colorScale.secondary, \"\");\n      style.setProperty(\"--color-current-contrast\", colorScale.contrast, \"\");\n\n      return () => {\n        Object.entries(original).forEach(([key, value]) => {\n          if (value == null) {\n            style.removeProperty(key);\n          } else {\n            style.setProperty(key, value, \"\");\n          }\n        });\n      };\n    }\n  }, [containerRef, variant]);\n};\n\nexport const WithCurrentColor = ({ variant, style, children }: Props) => {\n  const containerRef = useRef(null);\n\n  useCurrentColor(containerRef, variant);\n\n  return (\n    <CurrentColorContext.Provider value={variant}>\n      <View style={style ?? styles.container} ref={containerRef}>\n        {children}\n      </View>\n    </CurrentColorContext.Provider>\n  );\n};\n"],"names":["styles","StyleSheet","CurrentColorContext","createContext","useCurrentColor","containerRef","variant","useLayoutEffect","isNotNullish","element","colorScale","colors","style","original","key","value","WithCurrentColor","children","useRef","jsx","View"],"mappings":"uGAWA,MAAAA,EAAAC,EAAA,OAAA,CAAiC,UAAA,CACpB,SAAA,EACC,cAAA,SACK,WAAA,UACH,UAAA,IACD,CAEf,CAAA,EAEOC,EAAAC,EAAAA,cAAA,MAAA,EAEAC,EAAA,CAAAC,EAAAC,IAAA,CAILC,EAAAA,gBAAA,IAAA,CACE,GAAAC,EAAAH,EAAA,OAAA,GAAAC,GAAA,KAAA,CACE,MAAAG,EAAAJ,EAAA,QACAK,EAAAC,EAAAL,CAAA,EACAM,EAAAH,EAAA,MAEAI,EAAA,CAAiB,sBAAAD,EAAA,iBAAA,qBAAA,EACoD,sBAAAA,EAAA,iBAAA,qBAAA,EACA,sBAAAA,EAAA,iBAAA,qBAAA,EACA,sBAAAA,EAAA,iBAAA,qBAAA,EACA,sBAAAA,EAAA,iBAAA,qBAAA,EACA,sBAAAA,EAAA,iBAAA,qBAAA,EACA,sBAAAA,EAAA,iBAAA,qBAAA,EACA,sBAAAA,EAAA,iBAAA,qBAAA,EACA,sBAAAA,EAAA,iBAAA,qBAAA,EACA,0BAAAA,EAAA,iBAAA,yBAAA,EACQ,4BAAAA,EAAA,iBAAA,2BAAA,EACI,2BAAAA,EAAA,iBAAA,0BAAA,CACF,EAG/E,OAAAA,EAAA,YAAA,sBAAAF,EAAA,GAAA,EAAA,EAAA,EACAE,EAAA,YAAA,sBAAAF,EAAA,GAAA,EAAA,EAAA,EACAE,EAAA,YAAA,sBAAAF,EAAA,GAAA,EAAA,EAAA,EACAE,EAAA,YAAA,sBAAAF,EAAA,GAAA,EAAA,EAAA,EACAE,EAAA,YAAA,sBAAAF,EAAA,GAAA,EAAA,EAAA,EACAE,EAAA,YAAA,sBAAAF,EAAA,GAAA,EAAA,EAAA,EACAE,EAAA,YAAA,sBAAAF,EAAA,GAAA,EAAA,EAAA,EACAE,EAAA,YAAA,sBAAAF,EAAA,GAAA,EAAA,EAAA,EACAE,EAAA,YAAA,sBAAAF,EAAA,GAAA,EAAA,EAAA,EACAE,EAAA,YAAA,qBAAAF,EAAA,EAAA,EAAA,EAAA,EACAE,EAAA,YAAA,0BAAAF,EAAA,QAAA,EAAA,EACAE,EAAA,YAAA,4BAAAF,EAAA,UAAA,EAAA,EACAE,EAAA,YAAA,2BAAAF,EAAA,SAAA,EAAA,EAEA,IAAA,CACE,OAAA,QAAAG,CAAA,EAAA,QAAA,CAAA,CAAAC,EAAAC,CAAA,IAAA,CACEA,GAAA,KACEH,EAAA,eAAAE,CAAA,EAEAF,EAAA,YAAAE,EAAAC,EAAA,EAAA,CACF,CAAA,CACD,EAEL,EAAA,CAAAV,EAAAC,CAAA,CAAA,CAEJ,EAEOU,EAAA,CAAA,CAAA,QAAAV,EAAA,MAAAM,EAAA,SAAAK,CAAA,IAAA,CACL,MAAAZ,EAAAa,SAAA,IAAA,EAEA,OAAAd,EAAAC,EAAAC,CAAA,EAEAa,EAAAjB,EAAA,SAAA,CAAA,MAAAI,EAAA,SAAAa,EAAAC,EAAA,CAAA,MAAAR,GAAAZ,EAAA,UAAA,IAAAK,EAAA,SAAAY,CAAA,CAAA,CAAA,CAAA,CAOF"}