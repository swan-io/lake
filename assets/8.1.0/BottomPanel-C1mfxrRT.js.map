{"version":3,"file":"BottomPanel-C1mfxrRT.js","sources":["../../../node_modules/react-native-web/dist/vendor/react-native/TouchHistoryMath/index.js","../../../node_modules/react-native-web/dist/vendor/react-native/PanResponder/index.js","../../../packages/lake/src/components/BottomPanel.tsx"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd = void 0; // Yuck, program temporarily in invalid state.\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true,\n    // isXAxis\n    true // ofCurrent\n    );\n  },\n\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false,\n    // isXAxis\n    true // ofCurrent\n    );\n  },\n\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true,\n    // isXAxis\n    false // ofCurrent\n    );\n  },\n\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false,\n    // isXAxis\n    false // ofCurrent\n    );\n  },\n\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0,\n    // touchesChangedAfter\n    true,\n    // isXAxis\n    true // ofCurrent\n    );\n  },\n\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0,\n    // touchesChangedAfter\n    false,\n    // isXAxis\n    true // ofCurrent\n    );\n  },\n\n  noCentroid: -1\n};\nexport default TouchHistoryMath;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\nimport TouchHistoryMath from '../TouchHistoryMath';\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\n\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n */\n\nvar PanResponder = {\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n\n  _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    // All `gestureState` accounts for timeStamps up until:\n    gestureState._accountsForMovesUpTo = 0;\n  },\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY);\n\n    // TODO: This must be filtered intelligently.\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create(config) {\n    var interactionState = {\n      handle: null,\n      shouldCancelClick: false,\n      timeout: null\n    };\n    var gestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n      moveX: 0,\n      moveY: 0,\n      x0: 0,\n      y0: 0,\n      dx: 0,\n      dy: 0,\n      vx: 0,\n      vy: 0,\n      numberActiveTouches: 0,\n      _accountsForMovesUpTo: 0\n    };\n    var panHandlers = {\n      onStartShouldSetResponder(event) {\n        return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n      },\n      onMoveShouldSetResponder(event) {\n        return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n      },\n      onStartShouldSetResponderCapture(event) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (event.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n        gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onMoveShouldSetResponderCapture(event) {\n        var touchHistory = event.touchHistory;\n        // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n      onResponderGrant(event) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n        if (interactionState.timeout) {\n          clearInteractionTimeout(interactionState);\n        }\n        interactionState.shouldCancelClick = true;\n        gestureState.x0 = currentCentroidX(event.touchHistory);\n        gestureState.y0 = currentCentroidY(event.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(event, gestureState);\n        }\n        // TODO: t7467124 investigate if this can be removed\n        return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n      },\n      onResponderReject(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n      },\n      onResponderRelease(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n        setInteractionTimeout(interactionState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderStart(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(event, gestureState);\n        }\n      },\n      onResponderMove(event) {\n        var touchHistory = event.touchHistory;\n        // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        }\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(event, gestureState);\n        }\n      },\n      onResponderEnd(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n      },\n      onResponderTerminate(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n        setInteractionTimeout(interactionState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderTerminationRequest(event) {\n        return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n      },\n      // We do not want to trigger 'click' activated gestures or native behaviors\n      // on any pan target that is under a mouse cursor when it is released.\n      // Browsers will natively cancel 'click' events on a target if a non-mouse\n      // active pointer moves.\n      onClickCapture: event => {\n        if (interactionState.shouldCancelClick === true) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      }\n    };\n    return {\n      panHandlers,\n      getInteractionHandle() {\n        return interactionState.handle;\n      }\n    };\n  }\n};\nfunction clearInteractionHandle(interactionState, callback, event, gestureState) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\nfunction clearInteractionTimeout(interactionState) {\n  clearTimeout(interactionState.timeout);\n}\nfunction setInteractionTimeout(interactionState) {\n  interactionState.timeout = setTimeout(() => {\n    interactionState.shouldCancelClick = false;\n  }, 250);\n}\nexport default PanResponder;","import { ReactNode, useEffect, useMemo, useRef, useState } from \"react\";\nimport { PanResponder, Pressable, ScrollView, StyleSheet, View } from \"react-native\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport { backgroundColor, colors, radii, shadows, spacings } from \"../constants/design\";\nimport { useBodyClassName } from \"../hooks/useBodyClassName\";\nimport { limitElastic } from \"../utils/math\";\nimport { FocusTrap } from \"./FocusTrap\";\nimport { LoadingView } from \"./LoadingView\";\nimport { Portal } from \"./Portal\";\nimport { Suspendable } from \"./Suspendable\";\nimport { TransitionView } from \"./TransitionView\";\n\nconst ELASTIC_LENGTH = 100; // the maximum value you can reach\nconst ELASTIC_STRENGTH = 0.008; // higher value, maximum value reached faster\n\nconst limitGrab = limitElastic({\n  elasticLength: ELASTIC_LENGTH,\n  elasticStrength: ELASTIC_STRENGTH,\n});\n\nconst DELTA_Y_CLOSE_THRESHOLD = 100;\nconst SWIPE_CLOSE_VELOCITY = 0.5;\n\nconst BACKGROUND_COLOR = \"rgba(0, 0, 0, 0.6)\";\n\nconst styles = StyleSheet.create({\n  fill: {\n    ...StyleSheet.absoluteFillObject,\n    position: \"fixed\",\n    animationFillMode: \"forwards\",\n    visibility: \"visible\",\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: BACKGROUND_COLOR,\n  },\n  overlayEnter: {\n    animationKeyframes: {\n      \"0%\": { opacity: 0 },\n    },\n    animationDuration: \"200ms\",\n    animationTimingFunction: \"ease-in-out\",\n  },\n  overlayLeave: {\n    animationKeyframes: {\n      \"100%\": { opacity: 0 },\n    },\n    animationDuration: \"200ms\",\n    animationTimingFunction: \"ease-in-out\",\n  },\n  modalEnter: {\n    animationKeyframes: {\n      \"0%\": {\n        opacity: 0,\n        transform: \"translateY(20px)\",\n      },\n    },\n    animationDuration: \"300ms\",\n    animationTimingFunction: \"ease-in-out\",\n  },\n  modalLeave: {\n    animationKeyframes: {\n      \"100%\": {\n        opacity: 0,\n        transform: \"translateY(20px)\",\n      },\n    },\n    animationDuration: \"300ms\",\n    animationTimingFunction: \"ease-in-out\",\n  },\n  container: {\n    ...StyleSheet.absoluteFillObject,\n    transitionDuration: \"300ms\",\n    transitionProperty: \"transform\",\n  },\n  bottomCache: {\n    position: \"absolute\",\n    bottom: -ELASTIC_LENGTH + 1,\n    width: \"100%\",\n    height: ELASTIC_LENGTH,\n    backgroundColor: backgroundColor.accented,\n  },\n  modalContainer: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  modalContentContainer: {\n    justifyContent: \"flex-end\",\n    flexGrow: 1,\n  },\n  trap: {\n    ...commonStyles.fill,\n  },\n  modal: {\n    backgroundColor: backgroundColor.accented,\n    borderTopLeftRadius: radii[8],\n    borderTopRightRadius: radii[8],\n    boxShadow: shadows.modal,\n    alignSelf: \"stretch\",\n  },\n  pressableOverlay: {\n    ...commonStyles.fill,\n    outlineWidth: 0,\n    // make focus indicator invisible on iOS (outline: none doesn't work)\n    opacity: 0,\n  },\n  grabContainer: {\n    paddingHorizontal: 128,\n    paddingVertical: spacings[12],\n  },\n  grabLine: {\n    backgroundColor: colors.gray[100],\n    height: 5,\n    borderRadius: radii[4],\n  },\n});\n\ntype Props = {\n  visible: boolean;\n  onPressClose: () => void;\n  children: ReactNode;\n  returnFocus?: boolean;\n};\n\nexport const BottomPanel = ({ visible, onPressClose, children, returnFocus = true }: Props) => {\n  const [rootElement, setRootElement] = useState<Element | undefined>(() => undefined);\n  const container = useRef<View | null>(null);\n\n  useEffect(() => {\n    const rootElement = document.createElement(\"div\");\n    document.body.append(rootElement);\n    setRootElement(rootElement);\n    return () => {\n      rootElement.remove();\n      setRootElement(undefined);\n    };\n  }, []);\n\n  const panResponder = useMemo(\n    () =>\n      PanResponder.create({\n        onMoveShouldSetPanResponder: () => true,\n        onPanResponderGrant: () => {\n          if (container.current instanceof HTMLElement) {\n            container.current.style.transitionDuration = \"0ms\";\n          }\n        },\n        onPanResponderMove: (_event, { dy }) => {\n          const translateY = dy > 0 ? dy : -limitGrab(-dy);\n\n          if (container.current instanceof HTMLElement) {\n            container.current.style.transform = `translateY(${translateY}px)`;\n          }\n        },\n        onPanResponderRelease: (_event, gestureState) => {\n          if (container.current instanceof HTMLElement) {\n            // @ts-expect-error\n            container.current.style.transitionDuration = null;\n          }\n\n          const shouldClose =\n            gestureState.dy > DELTA_Y_CLOSE_THRESHOLD || gestureState.vy > SWIPE_CLOSE_VELOCITY;\n          if (shouldClose) {\n            onPressClose();\n          } else {\n            if (container.current instanceof HTMLElement) {\n              container.current.style.transform = `translateY(0px)`;\n            }\n          }\n        },\n      }),\n    [onPressClose],\n  );\n\n  useBodyClassName(\"BottomPanelOpen\", { enabled: visible });\n\n  if (rootElement == null) {\n    return null;\n  }\n\n  return (\n    <Portal container={rootElement}>\n      <TransitionView style={styles.fill} enter={styles.overlayEnter} leave={styles.overlayLeave}>\n        {visible ? <View style={styles.overlay} /> : null}\n      </TransitionView>\n\n      <Suspendable fallback={<LoadingView color={backgroundColor.accented} delay={0} />}>\n        <TransitionView style={styles.fill} enter={styles.modalEnter} leave={styles.modalLeave}>\n          {visible ? (\n            <View ref={container} style={styles.container}>\n              <ScrollView\n                style={styles.modalContainer}\n                contentContainerStyle={styles.modalContentContainer}\n              >\n                <FocusTrap\n                  autoFocus={true}\n                  focusLock={true}\n                  returnFocus={returnFocus}\n                  style={styles.trap}\n                >\n                  {onPressClose != null ? (\n                    <Pressable onPress={onPressClose} style={styles.pressableOverlay} />\n                  ) : null}\n\n                  <View style={styles.modal}>\n                    <View style={styles.grabContainer} {...panResponder.panHandlers}>\n                      <View style={styles.grabLine} />\n                    </View>\n\n                    {children}\n                  </View>\n                </FocusTrap>\n              </ScrollView>\n\n              {/* use to expend white background on grab up */}\n              <View style={styles.bottomCache} />\n            </View>\n          ) : null}\n        </TransitionView>\n      </Suspendable>\n    </Portal>\n  );\n};\n"],"names":["TouchHistoryMath","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","i","touchTrack","toAdd","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","gestureState","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","config","interactionState","panHandlers","event","InteractionManager","clearInteractionTimeout","clearInteractionHandle","setInteractionTimeout","callback","ELASTIC_LENGTH","ELASTIC_STRENGTH","limitGrab","limitElastic","DELTA_Y_CLOSE_THRESHOLD","SWIPE_CLOSE_VELOCITY","BACKGROUND_COLOR","styles","StyleSheet","backgroundColor","commonStyles","radii","shadows","spacings","colors","BottomPanel","visible","onPressClose","children","returnFocus","rootElement","setRootElement","useState","container","useRef","useEffect","panResponder","useMemo","_event","dy","translateY","useBodyClassName","jsxs","Portal","jsx","TransitionView","View","Suspendable","LoadingView","ScrollView","FocusTrap","Pressable"],"mappings":"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","x_google_ignoreList":[0,1]}