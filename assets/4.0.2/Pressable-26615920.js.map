{"version":3,"file":"Pressable-26615920.js","sources":["../../../node_modules/react-native-web/dist/exports/TextInput/index.js","../../../packages/lake/src/hooks/useForceableState.ts","../../../node_modules/react-native-web/dist/cjs/modules/mergeRefs/index.js","../../../node_modules/react-native-web/dist/cjs/modules/useMergeRefs/index.js","../../../packages/lake/src/hooks/useMergeRefs.ts","../../../node_modules/react-native-web/dist/cjs/modules/usePressEvents/PressResponder.js","../../../node_modules/react-native-web/dist/cjs/modules/usePressEvents/index.js","../../../packages/lake/src/hooks/usePressEvents.ts","../../../packages/lake/src/components/Pressable.tsx"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport * as React from 'react';\nimport createElement from '../createElement';\nimport * as forwardedProps from '../../modules/forwardedProps';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../modules/useElementLayout';\nimport useLayoutEffect from '../../modules/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../modules/usePlatformMethods';\nimport useResponderEvents from '../../modules/useResponderEvents';\nimport { getLocaleDirection, useLocaleContext } from '../../modules/useLocale';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\nimport { warnOnce } from '../../modules/warnOnce';\n\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\nvar isSelectionStale = (node, selection) => {\n  var selectionEnd = node.selectionEnd,\n    selectionStart = node.selectionStart;\n  var start = selection.start,\n    end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\nvar setSelection = (node, selection) => {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n      end = selection.end;\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\nvar pickProps = props => pick(props, forwardPropsList);\n\n// If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\nvar focusTimeout = null;\nvar TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  var _props$autoCapitalize = props.autoCapitalize,\n    autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n    autoComplete = props.autoComplete,\n    autoCompleteType = props.autoCompleteType,\n    _props$autoCorrect = props.autoCorrect,\n    autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n    blurOnSubmit = props.blurOnSubmit,\n    caretHidden = props.caretHidden,\n    clearTextOnFocus = props.clearTextOnFocus,\n    dir = props.dir,\n    editable = props.editable,\n    enterKeyHint = props.enterKeyHint,\n    inputMode = props.inputMode,\n    keyboardType = props.keyboardType,\n    _props$multiline = props.multiline,\n    multiline = _props$multiline === void 0 ? false : _props$multiline,\n    numberOfLines = props.numberOfLines,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onChangeText = props.onChangeText,\n    onContentSizeChange = props.onContentSizeChange,\n    onFocus = props.onFocus,\n    onKeyPress = props.onKeyPress,\n    onLayout = props.onLayout,\n    onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n    onResponderEnd = props.onResponderEnd,\n    onResponderGrant = props.onResponderGrant,\n    onResponderMove = props.onResponderMove,\n    onResponderReject = props.onResponderReject,\n    onResponderRelease = props.onResponderRelease,\n    onResponderStart = props.onResponderStart,\n    onResponderTerminate = props.onResponderTerminate,\n    onResponderTerminationRequest = props.onResponderTerminationRequest,\n    onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n    onSelectionChange = props.onSelectionChange,\n    onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder = props.onStartShouldSetResponder,\n    onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n    onSubmitEditing = props.onSubmitEditing,\n    placeholderTextColor = props.placeholderTextColor,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n    returnKeyType = props.returnKeyType,\n    rows = props.rows,\n    _props$secureTextEntr = props.secureTextEntry,\n    secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n    selection = props.selection,\n    selectTextOnFocus = props.selectTextOnFocus,\n    spellCheck = props.spellCheck;\n  var type;\n  var _inputMode;\n  if (inputMode != null) {\n    _inputMode = inputMode;\n    if (inputMode === 'email') {\n      type = 'email';\n    } else if (inputMode === 'tel') {\n      type = 'tel';\n    } else if (inputMode === 'search') {\n      type = 'search';\n    } else if (inputMode === 'url') {\n      type = 'url';\n    } else {\n      type = 'text';\n    }\n  } else if (keyboardType != null) {\n    warnOnce('keyboardType', 'keyboardType is deprecated. Use inputMode.');\n    switch (keyboardType) {\n      case 'email-address':\n        type = 'email';\n        break;\n      case 'number-pad':\n      case 'numeric':\n        _inputMode = 'numeric';\n        break;\n      case 'decimal-pad':\n        _inputMode = 'decimal';\n        break;\n      case 'phone-pad':\n        type = 'tel';\n        break;\n      case 'search':\n      case 'web-search':\n        type = 'search';\n        break;\n      case 'url':\n        type = 'url';\n        break;\n      default:\n        type = 'text';\n    }\n  }\n  if (secureTextEntry) {\n    type = 'password';\n  }\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var prevSelection = React.useRef(null);\n  var prevSecureTextEntry = React.useRef(false);\n  React.useEffect(() => {\n    if (hostRef.current && prevSelection.current) {\n      setSelection(hostRef.current, prevSelection.current);\n    }\n    prevSecureTextEntry.current = secureTextEntry;\n  }, [secureTextEntry]);\n  var handleContentSizeChange = React.useCallback(hostNode => {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(() => hostNode => {\n    // TextInput needs to add more methods to the hostNode in addition to those\n    // added by `usePlatformMethods`. This is temporarily until an API like\n    // `TextInput.clear(hostRef)` is added to React Native.\n    if (hostNode != null) {\n      hostNode.clear = function () {\n        if (hostNode != null) {\n          hostNode.value = '';\n        }\n      };\n      hostNode.isFocused = function () {\n        return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n      };\n      handleContentSizeChange(hostNode);\n    }\n  }, [handleContentSizeChange]);\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n    if (onChange) {\n      onChange(e);\n    }\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n  function handleFocus(e) {\n    var hostNode = e.target;\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n      if (selectTextOnFocus) {\n        // Safari requires selection to occur in a setTimeout\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n        focusTimeout = setTimeout(() => {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n  function handleKeyDown(e) {\n    var hostNode = e.target;\n    // Prevent key events bubbling (see #612)\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n    if (e.key === 'Enter' && !e.shiftKey &&\n    // Do not call submit if composition is occuring.\n    !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n      if (shouldBlurOnSubmit && hostNode != null) {\n        setTimeout(() => hostNode.blur(), 0);\n      }\n    }\n  }\n  function handleSelectionChange(e) {\n    try {\n      var _e$target = e.target,\n        selectionStart = _e$target.selectionStart,\n        selectionEnd = _e$target.selectionEnd;\n      var _selection = {\n        start: selectionStart,\n        end: selectionEnd\n      };\n      if (onSelectionChange) {\n        e.nativeEvent.selection = _selection;\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      }\n      if (prevSecureTextEntry.current === secureTextEntry) {\n        prevSelection.current = _selection;\n      }\n    } catch (e) {}\n  }\n  useLayoutEffect(() => {\n    var node = hostRef.current;\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture,\n    onResponderEnd,\n    onResponderGrant,\n    onResponderMove,\n    onResponderReject,\n    onResponderRelease,\n    onResponderStart,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder,\n    onStartShouldSetResponderCapture\n  });\n  var _useLocaleContext = useLocaleContext(),\n    contextDirection = _useLocaleContext.direction;\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  // 'auto' by default allows browsers to infer writing direction\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  if (returnKeyType != null) {\n    warnOnce('returnKeyType', 'returnKeyType is deprecated. Use enterKeyHint.');\n  }\n  supportedProps.enterKeyHint = enterKeyHint || returnKeyType;\n  supportedProps.inputMode = _inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  if (editable != null) {\n    warnOnce('editable', 'editable is deprecated. Use readOnly.');\n  }\n  supportedProps.readOnly = readOnly === true || editable === false;\n  if (numberOfLines != null) {\n    warnOnce('numberOfLines', 'TextInput numberOfLines is deprecated. Use rows.');\n  }\n  supportedProps.rows = multiline ? rows != null ? rows : numberOfLines : 1;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    '--placeholderTextColor': placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style, caretHidden && styles.caretHidden];\n  supportedProps.type = multiline ? undefined : type;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = createElement(component, supportedProps, {\n    writingDirection\n  });\n  return element;\n});\nTextInput.displayName = 'TextInput';\n// $FlowFixMe\nTextInput.State = TextInputState;\nvar styles = StyleSheet.create({\n  textinput$raw: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  },\n  placeholder: {\n    placeholderTextColor: 'var(--placeholderTextColor)'\n  },\n  caretHidden: {\n    caretColor: 'transparent'\n  }\n});\nexport default TextInput;","// https://github.com/necolas/react-native-web/blob/0.19.1/packages/react-native-web/src/exports/Pressable/index.js#L221\n\nimport { useState } from \"react\";\n\nexport const useForceableState = (forced: boolean): [boolean, (value: boolean) => void] => {\n  const [value, setValue] = useState(false);\n  return [value || forced, setValue];\n};\n","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nexports.__esModule = true;\nexports.default = mergeRefs;\nvar React = _interopRequireWildcard(require(\"react\"));\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction mergeRefs() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return function forwardRef(node) {\n    args.forEach(ref => {\n      if (ref == null) {\n        return;\n      }\n      if (typeof ref === 'function') {\n        ref(node);\n        return;\n      }\n      if (typeof ref === 'object') {\n        ref.current = node;\n        return;\n      }\n      console.error(\"mergeRefs cannot handle Refs of type boolean, number or string, received ref \" + String(ref));\n    });\n  };\n}\nmodule.exports = exports.default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nexports.__esModule = true;\nexports.default = useMergeRefs;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _mergeRefs = _interopRequireDefault(require(\"../mergeRefs\"));\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction useMergeRefs() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return React.useMemo(() => (0, _mergeRefs.default)(...args),\n  // eslint-disable-next-line\n  [...args]);\n}\nmodule.exports = exports.default;","// https://github.com/necolas/react-native-web/blob/0.19.1/packages/react-native-web/src/modules/useMergeRefs/index.js\n// https://github.com/theKashey/use-callback-ref (for typing)\n\nimport { MutableRefObject, Ref } from \"react\";\n// @ts-expect-error\nimport originalUseMergeRefs from \"react-native-web/dist/cjs/modules/useMergeRefs\";\n\nexport const useMergeRefs = originalUseMergeRefs as <T>(\n  ...refs: Ref<T>[]\n) => MutableRefObject<T | null>;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nexports.__esModule = true;\nexports.default = void 0;\nvar DELAY = 'DELAY';\nvar ERROR = 'ERROR';\nvar LONG_PRESS_DETECTED = 'LONG_PRESS_DETECTED';\nvar NOT_RESPONDER = 'NOT_RESPONDER';\nvar RESPONDER_ACTIVE_LONG_PRESS_START = 'RESPONDER_ACTIVE_LONG_PRESS_START';\nvar RESPONDER_ACTIVE_PRESS_START = 'RESPONDER_ACTIVE_PRESS_START';\nvar RESPONDER_INACTIVE_PRESS_START = 'RESPONDER_INACTIVE_PRESS_START';\nvar RESPONDER_GRANT = 'RESPONDER_GRANT';\nvar RESPONDER_RELEASE = 'RESPONDER_RELEASE';\nvar RESPONDER_TERMINATED = 'RESPONDER_TERMINATED';\nvar Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: ERROR,\n    RESPONDER_TERMINATED: ERROR,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_START: {\n    DELAY: RESPONDER_ACTIVE_PRESS_START,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  ERROR: {\n    DELAY: NOT_RESPONDER,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: NOT_RESPONDER\n  }\n});\nvar getElementRole = element => element.getAttribute('role');\nvar getElementType = element => element.tagName.toLowerCase();\nvar isActiveSignal = signal => signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\nvar isButtonRole = element => getElementRole(element) === 'button';\nvar isPressStartSignal = signal => signal === RESPONDER_INACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\nvar isTerminalSignal = signal => signal === RESPONDER_TERMINATED || signal === RESPONDER_RELEASE;\nvar isValidKeyPress = event => {\n  var key = event.key,\n    target = event.target;\n  var isSpacebar = key === ' ' || key === 'Spacebar';\n  var isButtonish = getElementType(target) === 'button' || isButtonRole(target);\n  return key === 'Enter' || isSpacebar && isButtonish;\n};\nvar DEFAULT_LONG_PRESS_DELAY_MS = 450; // 500 - 50\nvar DEFAULT_PRESS_DELAY_MS = 50;\n\n/**\n * =========================== PressResponder Tutorial ===========================\n *\n * The `PressResponder` class helps you create press interactions by analyzing the\n * geometry of elements and observing when another responder (e.g. ScrollView)\n * has stolen the touch lock. It offers hooks for your component to provide\n * interaction feedback to the user:\n *\n * - When a press has activated (e.g. highlight an element)\n * - When a press has deactivated (e.g. un-highlight an element)\n * - When a press sould trigger an action, meaning it activated and deactivated\n *   while within the geometry of the element without the lock being stolen.\n *\n * A high quality interaction isn't as simple as you might think. There should\n * be a slight delay before activation. Moving your finger beyond an element's\n * bounds should trigger deactivation, but moving the same finger back within an\n * element's bounds should trigger reactivation.\n *\n * In order to use `PressResponder`, do the following:\n *\n *     const pressResponder = new PressResponder(config);\n *\n * 2. Choose the rendered component who should collect the press events. On that\n *    element, spread `pressability.getEventHandlers()` into its props.\n *\n *    return (\n *      <View {...this.state.pressResponder.getEventHandlers()} />\n *    );\n *\n * 3. Reset `PressResponder` when your component unmounts.\n *\n *    componentWillUnmount() {\n *      this.state.pressResponder.reset();\n *    }\n *\n * ==================== Implementation Details ====================\n *\n * `PressResponder` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n * # Geometry\n *\n *  ┌────────────────────────┐\n *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`.\n *  │  │  ┌────────────┐  │  │\n *  │  │  │ VisualRect │  │  │\n *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time\n *  │  │    HitRect       │  │   before letting up, `VisualRect` activates.\n *  │  └──────────────────┘  │\n *  │       Out Region   o   │\n *  └────────────────────│───┘\n *                       └────── When the press is released outside the `HitRect`,\n *                               the responder is NOT eligible for a \"press\".\n *\n * # State Machine\n *\n * ┌───────────────┐ ◀──── RESPONDER_RELEASE\n * │ NOT_RESPONDER │\n * └───┬───────────┘ ◀──── RESPONDER_TERMINATED\n *     │\n *     │ RESPONDER_GRANT (HitRect)\n *     │\n *     ▼\n * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │\n * │ PRESS_START         ├────────▶ │ PRESS_START       ├────────────▶ │ LONG_PRESS_START  │\n * └─────────────────────┘          └───────────────────┘              └───────────────────┘\n *\n * T + DELAY => LONG_PRESS_DELAY + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the invocation of `onLongPress`. Only when the browser produces a\n * `click` event is `onPress` invoked.\n */\nclass PressResponder {\n  constructor(config) {\n    this._eventHandlers = null;\n    this._isPointerTouch = false;\n    this._longPressDelayTimeout = null;\n    this._longPressDispatched = false;\n    this._pressDelayTimeout = null;\n    this._pressOutDelayTimeout = null;\n    this._touchState = NOT_RESPONDER;\n    this.configure(config);\n  }\n  configure(config) {\n    this._config = config;\n  }\n\n  /**\n   * Resets any pending timers. This should be called on unmount.\n   */\n  reset() {\n    this._cancelLongPressDelayTimeout();\n    this._cancelPressDelayTimeout();\n    this._cancelPressOutDelayTimeout();\n  }\n\n  /**\n   * Returns a set of props to spread into the interactive element.\n   */\n  getEventHandlers() {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n    return this._eventHandlers;\n  }\n  _createEventHandlers() {\n    var start = (event, shouldDelay) => {\n      event.persist();\n      this._cancelPressOutDelayTimeout();\n      this._longPressDispatched = false;\n      this._selectionTerminated = false;\n      this._touchState = NOT_RESPONDER;\n      this._isPointerTouch = event.nativeEvent.type === 'touchstart';\n      this._receiveSignal(RESPONDER_GRANT, event);\n      var delayPressStart = normalizeDelay(this._config.delayPressStart, 0, DEFAULT_PRESS_DELAY_MS);\n      if (shouldDelay !== false && delayPressStart > 0) {\n        this._pressDelayTimeout = setTimeout(() => {\n          this._receiveSignal(DELAY, event);\n        }, delayPressStart);\n      } else {\n        this._receiveSignal(DELAY, event);\n      }\n      var delayLongPress = normalizeDelay(this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS);\n      this._longPressDelayTimeout = setTimeout(() => {\n        this._handleLongPress(event);\n      }, delayLongPress + delayPressStart);\n    };\n    var end = event => {\n      this._receiveSignal(RESPONDER_RELEASE, event);\n    };\n    var keyupHandler = event => {\n      var onPress = this._config.onPress;\n      var target = event.target;\n      if (this._touchState !== NOT_RESPONDER && isValidKeyPress(event)) {\n        end(event);\n        document.removeEventListener('keyup', keyupHandler);\n        var role = target.getAttribute('role');\n        var elementType = getElementType(target);\n        var isNativeInteractiveElement = role === 'link' || elementType === 'a' || elementType === 'button' || elementType === 'input' || elementType === 'select' || elementType === 'textarea';\n        if (onPress != null && !isNativeInteractiveElement) {\n          onPress(event);\n        }\n      }\n    };\n    return {\n      onStartShouldSetResponder: event => {\n        var disabled = this._config.disabled;\n        if (disabled && isButtonRole(event.currentTarget)) {\n          event.stopPropagation();\n        }\n        if (disabled == null) {\n          return true;\n        }\n        return !disabled;\n      },\n      onKeyDown: event => {\n        var disabled = this._config.disabled;\n        var key = event.key,\n          target = event.target;\n        if (!disabled && isValidKeyPress(event)) {\n          if (this._touchState === NOT_RESPONDER) {\n            start(event, false);\n            // Listen to 'keyup' on document to account for situations where\n            // focus is moved to another element during 'keydown'.\n            document.addEventListener('keyup', keyupHandler);\n          }\n          var isSpacebarKey = key === ' ' || key === 'Spacebar';\n          var role = getElementRole(target);\n          var isButtonLikeRole = role === 'button' || role === 'menuitem';\n          if (isSpacebarKey && isButtonLikeRole && getElementType(target) !== 'button') {\n            // Prevent spacebar scrolling the window if using non-native button\n            event.preventDefault();\n          }\n          event.stopPropagation();\n        }\n      },\n      onResponderGrant: event => start(event),\n      onResponderMove: event => {\n        if (this._config.onPressMove != null) {\n          this._config.onPressMove(event);\n        }\n        var touch = getTouchFromResponderEvent(event);\n        if (this._touchActivatePosition != null) {\n          var deltaX = this._touchActivatePosition.pageX - touch.pageX;\n          var deltaY = this._touchActivatePosition.pageY - touch.pageY;\n          if (Math.hypot(deltaX, deltaY) > 10) {\n            this._cancelLongPressDelayTimeout();\n          }\n        }\n      },\n      onResponderRelease: event => end(event),\n      onResponderTerminate: event => {\n        if (event.nativeEvent.type === 'selectionchange') {\n          this._selectionTerminated = true;\n        }\n        this._receiveSignal(RESPONDER_TERMINATED, event);\n      },\n      onResponderTerminationRequest: event => {\n        var _this$_config = this._config,\n          cancelable = _this$_config.cancelable,\n          disabled = _this$_config.disabled,\n          onLongPress = _this$_config.onLongPress;\n        // If `onLongPress` is provided, don't terminate on `contextmenu` as default\n        // behavior will be prevented for non-mouse pointers.\n        if (!disabled && onLongPress != null && this._isPointerTouch && event.nativeEvent.type === 'contextmenu') {\n          return false;\n        }\n        if (cancelable == null) {\n          return true;\n        }\n        return cancelable;\n      },\n      // NOTE: this diverges from react-native in 3 significant ways:\n      // * The `onPress` callback is not connected to the responder system (the native\n      //  `click` event must be used but is dispatched in many scenarios where no pointers\n      //   are on the screen.) Therefore, it's possible for `onPress` to be called without\n      //   `onPress{Start,End}` being called first.\n      // * The `onPress` callback is only be called on the first ancestor of the native\n      //   `click` target that is using the PressResponder.\n      // * The event's `nativeEvent` is a `MouseEvent` not a `TouchEvent`.\n      onClick: event => {\n        var _this$_config2 = this._config,\n          disabled = _this$_config2.disabled,\n          onPress = _this$_config2.onPress;\n        if (!disabled) {\n          // If long press dispatched, cancel default click behavior.\n          // If the responder terminated because text was selected during the gesture,\n          // cancel the default click behavior.\n          event.stopPropagation();\n          if (this._longPressDispatched || this._selectionTerminated) {\n            event.preventDefault();\n          } else if (onPress != null && event.altKey === false) {\n            onPress(event);\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      },\n      // If `onLongPress` is provided and a touch pointer is being used, prevent the\n      // default context menu from opening.\n      onContextMenu: event => {\n        var _this$_config3 = this._config,\n          disabled = _this$_config3.disabled,\n          onLongPress = _this$_config3.onLongPress;\n        if (!disabled) {\n          if (onLongPress != null && this._isPointerTouch && !event.defaultPrevented) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      }\n    };\n  }\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   */\n  _receiveSignal(signal, event) {\n    var prevState = this._touchState;\n    var nextState = null;\n    if (Transitions[prevState] != null) {\n      nextState = Transitions[prevState][signal];\n    }\n    if (this._touchState === NOT_RESPONDER && signal === RESPONDER_RELEASE) {\n      return;\n    }\n    if (nextState == null || nextState === ERROR) {\n      console.error(\"PressResponder: Invalid signal \" + signal + \" for state \" + prevState + \" on responder\");\n    } else if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n      this._touchState = nextState;\n    }\n  }\n\n  /**\n   * Performs a transition between touchable states and identify any activations\n   * or deactivations (and callback invocations).\n   */\n  _performTransitionSideEffects(prevState, nextState, signal, event) {\n    if (isTerminalSignal(signal)) {\n      // Pressable suppression of contextmenu on windows.\n      // On Windows, the contextmenu is displayed after pointerup.\n      // https://github.com/necolas/react-native-web/issues/2296\n      setTimeout(() => {\n        this._isPointerTouch = false;\n      }, 0);\n      this._touchActivatePosition = null;\n      this._cancelLongPressDelayTimeout();\n    }\n    if (isPressStartSignal(prevState) && signal === LONG_PRESS_DETECTED) {\n      var onLongPress = this._config.onLongPress;\n      // Long press is not supported for keyboards because 'click' can be dispatched\n      // immediately (and multiple times) after 'keydown'.\n      if (onLongPress != null && event.nativeEvent.key == null) {\n        onLongPress(event);\n        this._longPressDispatched = true;\n      }\n    }\n    var isPrevActive = isActiveSignal(prevState);\n    var isNextActive = isActiveSignal(nextState);\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n    if (isPressStartSignal(prevState) && signal === RESPONDER_RELEASE) {\n      var _this$_config4 = this._config,\n        _onLongPress = _this$_config4.onLongPress,\n        onPress = _this$_config4.onPress;\n      if (onPress != null) {\n        var isPressCanceledByLongPress = _onLongPress != null && prevState === RESPONDER_ACTIVE_LONG_PRESS_START;\n        if (!isPressCanceledByLongPress) {\n          // If we never activated (due to delays), activate and deactivate now.\n          if (!isNextActive && !isPrevActive) {\n            this._activate(event);\n            this._deactivate(event);\n          }\n        }\n      }\n    }\n    this._cancelPressDelayTimeout();\n  }\n  _activate(event) {\n    var _this$_config5 = this._config,\n      onPressChange = _this$_config5.onPressChange,\n      onPressStart = _this$_config5.onPressStart;\n    var touch = getTouchFromResponderEvent(event);\n    this._touchActivatePosition = {\n      pageX: touch.pageX,\n      pageY: touch.pageY\n    };\n    if (onPressStart != null) {\n      onPressStart(event);\n    }\n    if (onPressChange != null) {\n      onPressChange(true);\n    }\n  }\n  _deactivate(event) {\n    var _this$_config6 = this._config,\n      onPressChange = _this$_config6.onPressChange,\n      onPressEnd = _this$_config6.onPressEnd;\n    function end() {\n      if (onPressEnd != null) {\n        onPressEnd(event);\n      }\n      if (onPressChange != null) {\n        onPressChange(false);\n      }\n    }\n    var delayPressEnd = normalizeDelay(this._config.delayPressEnd);\n    if (delayPressEnd > 0) {\n      this._pressOutDelayTimeout = setTimeout(() => {\n        end();\n      }, delayPressEnd);\n    } else {\n      end();\n    }\n  }\n  _handleLongPress(event) {\n    if (this._touchState === RESPONDER_ACTIVE_PRESS_START || this._touchState === RESPONDER_ACTIVE_LONG_PRESS_START) {\n      this._receiveSignal(LONG_PRESS_DETECTED, event);\n    }\n  }\n  _cancelLongPressDelayTimeout() {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  }\n  _cancelPressDelayTimeout() {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  }\n  _cancelPressOutDelayTimeout() {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  }\n}\nexports.default = PressResponder;\nfunction normalizeDelay(delay, min, fallback) {\n  if (min === void 0) {\n    min = 0;\n  }\n  if (fallback === void 0) {\n    fallback = 0;\n  }\n  return Math.max(min, delay !== null && delay !== void 0 ? delay : fallback);\n}\nfunction getTouchFromResponderEvent(event) {\n  var _event$nativeEvent = event.nativeEvent,\n    changedTouches = _event$nativeEvent.changedTouches,\n    touches = _event$nativeEvent.touches;\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n  return event.nativeEvent;\n}\nmodule.exports = exports.default;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nexports.__esModule = true;\nexports.default = usePressEvents;\nvar _PressResponder = _interopRequireDefault(require(\"./PressResponder\"));\nvar _react = require(\"react\");\nfunction usePressEvents(hostRef, config) {\n  var pressResponderRef = (0, _react.useRef)(null);\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new _PressResponder.default(config);\n  }\n  var pressResponder = pressResponderRef.current;\n\n  // Re-configure to use the current node and configuration.\n  (0, _react.useEffect)(() => {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n\n  // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n  (0, _react.useEffect)(() => {\n    return () => {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  (0, _react.useDebugValue)(config);\n  return pressResponder.getEventHandlers();\n}\nmodule.exports = exports.default;","// https://github.com/necolas/react-native-web/blob/0.19.1/packages/react-native-web/src/modules/usePressEvents/index.js\n\nimport { MutableRefObject } from \"react\";\nimport { GestureResponderEvent } from \"react-native\";\n// @ts-expect-error\nimport originalUsePressEvents from \"react-native-web/dist/cjs/modules/usePressEvents\";\n\ntype ClickEvent = unknown;\ntype KeyboardEvent = unknown;\ntype ResponderEvent = unknown;\n\nexport type PressResponderConfig = {\n  cancelable?: boolean;\n  delayLongPress?: number;\n  delayPressEnd?: number;\n  delayPressStart?: number;\n  disabled?: boolean;\n  onLongPress?: (event: ResponderEvent) => void;\n  onPress?: (event: GestureResponderEvent) => void;\n  onPressChange?: (event: ResponderEvent) => void;\n  onPressEnd?: (event: ResponderEvent) => void;\n  onPressMove?: (event: ResponderEvent) => void;\n  onPressStart?: (event: ResponderEvent) => void;\n};\n\ntype EventHandlers = {\n  onClick?: (event: ClickEvent) => void;\n  onContextMenu?: (event: ClickEvent) => void;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  onResponderGrant?: (event: ResponderEvent) => void;\n  onResponderMove?: (event: ResponderEvent) => void;\n  onResponderRelease?: (event: ResponderEvent) => void;\n  onResponderTerminate?: (event: ResponderEvent) => void;\n  onResponderTerminationRequest?: (event: ResponderEvent) => boolean;\n  onStartShouldSetResponder?: (event: ResponderEvent) => boolean;\n};\n\nexport const usePressEvents = originalUsePressEvents as <T>(\n  ref: MutableRefObject<T | null>,\n  config: PressResponderConfig,\n) => EventHandlers;\n","// https://github.com/necolas/react-native-web/blob/0.19.1/packages/react-native-web/src/exports/Pressable/index.js\n\nimport {\n  ComponentType,\n  FC,\n  forwardRef,\n  memo,\n  ReactNode,\n  Ref,\n  useCallback,\n  useMemo,\n  useRef,\n} from \"react\";\nimport {\n  HrefAttrs,\n  NativeSyntheticEvent,\n  PressableProps,\n  PressableStateCallbackType,\n  StyleSheet,\n  Text,\n  TextInput,\n  TextInputProps,\n  TextProps,\n  View,\n  ViewProps,\n} from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { Except, Merge } from \"type-fest\";\nimport { useForceableState } from \"../hooks/useForceableState\";\nimport { useHover } from \"../hooks/useHover\";\nimport { useMergeRefs } from \"../hooks/useMergeRefs\";\nimport { PressResponderConfig, usePressEvents } from \"../hooks/usePressEvents\";\n\nconst styles = StyleSheet.create({\n  active: {\n    cursor: \"pointer\",\n    touchAction: \"manipulation\",\n  },\n  disabled: {\n    cursor: \"not-allowed\",\n  },\n});\n\ntype Props<BaseProps extends TextProps | TextInputProps> = Merge<\n  BaseProps,\n  {\n    children?: ReactNode | ((state: PressableStateCallbackType) => ReactNode);\n    delayLongPress?: number;\n    delayPressIn?: number;\n    delayPressOut?: number;\n    disabled?: boolean;\n    onBlur?: (event: NativeSyntheticEvent<React.FocusEvent>) => void;\n    onContextMenu?: (event: NativeSyntheticEvent<React.SyntheticEvent>) => void;\n    onFocus?: (event: NativeSyntheticEvent<React.FocusEvent>) => void;\n    onHoverIn?: (event: unknown) => void;\n    onHoverOut?: (event: unknown) => void;\n    onKeyDown?: (event: NativeSyntheticEvent<React.KeyboardEvent>) => void;\n    onLayout?: BaseProps[\"onLayout\"];\n    onLongPress?: PressResponderConfig[\"onLongPress\"];\n    onPress?: PressResponderConfig[\"onPress\"];\n    onPressIn?: PressResponderConfig[\"onPressStart\"];\n    onPressMove?: PressResponderConfig[\"onPressMove\"];\n    onPressOut?: PressResponderConfig[\"onPressEnd\"];\n    style?: BaseProps[\"style\"] | ((state: PressableStateCallbackType) => BaseProps[\"style\"]);\n    /**\n     * Used only for documentation or testing (e.g. snapshot testing).\n     */\n    testOnly_hovered?: boolean;\n    testOnly_pressed?: boolean;\n  }\n>;\n\nconst getPressable = <P extends Props<TextProps | TextInputProps>>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Component: ComponentType<any>,\n  config: { applyPressStyle?: boolean } = {},\n) => {\n  const { applyPressStyle = true } = config;\n\n  return forwardRef((props: P, forwardedRef) => {\n    const {\n      children,\n      delayLongPress,\n      delayPressIn,\n      delayPressOut,\n      disabled = false,\n      onBlur,\n      onContextMenu,\n      onFocus,\n      onHoverIn,\n      onHoverOut,\n      onKeyDown,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressMove,\n      onPressOut,\n      style,\n      tabIndex,\n      testOnly_hovered,\n      testOnly_pressed,\n      ...rest\n    } = props;\n\n    const [hovered, setHovered] = useForceableState(testOnly_hovered === true);\n    const [focused, setFocused] = useForceableState(false);\n    const [pressed, setPressed] = useForceableState(testOnly_pressed === true);\n\n    const hostRef = useRef<Element>(null);\n    const setRef = useMergeRefs(forwardedRef, hostRef);\n\n    const pressConfig = useMemo(\n      () => ({\n        delayLongPress,\n        delayPressStart: delayPressIn,\n        delayPressEnd: delayPressOut,\n        disabled,\n        onLongPress,\n        onPress,\n        onPressChange: setPressed,\n        onPressStart: onPressIn,\n        onPressMove,\n        onPressEnd: onPressOut,\n      }),\n      [\n        delayLongPress,\n        delayPressIn,\n        delayPressOut,\n        disabled,\n        onLongPress,\n        onPress,\n        onPressIn,\n        onPressMove,\n        onPressOut,\n        setPressed,\n      ],\n    );\n\n    // @ts-expect-error\n    const pressEventHandlers = usePressEvents(hostRef, pressConfig);\n    const { onContextMenu: onContextMenuPress, onKeyDown: onKeyDownPress } = pressEventHandlers;\n\n    useHover(hostRef, {\n      // The following line has been commented out as we want to event to bubble up\n      // contain: true,\n      disabled,\n      onHoverChange: setHovered,\n      onHoverStart: onHoverIn,\n      onHoverEnd: onHoverOut,\n    });\n\n    const interactionState = { hovered, focused, pressed };\n\n    const blurHandler = useCallback(\n      (e: NativeSyntheticEvent<React.FocusEvent>) => {\n        if (e.nativeEvent.target === hostRef.current) {\n          setFocused(false);\n          onBlur?.(e);\n        }\n      },\n      [hostRef, setFocused, onBlur],\n    );\n\n    const focusHandler = useCallback(\n      (e: NativeSyntheticEvent<React.FocusEvent>) => {\n        if (e.nativeEvent.target === hostRef.current) {\n          setFocused(true);\n          onFocus?.(e);\n        }\n      },\n      [hostRef, setFocused, onFocus],\n    );\n\n    const contextMenuHandler = useCallback(\n      (e: NativeSyntheticEvent<React.SyntheticEvent>) => {\n        onContextMenuPress?.(e);\n        onContextMenu?.(e);\n      },\n      [onContextMenu, onContextMenuPress],\n    );\n\n    const keyDownHandler = useCallback(\n      (e: NativeSyntheticEvent<React.KeyboardEvent>) => {\n        onKeyDownPress?.(e);\n        onKeyDown?.(e);\n      },\n      [onKeyDown, onKeyDownPress],\n    );\n\n    let _tabIndex: 0 | -1 | undefined;\n\n    if (tabIndex !== undefined) {\n      _tabIndex = tabIndex;\n    } else {\n      _tabIndex = disabled ? -1 : 0;\n    }\n\n    return (\n      <Component\n        {...rest}\n        {...pressEventHandlers}\n        aria-disabled={disabled}\n        onBlur={blurHandler}\n        onContextmenu={contextMenuHandler}\n        onFocus={focusHandler}\n        onKeyDown={keyDownHandler}\n        ref={setRef}\n        style={[\n          match({ disabled, applyPressStyle })\n            .with({ disabled: false, applyPressStyle: true }, () => styles.active)\n            .with({ disabled: true }, () => styles.disabled)\n            .otherwise(() => null),\n          typeof style === \"function\" ? style(interactionState) : style,\n        ]}\n        tabIndex={_tabIndex}\n      >\n        {typeof children === \"function\" ? children(interactionState) : children}\n      </Component>\n    );\n  });\n};\n\ntype ExtraProps = {\n  href?: string;\n  hrefAttrs?: HrefAttrs;\n};\n\nexport type PressableViewProps = Except<Props<ViewProps>, \"children\">;\nexport type PressableTextProps = Props<TextProps>;\n\nexport type PressableTextInputProps = Except<\n  Props<TextInputProps>,\n  \"children\" | \"editable\" | \"keyboardType\" | \"numberOfLines\"\n>;\n\nexport const Pressable = memo(\n  getPressable<PressableViewProps>(View, { applyPressStyle: true }),\n) as FC<PressableProps & ExtraProps & { ref?: Ref<View> }>;\n\nexport const PressableText = memo(\n  getPressable<PressableTextProps>(Text, { applyPressStyle: true }),\n) as FC<PressableTextProps & { ref?: Ref<Text> }>;\n\nexport const PressableTextInput = memo(\n  getPressable<PressableTextInputProps>(TextInput, { applyPressStyle: false }),\n) as FC<PressableTextInputProps & { ref?: Ref<TextInput> }>;\n\nPressableText.displayName = \"PressableText\";\nPressableTextInput.displayName = \"PressableTextInput\";\n"],"names":["isSelectionStale","node","selection","selectionEnd","selectionStart","start","end","setSelection","forwardPropsList","forwardedProps.defaultProps","forwardedProps.accessibilityProps","forwardedProps.clickProps","forwardedProps.focusProps","forwardedProps.keyboardProps","forwardedProps.mouseProps","forwardedProps.touchProps","forwardedProps.styleProps","pickProps","props","pick","isEventComposing","nativeEvent","focusTimeout","TextInput","React.forwardRef","forwardedRef","_props$autoCapitalize","autoCapitalize","autoComplete","autoCompleteType","_props$autoCorrect","autoCorrect","blurOnSubmit","caretHidden","clearTextOnFocus","dir","editable","enterKeyHint","inputMode","keyboardType","_props$multiline","multiline","numberOfLines","onBlur","onChange","onChangeText","onContentSizeChange","onFocus","onKeyPress","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderEnd","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderStart","onResponderTerminate","onResponderTerminationRequest","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","_props$readOnly","readOnly","returnKeyType","rows","_props$secureTextEntr","secureTextEntry","selectTextOnFocus","spellCheck","type","_inputMode","dimensions","React.useRef","hostRef","prevSelection","prevSecureTextEntry","React.useEffect","handleContentSizeChange","React.useCallback","hostNode","newHeight","newWidth","imperativeRef","React.useMemo","TextInputState","handleBlur","e","handleChange","text","handleFocus","handleKeyDown","blurOnSubmitDefault","shouldBlurOnSubmit","isComposing","handleSelectionChange","_e$target","_selection","useLayoutEffect","component","useElementLayout","useResponderEvents","_useLocaleContext","useLocaleContext","contextDirection","supportedProps","styles","platformMethodsRef","usePlatformMethods","setRef","useMergeRefs","langDirection","getLocaleDirection","componentDirection","writingDirection","element","createElement","StyleSheet","TextInput$1","useForceableState","forced","value","setValue","useState","_interopRequireWildcard","require$$0","exports","mergeRefs","require$$1","_len","args","_key","ref","module","_interopRequireDefault","React","require$$2","_mergeRefs","require$$3","originalUseMergeRefs","DELAY","ERROR","LONG_PRESS_DETECTED","NOT_RESPONDER","RESPONDER_ACTIVE_LONG_PRESS_START","RESPONDER_ACTIVE_PRESS_START","RESPONDER_INACTIVE_PRESS_START","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","Transitions","getElementRole","getElementType","isActiveSignal","signal","isButtonRole","isPressStartSignal","isTerminalSignal","isValidKeyPress","event","key","target","isSpacebar","isButtonish","DEFAULT_LONG_PRESS_DELAY_MS","DEFAULT_PRESS_DELAY_MS","PressResponder","config","shouldDelay","delayPressStart","normalizeDelay","delayLongPress","keyupHandler","onPress","role","elementType","isNativeInteractiveElement","disabled","isSpacebarKey","isButtonLikeRole","touch","getTouchFromResponderEvent","deltaX","deltaY","_this$_config","cancelable","onLongPress","_this$_config2","_this$_config3","prevState","nextState","isPrevActive","isNextActive","_this$_config4","_onLongPress","isPressCanceledByLongPress","_this$_config5","onPressChange","onPressStart","_this$_config6","onPressEnd","delayPressEnd","delay","min","fallback","_event$nativeEvent","changedTouches","touches","usePressEvents","_PressResponder","_react","pressResponderRef","pressResponder","originalUsePressEvents","getPressable","Component","applyPressStyle","forwardRef","children","delayPressIn","delayPressOut","onContextMenu","onHoverIn","onHoverOut","onKeyDown","onPressIn","onPressMove","onPressOut","style","tabIndex","testOnly_hovered","testOnly_pressed","rest","hovered","setHovered","focused","setFocused","pressed","setPressed","useRef","pressConfig","useMemo","pressEventHandlers","onContextMenuPress","onKeyDownPress","useHover","interactionState","blurHandler","useCallback","focusHandler","contextMenuHandler","keyDownHandler","_tabIndex","jsx","match","Pressable","memo","View","PressableText","Text","PressableTextInput"],"mappings":"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","x_google_ignoreList":[0,2,3,5,6]}