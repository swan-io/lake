{"version":3,"file":"LakeButton-MPVto-yv.js","sources":["../../../packages/lake/src/components/LakeButton.tsx"],"sourcesContent":["import { Children, forwardRef, Fragment, memo, ReactNode, ReactText } from \"react\";\nimport {\n  ActivityIndicator,\n  GestureResponderEvent,\n  HrefAttrs,\n  PressableStateCallbackType,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from \"react-native\";\nimport { match } from \"ts-pattern\";\nimport { commonStyles } from \"../constants/commonStyles\";\nimport {\n  backgroundColor,\n  colors,\n  ColorVariants,\n  invariantColors,\n  radii,\n  Spacings,\n  spacings,\n  texts,\n} from \"../constants/design\";\nimport { isNotNullish, isNullish } from \"../utils/nullish\";\nimport { Icon, IconName } from \"./Icon\";\nimport { LakeText } from \"./LakeText\";\nimport { Pressable } from \"./Pressable\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  base: {\n    alignItems: \"center\",\n    backgroundColor: colors.gray[900],\n    borderRadius: radii[6],\n    flexDirection: \"row\",\n    flexShrink: 0,\n    height: 48,\n    minWidth: 90,\n    justifyContent: \"center\",\n    paddingHorizontal: 20,\n    transitionDuration: \"150ms\",\n    transitionProperty: \"background-color, color\",\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  iconOnly: {\n    minWidth: 48,\n    width: 48,\n    paddingRight: 0,\n    paddingLeft: 0,\n  },\n  iconSmallOnly: {\n    minWidth: 40,\n    width: 40,\n    paddingRight: 0,\n    paddingLeft: 0,\n  },\n  hiddenView: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    transitionDuration: \"150ms\",\n    transitionProperty: \"opacity\",\n    opacity: 0,\n  },\n  pressed: {\n    opacity: 0.15,\n    backgroundColor: colors.gray[900],\n  },\n  small: {\n    height: 40,\n    paddingLeft: 16,\n    paddingRight: 16,\n  },\n  withIconStart: {\n    paddingRight: 24,\n    paddingLeft: 26,\n  },\n  withIconStartSmall: {\n    paddingRight: 19.5,\n    paddingLeft: 21.5,\n  },\n  withIconEnd: {\n    paddingRight: 20,\n    paddingLeft: 24,\n  },\n  withIconEndSmall: {\n    paddingRight: 20.5,\n    paddingLeft: 21.5,\n  },\n  text: texts.semibold,\n  textSmall: texts.smallSemibold,\n  resetOpacity: {\n    opacity: 1,\n  },\n  loaderContainer: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transform: \"translateZ(0px)\",\n    borderRadius: radii[6],\n  },\n  group: {\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    paddingVertical: spacings[16],\n  },\n  pill: {\n    width: 10,\n    height: 10,\n    borderRadius: 5,\n    borderWidth: 2,\n    borderColor: backgroundColor.default,\n    backgroundColor: colors.negative[500],\n    position: \"absolute\",\n    top: -3,\n    right: -3,\n  },\n});\n\nconst isReactText = (node: ReactNode): node is ReactText =>\n  [\"string\", \"number\"].includes(typeof node);\n\nexport type ButtonProps = {\n  ariaControls?: string;\n  ariaExpanded?: boolean;\n  color?: ColorVariants;\n  disabled?: boolean;\n  loading?: boolean;\n  grow?: boolean;\n  icon?: IconName;\n  iconPosition?: \"start\" | \"end\";\n  mode?: \"primary\" | \"secondary\" | \"tertiary\";\n  onPress?: (event: GestureResponderEvent) => void;\n  size?: \"large\" | \"small\";\n  style?: StyleProp<ViewStyle> | ((props: PressableStateCallbackType) => StyleProp<ViewStyle>);\n  forceBackground?: boolean;\n  href?: string;\n  hrefAttrs?: HrefAttrs;\n  pill?: boolean;\n} & (\n  | {\n      ariaLabel: string;\n      children?: never;\n    }\n  | {\n      ariaLabel?: string;\n      children: ReactNode;\n    }\n);\n\nexport const LakeButton = memo(\n  forwardRef<View, ButtonProps>(\n    (\n      {\n        ariaControls,\n        ariaExpanded,\n        ariaLabel,\n        children,\n        color = \"gray\",\n        disabled = false,\n        icon,\n        grow = false,\n        iconPosition = \"start\",\n        loading = false,\n        mode = \"primary\",\n        onPress,\n        size = \"large\",\n        style,\n        forceBackground = false,\n        href,\n        hrefAttrs,\n        pill,\n      },\n      forwardedRef,\n    ) => {\n      const isSmall = size === \"small\";\n      const iconSize = isSmall ? 18 : 20;\n\n      const hasIconStart = isNotNullish(icon) && iconPosition === \"start\";\n      const hasIconEnd = isNotNullish(icon) && iconPosition === \"end\";\n      const hasOnlyIcon = isNullish(children) && isNotNullish(icon);\n\n      return (\n        <Pressable\n          href={href}\n          hrefAttrs={hrefAttrs}\n          role={href != null ? \"link\" : \"button\"}\n          aria-busy={loading}\n          aria-disabled={disabled}\n          aria-controls={ariaControls}\n          aria-expanded={ariaExpanded}\n          aria-label={ariaLabel}\n          disabled={loading || disabled}\n          ref={forwardedRef}\n          onPress={onPress}\n          style={({ hovered, pressed, focused }) => [\n            styles.base,\n            isSmall && styles.small,\n            hasIconStart && isSmall ? styles.withIconStartSmall : styles.withIconStart,\n            hasIconEnd && (isSmall ? styles.withIconEndSmall : styles.withIconEnd),\n            hasOnlyIcon && (isSmall ? styles.iconSmallOnly : styles.iconOnly),\n            disabled && commonStyles.disabled,\n            disabled && forceBackground && styles.resetOpacity,\n            grow && styles.grow,\n\n            match(mode)\n              .with(\"primary\", () => ({\n                backgroundColor:\n                  color === \"warning\"\n                    ? hovered\n                      ? colors[color][600]\n                      : colors[color][500]\n                    : hovered\n                      ? colors[color].secondary\n                      : colors[color].primary,\n              }))\n              .with(\"secondary\", () => ({\n                backgroundColor: pressed\n                  ? colors[color][100]\n                  : hovered\n                    ? colors[color][50]\n                    : forceBackground\n                      ? backgroundColor.accented\n                      : invariantColors.transparent,\n                borderWidth: 1,\n                borderColor:\n                  disabled && forceBackground\n                    ? colors[color][100]\n                    : hovered\n                      ? colors[color][600]\n                      : colors[color][300],\n              }))\n              .with(\"tertiary\", () => ({\n                backgroundColor: pressed\n                  ? colors[color][200]\n                  : hovered\n                    ? colors[color][100]\n                    : invariantColors.transparent,\n              }))\n              .exhaustive(),\n\n            typeof style == \"function\" ? style({ hovered, pressed, focused }) : style,\n          ]}\n        >\n          {({ pressed, hovered }) => {\n            const textColor =\n              mode === \"secondary\" || mode === \"tertiary\"\n                ? disabled && forceBackground\n                  ? colors[color][300]\n                  : hovered || pressed\n                    ? colors[color][700]\n                    : colors[color][600]\n                : colors[color].contrast;\n\n            return (\n              <>\n                {hasIconStart && (\n                  <>\n                    <Icon color={textColor} name={icon} size={iconSize} />\n\n                    {isNotNullish(children) && <Space width={isSmall ? 8 : 12} />}\n                  </>\n                )}\n\n                {isReactText(children) ? (\n                  <LakeText\n                    numberOfLines={1}\n                    userSelect=\"none\"\n                    style={[isSmall ? styles.textSmall : styles.text, { color: textColor }]}\n                  >\n                    {children}\n                  </LakeText>\n                ) : (\n                  children\n                )}\n\n                {hasIconEnd && (\n                  <>\n                    {isNotNullish(children) && <Space width={isSmall ? 8 : 12} />}\n\n                    <Icon color={textColor} name={icon} size={iconSize} />\n                  </>\n                )}\n\n                {loading && (\n                  <View\n                    role=\"none\"\n                    style={[\n                      styles.loaderContainer,\n                      {\n                        backgroundColor:\n                          mode === \"secondary\" || mode === \"tertiary\"\n                            ? backgroundColor.accented\n                            : colors[color].primary,\n                      },\n                    ]}\n                  >\n                    <ActivityIndicator\n                      color={\n                        mode === \"secondary\" || mode === \"tertiary\"\n                          ? colors[color].primary\n                          : colors[color].contrast\n                      }\n                      size={iconSize}\n                    />\n                  </View>\n                )}\n\n                <View\n                  style={[styles.hiddenView, pressed && mode === \"primary\" && styles.pressed]}\n                />\n\n                {pill === true ? <View style={styles.pill} /> : null}\n              </>\n            );\n          }}\n        </Pressable>\n      );\n    },\n  ),\n);\n\nLakeButton.displayName = \"Button\";\n\ntype GroupProps = {\n  children: ReactNode;\n  justifyContent?: ViewStyle[\"justifyContent\"];\n  paddingBottom?: 0 | Spacings;\n};\n\nconst ZERO = 0;\n\nexport const LakeButtonGroup = ({\n  children,\n  justifyContent = \"flex-start\",\n  paddingBottom = 16,\n}: GroupProps) => (\n  <View\n    style={[\n      styles.group,\n      { justifyContent, paddingBottom: paddingBottom === 0 ? ZERO : spacings[paddingBottom] },\n    ]}\n  >\n    {Children.toArray(children).map((item, index) => (\n      <Fragment key={index}>\n        {index > 0 ? <Space width={16} /> : null}\n        {item}\n      </Fragment>\n    ))}\n  </View>\n);\n"],"names":["styles","StyleSheet","colors","radii","texts","spacings","backgroundColor","isReactText","node","LakeButton","memo","forwardRef","ariaControls","ariaExpanded","ariaLabel","children","color","disabled","icon","grow","iconPosition","loading","mode","onPress","size","style","forceBackground","href","hrefAttrs","pill","forwardedRef","isSmall","iconSize","hasIconStart","isNotNullish","hasIconEnd","hasOnlyIcon","isNullish","jsx","Pressable","hovered","pressed","focused","commonStyles","match","invariantColors","textColor","jsxs","Fragment","Icon","Space","LakeText","View","ActivityIndicator","ZERO","LakeButtonGroup","justifyContent","paddingBottom","Children","item","index","Fragment2"],"mappings":"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"}