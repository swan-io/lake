{"version":3,"file":"SegmentedControl.stories-41vuUiKE.js","sources":["../../../packages/lake/src/components/SegmentedControl.tsx"],"sourcesContent":["import { ReactNode, useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { P, match } from \"ts-pattern\";\nimport { backgroundColor, colors, radii, spacings, texts } from \"../constants/design\";\nimport { isNotNullish } from \"../utils/nullish\";\nimport { BottomPanel } from \"./BottomPanel\";\nimport { Box } from \"./Box\";\nimport { Icon } from \"./Icon\";\nimport { LakeButton } from \"./LakeButton\";\nimport { LakeText } from \"./LakeText\";\nimport { Pressable } from \"./Pressable\";\nimport { ResponsiveContainer } from \"./ResponsiveContainer\";\nimport { Space } from \"./Space\";\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: spacings[4],\n    backgroundColor: colors.gray[50],\n    borderRadius: radii[8],\n  },\n  selectedItemIndicator: {\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    flexGrow: 1,\n    flexShrink: 1,\n    transitionProperty: \"transform\",\n    transitionDuration: \"250ms\",\n    transitionTimingFunction: \"ease\",\n    padding: spacings[4],\n    borderRadius: radii[4],\n    backgroundColor: backgroundColor.accented,\n  },\n  itemMobile: {\n    backgroundColor: backgroundColor.accented,\n    borderRadius: radii[4],\n    padding: spacings[16],\n    flexDirection: \"row\",\n    height: 60,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexGrow: 1,\n  },\n  dropdownItem: {\n    backgroundColor: backgroundColor.accented,\n    borderRadius: radii[4],\n    padding: spacings[16],\n    flexDirection: \"row\",\n    height: 60,\n    alignItems: \"center\",\n    flexGrow: 1,\n  },\n  dropdownItemSelected: {\n    backgroundColor: colors.gray[50],\n    borderRadius: radii[4],\n    padding: spacings[16],\n    flexDirection: \"row\",\n    height: 60,\n    alignItems: \"center\",\n    flexGrow: 1,\n  },\n  button: {\n    width: 60,\n    height: 60,\n  },\n  itemDesktop: {\n    flexBasis: \"0%\",\n    flexGrow: 1,\n    flexShrink: 1,\n    alignItems: \"center\",\n    padding: spacings[16],\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n  itemText: {\n    userSelect: \"none\",\n    lineHeight: texts.regular.fontSize,\n  },\n  selectedItemDesktop: {\n    bottom: 0,\n  },\n});\n\nexport type Item<T extends string> = {\n  name: string;\n  id: T;\n  icon?: ReactNode;\n  activeIcon?: ReactNode;\n};\n\ntype Props<T extends string> = {\n  selected: T;\n  items: ReadonlyArray<Item<T>>;\n  onValueChange: (value: T) => void;\n  minItemWidth?: number;\n};\n\nexport const SegmentedControl = <T extends string>({\n  selected,\n  items,\n  onValueChange,\n  minItemWidth = 250,\n}: Props<T>) => {\n  const selectedItemIndex = items.findIndex(item => item.id === selected);\n\n  const selectedItem = items[selectedItemIndex];\n\n  const [pressed, setPressed] = useState<boolean>(false);\n\n  return (\n    <ResponsiveContainer breakpoint={items.length * minItemWidth} style={styles.container}>\n      {({ small }) =>\n        small ? (\n          <Box direction=\"row\" alignItems=\"center\" justifyContent=\"spaceBetween\">\n            <Pressable\n              style={styles.itemMobile}\n              onPress={() => {\n                setPressed(true);\n              }}\n            >\n              {isNotNullish(selectedItem?.icon) &&\n                match(selectedItem)\n                  .with(\n                    { icon: P.nonNullable, activeIcon: P.nonNullable },\n                    () => selectedItem.activeIcon,\n                  )\n                  .with({ icon: P.nonNullable }, () => selectedItem.icon)\n                  .otherwise(() => null)}\n\n              <Space height={8} width={12} />\n\n              <LakeText\n                color={colors.gray[900]}\n                numberOfLines={1}\n                variant=\"regular\"\n                style={styles.itemText}\n              >\n                {selectedItem?.name}\n              </LakeText>\n            </Pressable>\n\n            <BottomPanel\n              visible={pressed === true}\n              onPressClose={() => {\n                setPressed(false);\n              }}\n            >\n              {items.map(item => (\n                <Box direction=\"row\" key={item.id}>\n                  <Pressable\n                    style={\n                      selectedItem?.id === item.id\n                        ? styles.dropdownItemSelected\n                        : styles.dropdownItem\n                    }\n                    onPress={() => {\n                      onValueChange(item.id);\n                      setPressed(false);\n                    }}\n                  >\n                    {isNotNullish(item.icon) &&\n                      match(item)\n                        .with({ icon: P.nonNullable, activeIcon: P.nonNullable }, () =>\n                          selectedItem?.id === item.id ? selectedItem.activeIcon : item.icon,\n                        )\n                        .with({ icon: P.nonNullable }, () => item.icon)\n                        .otherwise(() => null)}\n\n                    <Space height={8} width={12} />\n\n                    <LakeText\n                      color={colors.gray[900]}\n                      numberOfLines={1}\n                      variant=\"regular\"\n                      style={styles.itemText}\n                    >\n                      {item.name}\n                    </LakeText>\n                  </Pressable>\n\n                  {selectedItem?.id === item.id && (\n                    <Box\n                      justifyContent=\"center\"\n                      style={{ paddingHorizontal: spacings[24], backgroundColor: colors.gray[50] }}\n                    >\n                      <Icon size={16} name=\"lake-check\" color={colors.positive[500]} />\n                    </Box>\n                  )}\n                </Box>\n              ))}\n            </BottomPanel>\n\n            <Space width={4} />\n\n            <LakeButton\n              mode=\"tertiary\"\n              style={styles.button}\n              size=\"small\"\n              icon=\"more-horizontal-filled\"\n              onPress={() => setPressed(true)}\n              ariaLabel=\"Previous\"\n            />\n          </Box>\n        ) : (\n          <Box direction=\"row\">\n            <View\n              role=\"none\"\n              style={[\n                styles.selectedItemIndicator,\n                styles.selectedItemDesktop,\n                {\n                  width: `${(1 / items.length) * 100}%`,\n                  transform: `translateX(${selectedItemIndex * 100}%)`,\n                },\n              ]}\n            />\n\n            {items.map(item => (\n              <Pressable\n                key={item.id}\n                style={styles.itemDesktop}\n                onPress={() => {\n                  onValueChange(item.id);\n                }}\n              >\n                <>\n                  {isNotNullish(item.icon) &&\n                    match(item)\n                      .with({ icon: P.nonNullable, activeIcon: P.nonNullable }, () =>\n                        selectedItem?.id === item.id ? selectedItem.activeIcon : item.icon,\n                      )\n                      .with({ icon: P.nonNullable }, () => item.icon)\n                      .otherwise(() => null)}\n\n                  <Space height={8} width={12} />\n                </>\n\n                <LakeText\n                  color={colors.gray[900]}\n                  numberOfLines={1}\n                  variant=\"regular\"\n                  style={styles.itemText}\n                >\n                  {item.name}\n                </LakeText>\n              </Pressable>\n            ))}\n          </Box>\n        )\n      }\n    </ResponsiveContainer>\n  );\n};\n"],"names":["styles","StyleSheet","spacings","colors","radii","backgroundColor","texts","SegmentedControl","selected","items","onValueChange","minItemWidth","selectedItemIndex","item","selectedItem","pressed","setPressed","useState","jsx","ResponsiveContainer","small","jsxs","Box","Pressable","isNotNullish","match","P","Space","LakeText","BottomPanel","Icon","LakeButton","View","Fragment"],"mappings":"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"}