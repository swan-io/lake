{"version":3,"file":"FilesUploader-tTF6FJ1y.js","sources":["../../../packages/shared-business/src/hooks/useFilesUploader.ts","../../../packages/shared-business/src/components/FileTile.tsx","../../../packages/shared-business/src/components/FilesUploader.tsx"],"sourcesContent":["import { Future, Result } from \"@swan-io/boxed\";\nimport { useCallback, useState } from \"react\";\nimport { SwanFile } from \"../utils/SwanFile\";\n\nexport type UploadFileInput<UploadOutput> = {\n  id: string;\n  upload: UploadOutput;\n  file: File;\n  onLoadStart: (event: ProgressEvent<XMLHttpRequestEventTarget>) => void;\n  onProgress: (event: ProgressEvent<XMLHttpRequestEventTarget>) => void;\n};\n\nexport type UploadOutputWithId<UploadOutput> = { id: string; upload: UploadOutput };\n\nexport type Config<UploadInput, UploadOutput, GenerateUploadError, UploadFileError> = {\n  initialFiles: SwanFile[];\n  // Takes a configuration and outputs the needed input for the actual upload\n  // It also provides an ID that's required to keep track of the file\n  generateUpload: (\n    config: UploadInput,\n  ) => Future<Result<UploadOutputWithId<UploadOutput>, GenerateUploadError>>;\n  // Effectively uploads the file\n  uploadFile: (config: UploadFileInput<UploadOutput>) => Future<Result<unknown, UploadFileError>>;\n  onError?: (error: GenerateUploadError | UploadFileError) => void;\n};\n\nexport const useFilesUploader = <UploadInput, UploadOutput, GenerateUploadError, UploadFileError>(\n  config: Config<UploadInput, UploadOutput, GenerateUploadError, UploadFileError>,\n) => {\n  const [files, setFiles] = useState(config.initialFiles);\n\n  const upload = useCallback(\n    (uploadInput: UploadInput, file: File) => {\n      return config\n        .generateUpload(uploadInput)\n        .tapError(error => {\n          if (config.onError != undefined) {\n            config.onError(error);\n          }\n        })\n        .flatMapOk(({ upload, id }) => {\n          setFiles(files => [\n            ...files.filter(file => file.id !== id),\n            {\n              id,\n              statusInfo: { status: \"Uploading\", progress: 0 },\n              name: file.name,\n            },\n          ]);\n\n          const onProgress = (event: ProgressEvent<XMLHttpRequestEventTarget>) => {\n            setFiles(files =>\n              files.map(file => {\n                if (file.id !== id) {\n                  return file;\n                }\n                return {\n                  ...file,\n                  statusInfo: { status: \"Uploading\", progress: event.loaded / event.total },\n                };\n              }),\n            );\n          };\n\n          return config\n            .uploadFile({\n              id,\n              upload,\n              file,\n              onLoadStart: onProgress,\n              onProgress,\n            })\n            .tapOk(() => {\n              setFiles(files =>\n                files.map(file => {\n                  if (file.id !== id) {\n                    return file;\n                  }\n                  return {\n                    ...file,\n                    statusInfo: { status: \"Uploaded\" },\n                  };\n                }),\n              );\n            })\n            .tapError(error => {\n              if (config.onError != undefined) {\n                config.onError(error);\n              }\n              setFiles(files => files.filter(file => file.id !== id));\n            });\n        });\n    },\n    [config],\n  );\n\n  const remove = useCallback((id: string) => {\n    setFiles(files => files.filter(file => file.id !== id));\n  }, []);\n\n  return {\n    files,\n    upload,\n    remove,\n  };\n};\n","import { Future } from \"@swan-io/boxed\";\nimport { Box } from \"@swan-io/lake/src/components/Box\";\nimport { LakeAlert } from \"@swan-io/lake/src/components/LakeAlert\";\nimport { LakeButton } from \"@swan-io/lake/src/components/LakeButton\";\nimport { LakeText } from \"@swan-io/lake/src/components/LakeText\";\nimport { Space } from \"@swan-io/lake/src/components/Space\";\nimport { Tag } from \"@swan-io/lake/src/components/Tag\";\nimport { commonStyles } from \"@swan-io/lake/src/constants/commonStyles\";\nimport {\n  backgroundColor,\n  colors,\n  gray75,\n  shadows,\n  spacings,\n} from \"@swan-io/lake/src/constants/design\";\nimport { getIconNameFromFilename } from \"@swan-io/lake/src/utils/file\";\nimport { isNotNullish, isNotNullishOrEmpty } from \"@swan-io/lake/src/utils/nullish\";\nimport { useCallback, useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { P, match } from \"ts-pattern\";\nimport { SwanFile } from \"../utils/SwanFile\";\nimport { t } from \"../utils/i18n\";\n\nconst styles = StyleSheet.create({\n  base: {\n    backgroundColor: backgroundColor.accented,\n    borderRadius: 8,\n    boxShadow: shadows.tile,\n    overflow: \"hidden\",\n  },\n  content: {\n    height: 56,\n    paddingLeft: spacings[20],\n    paddingRight: spacings[8],\n  },\n  progressBar: {\n    flex: 1,\n    height: 4,\n    borderRadius: 2,\n    backgroundColor: gray75,\n  },\n  progress: {\n    height: 4,\n    transitionProperty: \"width\",\n    transitionDuration: \"300ms\",\n    transitionTimingFunction: \"ease-in-out\",\n    borderRadius: 2,\n    backgroundColor: colors.current[500],\n  },\n});\n\ntype Props = {\n  file: SwanFile;\n  onRemove?: () => Future<unknown>;\n};\n\nexport const FileTile = ({ file: { statusInfo, name, url }, onRemove }: Props) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const onPressRemove = useCallback(() => {\n    if (onRemove != undefined) {\n      setIsDeleting(true);\n      onRemove().tap(() => setIsDeleting(false));\n    }\n  }, [onRemove]);\n\n  return (\n    <Box style={styles.base}>\n      <Box alignItems=\"center\" direction=\"row\" style={styles.content}>\n        {statusInfo.status === \"Uploading\" ? (\n          <>\n            <LakeText numberOfLines={1} color={colors.gray[700]}>\n              {t(\"fileTile.uploading\")}\n            </LakeText>\n\n            <Space width={20} />\n\n            <View role=\"progressbar\" style={styles.progressBar}>\n              <View style={[styles.progress, { width: `${statusInfo.progress * 100}%` }]} />\n            </View>\n          </>\n        ) : (\n          <>\n            <Tag\n              icon={getIconNameFromFilename(name)}\n              iconSize={20}\n              color={match(statusInfo)\n                .with({ status: P.union(\"Uploaded\", \"Pending\") }, () => \"shakespear\" as const)\n                .with({ status: \"Validated\" }, () => \"positive\" as const)\n                .with({ status: \"Refused\" }, () => \"negative\" as const)\n                .exhaustive()}\n            />\n\n            <Space width={16} />\n\n            <LakeText numberOfLines={1} color={colors.gray[700]} style={commonStyles.fill}>\n              {name}\n            </LakeText>\n\n            <Space width={12} />\n\n            {isNotNullishOrEmpty(url) && (\n              <LakeButton\n                mode=\"tertiary\"\n                size=\"small\"\n                icon=\"open-filled\"\n                onPress={() => {\n                  window.open(url, \"_blank\");\n                }}\n                ariaLabel={t(\"common.open\")}\n              />\n            )}\n\n            {isNotNullish(onRemove) && (\n              <LakeButton\n                mode=\"tertiary\"\n                size=\"small\"\n                icon=\"delete-regular\"\n                color=\"negative\"\n                onPress={onPressRemove}\n                loading={isDeleting}\n                ariaLabel={t(\"common.remove\")}\n              />\n            )}\n          </>\n        )}\n      </Box>\n\n      {match(statusInfo)\n        .with({ status: \"Pending\" }, () => (\n          <LakeAlert anchored={true} title={t(\"fileTile.status.Pending\")} variant=\"info\" />\n        ))\n        .with({ status: \"Validated\" }, () => (\n          <LakeAlert anchored={true} title={t(\"fileTile.status.Validated\")} variant=\"success\" />\n        ))\n        .with({ status: \"Refused\" }, ({ reason }) => (\n          <LakeAlert anchored={true} title={t(\"fileTile.status.Refused\")} variant=\"error\">\n            {reason}\n          </LakeAlert>\n        ))\n        .otherwise(() => null)}\n    </Box>\n  );\n};\n","import { Future, Result } from \"@swan-io/boxed\";\nimport { Box } from \"@swan-io/lake/src/components/Box\";\nimport { IconName } from \"@swan-io/lake/src/components/Icon\";\nimport { Space } from \"@swan-io/lake/src/components/Space\";\nimport { Fragment, useEffect, useRef } from \"react\";\nimport { Config, useFilesUploader } from \"../hooks/useFilesUploader\";\nimport { SwanFile } from \"../utils/SwanFile\";\nimport { FileInput } from \"./FileInput\";\nimport { FileTile } from \"./FileTile\";\n\ntype Props<UploadInput, UploadOutput, GenerateUploadError, UploadFileError> = Config<\n  UploadInput,\n  UploadOutput,\n  GenerateUploadError,\n  UploadFileError\n> & {\n  getUploadConfig: (file: File) => UploadInput;\n  accept: string[];\n  maxSize: number;\n  icon: IconName;\n  formatAndSizeDescription?: string;\n  onRemoveFile?: (file: SwanFile) => Future<Result<unknown, unknown>>;\n  onChange?: (files: SwanFile[]) => void;\n  canUpload?: boolean;\n};\n\nexport const FilesUploader = <UploadInput, UploadOutput, GenerateUploadError, UploadFileError>({\n  maxSize,\n  accept,\n  icon,\n  getUploadConfig,\n  onRemoveFile,\n  onChange,\n  formatAndSizeDescription,\n  canUpload = true,\n  ...config\n}: Props<UploadInput, UploadOutput, GenerateUploadError, UploadFileError>) => {\n  const { files, upload, remove } = useFilesUploader(config);\n\n  // Keep the `onChange` callback as a ref to avoid running the effect\n  // every time the function updates\n  const onChangeRef = useRef(onChange);\n  onChangeRef.current = onChange;\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    // Avoid calling `onChange` on first render\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    const onChange = onChangeRef.current;\n    if (onChange != undefined) {\n      onChange(files);\n    }\n  }, [files]);\n\n  return (\n    <Box>\n      {canUpload ? (\n        <>\n          <FileInput\n            layout=\"horizontal\"\n            onFiles={files => {\n              files.forEach(file => {\n                upload(getUploadConfig(file), file);\n              });\n            }}\n            accept={accept}\n            icon={icon}\n            description={formatAndSizeDescription}\n            maxSize={maxSize}\n          />\n\n          <Space height={12} />\n        </>\n      ) : null}\n\n      {files.map((file, index) => (\n        <Fragment key={file.id}>\n          {index > 0 ? <Space height={12} /> : null}\n\n          <FileTile\n            file={file}\n            onRemove={\n              onRemoveFile != undefined && file.statusInfo.status === \"Uploaded\"\n                ? () =>\n                    onRemoveFile(file).tapOk(() => {\n                      remove(file.id);\n                    })\n                : undefined\n            }\n          />\n        </Fragment>\n      ))}\n    </Box>\n  );\n};\n"],"names":["useFilesUploader","config","files","setFiles","useState","upload","useCallback","uploadInput","file","error","id","onProgress","event","remove","styles","StyleSheet","backgroundColor","shadows","spacings","gray75","colors","FileTile","statusInfo","name","url","onRemove","isDeleting","setIsDeleting","onPressRemove","jsxs","Box","jsx","Fragment","LakeText","t","Space","View","Tag","getIconNameFromFilename","match","P","commonStyles","isNotNullishOrEmpty","LakeButton","isNotNullish","LakeAlert","reason","FilesUploader","maxSize","accept","icon","getUploadConfig","onRemoveFile","onChange","formatAndSizeDescription","canUpload","onChangeRef","useRef","isFirstRender","useEffect","onChange2","FileInput","files2","index","Fragment2"],"mappings":"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"}