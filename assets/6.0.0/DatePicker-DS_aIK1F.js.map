{"version":3,"file":"DatePicker-DS_aIK1F.js","sources":["../../../packages/lake/src/hooks/useFirstMountState.ts","../../../packages/shared-business/src/components/DatePicker.tsx"],"sourcesContent":["import { useRef } from \"react\";\n\nexport const useFirstMountState = (): boolean => {\n  const isFirstMount = useRef(true);\n\n  if (isFirstMount.current) {\n    isFirstMount.current = false;\n    return true;\n  }\n\n  return isFirstMount.current;\n};\n","import { Option } from \"@swan-io/boxed\";\nimport { BottomPanel } from \"@swan-io/lake/src/components/BottomPanel\";\nimport { Box } from \"@swan-io/lake/src/components/Box\";\nimport { Fill } from \"@swan-io/lake/src/components/Fill\";\nimport { Icon } from \"@swan-io/lake/src/components/Icon\";\nimport { LakeButton } from \"@swan-io/lake/src/components/LakeButton\";\nimport { LakeLabel } from \"@swan-io/lake/src/components/LakeLabel\";\nimport { Item, LakeSelect } from \"@swan-io/lake/src/components/LakeSelect\";\nimport { LakeText } from \"@swan-io/lake/src/components/LakeText\";\nimport { LakeTextInput } from \"@swan-io/lake/src/components/LakeTextInput\";\nimport { Popover } from \"@swan-io/lake/src/components/Popover\";\nimport { Pressable } from \"@swan-io/lake/src/components/Pressable\";\nimport { Separator } from \"@swan-io/lake/src/components/Separator\";\nimport { Space } from \"@swan-io/lake/src/components/Space\";\nimport { colors, spacings } from \"@swan-io/lake/src/constants/design\";\nimport { useDisclosure } from \"@swan-io/lake/src/hooks/useDisclosure\";\nimport { useFirstMountState } from \"@swan-io/lake/src/hooks/useFirstMountState\";\nimport { useResponsive } from \"@swan-io/lake/src/hooks/useResponsive\";\nimport { noop } from \"@swan-io/lake/src/utils/function\";\nimport {\n  isNotEmpty,\n  isNotNullish,\n  isNotNullishOrEmpty,\n  isNullishOrEmpty,\n} from \"@swan-io/lake/src/utils/nullish\";\nimport { getRifmProps } from \"@swan-io/lake/src/utils/rifm\";\nimport { ValidatorResult, useForm } from \"@swan-io/use-form\";\nimport dayjs from \"dayjs\";\nimport { ReactNode, useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\";\nimport { StyleSheet, TextInput, View } from \"react-native\";\nimport { Rifm } from \"rifm\";\nimport { P, match } from \"ts-pattern\";\nimport { Except } from \"type-fest\";\nimport { t } from \"../utils/i18n\";\nimport { LakeModal } from \"./LakeModal\";\n\nconst styles = StyleSheet.create({\n  label: {\n    flex: 1,\n  },\n  arrowContainer: {\n    height: 40, // input height\n  },\n  popover: {\n    padding: spacings[12],\n  },\n  popoverDesktop: {\n    padding: spacings[24],\n  },\n  rangeCalendarSide: {\n    flex: 1,\n  },\n  button: {\n    flex: 1,\n  },\n  monthSelect: {\n    width: 130,\n  },\n  yearSelect: {\n    width: 100,\n  },\n  weekRow: {\n    paddingVertical: spacings[4],\n  },\n  dayName: {\n    flex: 1,\n    height: 32,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  dayContainer: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n  dayRangeIndicator: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    backgroundColor: colors.current[100],\n  },\n  dayStartRangeIndicator: {\n    left: \"50%\",\n  },\n  dayEndRangeIndicator: {\n    right: \"50%\",\n  },\n  dayNumber: {\n    width: 32,\n    height: 32,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 16,\n  },\n  dayNumberFocused: {},\n  dayNumberHover: {\n    backgroundColor: colors.current[100],\n  },\n  dayNumberPressed: {},\n  dayNumberSelected: {\n    backgroundColor: colors.current[500],\n  },\n  todayIndicator: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    bottom: 0,\n    width: 4,\n    height: 4,\n    marginHorizontal: \"auto\",\n    borderRadius: 2,\n    backgroundColor: colors.current[500],\n  },\n});\n\nconst MODALE_MOBILE_THRESHOLD = 600;\nconst DATE_PICKER_MOBILE_THRESHOLD = 400;\nconst DATE_RANGE_PICKER_THRESHOLD = 800;\n\nconst NB_DAYS_IN_WEEK = 7;\n\nexport type MonthNames = readonly [\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n];\nexport type WeekDayNames = readonly [string, string, string, string, string, string, string];\n\nconst weekDayNames: WeekDayNames = [\n  t(\"datePicker.day.sunday\"),\n  t(\"datePicker.day.monday\"),\n  t(\"datePicker.day.tuesday\"),\n  t(\"datePicker.day.wednesday\"),\n  t(\"datePicker.day.thursday\"),\n  t(\"datePicker.day.friday\"),\n  t(\"datePicker.day.saturday\"),\n];\n\nconst monthNames: MonthNames = [\n  t(\"datePicker.month.january\"),\n  t(\"datePicker.month.february\"),\n  t(\"datePicker.month.march\"),\n  t(\"datePicker.month.april\"),\n  t(\"datePicker.month.may\"),\n  t(\"datePicker.month.june\"),\n  t(\"datePicker.month.july\"),\n  t(\"datePicker.month.august\"),\n  t(\"datePicker.month.september\"),\n  t(\"datePicker.month.october\"),\n  t(\"datePicker.month.november\"),\n  t(\"datePicker.month.december\"),\n];\n\ntype YearMonth = {\n  year: number;\n  month: number;\n};\n\nconst weekDayIndex = {\n  sunday: 0,\n  monday: 1,\n  tuesday: 2,\n  wednesday: 3,\n  thursday: 4,\n  friday: 5,\n  saturday: 6,\n};\n\nexport type DatePickerDate = {\n  day: number;\n  month: number;\n  year: number;\n};\n\nexport type DatePickerRange = {\n  start: Option<DatePickerDate>;\n  end: Option<DatePickerDate>;\n};\n\nexport type DateFormat = \"DD/MM/YYYY\" | \"MM/DD/YYYY\";\n\nconst rifmDateProps = getRifmProps({\n  accept: \"numeric\",\n  charMap: { 2: \"/\", 4: \"/\" },\n  maxLength: 8,\n});\n\nconst parseDate = (value: string, format: DateFormat): Option<DatePickerDate> => {\n  const date = dayjs.utc(value, format);\n  return date.isValid()\n    ? Option.Some({ day: date.date(), month: date.month(), year: date.year() })\n    : Option.None();\n};\n\nconst parseRange = (value: { start: string; end: string }, format: DateFormat): DatePickerRange => {\n  return {\n    start: parseDate(value.start, format),\n    end: parseDate(value.end, format),\n  };\n};\n\nconst stringifyDate = (value: DatePickerDate, format: DateFormat): string => {\n  const date = dayjs.utc().year(value.year).month(value.month).date(value.day);\n  return date.format(format);\n};\n\nexport const validateDateRangeOrder = (\n  value: { start: string; end: string },\n  format: DateFormat,\n) => {\n  const range = parseRange(value, format);\n\n  if (range.start.isNone() || range.end.isNone()) {\n    return true;\n  }\n\n  if (isDateAfter(range.start.value, range.end.value)) {\n    return false;\n  }\n\n  return true;\n};\n\nconst range = (start: number, end: number): number[] => {\n  const result = [];\n  for (let i = start; i <= end; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst groupEvery = <T,>(input: T[], groupSize: number): T[][] => {\n  const result = [];\n  const nbGroups = Math.ceil(input.length / groupSize);\n  for (let i = 0; i < nbGroups; i++) {\n    result.push(input.slice(i * groupSize, (i + 1) * groupSize));\n  }\n\n  return result;\n};\n\nconst padEnd = <T,>(input: T[], length: number, value: T): T[] => {\n  const itemsToAppend = new Array(length - input.length).fill(value) as T[];\n  return [...input, ...itemsToAppend];\n};\n\nexport const isTodayOrFutureDate = (date: DatePickerDate): boolean => {\n  const yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n\n  const yesterdayDate: DatePickerDate = {\n    day: yesterday.getDate(),\n    month: yesterday.getMonth(),\n    year: yesterday.getFullYear(),\n  };\n\n  return isDateAfter(date, yesterdayDate);\n};\n\nexport const isDateInRange =\n  (minDate: Date, maxDate: Date) =>\n  (date: DatePickerDate): boolean => {\n    const min: DatePickerDate = {\n      day: minDate.getDate(),\n      month: minDate.getMonth(),\n      year: minDate.getFullYear(),\n    };\n    const max: DatePickerDate = {\n      day: maxDate.getDate(),\n      month: maxDate.getMonth(),\n      year: maxDate.getFullYear(),\n    };\n\n    return isDateAfter(date, min) && isDateBefore(date, max);\n  };\n\nconst isDateToday = (date: DatePickerDate): boolean => {\n  const today = new Date();\n  return (\n    date.day === today.getDate() &&\n    date.month === today.getMonth() &&\n    date.year === today.getFullYear()\n  );\n};\n\nconst getMonthDates = (month: number, year: number): DatePickerDate[] => {\n  const aggregate = (acc: DatePickerDate[], date: Date): DatePickerDate[] => {\n    const dateDay = date.getDate();\n    const dateMonth = date.getMonth();\n    const dateYear = date.getFullYear();\n\n    if (date.getMonth() !== month) {\n      return acc;\n    }\n\n    return aggregate(\n      [...acc, { day: dateDay, month: dateMonth, year: dateYear }],\n      new Date(year, month, dateDay + 1),\n    );\n  };\n\n  return aggregate([], new Date(year, month, 1));\n};\n\nconst getMonthWeeks = (\n  month: number,\n  year: number,\n  firstWeekDay: keyof typeof weekDayIndex,\n): Option<DatePickerDate>[][] => {\n  const firstWeekDayIndex = weekDayIndex[firstWeekDay];\n  const monthFirstWeekDay = new Date(year, month, 1).getDay();\n  const monthDates = getMonthDates(month, year).map(date => Option.Some(date));\n\n  const nbDaysToPrepend =\n    monthFirstWeekDay >= firstWeekDayIndex\n      ? monthFirstWeekDay - firstWeekDayIndex\n      : NB_DAYS_IN_WEEK - firstWeekDayIndex + monthFirstWeekDay;\n\n  for (let i = 0; i < nbDaysToPrepend; i++) {\n    monthDates.unshift(Option.None());\n  }\n  const weeks = groupEvery(monthDates, NB_DAYS_IN_WEEK);\n  const lastWeek = weeks[weeks.length - 1];\n\n  if (!lastWeek) {\n    return weeks;\n  }\n  weeks[weeks.length - 1] = padEnd(lastWeek, NB_DAYS_IN_WEEK, Option.None());\n\n  return weeks;\n};\n\nconst getWeekDayNames = (\n  dayNames: WeekDayNames,\n  firstWeekDay: keyof typeof weekDayIndex = \"sunday\",\n): WeekDayNames => {\n  const firstWeekDayIndex = weekDayIndex[firstWeekDay];\n  const firstWeekDayNames = dayNames.slice(firstWeekDayIndex);\n  const lastWeekDayNames = dayNames.slice(0, firstWeekDayIndex);\n\n  // @ts-expect-error\n  return [...firstWeekDayNames, ...lastWeekDayNames];\n};\n\nconst isDateEquals = (date1: DatePickerDate, date2: DatePickerDate): boolean => {\n  return date1.day === date2.day && date1.month === date2.month && date1.year === date2.year;\n};\n\nconst isDateBefore = (date1: DatePickerDate, date2: DatePickerDate): boolean => {\n  return (\n    date1.year < date2.year ||\n    (date1.year === date2.year && date1.month < date2.month) ||\n    (date1.year === date2.year && date1.month === date2.month && date1.day < date2.day)\n  );\n};\n\nconst isDateAfter = (date1: DatePickerDate, date2: DatePickerDate): boolean => {\n  return (\n    date1.year > date2.year ||\n    (date1.year === date2.year && date1.month > date2.month) ||\n    (date1.year === date2.year && date1.month === date2.month && date1.day > date2.day)\n  );\n};\n\nconst isDateRange = (value: Option<DatePickerDate> | DatePickerRange): value is DatePickerRange => {\n  return match(value)\n    .with({ start: P._, end: P._ }, () => true)\n    .otherwise(() => false);\n};\n\nconst isSelectedDate = (date: DatePickerDate, value: Option<DatePickerDate> | DatePickerRange) => {\n  return match(value)\n    .with(Option.P.Some(P.select()), value => isDateEquals(value, date))\n    .with(Option.P.None, () => false)\n    .with(P.when(isDateRange), ({ start, end }) => {\n      // if range is invalid, we don't display any selection\n      if (start.isSome() && end.isSome() && isDateAfter(start.value, end.value)) {\n        return false;\n      }\n\n      return (\n        start.match({\n          Some: start => isDateEquals(start, date),\n          None: () => false,\n        }) ||\n        end.match({\n          Some: end => isDateEquals(end, date),\n          None: () => false,\n        })\n      );\n    })\n    .exhaustive();\n};\n\nconst getRangeIndicatorType = (\n  date: DatePickerDate,\n  value: Option<DatePickerDate> | DatePickerRange,\n): \"none\" | \"start\" | \"end\" | \"between\" => {\n  if (!isDateRange(value)) {\n    return \"none\";\n  }\n\n  const { start, end } = value;\n  if (start.isNone() || end.isNone()) {\n    return \"none\";\n  }\n\n  const startDate = start.value;\n  const endDate = end.value;\n\n  // no interval indicator if range is invalid\n  if (isDateAfter(startDate, endDate)) {\n    return \"none\";\n  }\n  if (isDateEquals(startDate, endDate)) {\n    return \"none\";\n  }\n  if (isDateEquals(date, startDate)) {\n    return \"start\";\n  }\n  if (isDateEquals(date, endDate)) {\n    return \"end\";\n  }\n  if (isDateAfter(date, startDate) && isDateBefore(date, endDate)) {\n    return \"between\";\n  }\n  return \"none\";\n};\n\nconst computeDateDistanceInDays = (date1: DatePickerDate, date2: DatePickerDate): number => {\n  const date1Date = new Date(date1.year, date1.month, date1.day);\n  const date2Date = new Date(date2.year, date2.month, date2.day);\n\n  const diffInMs = Math.abs(date2Date.getTime() - date1Date.getTime());\n  return Math.round(diffInMs / (1000 * 3600 * 24));\n};\n\nconst getNewDateRange = (\n  currentRange: DatePickerRange,\n  selectedDate: DatePickerDate,\n): DatePickerRange => {\n  const { start, end } = currentRange;\n\n  // Handle initial selection\n  if (start.isNone()) {\n    return { start: Option.Some(selectedDate), end: Option.None() };\n  }\n  if (end.isNone()) {\n    if (isDateAfter(selectedDate, start.value)) {\n      return { start, end: Option.Some(selectedDate) };\n    }\n\n    return { start: Option.Some(selectedDate), end: currentRange.start };\n  }\n\n  // Handle selection outside of the current range\n  if (isDateBefore(selectedDate, start.value)) {\n    return { start: Option.Some(selectedDate), end: currentRange.end };\n  }\n  if (isDateAfter(selectedDate, end.value)) {\n    return { start: currentRange.start, end: Option.Some(selectedDate) };\n  }\n\n  // We change the closest date to the new date\n  const startDistance = computeDateDistanceInDays(start.value, selectedDate);\n  const endDistance = computeDateDistanceInDays(end.value, selectedDate);\n\n  if (startDistance < endDistance) {\n    return { start: Option.Some(selectedDate), end: currentRange.end };\n  }\n  return { start: currentRange.start, end: Option.Some(selectedDate) };\n};\n\nconst getTodayYearMonth = (): YearMonth => ({\n  month: new Date().getMonth(),\n  year: new Date().getFullYear(),\n});\n\nconst getYearMonth = (value: string | undefined, format: DateFormat): Option<YearMonth> => {\n  if (isNullishOrEmpty(value)) {\n    return Option.None();\n  }\n  return parseDate(value, format);\n};\n\nconst isYearMonthBefore = (date1: YearMonth, date2: YearMonth): boolean => {\n  return date1.year < date2.year || (date1.year === date2.year && date1.month < date2.month);\n};\n\nconst isYearMonthEquals = (date1: YearMonth, date2: YearMonth): boolean => {\n  return date1.year === date2.year && date1.month === date2.month;\n};\n\nconst minYearMonth = (date1: YearMonth, date2: YearMonth): YearMonth => {\n  return isYearMonthBefore(date1, date2) ? date1 : date2;\n};\n\nconst maxYearMonth = (date1: YearMonth, date2: YearMonth): YearMonth => {\n  return isYearMonthBefore(date1, date2) ? date2 : date1;\n};\n\nconst incrementYearMonth = ({ month, year }: YearMonth): YearMonth => {\n  if (month === 11) {\n    return { month: 0, year: year + 1 };\n  }\n  return { month: month + 1, year };\n};\n\nconst decrementYearMonth = ({ month, year }: YearMonth): YearMonth => {\n  if (month === 0) {\n    return { month: 11, year: year - 1 };\n  }\n  return { month: month - 1, year };\n};\n\ntype YearMonthSelectProps = {\n  monthNames: MonthNames;\n  value: YearMonth;\n  arrowsPosition?: \"around\" | \"right\";\n  hideArrows?: boolean;\n  minValue?: YearMonth;\n  maxValue?: YearMonth;\n  onChange: (value: YearMonth) => void;\n};\n\nconst YearMonthSelect = ({\n  monthNames,\n  value,\n  arrowsPosition = \"right\",\n  hideArrows,\n  minValue,\n  maxValue,\n  onChange,\n}: YearMonthSelectProps) => {\n  const monthItems = useMemo<Item<number>[]>(\n    () => monthNames.map((name, index) => ({ name, value: index })),\n    [monthNames],\n  );\n\n  const yearItems = useMemo<Item<number>[]>(\n    () =>\n      range(value.year - 5, value.year + 5).map(year => ({\n        name: year.toString(),\n        value: year,\n      })),\n    [value.year],\n  );\n\n  const selectMonth = (month: number) => {\n    onChange({ year: value.year, month });\n  };\n\n  const selectYear = (year: number) => {\n    onChange({ year, month: value.month });\n  };\n\n  const setPreviousMonth = () => {\n    onChange(decrementYearMonth(value));\n  };\n\n  const setNextMonth = () => {\n    onChange(incrementYearMonth(value));\n  };\n\n  const isPreviousDisabled = !minValue\n    ? false\n    : value.year <= minValue.year && value.month <= minValue.month;\n  const isNextDisabled = !maxValue\n    ? false\n    : value.year >= maxValue.year && value.month >= maxValue.month;\n\n  return (\n    <Box direction=\"row\" alignItems=\"center\">\n      {arrowsPosition === \"around\" && hideArrows !== true && (\n        <>\n          <LakeButton\n            size=\"small\"\n            mode=\"tertiary\"\n            icon=\"arrow-left-filled\"\n            disabled={isPreviousDisabled}\n            onPress={setPreviousMonth}\n            ariaLabel={t(\"datePicker.month.previous\")}\n          />\n\n          <Fill minWidth={12} />\n        </>\n      )}\n\n      <LakeSelect\n        items={monthItems}\n        value={value.month}\n        onValueChange={selectMonth}\n        mode=\"borderless\"\n        size=\"small\"\n        hideErrors={true}\n        style={styles.monthSelect}\n      />\n\n      <LakeSelect\n        items={yearItems}\n        value={value.year}\n        onValueChange={selectYear}\n        mode=\"borderless\"\n        size=\"small\"\n        hideErrors={true}\n        style={styles.yearSelect}\n      />\n\n      {hideArrows !== true && (\n        <>\n          <Fill minWidth={12} />\n\n          {arrowsPosition === \"right\" && (\n            <>\n              <LakeButton\n                size=\"small\"\n                mode=\"tertiary\"\n                icon=\"arrow-left-filled\"\n                disabled={isPreviousDisabled}\n                onPress={setPreviousMonth}\n                ariaLabel={t(\"datePicker.month.previous\")}\n              />\n\n              <Space width={12} />\n            </>\n          )}\n\n          <LakeButton\n            size=\"small\"\n            mode=\"tertiary\"\n            icon=\"arrow-right-filled\"\n            disabled={isNextDisabled}\n            onPress={setNextMonth}\n            ariaLabel={t(\"datePicker.month.next\")}\n          />\n        </>\n      )}\n    </Box>\n  );\n};\n\ntype MonthCalendarProps = {\n  month: number;\n  year: number;\n  value: Option<DatePickerDate> | DatePickerRange;\n  firstWeekDay: keyof typeof weekDayIndex;\n  isSelectable?: (date: DatePickerDate) => boolean;\n  onChange: (date: DatePickerDate) => void;\n};\n\nconst MonthCalendar = ({\n  month,\n  year,\n  value,\n  firstWeekDay,\n  isSelectable,\n  onChange,\n}: MonthCalendarProps) => {\n  const dayNames = useMemo(() => getWeekDayNames(weekDayNames, firstWeekDay), [firstWeekDay]);\n  const weeks = useMemo(\n    () => getMonthWeeks(month, year, firstWeekDay),\n    [month, year, firstWeekDay],\n  );\n\n  return (\n    <View>\n      <Box direction=\"row\" alignItems=\"center\" style={styles.weekRow}>\n        {dayNames.map(dayName => (\n          <View key={dayName} style={styles.dayName}>\n            <LakeText variant=\"medium\" color={colors.gray[600]}>\n              {dayName.substring(0, 1)}\n            </LakeText>\n          </View>\n        ))}\n      </Box>\n\n      {weeks.map((week, weekIndex) => (\n        <Box key={weekIndex} direction=\"row\" alignItems=\"center\" style={styles.weekRow}>\n          {week.map((date, dateIndex) => {\n            const isDisabled = date.match({\n              Some: date => isNotNullish(isSelectable) && !isSelectable(date),\n              None: () => true,\n            });\n            const isSelected = date.match({\n              Some: date => isSelectedDate(date, value),\n              None: () => false,\n            });\n            const isToday = date.match({\n              Some: date => isDateToday(date),\n              None: () => false,\n            });\n            const rangeIndicator = date.match({\n              Some: date => getRangeIndicatorType(date, value),\n              None: () => \"none\" as const,\n            });\n\n            return (\n              <View key={dateIndex} style={styles.dayContainer}>\n                {rangeIndicator !== \"none\" && (\n                  <View\n                    style={[\n                      styles.dayRangeIndicator,\n                      rangeIndicator === \"start\" && styles.dayStartRangeIndicator,\n                      rangeIndicator === \"end\" && styles.dayEndRangeIndicator,\n                    ]}\n                  />\n                )}\n\n                <Pressable\n                  disabled={isDisabled}\n                  onPress={() => date.match({ Some: onChange, None: noop })}\n                  style={({ focused, hovered, pressed }) => [\n                    styles.dayNumber,\n                    focused && styles.dayNumberFocused,\n                    hovered && styles.dayNumberHover,\n                    pressed && styles.dayNumberPressed,\n                    isSelected && styles.dayNumberSelected,\n                  ]}\n                >\n                  <LakeText\n                    variant=\"smallRegular\"\n                    color={\n                      isSelected\n                        ? colors.current.contrast\n                        : isDisabled\n                          ? colors.gray[300]\n                          : isToday\n                            ? colors.current[500]\n                            : colors.gray[900]\n                    }\n                  >\n                    {date.match({ Some: ({ day }) => day.toString(), None: () => \" \" })}\n                  </LakeText>\n\n                  {isToday && <View style={styles.todayIndicator} />}\n                </Pressable>\n              </View>\n            );\n          })}\n        </Box>\n      ))}\n    </View>\n  );\n};\n\nexport type DatePickerProps = {\n  label: string;\n  value?: string;\n  error?: string;\n  format: DateFormat;\n  firstWeekDay: keyof typeof weekDayIndex;\n  isSelectable?: (date: DatePickerDate) => boolean;\n  onChange: (date: string) => void;\n};\n\ntype DatePickerPopoverContentProps = Except<DatePickerProps, \"label\" | \"error\"> & {\n  desktop: boolean;\n};\n\nconst DatePickerPopoverContent = ({\n  value,\n  format,\n  firstWeekDay,\n  desktop,\n  isSelectable,\n  onChange,\n}: DatePickerPopoverContentProps) => {\n  const [monthYear, setMonthYear] = useState(() =>\n    getYearMonth(value, format).getWithDefault(getTodayYearMonth()),\n  );\n\n  // Automatically change displayed year and month when user change the value with text input\n  useEffect(() => {\n    const yearMonth = getYearMonth(value, format);\n    if (yearMonth.isSome()) {\n      setMonthYear(yearMonth.value);\n    }\n  }, [value, format]);\n\n  const handleChange = useCallback(\n    (date: DatePickerDate) => {\n      const formatted = stringifyDate(date, format);\n      onChange(formatted);\n    },\n    [format, onChange],\n  );\n\n  return (\n    <>\n      <YearMonthSelect\n        monthNames={monthNames}\n        value={monthYear}\n        hideArrows={!desktop}\n        onChange={setMonthYear}\n      />\n\n      <Space height={24} />\n\n      <MonthCalendar\n        month={monthYear.month}\n        year={monthYear.year}\n        value={isNotNullishOrEmpty(value) ? parseDate(value, format) : Option.None()}\n        firstWeekDay={firstWeekDay}\n        isSelectable={isSelectable}\n        onChange={handleChange}\n      />\n    </>\n  );\n};\n\nexport const DatePicker = ({\n  label,\n  value,\n  error,\n  format,\n  firstWeekDay,\n  isSelectable,\n  onChange,\n}: DatePickerProps) => {\n  const { desktop } = useResponsive(DATE_PICKER_MOBILE_THRESHOLD);\n  const ref = useRef<TextInput>(null);\n  const [isOpened, { open, close }] = useDisclosure(false);\n  const popoverId = useId();\n\n  return (\n    <>\n      <Box direction=\"row\" alignItems=\"end\">\n        <LakeLabel\n          label={label}\n          style={styles.label}\n          actions={\n            <LakeButton\n              mode=\"secondary\"\n              icon=\"calendar-ltr-regular\"\n              size=\"small\"\n              onPress={open}\n              ariaLabel={t(\"common.open\")}\n            />\n          }\n          render={id => (\n            <Rifm value={value ?? \"\"} onChange={onChange} {...rifmDateProps}>\n              {({ value, onChange }) => (\n                <LakeTextInput\n                  ref={ref}\n                  id={id}\n                  placeholder={format}\n                  value={value}\n                  error={error}\n                  onChange={onChange}\n                  ariaExpanded={isOpened}\n                />\n              )}\n            </Rifm>\n          )}\n        />\n      </Box>\n\n      <Popover\n        id={popoverId}\n        role=\"dialog\"\n        onDismiss={close}\n        referenceRef={ref}\n        visible={isOpened}\n        field={true}\n      >\n        <View style={desktop ? styles.popoverDesktop : styles.popover}>\n          <DatePickerPopoverContent\n            value={value}\n            format={format}\n            firstWeekDay={firstWeekDay}\n            desktop={desktop}\n            isSelectable={isSelectable}\n            onChange={onChange}\n          />\n        </View>\n      </Popover>\n    </>\n  );\n};\n\ntype DatePickerModalProps = Except<DatePickerProps, \"error\"> & {\n  visible: boolean;\n  cancelLabel: string;\n  confirmLabel: string;\n  validate?: (value: string) => ValidatorResult;\n  onDismiss: () => void;\n};\n\nexport const DatePickerModal = ({\n  value,\n  format,\n  firstWeekDay,\n  isSelectable,\n  onChange,\n  visible,\n  label,\n  cancelLabel,\n  confirmLabel,\n  validate,\n  onDismiss,\n}: DatePickerModalProps) => {\n  const { desktop } = useResponsive(DATE_PICKER_MOBILE_THRESHOLD);\n  const { Field, submitForm, setFieldValue, resetField } = useForm({\n    date: {\n      initialValue: value ?? \"\",\n      validate,\n    },\n  });\n\n  const handleCancel = () => {\n    setFieldValue(\"date\", value ?? \"\");\n    onDismiss();\n  };\n\n  const handleConfirm = () => {\n    submitForm({\n      onSuccess: values => {\n        const date = values.date.getWithDefault(\"\");\n\n        if (isNotEmpty(date)) {\n          onChange(date);\n        }\n\n        onDismiss();\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (!visible) {\n      resetField(\"date\");\n    }\n  }, [visible, resetField]);\n\n  return (\n    <DateModal visible={visible} maxWidth={500} onPressClose={handleCancel}>\n      <Field name=\"date\">\n        {({ ref, value, error, onBlur, onChange }) => (\n          <>\n            <LakeLabel\n              label={label}\n              render={id => (\n                <Rifm value={value} onChange={onChange} {...rifmDateProps}>\n                  {({ value, onChange }) => (\n                    <LakeTextInput\n                      ref={ref}\n                      id={id}\n                      placeholder={format}\n                      value={value}\n                      error={error}\n                      onBlur={onBlur}\n                      onChange={onChange}\n                    />\n                  )}\n                </Rifm>\n              )}\n            />\n\n            <DatePickerPopoverContent\n              value={value}\n              format={format}\n              firstWeekDay={firstWeekDay}\n              desktop={desktop}\n              isSelectable={isSelectable}\n              onChange={onChange}\n            />\n          </>\n        )}\n      </Field>\n\n      <Space height={24} />\n\n      <Box direction=\"row\" alignItems=\"center\">\n        <LakeButton mode=\"secondary\" size=\"small\" onPress={handleCancel} style={styles.button}>\n          {cancelLabel}\n        </LakeButton>\n\n        <Space width={24} />\n\n        <LakeButton color=\"current\" size=\"small\" onPress={handleConfirm} style={styles.button}>\n          {confirmLabel}\n        </LakeButton>\n      </Box>\n    </DateModal>\n  );\n};\n\ntype DateModalProps = {\n  children: ReactNode;\n  visible: boolean;\n  maxWidth: number;\n  withCloseButton?: boolean;\n  onPressClose: () => void;\n};\n\nconst DateModal = ({\n  children,\n  visible,\n  maxWidth,\n  withCloseButton,\n  onPressClose,\n}: DateModalProps) => {\n  const { desktop } = useResponsive(MODALE_MOBILE_THRESHOLD);\n\n  if (desktop) {\n    return (\n      <LakeModal\n        visible={visible}\n        maxWidth={maxWidth}\n        onPressClose={withCloseButton === true ? onPressClose : undefined}\n      >\n        {children}\n      </LakeModal>\n    );\n  }\n\n  return (\n    <BottomPanel visible={visible} onPressClose={onPressClose}>\n      <View style={styles.popover}>{children}</View>\n    </BottomPanel>\n  );\n};\n\nexport type DateRangePickerProps = {\n  value: { start: string; end: string };\n  error?: string;\n  format: DateFormat;\n  startLabel: string;\n  endLabel: string;\n  firstWeekDay: keyof typeof weekDayIndex;\n  isSelectable?: (date: DatePickerDate) => boolean;\n  onChange: (date: { start: string; end: string }) => void;\n};\n\ntype DateRangePickerModalContentProps = Except<\n  DateRangePickerProps,\n  \"startLabel\" | \"endLabel\" | \"error\"\n> & {\n  desktop: boolean;\n  displayTwoCalendar: boolean;\n};\n\nconst DateRangePickerModalContent = ({\n  value,\n  format,\n  firstWeekDay,\n  desktop,\n  displayTwoCalendar,\n  isSelectable,\n  onChange,\n}: DateRangePickerModalContentProps) => {\n  const isFirstMount = useFirstMountState();\n  const [periods, setPeriods] = useState(() => {\n    const startYearMonth = getYearMonth(value.start, format).getWithDefault(getTodayYearMonth());\n    const endYearMonth = getYearMonth(value.end, format).getWithDefault(\n      incrementYearMonth(startYearMonth),\n    );\n    return {\n      start: startYearMonth,\n      end: isYearMonthEquals(startYearMonth, endYearMonth)\n        ? incrementYearMonth(startYearMonth)\n        : endYearMonth,\n    };\n  });\n\n  // Automatically change displayed year and month when start date changes\n  useEffect(() => {\n    if (isFirstMount) {\n      return;\n    }\n\n    const startYearMonth = getYearMonth(value.start, format);\n\n    if (startYearMonth.isSome()) {\n      setPeriods(periods => {\n        const isStartAndEndSameMonth = isYearMonthEquals(startYearMonth.value, periods.end);\n        if (isStartAndEndSameMonth) {\n          return {\n            start: decrementYearMonth(periods.end),\n            end: periods.end,\n          };\n        }\n\n        // change end period if it becomes before start period\n        const endPeriod = maxYearMonth(periods.end, incrementYearMonth(startYearMonth.value));\n\n        return {\n          start: startYearMonth.value,\n          end: endPeriod,\n        };\n      });\n    }\n  }, [isFirstMount, value.start, format]);\n\n  // Automatically change displayed year and month when end date changes\n  useEffect(() => {\n    if (isFirstMount) {\n      return;\n    }\n\n    const endYearMonth = getYearMonth(value.end, format);\n\n    if (endYearMonth.isSome()) {\n      setPeriods(periods => {\n        const isStartAndEndSameMonth = isYearMonthEquals(periods.start, endYearMonth.value);\n        if (isStartAndEndSameMonth) {\n          return {\n            start: periods.start,\n            end: incrementYearMonth(periods.start),\n          };\n        }\n\n        // change start period if it becomes after end period\n        const startPeriod = minYearMonth(periods.start, decrementYearMonth(endYearMonth.value));\n\n        return {\n          start: startPeriod,\n          end: endYearMonth.value,\n        };\n      });\n    }\n  }, [isFirstMount, value.end, format]);\n\n  const setStartPeriod = useCallback((yearMonth: YearMonth) => {\n    setPeriods(periods => ({\n      start: yearMonth,\n      end: maxYearMonth(periods.end, incrementYearMonth(yearMonth)),\n    }));\n  }, []);\n\n  const setEndPeriod = useCallback((yearMonth: YearMonth) => {\n    setPeriods(periods => ({\n      start: minYearMonth(periods.start, decrementYearMonth(yearMonth)),\n      end: yearMonth,\n    }));\n  }, []);\n\n  const dateRange = useMemo(() => parseRange(value, format), [value, format]);\n\n  const handleSelectDate = (date: DatePickerDate) => {\n    const newRange = getNewDateRange(dateRange, date);\n    const newValue = {\n      start: newRange.start.match({\n        Some: date => stringifyDate(date, format),\n        None: () => value.start,\n      }),\n      end: newRange.end.match({\n        Some: date => stringifyDate(date, format),\n        None: () => value.end,\n      }),\n    };\n    onChange(newValue);\n  };\n\n  if (!displayTwoCalendar) {\n    return (\n      <>\n        <YearMonthSelect\n          monthNames={monthNames}\n          value={periods.start}\n          hideArrows={!desktop}\n          onChange={setStartPeriod}\n        />\n\n        <Space height={24} />\n\n        <MonthCalendar\n          month={periods.start.month}\n          year={periods.start.year}\n          value={dateRange}\n          firstWeekDay={firstWeekDay}\n          isSelectable={isSelectable}\n          onChange={handleSelectDate}\n        />\n      </>\n    );\n  }\n\n  return (\n    <View>\n      <Box direction=\"row\" alignItems=\"start\">\n        <View style={styles.rangeCalendarSide}>\n          <YearMonthSelect\n            monthNames={monthNames}\n            value={periods.start}\n            maxValue={decrementYearMonth(periods.end)}\n            arrowsPosition=\"around\"\n            onChange={setStartPeriod}\n          />\n\n          <Space height={24} />\n\n          <MonthCalendar\n            month={periods.start.month}\n            year={periods.start.year}\n            value={dateRange}\n            firstWeekDay={firstWeekDay}\n            isSelectable={isSelectable}\n            onChange={handleSelectDate}\n          />\n        </View>\n\n        <Separator space={24} horizontal={true} />\n\n        <View style={styles.rangeCalendarSide}>\n          <YearMonthSelect\n            monthNames={monthNames}\n            value={periods.end}\n            minValue={incrementYearMonth(periods.start)}\n            arrowsPosition=\"around\"\n            onChange={setEndPeriod}\n          />\n\n          <Space height={24} />\n\n          <MonthCalendar\n            month={periods.end.month}\n            year={periods.end.year}\n            value={dateRange}\n            firstWeekDay={firstWeekDay}\n            isSelectable={isSelectable}\n            onChange={handleSelectDate}\n          />\n        </View>\n      </Box>\n    </View>\n  );\n};\n\nexport const DateRangePicker = ({\n  value,\n  error,\n  format,\n  startLabel,\n  endLabel,\n  firstWeekDay,\n  isSelectable,\n  onChange,\n}: DateRangePickerProps) => {\n  const { desktop } = useResponsive(DATE_PICKER_MOBILE_THRESHOLD);\n  const { desktop: displayTwoCalendar } = useResponsive(DATE_RANGE_PICKER_THRESHOLD);\n  const ref = useRef<TextInput>(null);\n  const [isOpened, { open, close }] = useDisclosure(false);\n\n  const handleStartChange = useCallback(\n    (start: string) => {\n      onChange({ start, end: value.end });\n    },\n    [value, onChange],\n  );\n\n  const handleEndChange = useCallback(\n    (end: string) => {\n      onChange({ start: value.start, end });\n    },\n    [value, onChange],\n  );\n\n  return (\n    <View>\n      <Box direction=\"row\" alignItems=\"end\">\n        <LakeLabel\n          label={startLabel}\n          style={styles.label}\n          render={id => (\n            <Rifm value={value.start} onChange={handleStartChange} {...rifmDateProps}>\n              {({ value, onChange }) => (\n                <LakeTextInput\n                  ref={ref}\n                  id={id}\n                  placeholder={format}\n                  value={value}\n                  onChange={onChange}\n                  error={error}\n                  hideErrors={true}\n                  ariaExpanded={isOpened}\n                />\n              )}\n            </Rifm>\n          )}\n        />\n\n        <Space width={12} />\n\n        <Box style={styles.arrowContainer} justifyContent=\"center\">\n          <Icon name=\"arrow-right-filled\" size={20} />\n        </Box>\n\n        <Space width={12} />\n\n        <LakeLabel\n          label={endLabel}\n          style={styles.label}\n          render={id => (\n            <Rifm value={value.end} onChange={handleEndChange} {...rifmDateProps}>\n              {({ value, onChange }) => (\n                <LakeTextInput\n                  id={id}\n                  placeholder={format}\n                  value={value}\n                  onChange={onChange}\n                  error={error}\n                  hideErrors={true}\n                  ariaExpanded={isOpened}\n                />\n              )}\n            </Rifm>\n          )}\n        />\n\n        <Space width={12} />\n\n        <LakeButton\n          mode=\"secondary\"\n          icon=\"calendar-ltr-regular\"\n          size=\"small\"\n          onPress={open}\n          ariaLabel={t(\"common.open\")}\n        />\n      </Box>\n\n      <Space height={4} />\n\n      <LakeText variant=\"smallRegular\" color={colors.negative[500]}>\n        {error ?? \" \"}\n      </LakeText>\n\n      <DateModal visible={isOpened} maxWidth={900} withCloseButton={true} onPressClose={close}>\n        <DateRangePickerModalContent\n          value={value}\n          format={format}\n          firstWeekDay={firstWeekDay}\n          desktop={desktop}\n          displayTwoCalendar={displayTwoCalendar}\n          isSelectable={isSelectable}\n          onChange={onChange}\n        />\n      </DateModal>\n    </View>\n  );\n};\n\ntype DateRangePickerModalProps = DateRangePickerProps & {\n  visible: boolean;\n  cancelLabel: string;\n  confirmLabel: string;\n  onDismiss: () => void;\n};\n\nexport const DateRangePickerModal = ({\n  value,\n  error,\n  format,\n  firstWeekDay,\n  isSelectable,\n  onChange,\n  visible,\n  startLabel,\n  endLabel,\n  cancelLabel,\n  confirmLabel,\n  onDismiss,\n}: DateRangePickerModalProps) => {\n  const { desktop } = useResponsive(MODALE_MOBILE_THRESHOLD);\n  const { desktop: displayTwoCalendar } = useResponsive(DATE_RANGE_PICKER_THRESHOLD);\n  const [localeValue, setLocaleValue] = useState(value);\n\n  useEffect(() => {\n    setLocaleValue(value);\n  }, [value]);\n\n  const handleStartChange = (start: string) => {\n    setLocaleValue({ start, end: localeValue.end });\n  };\n\n  const handleEndChange = (end: string) => {\n    setLocaleValue({ start: localeValue.start, end });\n  };\n\n  const handleCancel = () => {\n    setLocaleValue(value);\n    onDismiss();\n  };\n\n  const handleConfirm = () => {\n    onChange(localeValue);\n    onDismiss();\n  };\n\n  return (\n    <DateModal visible={visible} maxWidth={900} onPressClose={handleCancel}>\n      <View>\n        <Box direction=\"row\" alignItems=\"end\">\n          <LakeLabel\n            label={startLabel}\n            style={styles.label}\n            render={id => (\n              <Rifm value={localeValue.start} onChange={handleStartChange} {...rifmDateProps}>\n                {({ value, onChange }) => (\n                  <LakeTextInput\n                    id={id}\n                    placeholder={format}\n                    value={value}\n                    onChange={onChange}\n                    error={error}\n                    hideErrors={true}\n                  />\n                )}\n              </Rifm>\n            )}\n          />\n\n          <Space width={12} />\n\n          <Box style={styles.arrowContainer} justifyContent=\"center\">\n            <Icon name=\"arrow-right-filled\" size={20} />\n          </Box>\n\n          <Space width={12} />\n\n          <LakeLabel\n            label={endLabel}\n            style={styles.label}\n            render={id => (\n              <Rifm value={localeValue.end} onChange={handleEndChange} {...rifmDateProps}>\n                {({ value, onChange }) => (\n                  <LakeTextInput\n                    id={id}\n                    placeholder={format}\n                    value={value}\n                    onChange={onChange}\n                    error={error}\n                    hideErrors={true}\n                  />\n                )}\n              </Rifm>\n            )}\n          />\n        </Box>\n\n        <Space height={4} />\n\n        <LakeText variant=\"smallRegular\" color={colors.negative[500]}>\n          {error ?? \" \"}\n        </LakeText>\n      </View>\n\n      <DateRangePickerModalContent\n        value={localeValue}\n        format={format}\n        firstWeekDay={firstWeekDay}\n        desktop={desktop}\n        displayTwoCalendar={displayTwoCalendar}\n        isSelectable={isSelectable}\n        onChange={setLocaleValue}\n      />\n\n      <Space height={24} />\n\n      <Box direction=\"row\" alignItems=\"center\">\n        <LakeButton mode=\"secondary\" size=\"small\" onPress={handleCancel} style={styles.button}>\n          {cancelLabel}\n        </LakeButton>\n\n        <Space width={24} />\n\n        <LakeButton color=\"current\" size=\"small\" onPress={handleConfirm} style={styles.button}>\n          {confirmLabel}\n        </LakeButton>\n      </Box>\n    </DateModal>\n  );\n};\n"],"names":["useFirstMountState","isFirstMount","useRef","styles","StyleSheet","spacings","colors","MODALE_MOBILE_THRESHOLD","DATE_PICKER_MOBILE_THRESHOLD","DATE_RANGE_PICKER_THRESHOLD","NB_DAYS_IN_WEEK","weekDayNames","t","monthNames","weekDayIndex","rifmDateProps","getRifmProps","parseDate","value","format","date","dayjs","Option","parseRange","stringifyDate","validateDateRangeOrder","range2","isDateAfter","range","start","end","result","i","groupEvery","input","groupSize","nbGroups","padEnd","length","itemsToAppend","isTodayOrFutureDate","yesterday","yesterdayDate","isDateInRange","minDate","maxDate","min","max","isDateBefore","isDateToday","today","getMonthDates","month","year","aggregate","acc","dateDay","dateMonth","dateYear","getMonthWeeks","firstWeekDay","firstWeekDayIndex","monthFirstWeekDay","monthDates","nbDaysToPrepend","weeks","lastWeek","getWeekDayNames","dayNames","firstWeekDayNames","lastWeekDayNames","isDateEquals","date1","date2","isDateRange","match","P","isSelectedDate","value2","start2","end2","getRangeIndicatorType","startDate","endDate","computeDateDistanceInDays","date1Date","date2Date","diffInMs","getNewDateRange","currentRange","selectedDate","startDistance","endDistance","getTodayYearMonth","getYearMonth","isNullishOrEmpty","isYearMonthBefore","isYearMonthEquals","minYearMonth","maxYearMonth","incrementYearMonth","decrementYearMonth","YearMonthSelect","monthNames2","arrowsPosition","hideArrows","minValue","maxValue","onChange","monthItems","useMemo","name","index","yearItems","selectMonth","selectYear","setPreviousMonth","setNextMonth","isPreviousDisabled","isNextDisabled","jsxs","Box","Fragment","jsx","LakeButton","Fill","LakeSelect","Space","MonthCalendar","isSelectable","View","dayName","LakeText","week","weekIndex","dateIndex","isDisabled","isNotNullish","isSelected","isToday","rangeIndicator","Pressable","noop","focused","hovered","pressed","day","DatePickerPopoverContent","desktop","monthYear","setMonthYear","useState","useEffect","yearMonth","handleChange","useCallback","formatted","isNotNullishOrEmpty","DatePicker","label","error","useResponsive","ref","isOpened","open","close","useDisclosure","popoverId","useId","LakeLabel","id","Rifm","onChange2","LakeTextInput","Popover","DatePickerModal","visible","cancelLabel","confirmLabel","validate","onDismiss","Field","submitForm","setFieldValue","resetField","useForm","handleCancel","handleConfirm","values","isNotEmpty","DateModal","onBlur","value3","onChange3","children","maxWidth","withCloseButton","onPressClose","LakeModal","BottomPanel","DateRangePickerModalContent","displayTwoCalendar","periods","setPeriods","startYearMonth","endYearMonth","periods2","endPeriod","setStartPeriod","setEndPeriod","dateRange","handleSelectDate","newRange","newValue","Separator","DateRangePicker","startLabel","endLabel","handleStartChange","handleEndChange","Icon","DateRangePickerModal","localeValue","setLocaleValue"],"mappings":"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"}