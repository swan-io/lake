{"version":3,"file":"string-BIjx_mpm.js","sources":["../../../packages/lake/src/utils/string.ts"],"sourcesContent":["import { Option } from \"@swan-io/boxed\";\n\nexport const safeSplitAround = (string: string, expression: string) => {\n  let index = 0;\n  const splitString: string[] = [];\n  while (index < string.length) {\n    const nextIndexOfExpression = string.indexOf(expression, index);\n    if (nextIndexOfExpression === -1) {\n      splitString.push(string.slice(index));\n      return splitString;\n    }\n    if (nextIndexOfExpression > index) {\n      const endIndex = nextIndexOfExpression + expression.length;\n      splitString.push(\n        string.slice(index, nextIndexOfExpression),\n        string.slice(nextIndexOfExpression, endIndex),\n      );\n      index = endIndex;\n      continue;\n    }\n    if (nextIndexOfExpression === index) {\n      const endIndex = nextIndexOfExpression + expression.length;\n      splitString.push(string.slice(nextIndexOfExpression, endIndex));\n      index = endIndex;\n      continue;\n    }\n    return splitString;\n  }\n  return splitString;\n};\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nconst deburredLetters: Record<string, string> = {\n  // Latin-1 Supplement block.\n  \"\\xc0\": \"A\",\n  \"\\xc1\": \"A\",\n  \"\\xc2\": \"A\",\n  \"\\xc3\": \"A\",\n  \"\\xc4\": \"A\",\n  \"\\xc5\": \"A\",\n  \"\\xe0\": \"a\",\n  \"\\xe1\": \"a\",\n  \"\\xe2\": \"a\",\n  \"\\xe3\": \"a\",\n  \"\\xe4\": \"a\",\n  \"\\xe5\": \"a\",\n  \"\\xc7\": \"C\",\n  \"\\xe7\": \"c\",\n  \"\\xd0\": \"D\",\n  \"\\xf0\": \"d\",\n  \"\\xc8\": \"E\",\n  \"\\xc9\": \"E\",\n  \"\\xca\": \"E\",\n  \"\\xcb\": \"E\",\n  \"\\xe8\": \"e\",\n  \"\\xe9\": \"e\",\n  \"\\xea\": \"e\",\n  \"\\xeb\": \"e\",\n  \"\\xcc\": \"I\",\n  \"\\xcd\": \"I\",\n  \"\\xce\": \"I\",\n  \"\\xcf\": \"I\",\n  \"\\xec\": \"i\",\n  \"\\xed\": \"i\",\n  \"\\xee\": \"i\",\n  \"\\xef\": \"i\",\n  \"\\xd1\": \"N\",\n  \"\\xf1\": \"n\",\n  \"\\xd2\": \"O\",\n  \"\\xd3\": \"O\",\n  \"\\xd4\": \"O\",\n  \"\\xd5\": \"O\",\n  \"\\xd6\": \"O\",\n  \"\\xd8\": \"O\",\n  \"\\xf2\": \"o\",\n  \"\\xf3\": \"o\",\n  \"\\xf4\": \"o\",\n  \"\\xf5\": \"o\",\n  \"\\xf6\": \"o\",\n  \"\\xf8\": \"o\",\n  \"\\xd9\": \"U\",\n  \"\\xda\": \"U\",\n  \"\\xdb\": \"U\",\n  \"\\xdc\": \"U\",\n  \"\\xf9\": \"u\",\n  \"\\xfa\": \"u\",\n  \"\\xfb\": \"u\",\n  \"\\xfc\": \"u\",\n  \"\\xdd\": \"Y\",\n  \"\\xfd\": \"y\",\n  \"\\xff\": \"y\",\n  \"\\xc6\": \"Ae\",\n  \"\\xe6\": \"ae\",\n  \"\\xde\": \"Th\",\n  \"\\xfe\": \"th\",\n  \"\\xdf\": \"ss\",\n  // Latin Extended-A block.\n  \"\\u0100\": \"A\",\n  \"\\u0102\": \"A\",\n  \"\\u0104\": \"A\",\n  \"\\u0101\": \"a\",\n  \"\\u0103\": \"a\",\n  \"\\u0105\": \"a\",\n  \"\\u0106\": \"C\",\n  \"\\u0108\": \"C\",\n  \"\\u010a\": \"C\",\n  \"\\u010c\": \"C\",\n  \"\\u0107\": \"c\",\n  \"\\u0109\": \"c\",\n  \"\\u010b\": \"c\",\n  \"\\u010d\": \"c\",\n  \"\\u010e\": \"D\",\n  \"\\u0110\": \"D\",\n  \"\\u010f\": \"d\",\n  \"\\u0111\": \"d\",\n  \"\\u0112\": \"E\",\n  \"\\u0114\": \"E\",\n  \"\\u0116\": \"E\",\n  \"\\u0118\": \"E\",\n  \"\\u011a\": \"E\",\n  \"\\u0113\": \"e\",\n  \"\\u0115\": \"e\",\n  \"\\u0117\": \"e\",\n  \"\\u0119\": \"e\",\n  \"\\u011b\": \"e\",\n  \"\\u011c\": \"G\",\n  \"\\u011e\": \"G\",\n  \"\\u0120\": \"G\",\n  \"\\u0122\": \"G\",\n  \"\\u011d\": \"g\",\n  \"\\u011f\": \"g\",\n  \"\\u0121\": \"g\",\n  \"\\u0123\": \"g\",\n  \"\\u0124\": \"H\",\n  \"\\u0126\": \"H\",\n  \"\\u0125\": \"h\",\n  \"\\u0127\": \"h\",\n  \"\\u0128\": \"I\",\n  \"\\u012a\": \"I\",\n  \"\\u012c\": \"I\",\n  \"\\u012e\": \"I\",\n  \"\\u0130\": \"I\",\n  \"\\u0129\": \"i\",\n  \"\\u012b\": \"i\",\n  \"\\u012d\": \"i\",\n  \"\\u012f\": \"i\",\n  \"\\u0131\": \"i\",\n  \"\\u0134\": \"J\",\n  \"\\u0135\": \"j\",\n  \"\\u0136\": \"K\",\n  \"\\u0137\": \"k\",\n  \"\\u0138\": \"k\",\n  \"\\u0139\": \"L\",\n  \"\\u013b\": \"L\",\n  \"\\u013d\": \"L\",\n  \"\\u013f\": \"L\",\n  \"\\u0141\": \"L\",\n  \"\\u013a\": \"l\",\n  \"\\u013c\": \"l\",\n  \"\\u013e\": \"l\",\n  \"\\u0140\": \"l\",\n  \"\\u0142\": \"l\",\n  \"\\u0143\": \"N\",\n  \"\\u0145\": \"N\",\n  \"\\u0147\": \"N\",\n  \"\\u014a\": \"N\",\n  \"\\u0144\": \"n\",\n  \"\\u0146\": \"n\",\n  \"\\u0148\": \"n\",\n  \"\\u014b\": \"n\",\n  \"\\u014c\": \"O\",\n  \"\\u014e\": \"O\",\n  \"\\u0150\": \"O\",\n  \"\\u014d\": \"o\",\n  \"\\u014f\": \"o\",\n  \"\\u0151\": \"o\",\n  \"\\u0154\": \"R\",\n  \"\\u0156\": \"R\",\n  \"\\u0158\": \"R\",\n  \"\\u0155\": \"r\",\n  \"\\u0157\": \"r\",\n  \"\\u0159\": \"r\",\n  \"\\u015a\": \"S\",\n  \"\\u015c\": \"S\",\n  \"\\u015e\": \"S\",\n  \"\\u0160\": \"S\",\n  \"\\u015b\": \"s\",\n  \"\\u015d\": \"s\",\n  \"\\u015f\": \"s\",\n  \"\\u0161\": \"s\",\n  \"\\u0162\": \"T\",\n  \"\\u0164\": \"T\",\n  \"\\u0166\": \"T\",\n  \"\\u0163\": \"t\",\n  \"\\u0165\": \"t\",\n  \"\\u0167\": \"t\",\n  \"\\u0168\": \"U\",\n  \"\\u016a\": \"U\",\n  \"\\u016c\": \"U\",\n  \"\\u016e\": \"U\",\n  \"\\u0170\": \"U\",\n  \"\\u0172\": \"U\",\n  \"\\u0169\": \"u\",\n  \"\\u016b\": \"u\",\n  \"\\u016d\": \"u\",\n  \"\\u016f\": \"u\",\n  \"\\u0171\": \"u\",\n  \"\\u0173\": \"u\",\n  \"\\u0174\": \"W\",\n  \"\\u0175\": \"w\",\n  \"\\u0176\": \"Y\",\n  \"\\u0177\": \"y\",\n  \"\\u0178\": \"Y\",\n  \"\\u0179\": \"Z\",\n  \"\\u017b\": \"Z\",\n  \"\\u017d\": \"Z\",\n  \"\\u017a\": \"z\",\n  \"\\u017c\": \"z\",\n  \"\\u017e\": \"z\",\n  \"\\u0132\": \"IJ\",\n  \"\\u0133\": \"ij\",\n  \"\\u0152\": \"Oe\",\n  \"\\u0153\": \"oe\",\n  \"\\u0149\": \"'n\",\n  \"\\u017f\": \"s\",\n};\n\nexport const deburr = (value: string): string => {\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  const reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  return value\n    .replace(reLatin, char => deburredLetters[char] ?? \"\")\n    .replace(/[\\u0300-\\u036f]/g, \"\");\n};\n\nexport const trim = (value: string): string => value.trim();\n\nexport const words = (value: string): string[] =>\n  value.split(/\\b/).filter(x => /^[a-zA-Z0-9]+$/.test(x));\n\nexport const lowerCase = <T extends string>(value: T) => value.toLowerCase() as Lowercase<T>;\nexport const upperCase = <T extends string>(value: T) => value.toUpperCase() as Uppercase<T>;\n\nexport const capitalize = <T extends string>(value: T) =>\n  `${value.charAt(0).toUpperCase()}${value.slice(1)}` as Capitalize<T>;\n\nexport const uncapitalize = <T extends string>(value: T) =>\n  `${value.charAt(0).toLowerCase()}${value.slice(1)}` as Uncapitalize<T>;\n\nexport const optionFromString = (value: string): Option<string> =>\n  value !== \"\" ? Option.Some(value) : Option.None();\n\nexport const getFlagGlyphName = (flag: string): string =>\n  `${flag.codePointAt(0)?.toString(16) ?? \"\"}-${flag.codePointAt(2)?.toString(16) ?? \"\"}`;\n"],"names":["safeSplitAround","string","expression","index","splitString","nextIndexOfExpression","endIndex","deburredLetters","deburr","value","reLatin","char","getFlagGlyphName","flag","_a","_b"],"mappings":"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"}